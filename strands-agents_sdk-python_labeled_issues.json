{
  "repository": "strands-agents/sdk-python",
  "repository_info": {
    "repo": "strands-agents/sdk-python",
    "stars": 1635,
    "language": "Python",
    "description": "A model-driven approach to building AI agents in just a few lines of code.",
    "url": "https://github.com/strands-agents/sdk-python",
    "topics": [
      "agentic",
      "agentic-ai",
      "agents",
      "ai",
      "anthropic",
      "autonomous-agents",
      "bedrock",
      "genai",
      "litellm",
      "llama",
      "llm",
      "machine-learning",
      "mcp",
      "multi-agent-systems",
      "ollama",
      "openai",
      "opentelemetry",
      "python"
    ],
    "created_at": "2025-05-14T19:59:51Z",
    "updated_at": "2025-06-22T01:06:20Z",
    "search_query": "openai anthropic language:python stars:>2",
    "total_issues_estimate": 102,
    "labeled_issues_estimate": 98,
    "labeling_rate": 96.4,
    "sample_labeled": 27,
    "sample_total": 28,
    "has_issues": true,
    "repo_id": 983715534,
    "default_branch": "main",
    "size": 313
  },
  "extraction_date": "2025-06-22T01:24:59.325047",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 107,
  "issues": [
    {
      "issue_number": 264,
      "title": "[BUG] Hot-reloading fails for first tool when ./tools directory is empty at Agent initialization",
      "body": "https://github.com/user-attachments/assets/98f4c791-6c2d-4314-a58d-acb470917528\n\n### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.18\n\n### Python Version\n\n3.13.3\n\n### Operating System\n\nmacOS (Darwin with Clang 17.0.0)\n\n### Installation Method\n\ngit clone\n\n### Steps to Reproduce\n\nHot-reloading of tools from the `./tools` directory fails when the directory is empty during Agent initialization. The first tool added to an empty `./tools` directory is not automatically loaded, breaking the expected hot-reload functionality.\n\n1. **Setup the environment:**\n   ```bash\n   git clone git@github.com:strands-agents/sdk-python.git /tmp/sdk-python && cd /tmp/sdk-python\n   python3 -m venv .venv && source .venv/bin/activate && pip3 install -e \".[dev]\"\n   ```\n\n2. **Ensure ./tools directory exists but is empty:**\n   ```bash\n   mkdir -p tools\n   # Ensure tools directory is empty\n   rm -f tools/*.py\n   ```\n\n3. **Create a simple agent in Python REPL:**\n   ```python\n   from strands import Agent\n   agent = Agent()\n   print(agent.tool_config)  # Shows: {'tools': [], 'toolChoice': {'auto': {}}}\n   ```\n\n4. **Add a tool to ./tools directory while REPL is running:**\n   ```python\n   # Create tools/basic_calculator.py with @tool decorator\n   # (see full tool code in Additional Context section)\n   ```\n\n5. **Check if tool is loaded:**\n   ```python\n   print(agent.tool_config)  # Still shows: {'tools': [], 'toolChoice': {'auto': {}}}\n   print(agent.tool_names)   # Shows: []\n   ```\n\n\n### Expected Behavior\n\nWhen a tool is added to the `./tools` directory, it should be automatically hot-reloaded and available in:\n- `agent.tool_config` - should include the new tool specification\n- `agent.tool_names` - should include the tool name in the list\n- `agent.tool.tool_name()` - should be callable\n\nThis should work regardless of whether the `./tools` directory was empty when the Agent was initialized.\n\n### Actual Behavior\n\n- **First tool addition**: Tool is NOT automatically loaded when added to an initially empty `./tools` directory\n- **Subsequent tool additions**: Once at least one tool exists, additional tools ARE automatically hot-reloaded\n- **Workaround**: Restarting the Python process loads the tool correctly\n\n### Additional Context\n\n## Code Analysis\n\nBased on examination of the codebase, the issue appears to be in the `ToolWatcher` initialization logic:\n\n1. **In `Agent.__init__()`**: The `ToolWatcher` is only initialized if `load_tools_from_directory=True`\n2. **In `ToolRegistry.initialize_tools()`**: Tool discovery happens, but if no tools exist, the watcher may not be properly set up\n3. **In `ToolWatcher.start()`**: The file system watcher is configured, but may not monitor empty directories effectively\n\n## Test Case Evidence\n\n```python\n# Case 1: Empty tools directory - FAILS\nagent = Agent()\n# Add tool to empty ./tools/\n# Result: tool_config remains empty\n\n# Case 2: Pre-existing tool - WORKS  \nagent = Agent()  # with existing tool in ./tools/\n# Add another tool\n# Result: new tool appears in tool_config\n\n# Case 3: Restart after adding to empty directory - WORKS\n# Exit Python, add tool, restart Python\nagent = Agent()\n# Result: tool_config includes the tool\n```\n\n## Proposed Solution Areas\n\nThe issue likely resides in one or more of these areas:\n\n1. **`ToolWatcher` initialization**: May need to properly handle empty directories\n2. **File system monitoring**: The watchdog observer might not be monitoring empty directories\n3. **Tool discovery timing**: Initial discovery vs. runtime discovery synchronization\n\n## Additional Context\n\n**Sample tool used for testing:**\n```python\n# tools/basic_calculator.py\nfrom strands import tool\n\n@tool\ndef basic_calculator(expression: str) -> dict:\n    \"\"\"\n    A very simple calculator for basic arithmetic only.\n    \n    Supports: +, -, *, /, and parentheses\n    \n    Args:\n        expression: Simple math expression (e.g., \"2 + 3\", \"10 / 2\", \"(5 + 3) * 2\")\n        \n    Returns:\n        Dictionary with the calculation result\n    \"\"\"\n    try:\n        # Only allow basic math characters and numbers\n        allowed = set('0123456789+-*/().')\n        if not all(c in allowed or c.isspace() for c in expression):\n            raise ValueError(\"Only basic math operations allowed: +, -, *, /, ()\")\n        \n        result = eval(expression)\n        \n        return {\n            \"status\": \"success\",\n            \"content\": [{\"text\": f\"{expression} = {result}\"}]\n        }\n        \n    except ZeroDivisionError:\n        return {\n            \"status\": \"error\",\n            \"content\": [{\"text\": \"Cannot divide by zero\"}]\n        }\n    except:\n        return {\n            \"status\": \"error\",\n            \"content\": [{\"text\": \"Invalid math expression\"}]\n        }\n```\n\n## Impact\n\nThis bug affects the developer experience for:\n- New users setting up their first Strands agent\n- Development workflows where tools are added incrementally\n- Any scenario where the `./tools` directory starts empty\n\n## Related Files\n\n- `src/strands/agent/agent.py` - Agent initialization\n- `src/strands/tools/registry.py` - Tool discovery and registration\n- `src/strands/tools/watcher.py` - File system monitoring for hot-reload\n\n## Verification\n\nThis issue can be consistently reproduced with the steps above. The hot-reload functionality works correctly in all cases except when the initial `./tools` directory is empty during Agent initialization.\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "cagataycali",
      "author_type": "User",
      "created_at": "2025-06-22T03:52:28Z",
      "updated_at": "2025-06-22T04:00:20Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/264/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/264",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/264",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:43.802776",
      "comments": []
    },
    {
      "issue_number": 263,
      "title": "[FEATURE] Tool Manager for Semantic Tool Selection",
      "body": "### Problem Statement\n\n## Summary\nImplement intelligent, context-aware tool selection using LLM-based categorization, usage pattern learning, and tool discovery.\n\n## Problem\nStrands Agents currently passes all tools to the LLM on every request, wasting tokens, making selection difficult, providing no learning from usage patterns, and preventing tool discovery.\n\n### Proposed Solution\n\n## Solution\nCreate a ToolManager interface with StaticToolManager for backward compatibility and RetrievalToolManager for intelligent selection. Use LLM-based CRUDL categorization to classify tools as CREATE, READ, UPDATE, DELETE, or LIST operations for better semantic matching.\n\nLeverage existing agent.tool.store_in_kb and agent.tool.retrieve for tool indexing and selection. Store successful usage patterns in the knowledge base for learning. Provide meta-tools for LLM tool discovery and requests.\n\n## Implementation\nfoundation with backward compatibility, CRUDL categorization, usage tracking, tool discovery meta-tools, and testing with documentation.\n\n### Use Case\n\nFor larger sets of tools, reduce what is sent to the LLM on each call, thus reducing both token count and improving tool selection.\n\n## Benefits\nReduction in tool tokens, faster inference, better accuracy, context-aware selection, usage learning, and discovery capabilities while maintaining clean code and full backward compatibility.\n\n### Alternatives Solutions\n\nWe should consider internal memory based semantic matching vs KB based.\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "jsamuel1",
      "author_type": "User",
      "created_at": "2025-06-21T12:43:50Z",
      "updated_at": "2025-06-21T12:43:50Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/263/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/263",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/263",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:43.802801",
      "comments": []
    },
    {
      "issue_number": 262,
      "title": "[BUG] OpenTelemetry traces not using parent span context",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.8\n\n### Python Version\n\n3.10\n\n### Operating System\n\nmacOS 15.5\n\n### Installation Method\n\nother\n\n### Steps to Reproduce\n\nSetup:\n- Python Lambda deployed with Dockerfile on ARM64\n- ADOT Python Lambda Layer: `arn:aws:lambda:us-west-2:901920570463:layer:aws-otel-python-arm64-ver-1-32-0:2`\n- CDK Lambda property set to `tracing: Tracing.ACTIVE`\n\n```yaml\nextensions:\n  sigv4auth:\n    service: xray\n    region: ${env:AWS_REGION}\n\nreceivers:\n  otlp:\n    protocols:\n      # Strands Agents SDK uses Http OTLP exporter\n      # https://github.com/strands-agents/sdk-python/blob/d8ce2d5e69322211b281567eb0da99e0ba47b574/src/strands/telemetry/tracer.py#L38\n      http:\n        endpoint: 'localhost:4318'\n\nexporters:\n  otlphttp:\n    compression: gzip\n    traces_endpoint: https://xray.${env:AWS_REGION}.amazonaws.com/v1/traces\n    auth:\n      authenticator: sigv4auth\n\nservice:\n  extensions: [sigv4auth]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [otlphttp]\n```\n\n```python\n# Instantiate Tracer\ntracer = get_tracer(service_name=\"JvlinStrandsAgents\", otlp_endpoint=\"http://localhost:4318/\")\n```\n\nAWS X-Ray trace service map:\n\n![Image](https://github.com/user-attachments/assets/edb15c06-12d0-4890-837f-18ea42434f0c)\n\n\n### Expected Behavior\n\nExpecting Lambda Context, Lambda Function to be the only nodes as Strands Agents SDK runs internally within the Lambda Function itself.\n\n![Image](https://github.com/user-attachments/assets/465e6842-b20d-46cf-b783-93eaf9a0ecd4)\n\nThe Strands Agents SDK created spans should be within the `Invocation` span parent.\n\n![Image](https://github.com/user-attachments/assets/eb6ca63e-36b0-4204-9bef-1a73fe42ead4)\n\n\n\n### Actual Behavior\n\nCurrent tracer implementation:\n\n```python\ndef _start_span(\n    self,\n    span_name: str,\n    parent_span: Optional[Span] = None,\n    attributes: Optional[Dict[str, AttributeValue]] = None,\n) -> Optional[Span]:\n    \"\"\"Generic helper method to start a span with common attributes.\n\n    Args:\n        span_name: Name of the span to create\n        parent_span: Optional parent span to link this span to\n        attributes: Dictionary of attributes to set on the span\n\n    Returns:\n        The created span, or None if tracing is not enabled\n    \"\"\"\n    if self.tracer is None:\n        return None\n\n    context = trace_api.set_span_in_context(parent_span) if parent_span else None\n    span = self.tracer.start_span(name=span_name, context=context)\n\n    # Set start time as a common attribute\n    span.set_attribute(\"gen_ai.event.start_time\", datetime.now(timezone.utc).isoformat())\n\n    # Add all provided attributes\n    if attributes:\n        self._set_attributes(span, attributes)\n\n    return span\n```\n\nTo be modified so that existing span context coming from outside of the Strands Agents SDK is used.\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "Jasonlin1198",
      "author_type": "User",
      "created_at": "2025-06-21T02:42:43Z",
      "updated_at": "2025-06-21T03:43:06Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/262/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/262",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/262",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:43.802807",
      "comments": []
    },
    {
      "issue_number": 247,
      "title": "[BUG] [Malformed input request] Issue calling bedrock after loading tools from mcp server",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.8\n\n### Python Version\n\n3.10.5\n\n### Operating System\n\nWindows 11 Enterprise\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Create a MCPClient using [awslabs.dynamodb-mcp-server](https://awslabs.github.io/mcp/servers/dynamodb-mcp-server)\n2. Create an Agent with tools provided by the mcp server.\n3. Try to use it\n\n### Expected Behavior\n\nBedrock is able to parse the toolSpec and the API call is successful. \n\n### Actual Behavior\n\nBedrock API call crashes because of malformed input request.\n\n### Additional Context\n\nToolSpec example: \n![Image](https://github.com/user-attachments/assets/5a17f405-551e-42dd-a3ff-b7d9cc6806e0)\n\nError from Bedrock API:\n`.venv\\lib\\site-packages\\botocore\\client.py\", line 1061, in _make_api_call\n    raise error_class(parsed_response, operation_name)\nbotocore.errorfactory.ValidationException: An error occurred (ValidationException) when calling the ConverseStream operation: The model returned the following errors: Malformed input request: #/toolConfig/tools/8/toolSpec/inputSchema/json: extraneous key [$defs] is not permitted, please reformat your input and try again.`\n\n### Possible Solution\n\nSanitize all tools before calling bedrock. \n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "paulognr",
      "author_type": "User",
      "created_at": "2025-06-18T21:14:20Z",
      "updated_at": "2025-06-20T19:36:47Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/247",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/247",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:43.802813",
      "comments": [
        {
          "author": "dbschmigelski",
          "body": "Hi, we are taking a look at this. It appears we have sanitization logic that has been applied on our decorator based tool loading which was not applied to MCP tool transformation. https://github.com/strands-agents/sdk-python/blob/main/src/strands/tools/decorator.py#L178\n\nHowever, it appears that Bed",
          "created_at": "2025-06-20T19:28:30Z"
        }
      ]
    },
    {
      "issue_number": 261,
      "title": "[FEATURE] BedrockSessionSaver",
      "body": "### Problem Statement\n\nThis, but for Strands instead of LangGraph:\nhttps://docs.aws.amazon.com/bedrock/latest/userguide/sessions-opensource-library.html\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nSession management\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "austinmw",
      "author_type": "User",
      "created_at": "2025-06-20T18:25:47Z",
      "updated_at": "2025-06-20T18:25:47Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/261/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/261",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/261",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:44.050475",
      "comments": []
    },
    {
      "issue_number": 199,
      "title": "[BUG] Class Method with @tool decorator is not getting accepted as Tool",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.7\n\n### Python Version\n\n3.12\n\n### Operating System\n\nMACOS 14.7.4\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Define a class and a method inside it.\n2. Decorate the method with @tool.\n3. Instantiate an Agent and pass the decorated method via tools=[self.reasoning_plan_generator].\n4. Trigger the agent with a query.\n\n\nExample:\n`import os\nfrom strands import Agent, tool\n\n\nfrom common.aws.strands.utils.models import bedrock_model\nfrom common.aws.strands.flows.procure_scenario_planning.prompts import *\n\n\nclass ProcureScenarioPlanning:\n\n    def __init__(self):\n        pass\n\n    @tool\n    def reasoning_plan_generator(self, query: str):\n        \"\"\"\n        Expert in generating reason and plan for execution\n        \"\"\"\n        agent = Agent(\n            system_prompt=f\"{procure_reasoning_prompt(self.db_schema)}\",\n            messages=self.messages,\n            callback_handler=self.event_loop_handler.record_event,\n            model=bedrock_model,\n        )\n        agent_response = agent(query)\n        return str(agent_response)\n\n\n    def start_flow(self, user_query: str):\n        self.db_schema = [] #schema data will be provided\n        handler_agent = Agent(\n            system_prompt=f\"You are a intelligent nlp based router agent with logistics procurement knowledge. You will receive query from user, analyse the query if you think its not a hi hello general question pass the user to summary_generator directly, No matter what always call the summary_generator, else pass the query to reasoning_plan_generator, get the reasoning-plan, then pass the generated reasoning-plan to code_generator_executor and finally call the summary_generator.\",\n            messages=[],\n            tools=[self.reasoning_plan_generator],\n            model=bedrock_model,\n        )\n\n        return handler_agent(user_query)\n\n\nprocure_scenario_planning = ProcureScenarioPlanning()\nresult = procure_scenario_planning.start_flow(\"get me a sample shipment?\")\nprint(result)\n`\n\nError:\n`tool=<<bound method ProcureScenarioPlanning.reasoning_plan_generator of <common.aws.strands.flows.procure_scenario_planning.ProcureScenarioPlanning object at 0x10bb3cf20>>> | unrecognized tool specification`\n\n### Expected Behavior\n\nThe method reasoning_plan_generator decorated with @tool should be accepted and invoked as a valid tool by the Agent.\n\n### Actual Behavior\n\nThe method reasoning_plan_generator decorated with @tool is not accepted as valid tool and getting the below error.\n\n`tool=<<bound method ProcureScenarioPlanning.reasoning_plan_generator of <common.aws.strands.flows.procure_scenario_planning.ProcureScenarioPlanning object at 0x10bb3cf20>>> | unrecognized tool specification`\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "Ponprabhakar-pg",
      "author_type": "User",
      "created_at": "2025-06-10T11:03:55Z",
      "updated_at": "2025-06-20T14:58:30Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/199/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/199",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/199",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:44.050496",
      "comments": [
        {
          "author": "thinkinginmath",
          "body": "the SDK cannot register it as a tool because it’s expecting a function object, not a bound method of a python class.\nyou should either have a standalone function, or change your method to staticmethod\n\n   @staticmethod\n    @tool\n    def reasoning_plan_generator(query: str):  // note: no reference to",
          "created_at": "2025-06-12T00:55:13Z"
        },
        {
          "author": "dbschmigelski",
          "body": "You are absolutely correct @thinkinginmath, we have a separate draft pull request for loading tools based on the instance #162 \n\nI closed #200, and we will continue with #162 . It is currently in draft while we align on syntax and DX.",
          "created_at": "2025-06-12T11:54:22Z"
        },
        {
          "author": "Ponprabhakar-pg",
          "body": "> You are absolutely correct [@thinkinginmath](https://github.com/thinkinginmath), we have a separate draft pull request for loading tools based on the instance [#162](https://github.com/strands-agents/sdk-python/pull/162)\n> \n> I closed [#200](https://github.com/strands-agents/sdk-python/pull/200), ",
          "created_at": "2025-06-20T14:58:30Z"
        }
      ]
    },
    {
      "issue_number": 256,
      "title": "[FEATURE] Add support for Bedrock/Anthropic ToolChoice to Structured output",
      "body": "### Problem Statement\n\nThe `structured_output` implementation in the Bedrock and Anthropic model provider call the model with a hard coded `tool_choice: auto`: https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/bedrock.py#L206\n\n\n### Proposed Solution\n\nTo help get better results out of the model, we should be able to configure this ToolChoice to specify the newly added structure output tool: https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_SpecificToolChoice.html\n\nThis can be done by creating a private class variable at initialization for toolChoice, and in this function we temporarily override it:\n\n```\n__init__(...):\n    self._tool_choice = {\"auto\": {}}\n...\n\n# https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/bedrock.py#L191\n    \"toolChoice\": self._tool_choice,\n\n...\n\n    temp_tool_choice = self._tool_choice\n    self._tool_choice = {\"tool\" : {\"name\" : tool_spec[\"name\"]}}\n    response = self.converse(messages=prompt, tool_specs=[tool_spec])\n    self._tool_choice = temp_tool_choice\n```\n\n### Use Case\n\nGet better result of the specified pydantic model being output by the LLM as a tool use\n\n### Alternatives Solutions\n\nN/A\n\n### Additional Context\n\nN/A",
      "state": "open",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-06-19T20:17:46Z",
      "updated_at": "2025-06-20T12:37:41Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/256/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/256",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/256",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:44.287347",
      "comments": [
        {
          "author": "zastrowm",
          "body": "I'd suggest an alternative solution that would be to take it as a parameter to the method.  We actually have this in the event_loop/registry today, but I presume in some refactor we stopped plumbing it through:\n\nhttps://github.com/strands-agents/sdk-python/blob/eb50073f2ac82302b35d69dfca5a2337aa1da7",
          "created_at": "2025-06-20T12:37:41Z"
        }
      ]
    },
    {
      "issue_number": 259,
      "title": "[FEATURE] Add Agent Iteration Limit (max_iterations) Setting",
      "body": "### Problem Statement\n\nIt would be very useful to have a setting for limiting the maximum number of reasoning/recursion/iteration cycles the agent can perform in a single call. For example, being able to set max_iterations=3 to ensure the agent does not enter an infinite or excessive loop.\n\nMotivation:\n\n  Prevents runaway recursion or excessive tool use.\n  Helps with debugging and controlling costs.\n  Makes agent behavior more predictable and configurable for different use cases.\n\nProposed Solution:\n\nAdd a max_iterations (or similar) parameter to the agent’s constructor/configuration. The agent/event loop should terminate and return an appropriate message if the maximum iteration count is reached.\n\nCurrent Workaround:\n\nCurrently, this is only possible by modifying the agent/event loop source code directly.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nFor instance, right now I need to make an agent run only 4-5 iterations and I cannot control this. For a small task the agent could run too many loops.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "Vladimir-Anfimov",
      "author_type": "User",
      "created_at": "2025-06-20T07:35:11Z",
      "updated_at": "2025-06-20T12:32:31Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/259/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/259",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/259",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:44.520468",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Thanks for the request.\n\nI think this is a subset of #191 - if so, would you like to throw a +1 to that issue; we're thinking the general mechanism will be solved by #231.",
          "created_at": "2025-06-20T12:32:01Z"
        }
      ]
    },
    {
      "issue_number": 249,
      "title": "[BUG] module aiohttp has no attribute ConnectionTimeoutError - strands agents 0.1.8",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.8\n\n### Python Version\n\n3.12.9\n\n### Operating System\n\nipykernel in sagemaker ai \n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n!pip install -r requirements.txt\n\nin the requirements.txt, it has the following:\nstrands-agents\nstrands-agents-tools\nstrands-agents[litellm]\n\nafter installation, !pip list | grep -i \"strands\" shows:\n\nstrands-agents                              0.1.8\nstrands-agents-tools                    0.1.6\n\n\n\n### Expected Behavior\n\nfrom strands.models.litellm import LiteLLMModel works\n\n### Actual Behavior\n\nfrom strands.models.litellm import LiteLLMModel will generate the following error\n\n\n`\nAttributeError                            Traceback (most recent call last)\nCell In[14], line 1\n----> 1 from strands.models.litellm import LiteLLMModel\n\nFile [/opt/conda/lib/python3.12/site-packages/strands/models/litellm.py:9](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/strands/models/litellm.py#line=8)\n      6 import logging\n      7 from typing import Any, Optional, TypedDict, cast\n----> 9 import litellm\n     10 from typing_extensions import Unpack, override\n     12 from ..types.content import ContentBlock\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/__init__.py:329](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/__init__.py#line=328)\n    325 disable_aiohttp_transport: bool = False  # Set this to true to use httpx instead\n    326 force_ipv4: bool = (\n    327     False  # when True, litellm will force ipv4 for all LLM requests. Some users have seen httpx ConnectionError when using ipv6.\n    328 )\n--> 329 module_level_aclient = AsyncHTTPHandler(\n    330     timeout=request_timeout, client_alias=\"module level aclient\"\n    331 )\n    332 module_level_client = HTTPHandler(timeout=request_timeout)\n    334 #### RETRIES ####\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py:107](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py#line=106), in AsyncHTTPHandler.__init__(self, timeout, event_hooks, concurrent_limit, client_alias, ssl_verify)\n    105 self.timeout = timeout\n    106 self.event_hooks = event_hooks\n--> 107 self.client = self.create_client(\n    108     timeout=timeout,\n    109     concurrent_limit=concurrent_limit,\n    110     event_hooks=event_hooks,\n    111     ssl_verify=ssl_verify,\n    112 )\n    113 self.client_alias = client_alias\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py:154](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py#line=153), in AsyncHTTPHandler.create_client(self, timeout, concurrent_limit, event_hooks, ssl_verify)\n    151     timeout = _DEFAULT_TIMEOUT\n    152 # Create a client with a connection pool\n--> 154 transport = AsyncHTTPHandler._create_async_transport(\n    155     ssl_context=ssl_verify if isinstance(ssl_verify, ssl.SSLContext) else None,\n    156     ssl_verify=ssl_verify if isinstance(ssl_verify, bool) else None,\n    157 )\n    159 return httpx.AsyncClient(\n    160     transport=transport,\n    161     event_hooks=event_hooks,\n   (...)\n    169     headers=headers,\n    170 )\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py:499](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py#line=498), in AsyncHTTPHandler._create_async_transport(ssl_context, ssl_verify)\n    495 #########################################################\n    496 # AIOHTTP TRANSPORT is off by default\n    497 #########################################################\n    498 if AsyncHTTPHandler._should_use_aiohttp_transport():\n--> 499     return AsyncHTTPHandler._create_aiohttp_transport(\n    500         ssl_context=ssl_context, ssl_verify=ssl_verify\n    501     )\n    503 #########################################################\n    504 # HTTPX TRANSPORT is used when aiohttp is not installed\n    505 #########################################################\n    506 return AsyncHTTPHandler._create_httpx_transport()\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py:547](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py#line=546), in AsyncHTTPHandler._create_aiohttp_transport(ssl_verify, ssl_context)\n    536 @staticmethod\n    537 def _create_aiohttp_transport(\n    538     ssl_verify: Optional[bool] = None,\n    539     ssl_context: Optional[ssl.SSLContext] = None,\n    540 ) -> LiteLLMAiohttpTransport:\n    541     \"\"\"\n    542     Creates an AiohttpTransport with RequestNotRead error handling\n    543 \n    544     - If force_ipv4 is True, it will create an AiohttpTransport with local_addr set to \"0.0.0.0\"\n    545     - [Default] If force_ipv4 is False, it will create an AiohttpTransport with default settings\n    546     \"\"\"\n--> 547     from litellm.llms.custom_httpx.aiohttp_transport import LiteLLMAiohttpTransport\n    549     #########################################################\n    550     # If ssl_verify is None, set it to True\n    551     # TCP Connector does not allow ssl_verify to be None\n    552     # by default aiohttp sets ssl_verify to True\n    553     #########################################################\n    554     if ssl_verify is None:\n\nFile [/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/aiohttp_transport.py:18](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/litellm/llms/custom_httpx/aiohttp_transport.py#line=17)\n     10 from aiohttp.client import ClientResponse, ClientSession\n     12 from litellm._logging import verbose_logger\n     14 AIOHTTP_EXC_MAP: Dict = {\n     15     # Order matters here, most specific exception first\n     16     # Timeout related exceptions\n     17     aiohttp.ServerTimeoutError: httpx.TimeoutException,\n---> 18     aiohttp.ConnectionTimeoutError: httpx.ConnectTimeout,\n     19     aiohttp.SocketTimeoutError: httpx.ReadTimeout,\n     20     # Proxy related exceptions\n     21     aiohttp.ClientProxyConnectionError: httpx.ProxyError,\n     22     # SSL related exceptions\n     23     aiohttp.ClientConnectorCertificateError: httpx.ProtocolError,\n     24     aiohttp.ClientSSLError: httpx.ProtocolError,\n     25     aiohttp.ServerFingerprintMismatch: httpx.ProtocolError,\n     26     # Network related exceptions\n     27     aiohttp.ClientConnectorError: httpx.ConnectError,\n     28     aiohttp.ClientOSError: httpx.ConnectError,\n     29     aiohttp.ClientPayloadError: httpx.ReadError,\n     30     # Connection disconnection exceptions\n     31     aiohttp.ServerDisconnectedError: httpx.ReadError,\n     32     # Response related exceptions\n     33     aiohttp.ClientConnectionError: httpx.NetworkError,\n     34     aiohttp.ClientPayloadError: httpx.ReadError,\n     35     aiohttp.ContentTypeError: httpx.ReadError,\n     36     aiohttp.TooManyRedirects: httpx.TooManyRedirects,\n     37     # URL related exceptions\n     38     aiohttp.InvalidURL: httpx.InvalidURL,\n     39     # Base exceptions\n     40     aiohttp.ClientError: httpx.RequestError,\n     41 }\n     43 # Add client_exceptions module exceptions\n     44 try:\n\nFile [/opt/conda/lib/python3.12/site-packages/aiohttp/__init__.py:240](https://gfbgdk3yaxxva3q.studio.us-west-2.sagemaker.aws/opt/conda/lib/python3.12/site-packages/aiohttp/__init__.py#line=239), in __getattr__(name)\n    237     GunicornWebWorker = gw  # type: ignore[misc]\n    238     return guv if name == \"GunicornUVLoopWebWorker\" else gw\n--> 240 raise AttributeError(f\"module {__name__} has no attribute {name}\")\n\nAttributeError: module aiohttp has no attribute ConnectionTimeoutError`\n\n\n### Additional Context\n\nnot sure if it is introduced since 0.1.8 \n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "grhaonan",
      "author_type": "User",
      "created_at": "2025-06-19T05:48:15Z",
      "updated_at": "2025-06-20T01:50:19Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/249/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/249",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/249",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:44.793455",
      "comments": [
        {
          "author": "grhaonan",
          "body": "it seems strands 0.1.6/0.1.5 also has this issue",
          "created_at": "2025-06-19T05:48:52Z"
        },
        {
          "author": "bobbyely",
          "body": "https://github.com/BerriAI/litellm/issues/11657",
          "created_at": "2025-06-20T01:50:19Z"
        }
      ]
    },
    {
      "issue_number": 25,
      "title": "[FEATURE] Structured Outputs with Pydantic",
      "body": "### Problem Statement\n\nCurrently cannot find option to utilize structured outputs with JSON schema or Pydantic Schema, even though most of the models on Bedrock (Nova family, Claude family, etc...) support structured outputs\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nThis is really useful when working with parsing documents by using VLMs !\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "Shekswess",
      "author_type": "User",
      "created_at": "2025-05-16T22:29:47Z",
      "updated_at": "2025-06-19T20:23:30Z",
      "closed_at": "2025-06-19T20:23:30Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/25/reactions",
        "total_count": 12,
        "+1": 12,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm",
        "Unshure",
        "theagenticguy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/25",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/25",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.006994",
      "comments": [
        {
          "author": "Shekswess",
          "body": "Hey, what is the status of this one ?\nWhen we can expect it ?\n@theagenticguy , @awsarron ",
          "created_at": "2025-05-28T14:03:25Z"
        },
        {
          "author": "Unshure",
          "body": "Hi @Shekswess , I have been having discussions with the team on this feature, and we have come to a consensus on what we want the solution to look like:\n\nBuilding on the work that @theagenticguy has already done in [this pr](https://github.com/strands-agents/sdk-python/pull/60), we will add a new me",
          "created_at": "2025-06-02T17:54:25Z"
        },
        {
          "author": "Unshure",
          "body": "@theagenticguy will be working on the implementation for this feature.",
          "created_at": "2025-06-02T17:57:21Z"
        },
        {
          "author": "Shekswess",
          "body": "Awesome !\nIf you are overrunned with features, now knowing your plan I can help and contribute.\nFeel free to ping me 🙌\n@Unshure ",
          "created_at": "2025-06-02T18:05:01Z"
        },
        {
          "author": "zastrowm",
          "body": "Re-opening to centralize requests/updates on this.\n\nThis is being implemented in #60 (feat: add structured output support using Pydantic models), which is currently in review.",
          "created_at": "2025-06-16T13:07:07Z"
        }
      ]
    },
    {
      "issue_number": 257,
      "title": "[FEATURE] Implement Llama model provider structued_output",
      "body": "### Problem Statement\n\nThe recently added structured_output feature was not able to test against the Llama model provider since we did not have an api key available to test the feature with.\n\n### Proposed Solution\n\nUncomment and test the code to ensure structured output works for the Llama model provider: https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/llamaapi.py#L405-L416\n\n### Use Case\n\nProducing structured output when calling a Llama model\n\n### Alternatives Solutions\n\nN/A\n\n### Additional Context\n\nN/A",
      "state": "open",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-06-19T20:22:52Z",
      "updated_at": "2025-06-19T20:23:05Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "ready for contribution"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/257/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/257",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/257",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.257671",
      "comments": []
    },
    {
      "issue_number": 81,
      "title": "[FEATURE] Add support of CancellationToken",
      "body": "### Problem Statement\n\nAs we're refactoring and adding asyncio support, it'd be great to add support of a \"CancellationToken\" throughout the SDK. This allows for convenient support of features like adding a stop/cancel button to the AI app. Sample implementation in autogen can be found [here](https://github.com/microsoft/autogen/blob/0a81100f72bd128ed374c38f31f370f1cb4d02d7/python/packages/autogen-core/src/autogen_core/_cancellation_token.py#L6).\n\n### Proposed Solution\n\n* requirement for this feature is to have asyncio support.\n* Add CancellationToken to the agent entrypoint and pass it throughout the sdk (sample [reference](https://github.com/microsoft/autogen/blob/0a81100f72bd128ed374c38f31f370f1cb4d02d7/python/packages/autogen-core/src/autogen_core/_cancellation_token.py#L6)).\n* [Link](https://github.com/search?q=repo%3Amicrosoft%2Fautogen+link_future+language%3APython&type=code&l=Python) the futures to the token.\n\n### Use Case\n\n1. stop/cancel API for the AI app\n2. complex multi-agent systems where the orchestrator agent can decide to stop the child agents\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "osdemah",
      "author_type": "User",
      "created_at": "2025-05-22T15:52:45Z",
      "updated_at": "2025-06-19T18:07:20Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/81/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/81",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/81",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.257704",
      "comments": [
        {
          "author": "zastrowm",
          "body": "We will be exploring this as part of the async iterator support.\n\nAt first glance I think a lot of cancellation use cases can be solved by async iterators - e.g. just stop yielding - but where async iterators are not used (tool calls for instance) I think a cancellation-token would come into play.\n\n",
          "created_at": "2025-05-28T13:19:56Z"
        },
        {
          "author": "jer96",
          "body": "Adding a comment in relation to #218 as the A2A protocol supports the notion of cancelling requests which may be relevant in the development of this feature. https://google-a2a.github.io/A2A/latest/specification/#74-taskscancel",
          "created_at": "2025-06-19T18:07:20Z"
        }
      ]
    },
    {
      "issue_number": 238,
      "title": "[BUG] Strands should not default to us-west-2",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.6\n\n### Python Version\n\n3.13\n\n### Operating System\n\nmacOS 15.3.2\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n- Run strands\n- Notice that we default to us-west-2 even if the aws default config specifies a different region\n\n### Expected Behavior\n\nStrands should use AWS_REGION, or default to the value defined aws config, and *not* fallback to us-west-2.\n\n### Actual Behavior\n\nWe default to us-west-2 where no region is detected.\n\n\n\n### Additional Context\n\n#183 is another case where we default to us-west-2 which has been confusing customers\n\n### Possible Solution\n\nInstead of defaulting to us-west-2, default to the aws config default\n\n### Related Issues\n\n#183",
      "state": "open",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-06-17T17:32:53Z",
      "updated_at": "2025-06-19T14:59:34Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/238/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/238",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/238",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.470468",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Team discussed - we think ultimately we should follow Boto behavior here and *not* default to us-west-2.\n\n#254 created to emit a warning, then in a follow-up we can change the behavior to follow boto3 default behavior",
          "created_at": "2025-06-19T14:59:33Z"
        }
      ]
    },
    {
      "issue_number": 253,
      "title": "[ANNOUNCEMENT] Upcoming Breaking Changes",
      "body": "This is a centralized tracking issue for potentially breaking changes planned for a future release. The changes documented here and in linked issues may require action from users to maintain compatibility when upgrading to a later version.\n\nRelated Breaking Change Issues\n  - #252\n  - #238\n\nPlease refer to the linked issues for specific details about each breaking change.",
      "state": "open",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-06-19T14:27:17Z",
      "updated_at": "2025-06-19T14:33:13Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/253/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/253",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/253",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.672634",
      "comments": []
    },
    {
      "issue_number": 205,
      "title": "[FEATURE]  [Observability] Allow customer to pass tracer/meter providers to Strands",
      "body": "### Problem Statement\n\nCustomer might have their own tracerProvider already in their app, and the tracing setup will get overridden when using Strands.\n\n### Proposed Solution\n\nAllow customer to pass tracer provider to Strands to reuse the tracing setup.\n\n### Use Case\n\nPass tracer provider to Strands Agent to reuse the tracing setup.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "poshinchen",
      "author_type": "User",
      "created_at": "2025-06-11T14:39:25Z",
      "updated_at": "2025-06-19T13:11:49Z",
      "closed_at": "2025-06-19T13:11:49Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/205/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "poshinchen"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/205",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/205",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.672654",
      "comments": [
        {
          "author": "MaDDoGo",
          "body": "As a workaround:\n``` python\ntracer = Tracer(service_name=\"custom_name\")\ntracer.tracer_provider = trace.get_tracer_provider() # for global defined providers or provide your provider.\n```\n\nIt outputs a warning (because you can't override the no-op provider twice, but it works until the official soluti",
          "created_at": "2025-06-19T10:27:09Z"
        },
        {
          "author": "poshinchen",
          "body": "https://github.com/strands-agents/sdk-python/pull/207 has been merged, closing the issue.",
          "created_at": "2025-06-19T13:11:49Z"
        }
      ]
    },
    {
      "issue_number": 252,
      "title": "[FEATURE] Model Providers - Always Base64 Encode Images",
      "body": "### Problem Statement\n\nCurrently, in the OpenAI model provider, we accept image data as both raw and base64 encoded bytes. For consistency with the other providers and also general convenience, we should only accept raw bytes and base64 encode on behalf of customers. The check for both adds a slight performance overhead. \n\n### Proposed Solution\n\n• Log a warning when customers base64 encode the image data themselves when using the OpenAI provider. \n• Move to only accepting raw bytes in the 0.3.0 release. \n\n### Use Case\n\nImage generation\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-06-19T12:56:24Z",
      "updated_at": "2025-06-19T12:56:24Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/252/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/252",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/252",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.905309",
      "comments": []
    },
    {
      "issue_number": 250,
      "title": "[FEATURE] Ability to filter callback / iterator messages",
      "body": "### Problem Statement\n\nI would like the ability to filter events for easier consumption\n\n### Proposed Solution\n\nAdd a parameter to agent to filter events (all, messages, blocks for example)\n\n### Use Case\n\nWith this in place, code will be simpler\n\nif \"delta\" in event:\n\nor \n\nif \"message\" in event:\n\nas it will yield only the wanted events\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "MaDDoGo",
      "author_type": "User",
      "created_at": "2025-06-19T10:31:11Z",
      "updated_at": "2025-06-19T10:33:28Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/250/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/250",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/250",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:45.905328",
      "comments": [
        {
          "author": "MaDDoGo",
          "body": "This could be a good addition to #242 by yielding type safe(r) events (I don't even know if this kind of method overloading is possible with type hints, but could be helpful)",
          "created_at": "2025-06-19T10:33:28Z"
        }
      ]
    },
    {
      "issue_number": 246,
      "title": "[FEATURE] ConversationManager Persistence",
      "body": "### Problem Statement\n\nAn agent maintains a conversation in-memory today, when the python process ends or agent object is deleted, the conversation is lost. When it comes to managing the conversation beyond this scope, Strands offers a DIY approach where customers are required to write their own persistence logic ([ref](https://strandsagents.com/latest/user-guide/concepts/agents/sessions-state/#2-serialization-and-restoration)). The community has shared that they want:\n- An in-build mechanism for strands to save an ongoing conversation to a datastore.\n- An extendable and pluggable interface to bring your own database persistence provider (similar to our Model Providers)\n- A way to save a conversation not only for a single agent, but a multi-agent system as well ([ref](https://github.com/strands-agents/sdk-python/issues/214))\n\n### Proposed Solution\n\nToday, the strands [Conversation Manager](https://strandsagents.com/latest/user-guide/concepts/agents/sessions-state/#conversation-manager) help manage a conversation in-memory. In order to support these new use case, we can expand the current scope of the conversation manager to handle conversation persistence as well:\n\n```\ndef continue_conversation(prompt, conversation_id):\n    conversation_manager = DdbConversationManager()\n    conversation_manager.load_conversation(conversation_id=event.get(\"conversation_id\")) \n    agent = Agent(\n      conversation_manager=conversation_manager\n    )\n    \n    return agent(prompt) # This request and the agent response is saved to DDB\n```\n\nAt initialization, the Agent will load its previous conversation from the `DdbConversationManager`, and for each user message or and LLM response, we will store the message to a datastore with the conversation manager.\n\n\n### Use Case\n\n## Use Cases\n* Store an agents conversation to a datastore. This can be a new, or ongoing, conversation where each user message, assistant response, and associated state is stored to the datastore.\n* Load conversation from a datastore and prime the agent’s context\n* Load conversations at specific instances to allow for a re-play of the response generation, or to branch the conversation\n* Storing and loading conversations for a multi-agent system ([ref](https://github.com/strands-agents/sdk-python/issues/214))\n\n### Alternatives Solutions\n\nhttps://github.com/strands-agents/sdk-python/issues/57\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-06-18T20:51:55Z",
      "updated_at": "2025-06-19T05:34:52Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/246/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Unshure"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/246",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/246",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.130489",
      "comments": [
        {
          "author": "anand086",
          "body": "+1",
          "created_at": "2025-06-19T05:34:52Z"
        }
      ]
    },
    {
      "issue_number": 33,
      "title": "[FEATURE] Add Database Session Management",
      "body": "### Problem Statement\n\nThe current implementation of the Strands agent uses in-memory storage to maintain conversation history. While this is suitable for short-lived sessions, it lacks persistence across application restarts or crashes. To address this limitation, it would be valuable to implement a class that enables saving conversation history to a relational database such as PostgreSQL or MySQL. This enhancement would provide a more robust and reliable foundation for production-grade applications by ensuring conversation state can be preserved and recovered when needed.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\n**Objective**:\nEnable the Strands agent to persist conversation history in a relational database to ensure continuity and resilience in production environments.\n\n**Primary Actor**:\nStrands Agent\n\n**Stakeholders and Interests**:\n\n**Developers**: Want reliable state management to build robust applications.\n**End Users**: Expect seamless conversation experiences even after interruptions.\n**Operations/DevOps**: Need observability and data recovery mechanisms in case of system failures.\nPreconditions:\n\nA relational database (e.g., PostgreSQL, MySQL) is available and configured.\nThe Strands agent is running in a production or long-lived session environment.\n\n**Main Flow**:\n\nA user interacts with the Strands agent.\nThe agent processes user input and generates responses.\nEach turn in the conversation (user input and agent response) is saved to the relational database in real-time or at regular intervals.\nIf the application crashes or restarts, the agent retrieves the saved conversation history from the database.\nThe agent resumes the conversation with full context, ensuring continuity for the user.\n\n**Postconditions**:\n\nConversation history is persistently stored in the database.\nThe agent can recover and resume sessions after unexpected terminations.\n\n**Alternative Flows**:\n\nIf the database is unreachable, the agent logs the failure and continues with in-memory storage, optionally retrying persistence later.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "puritatemcordis",
      "author_type": "User",
      "created_at": "2025-05-17T13:23:48Z",
      "updated_at": "2025-06-18T20:54:21Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/33/reactions",
        "total_count": 10,
        "+1": 10,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/33",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/33",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.357194",
      "comments": [
        {
          "author": "DennisTraub",
          "body": "Depending on the size of individual messages, particularly if they include multimodal data or large documents, the conversation history can become quite large and difficult to handle for an RDBMS. As an alternative, I would suggest an option to store the history in the local file system with a light",
          "created_at": "2025-05-20T14:31:56Z"
        },
        {
          "author": "vincenzodomina",
          "body": "I would definitely need to handle the messages and content blocks (also runs and sessions) as their own tables and records in a relational database (in my case especially for UI use cases and for post processing of results)\n\nMy current approach is to store short string contents directly in the conte",
          "created_at": "2025-05-22T07:35:31Z"
        },
        {
          "author": "zastrowm",
          "body": "Thanks for the request & use-case.\n\nI think this might fit in with https://github.com/strands-agents/sdk-python/issues/57 and is something we're looking into how to better support. We don't have any updates to share yet, but our upcoming roadmap should provide more clarity on improvements to this ar",
          "created_at": "2025-05-22T14:15:44Z"
        }
      ]
    },
    {
      "issue_number": 57,
      "title": "[FEATURE] Community-driven session management",
      "body": "### Problem Statement\n\nCurrently, the Strands SDK requires developers to manually implement session persistence logic for agents. This presents several challenges:\n\n- Developers must write boilerplate code to save and load agent state\n- Session management logic is tightly coupled with application code\n- No standardized approach for implementing different storage backends\n- Difficult for the community to share and reuse storage implementations\n- Increased cognitive load when managing complex applications with multiple agents\n\n\n[Docs for current strategy for saving and loading state](https://strandsagents.com/0.1.x/user-guide/concepts/agents/sessions-state/#2-serialization-and-restoration)\n\n### Proposed Solution\n\n#### Decorator-Based Session Management\n\nI propose implementing a decorator-based session persistence layer that:\n\n- Automatically handles saving and loading agent states\n- Provides an extensible interface for storage providers\n- Simplifies application code by separating concerns\n- Enables community contributions of storage backends\n\n### Use Case\n\nDevelopers building chat applications need to persist conversations across page refreshes, server restarts, and user sessions. With the decorator approach, they can simply:\n\n```python\n@redis_session_manager(redis_url=\"redis://localhost:6379\", ttl=3600)\ndef create_agent(system_prompt=\"You are a helpful assistant\", messages=None):\n    return Agent(system_prompt=system_prompt, messages=messages or [])\n\n@app.post(\"/chat/{user_id}\")\nasync def chat_endpoint(user_id: str, request: ChatRequest):\n    # Create or restore agent using the user_id as the session ID\n    agent = create_agent(\n        session_id=f\"user:{user_id}\",\n        system_prompt=\"You are a helpful AI assistant.\"\n    )\n    \n    # Process message - state automatically saved to Redis\n    response = agent(request.message)\n    \n    return {\"response\": response}\n```\n\n### Alternatives Solutions\n\nInstead of decorators, one possible alternative solution would be to directly enhance the Agent class with built-in session management capabilities.\n\n```python\nfrom strands.storage import RedisStorage\n\n# Create agent with Redis persistence\nagent = Agent(\n    system_prompt=\"You are a helpful assistant\",\n    session_id=\"user123\",\n    storage_provider=RedisStorage(\"redis://localhost:6379\")\n)\n\n# Use normally - state automatically managed\nresponse = agent(\"Hello!\")\n```\n\nIt would couple the storage logic more with the core Agent class, but also allow for the community to add storage providers by implementing this interface:\n\n```python\nclass StorageProvider(ABC):\n    @abstractmethod\n    def session_exists(self, session_id): pass\n    \n    @abstractmethod\n    def load_session(self, session_id): pass\n    \n    @abstractmethod\n    def save_session(self, session_id, state): pass\n```\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "niklas-palm",
      "author_type": "User",
      "created_at": "2025-05-20T12:38:14Z",
      "updated_at": "2025-06-18T20:52:47Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/57/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/57",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/57",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.596940",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Thanks for the request and the use case!\n\nThe Strands team is actively looking into improving session management in the SDK. We don't have any updates to share yet, but our upcoming roadmap should provide more clarity on the timeline.",
          "created_at": "2025-05-22T14:13:36Z"
        },
        {
          "author": "austinmw",
          "body": "Would also like to request boilerplate functionality to load chat history by session_id for DynamoDB",
          "created_at": "2025-05-27T16:06:50Z"
        }
      ]
    },
    {
      "issue_number": 245,
      "title": "[FEATURE] Support non-streaming mode for OpenAI model",
      "body": "### Problem Statement\n\nI would like Strands to support non-streaming mode for OpenAI and compatible servers\n\nCurrently, when invoking any OpenAI compatible server with non-streaming mode, we encounter an error:\n\n`model = OpenAIModel(\n    client_args={\n        \"api_key\" : <API_KEY>,\n        \"base_url\" : <BASE_URL>\n    },\n    model_id=<MODEL_ID>,\n    params={\n        \"max_tokens\": 1000,\n        \"temperature\": 0.7,\n    }\n)\n\nagent = Agent(model=model)\nresponse = agent(\"What is 2+2\")`\n\n`UnboundLocalError: cannot access local variable 'choice' where it is not associated with a value`\n\nIt would be great if we add support similar to Bedrock where non streaming mode is supported\n\n<img width=\"862\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/080325b8-ab8c-4bc7-8294-01833022db51\" />\n\n\n### Proposed Solution\n\nWe can follow similar to Bedrock approach:\n\nhttps://github.com/strands-agents/sdk-python/blob/cc5be1200123d0c48765f264fce92de711dac953/src/strands/models/bedrock.py#L371\n\n### Use Case\n\nTo support any OpenAI models or Agentic usecases which doesn't need streaming support\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "nandateja",
      "author_type": "User",
      "created_at": "2025-06-18T19:07:00Z",
      "updated_at": "2025-06-18T19:07:00Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/245/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/245",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/245",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.818085",
      "comments": []
    },
    {
      "issue_number": 243,
      "title": "[FEATURE] Support non-stream in OpenAIModel",
      "body": "### Problem Statement\n\nCurrently OpenAIModel only supports `stream=True`\nSome model does not support that. \nSo I'd like to have an option with `stream=False` in OpenAIModel. \n\n### Proposed Solution\n\nSimilar implementation for Bedrock API with `stream=False`\nhttps://github.com/strands-agents/sdk-python/commit/3100ea0dc8b694ff8db673000fc914e26ee32abd\n\n### Use Case\n\n```\nmodel = OpenAIModel(\n    # can also pass dict as first argument\n    client_args={\"api_key\": \"abc123\", \"base_url\": \"http://localhost:8009/v1\"},\n    stream=False,\n    # everything from this point is a kwarg though\n    model_id=\"xxx\",\n)\n\nagent = Agent(model=model, tools=[calculator])\nagent(\"What is 2+2?\")\n```\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "howardzhou",
      "author_type": "User",
      "created_at": "2025-06-18T15:13:19Z",
      "updated_at": "2025-06-18T15:13:19Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/243/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/243",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/243",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.818110",
      "comments": []
    },
    {
      "issue_number": 242,
      "title": "[FEATURE]  Async Iterator - Typed Events",
      "body": "### Problem Statement\n\nCurrently, the events we pass to the callback handlers and also yield from are async iterator are not strongly types. This makes it challenging for users to build conditions off the events for performing actions (e.g. printing model text chunks to screen). We should formalize the structure and strongly types these event payloads. \n\n### Proposed Solution\n\nSolution is to implement interfaces for the Agent event payloads. Could be a dataclass, TypedDict, etc. \n\n### Use Case\n\nTo configure reliable conditions on the events for performing actions real-time (e.g., printing model text to screen in a chat application of Strands). \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-06-18T13:45:31Z",
      "updated_at": "2025-06-18T13:45:31Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/242/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/242",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/242",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.818120",
      "comments": []
    },
    {
      "issue_number": 156,
      "title": "[FEATURE] Add TypeScript/JavaScript/NodeJS SDK",
      "body": "### Problem Statement\n\nJust curious if there are plans to add a nodejs sdk in addition to this Python implementation. \n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nI could create my frontend, backend, and IaC (CDK) in typescript. \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "mtliendo",
      "author_type": "User",
      "created_at": "2025-05-31T05:58:55Z",
      "updated_at": "2025-06-18T13:38:09Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/156/reactions",
        "total_count": 15,
        "+1": 15,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/156",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/156",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:46.818128",
      "comments": [
        {
          "author": "yonib05",
          "body": "Hey @mtliendo,\n\nThanks for reaching out and contributing this feature request. Yes, I think the team has been considering Typescript as the next SDK library to support alongside a few other languages. Unfortunately, we do not yet have a timeline for when this or other languages will be available. Ho",
          "created_at": "2025-06-04T21:59:00Z"
        }
      ]
    },
    {
      "issue_number": 240,
      "title": "[FEATURE] add java sdk support for Strands Agents",
      "body": "### Problem Statement\n\nPlease add support for java programming language for Strands Agents\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nJava support in Strands agents provides seamless integration with enterprise systems, leverages Java's extensive library ecosystem, and enables cross-platform compatibility. This allows organizations to build on existing Java investments while maintaining security and performance advantages.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "sindhupalakodety",
      "author_type": "User",
      "created_at": "2025-06-18T01:59:57Z",
      "updated_at": "2025-06-18T01:59:57Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/240/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/240",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/240",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.071101",
      "comments": []
    },
    {
      "issue_number": 217,
      "title": "[FEATURE] Bidirectional Streaming",
      "body": "## Overview\n\nBidirectional streaming enables real-time, continuous communication between clients and AI models in both directions simultaneously. Unlike traditional request-response patterns, this approach allows for simultaneous data exchange where both client and model can send and receive data incrementally. This creates a more natural interaction flow where content is processed as it arrives, without waiting for complete messages, and conversations can adapt dynamically based on ongoing inputs and outputs.\n\n### Model Support\n\nSeveral providers are building models with bidirectional streaming capabilities. Some examples include:\n\n- **Amazon**: Amazon's Nova Sonic model offers real-time speech processing, interruption handling, context-aware responses, and low latency interactions, making it particularly effective for voice assistants ([docs](https://docs.aws.amazon.com/nova/latest/userguide/speech.html)).\n- **OpenAI**: OpenAI also provides models with bidirectional streaming capabilities, allowing for dynamic conversation flows where the model can receive new information while generating a response ([announcement](https://community.openai.com/t/new-audio-models-in-the-api-tools-for-voice-agents/1148339)).\n\n## Request\n\nSupport a bidirectional streaming interface in Strands.\n\n## Prototype\n\nTo help facilitate discussion, we have implemented a prototype for bidirectional streaming under https://github.com/pgrayy/strands-sdk-python-async (see README for instructions on testing). The prototype implements a flexible architecture designed to handle real-time, two-way communication between clients and AI models. The implementation focuses on supporting audio-based interactions with Nova Sonic while establishing patterns that could extend to other models and modalities. The key components are:\n\n- **Bidirectional Agent**: The Agent class in the bidirectional module provides an async context manager for sending data (`send`), an async generator for receiving data (`receive`), and a method to initialize bidirectional streaming (`bistream`). For example usage, please see https://github.com/pgrayy/sdk-python-async/blob/main/scripts/agents/bidirectional.py.\n- **Model Sender/Receiver**: The abstract `Sender` and `Receiver` interfaces define the contract for model providers. The `Sender` handles outgoing events to the model with context managers for different content types (text, audio, tools), while the `Receiver` processes incoming events from the model and constructs message history.\n- **Event System**: Events are structured as typed objects representing different kinds of streaming content, including session events (start/end), prompt events (start/end), and content events (text, audio, system, tool).\n- **Nova Implementation**: The Nova implementation demonstrates how to adapt a specific model to the bidirectional interface, providing a concrete example of the architecture in action.",
      "state": "open",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-06-13T20:48:09Z",
      "updated_at": "2025-06-17T22:57:27Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/217/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/217",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/217",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.071121",
      "comments": [
        {
          "author": "jsamuel1",
          "body": "I'd be keen to see how we can use a bidirectional streaming agent in front of a multi-agent flow, and have it receive back async data from multi-agent without \"barging in\" to the conversation.",
          "created_at": "2025-06-14T06:32:29Z"
        },
        {
          "author": "jsamuel1",
          "body": "#189 related.",
          "created_at": "2025-06-14T06:34:00Z"
        },
        {
          "author": "mkmeral",
          "body": "Fantastic work on the [prototype implementation](https://github.com/pgrayy/strands-sdk-python-async)! The `Sender`/`Receiver` pattern with async generators is elegant and the Nova integration proves bidirectional streaming works beautifully in practice. I've also built a working demo with Nova Sonic",
          "created_at": "2025-06-17T22:57:26Z"
        }
      ]
    },
    {
      "issue_number": 210,
      "title": "[BUG] openAI stream() method does not enforce \"stream=True\" in the upstream API call",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\nv0.1.7\n\n### Python Version\n\n3.11\n\n### Operating System\n\nmacos 12\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nfrom source code review, \nhttps://github.com/strands-agents/sdk-python/blob/7c5f7a74dbae351041eaec28d57a55d590999bc7/src/strands/models/openai.py#L80\n\n@override\n    def stream(self, request: dict[str, Any]) -> Iterable[dict[str, Any]]:\n        \"\"\"Send the request to the OpenAI model and get the streaming response.\n\n        Args:\n            request: The formatted request to send to the OpenAI model.\n\n        Returns:\n            An iterable of response events from the OpenAI model.\n        \"\"\"\n        response = self.client.chat.completions.create(**request)\n\nthis does not work if the caller does not explicitly set stream=True, in the request, or set to False\nThe OpenAI API will not stream responses unless stream=True is set.\n\nSo it is an easy fix \n\nBefore passing the request dictionary to self.client.chat.completions.create(**request), override or set the stream key to True:\n\nrequest[\"stream\"] = True\nresponse = self.client.chat.completions.create(**request)\n\n\n### Expected Behavior\n\nsee comment above for the fix\n\n### Actual Behavior\n\nsee comment above for the fix\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\nsee comment above for the fix\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "thinkinginmath",
      "author_type": "User",
      "created_at": "2025-06-12T18:14:56Z",
      "updated_at": "2025-06-17T18:25:30Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/210/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/210",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/210",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.279801",
      "comments": [
        {
          "author": "pgrayy",
          "body": "Hello @thinkinginmath, thank you for raising an issue. I do want to call out that `stream=True` is set in the `format_request` method ([here](https://github.com/strands-agents/sdk-python/blob/main/src/strands/types/models/openai.py#L180)). `format_request` is always called as part of the `converse` ",
          "created_at": "2025-06-17T17:27:07Z"
        },
        {
          "author": "thinkinginmath",
          "body": "Thank you for the clarification!\n\nin current unitest, `stream()` is called without `\"stream\": True`,  while this works in tests due to mocking, in real usage it could lead to subtle bugs. If, by design, users are expected to use `converse()` and not call `stream(`) directly, we could make this inten",
          "created_at": "2025-06-17T18:25:29Z"
        }
      ]
    },
    {
      "issue_number": 147,
      "title": "[BUG] Cycle failed",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\nv.0.1\n\n### Python Version\n\n3.13.3\n\n### Operating System\n\nmacOSx\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nI was mid building an agent, then got this failure.\n\n### Expected Behavior\n\nAgent is built successfully.\n\n### Actual Behavior\n\n\nDo you want to proceed with the str_replace operation? [y/*] y\n✔ editor completed in 11.91s\nNow let's reload the tool and test it:\nℹ 🔧 Starting load_tool...\n✔ load_tool completed in 0.43s\n\nℹ 🔧 Starting github_stargazers...\n✔ github_stargazers completed in 1.15s\ncycle failed\nTraceback (most recent call last):\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 220, in event_loop_cycle\n    return _handle_tool_execution(\n        stop_reason,\n    ...<12 lines>...\n        kwargs,\n    )\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 428, in _handle_tool_execution\n    return recurse_event_loop(\n        model=model,\n    ...<5 lines>...\n        **kwargs,\n    )\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 305, in recurse_event_loop\n    ) = event_loop_cycle(**kwargs)\n        ~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ~~~~~~~~~~~~~~~^\n        model,\n        ^^^^^^\n    ...<4 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/strands/models/bedrock.py\", line 266, in stream\n    response = self.client.converse_stream(**request)\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/botocore/client.py\", line 595, in _api_call\n    return self._make_api_call(operation_name, kwargs)\n           ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/botocore/context.py\", line 123, in wrapper\n    return func(*args, **kwargs)\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/botocore/client.py\", line 1015, in _make_api_call\n    request_dict = self._convert_to_request_dict(\n        api_params=api_params,\n    ...<3 lines>...\n        headers=additional_headers,\n    )\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/botocore/client.py\", line 1082, in _convert_to_request_dict\n    request_dict = self._serializer.serialize_to_request(\n        api_params, operation_model\n    )\n  File \"/Users/bguttman/.local/pipx/venvs/strands-agents-builder/lib/python3.13/site-packages/botocore/validate.py\", line 381, in serialize_to_request\n    raise ParamValidationError(report=report.generate_report())\nbotocore.exceptions.ParamValidationError: Parameter validation failed:\nUnknown parameter in messages[18].content[0].toolResult: \"data\", must be one of: toolUseId, content, status\n\nError: Parameter validation failed:\nUnknown parameter in messages[18].content[0].toolResult: \"data\", must be one of: toolUseId, content, status\n \n~  hi\n\nError: Parameter validation failed:\nUnknown parameter in messages[18].content[0].toolResult: \"data\", must be one of: toolUseId, content, status\n \n~  strands\n\nError: Parameter validation failed:\nUnknown parameter in messages[18].content[0].toolResult: \"data\", must be one of: toolUseId, content, status\n \n~\n\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "awsbelle",
      "author_type": "User",
      "created_at": "2025-05-30T02:15:22Z",
      "updated_at": "2025-06-17T15:15:15Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/147/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/147",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/147",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.511090",
      "comments": []
    },
    {
      "issue_number": 231,
      "title": "[FEATURE] Implement general-purpose hook/callback system",
      "body": "### Problem Statement\n\nSeveral current features under consideration/design are converging on the idea that we'd like to provide a mechanism to build primative SDK objects that can hook into events of an agent to and adapt behavior (#191, #33).\n\nToday this can be done via the `callback_handler` of the agent, however it has a couple flaws:\n\n- The default handler is to print output; adding an explict handler disables this behavior\n- Composing multiple handlers together is clunky\n- It is currently invoked for all events instead of only the ones that a caller is interesting in\n- Arguments passed into the callback_handler are untyped\n\n\n### Proposed Solution\n\nImplement a general purpose hook system which is:\n\n - Composable: A feature can be implemented by subscribing to multiple hooks and callers do not need to provide hooks in a specific order\n - N to N: Multiple hooks can subscribe and respond to an event and a hook can subscribe to multiple events\n - Hooks can be added externally allowing tools or features to add hooks as needed and allow others to subscribe\n\n### Alternatives Solutions\n\n - Continue to use the callback system to intercept these events\n - Implement a system on top of async iterators which has similar functionality \n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-06-16T14:58:19Z",
      "updated_at": "2025-06-16T15:59:28Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/231/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/231",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/231",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.511128",
      "comments": []
    },
    {
      "issue_number": 230,
      "title": "[BUG] use_llm is always using the default model",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\nv0.1.5\n\n### Python Version\n\npython 3.11\n\n### Operating System\n\nmacOS 15.4.1 \n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1, My sample code can be found here: https://github.com/marklaszlo9/strands-gcuk\n2, Clone the repo and run it\n3. It will always use Sonnet 3.7\n\n### Expected Behavior\n\n1, It should use the model defined in bedrock_model_instance.\n\n### Actual Behavior\n\n1, It is using the default model (Sonnet 3.7)\n\n### Additional Context\n\nIt seems like we create a new agent inside use_llm.\nIt doesn’t have a model_id property or anything related to models.\n\n### Possible Solution\n\nI think we should be able to pass the bedrock_model_instance parameters, so we can have guardrails and options regarding models\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "marklaszlo9",
      "author_type": "User",
      "created_at": "2025-06-16T14:40:02Z",
      "updated_at": "2025-06-16T14:46:22Z",
      "closed_at": "2025-06-16T14:46:21Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/230/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/230",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/230",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.511138",
      "comments": [
        {
          "author": "zastrowm",
          "body": "@marklaszlo9 is strands-agents/tools#74 about the same as this one?",
          "created_at": "2025-06-16T14:42:53Z"
        },
        {
          "author": "marklaszlo9",
          "body": "> [@marklaszlo9](https://github.com/marklaszlo9) is [strands-agents/tools#74](https://github.com/strands-agents/tools/issues/74) about the same as this one?\n\nyes, sorry did not see this one.",
          "created_at": "2025-06-16T14:46:21Z"
        }
      ]
    },
    {
      "issue_number": 227,
      "title": "[FEATURE] Palmyra provider",
      "body": "### Problem Statement\n\nHi there! I'm working on [Writer](https://writer.com/llms/) Palmyra provider. Just opened an issue to keep you posted\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nAccess to Palmyra LLMs ecosystem\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "yanomaly",
      "author_type": "User",
      "created_at": "2025-06-16T07:55:29Z",
      "updated_at": "2025-06-16T07:55:29Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/227/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/227",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/227",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.708517",
      "comments": []
    },
    {
      "issue_number": 24,
      "title": "[FEATURE] Agent to Agent Communication (A2A)",
      "body": "### Problem Statement\n\nStrands builders are increasingly asking for enhanced agent interoperability capabilities that enable seamless communication between agents across different systems and deployments.\n\n- **Standardized Agent Communication**: Builders want native SDK support for agents to communicate with other agents using industry-standard protocols without custom integration work\n- **Agent Discovery and Service Registry**: The community needs automatic capability discovery so agents can find and connect to other agents based on their skills and availability\n- **Production-Ready Inter-Agent Protocols**: Developers want enterprise-grade communication protocols supporting authentication, streaming, task lifecycle management, and distributed coordination\n- **Protocol-Agnostic Architecture**: Requests for agents that can participate in multiple communication standards simultaneously without being locked into proprietary systems\n- **Seamless Multi-Agent Integration**: Standardized agents should work within existing Strands multi-agent patterns (swarms, graphs, handoffs, agents-as-tools)\n\n### Proposed Solution\n\nIn response to builder requests, we propose introducing **comprehensive Agent-to-Agent (A2A) protocol integration** through Google's [Agent-to-Agent Protocol](https://google-a2a.github.io/A2A), enabling Strands agents to communicate with other using JSON-RPC 2.0 over HTTP and the A2A protocol.\n\n#### **1. A2A Agent Wrapper**\nThe `A2AAgent` class adapts existing Strands agents to the A2A protocol without modifying existing agent code.\n\n```python\nfrom strands import Agent\nfrom strands.multiagent.a2a import A2AAgent\n\n# Existing Strands agent code unchanged\nstrands_agent = Agent(tools=[...])\n\n# A2A capabilities added to the agent\na2a_agent = A2AAgent(strands_agent)\n\n# Easily serve Strands agents over the A2A protocol\na2a_agent.serve()\n\n# Or use with any ASGI server\na2a_agent.to_asgi()\n```\n\n#### **2. Agent Discovery and Agent Cards**\nThe `A2AAgent` class automatically generates Agent Cards from Strands Agent metadata, providing standardized capability discovery. Agent Cards include:\n\n- **Basic Metadata**: Name, description, version, and provider information derived from Agent configuration\n- **Skills Discovery**: Automatically generated from available tools, enabling precise capability matching  \n- **Communication Capabilities**: Streaming support, push notifications, and state transition tracking\n- **Optional Overwrites and Augmentation**: Agent builders can add to or overwrite generated agent metadata, skills, etc.\n\n```python\nagent = Agent(\n    name=\"research_specialist\",\n    system_prompt=\"You are an expert researcher with web access\",\n    tools=[http_request, memory, file_write]\n)\n\n# Agent Card automatically generated from Strands Agent with skills derived from tools\na2a_agent = A2AAgent(agent)\n```\n\n#### **3. Built-in Server and ASGI Integration**\nThe `A2AAgent` class includes a built-in FastAPI and uvicorn server that hosts both the Agent Card at `/.well-known/agent.json` and JSON-RPC 2.0 endpoints. Features include:\n\n- **Standardized Discovery**: Agent Cards accessible via HTTP GET requests\n- **JSON-RPC API**: Complete A2A protocol implementation with method routing\n- **ASGI Compatibility**: `to_asgi()` function for custom routes and deployment\n\n#### **4. Communication Patterns**\nThe A2A implementation supports three distinct communication patterns:\n\n**Request/Response (Polling)**\n- Traditional synchronous communication\n- Immediate response for quick tasks and status queries\n- Polling for longer running tasks\n\n**Streaming (Server-Sent Events)**  \n- Real-time updates during task execution using SSE\n- Progress monitoring and intermediate result streaming\n\n**Push Notifications (Long-Running Tasks)**\n- Webhook-based notifications for longer running tasks\n- Asynchronous task management with callback mechanisms\n\n#### **5. Tasks, Messages, and Artifacts Integration**\nComplete integration with A2A's core data structures:\n\n- **Tasks**: Full lifecycle management (submitted → working → completed/failed/canceled/input-required) with state persistence\n- **Messages**: Rich messaging system supporting TextPart, FilePart, and DataPart for comprehensive agent communication  \n- **Artifacts**: Structured data exchange enabling agents to share complex outputs and generated content\n\n#### **6. Multi-Agent Pattern Integration**\nA2A agents can be used directly in multi-agent patterns provided by Strands (#214):\n\n```python\na2a_analyzer_remote = A2AAgent(url=\"https://my-agent-endpoint.com/.well-known/agent.json\")\na2a_analyzer_local = A2AAgent(url=\"http://localhost:8000/.well-known/agent.json\") \nstrands_analyzer = Agent(system_prompt=\"Perform deep analysis on the given context.\")\n\n# Agents-as-Tools\norchestrator = Agent(tools=[a2a_analyzer_remote, a2a_analyzer_local, strands_analyzer])\n\n# Direct usage in Swarms\nswarm = Swarm([a2a_analyzer_remote, a2a_analyzer_local, strands_analyzer])\n\n# Graph workflows  \nbuilder = GraphBuilder()\nbuilder.add_node(a2a_analyzer_remote, \"a2a_analyzer_remote\")\nbuilder.add_node(a2a_analyzer_local, \"a2a_analyzer_local\")\nbuilder.add_node(strands_analyzer, \"strands_analyzer\")\ngraph = builder.build()\n```\n\n#### **7. Authentication and Authorization**\nA2A has built-in authentication and authorization concepts. A2A clients send authentication data when communicating with agents, handled by the Strands `A2AAgent` server.\n\n### Additional Context\n\nPlease share your feedback and use cases to help shape A2A integration in Strands Agents.",
      "state": "open",
      "author": "ryanycoleman",
      "author_type": "User",
      "created_at": "2025-05-16T22:05:09Z",
      "updated_at": "2025-06-15T18:07:37Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/24/reactions",
        "total_count": 14,
        "+1": 14,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jer96"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/24",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/24",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.708538",
      "comments": [
        {
          "author": "mudrantar",
          "body": "+1 to request by @ryanycoleman\n",
          "created_at": "2025-05-19T17:07:39Z"
        },
        {
          "author": "D1EE7P2U9",
          "body": "+1",
          "created_at": "2025-05-19T17:29:36Z"
        },
        {
          "author": "karan-5ingh",
          "body": "+1",
          "created_at": "2025-05-19T18:33:53Z"
        },
        {
          "author": "awsarron",
          "body": "Providing an update here: the team is now taking a holistic look in to multi-agent orchestration, including A2A, and will have details soon.",
          "created_at": "2025-06-10T07:57:10Z"
        },
        {
          "author": "ryanycoleman",
          "body": "Initial work to integrate A2A natively is taking shape here: https://github.com/strands-agents/sdk-python/pull/218\n\nWe also have our plans for multi-agent orchestration detailed in #214 for feedback ahead of PR\n\nHave a look! ",
          "created_at": "2025-06-13T21:26:23Z"
        }
      ]
    },
    {
      "issue_number": 224,
      "title": "[FEATURE] Remove Swarm tools max number of agents restriction to 10",
      "body": "### Problem Statement\n\nI would like Strands to remove the max no of agents limitation to 10 for the Swarm tool.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nI am developing an Agentic AI solution based on Strands SDK using the swarm tool and need atleast 15 agents for the accuracy level i want to achieve.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\nCustom Swarm deployment, which i don't want.",
      "state": "open",
      "author": "sumanjitc",
      "author_type": "User",
      "created_at": "2025-06-14T19:49:13Z",
      "updated_at": "2025-06-14T19:49:13Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/224/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/224",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/224",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.956465",
      "comments": []
    },
    {
      "issue_number": 212,
      "title": "[FEATURE] Support Multi-Modal input to __call__",
      "body": "### Problem Statement\n\nI would like strands to support passing in more datatypes to `Agent __call__` so that the images, audio, etc can be passed into the agent\n\n### Proposed Solution\n\nThis should support a ToolResult as input\n```\nagent = Agent()\nagent(ToolResult(...))\n```\n\nThis should also allow for an empty input to invoke, and it will invoke the current messages array.\n```\nagent = Agent(messages=[...])\nagent()\n```\n\n### Use Case\n\nPassing in images or text or both would allow responding to agents needing more than just text\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-06-12T19:37:36Z",
      "updated_at": "2025-06-13T22:09:23Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/212/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/212",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/212",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:47.956488",
      "comments": [
        {
          "author": "theagenticguy",
          "body": "#60  adds a `structured_output` method to `Agent`, leaving a note that we should consider multi-modal input for that case as well. For example, if I send an image and I want to extract certain image attributes according to a Pydantic JSON schema.",
          "created_at": "2025-06-13T22:09:23Z"
        }
      ]
    },
    {
      "issue_number": 128,
      "title": "[BUG] Fix Linting issues",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.5\n\n### Python Version\n\n3.10.5\n\n### Operating System\n\nLinux\n\n### Installation Method\n\ngit clone\n\n### Steps to Reproduce\n\nThere seems to be an issue with our linting system that does not pick up issues. For example, in [this pr](https://github.com/strands-agents/sdk-python/pull/119), the first iteration has a function with a parameter that was unused, but our linting system did not notice this issue. There have been other cases of this as well ([ref](https://github.com/strands-agents/sdk-python/pull/46)), so we need to investigate why linting isnt working properly.\n\n### Expected Behavior\n\nLinting detects issue, like the ones shown in these PR's:\n- https://github.com/strands-agents/sdk-python/pull/119\n- https://github.com/strands-agents/sdk-python/pull/46\n\n### Actual Behavior\n\nIt is not detecting common linting issues.\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-05-27T17:56:11Z",
      "updated_at": "2025-06-13T20:13:46Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/128/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "mehtarac"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/128",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/128",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:48.198661",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Also got a report about type checking failing here\n\n```\ntools = streamable_http_mcp_client.list_tools_sync()\nagent = Agent(\n    system_prompt=SYSTEM_PROMPT,\n    tools=tools,\n    messages=messages,\n    model=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\"\n)\n```\n\nerror:\n\n```\nArgument \"tools\" to \"Agent\"",
          "created_at": "2025-06-13T20:13:17Z"
        }
      ]
    },
    {
      "issue_number": 195,
      "title": "[BUG] opt/python/opentelemetry on lambda",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.1\n\n### Python Version\n\n3.11\n\n### Operating System\n\nMac\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nWhen deploying  strands via lambda I get this error\n\nI tried pyhton 3.11 and 3.12\n\n```\n{\n  \"errorMessage\": \"\",\n  \"errorType\": \"StopIteration\",\n  \"requestId\": \"\",\n  \"stackTrace\": [\n    \"  File \\\"/var/lang/lib/python3.11/importlib/__init__.py\\\", line 126, in import_module\\n    return *bootstrap.*gcd_import(name[level:], package, level)\\n\",\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1204, in *gcd*import\\n\",\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1176, in *find*and_load\\n\",\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1147, in *find*and_load_unlocked\\n\",\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 690, in *load*unlocked\\n\",\n    \"  File \\\"<frozen importlib._bootstrap_external>\\\", line 940, in exec_module\\n\",\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 241, in *call*with_frames_removed\\n\",\n    \"  File \\\"/var/task/lambda_function.py\\\", line 8, in <module>\\n    from strands import Agent\\n\",\n    \"  File \\\"/opt/python/strands/__init__.py\\\", line 3, in <module>\\n    from . import agent, event_loop, models, telemetry, types\\n\",\n    \"  File \\\"/opt/python/strands/agent/__init__.py\\\", line 9, in <module>\\n    from .agent import Agent\\n\",\n    \"  File \\\"/opt/python/strands/agent/agent.py\\\", line 22, in <module>\\n    from opentelemetry import trace\\n\",\n    \"  File \\\"/opt/python/opentelemetry/trace/__init__.py\\\", line 85, in <module>\\n    from opentelemetry import context as context_api\\n\",\n    \"  File \\\"/opt/python/opentelemetry/context/__init__.py\\\", line 70, in <module>\\n    *RUNTIME*CONTEXT = *load*runtime_context()\\n\",\n    \"  File \\\"/opt/python/opentelemetry/context/__init__.py\\\", line 60, in *load*runtime_context\\n    return next(  # type: ignore\\n\"\n  ]\n}\n```\n\n\n```\n[ERROR]\t2025-06-09T19:54:11.118Z\t\tFailed to load context: contextvars_context, fallback to contextvars_context\nTraceback (most recent call last):\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 46, in *load*runtime_context\n    return next(  # type: ignore\n           ^^^^^^^^^^^^^^^^^^^^^\nStopIteration\n[ERROR] StopIteration\nTraceback (most recent call last):\n  File \"/var/lang/lib/python3.11/importlib/__init__.py\", line 126, in import_module\n    return *bootstrap.*gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 1204, in *gcd*import\n  File \"<frozen importlib._bootstrap>\", line 1176, in *find*and_load\n  File \"<frozen importlib._bootstrap>\", line 1147, in *find*and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 690, in *load*unlocked\n  File \"<frozen importlib._bootstrap_external>\", line 940, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 241, in *call*with_frames_removed\n  File \"/var/task/lambda_function.py\", line 8, in <module>\n    from strands import Agent\n  File \"/opt/python/strands/__init__.py\", line 3, in <module>\n    from . import agent, event_loop, models, telemetry, types\n  File \"/opt/python/strands/agent/__init__.py\", line 9, in <module>\n    from .agent import Agent\n  File \"/opt/python/strands/agent/agent.py\", line 22, in <module>\n    from opentelemetry import trace\n  File \"/opt/python/opentelemetry/trace/__init__.py\", line 85, in <module>\n    from opentelemetry import context as context_api\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 70, in <module>\n    *RUNTIME*CONTEXT = *load*runtime_context()\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 60, in *load*runtime_context\n    return next(  # type: ignore\nINIT_REPORT Init Duration: 695.93 ms\tPhase: init\tStatus: error\tError Type: Runtime.Unknown\n[ERROR]\t2025-06-09T19:54:11.735Z\t\tFailed to load context: contextvars_context, fallback to contextvars_context\nTraceback (most recent call last):\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 46, in *load*runtime_context\n    return next(  # type: ignore\n           ^^^^^^^^^^^^^^^^^^^^^\nStopIteration\n[ERROR] StopIteration\nTraceback (most recent call last):\n  File \"/var/lang/lib/python3.11/importlib/__init__.py\", line 126, in import_module\n    return *bootstrap.*gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 1204, in *gcd*import\n  File \"<frozen importlib._bootstrap>\", line 1176, in *find*and_load\n  File \"<frozen importlib._bootstrap>\", line 1147, in *find*and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 690, in *load*unlocked\n  File \"<frozen importlib._bootstrap_external>\", line 940, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 241, in *call*with_frames_removed\n  File \"/var/task/lambda_function.py\", line 8, in <module>\n    from strands import Agent\n  File \"/opt/python/strands/__init__.py\", line 3, in <module>\n    from . import agent, event_loop, models, telemetry, types\n  File \"/opt/python/strands/agent/__init__.py\", line 9, in <module>\n    from .agent import Agent\n  File \"/opt/python/strands/agent/agent.py\", line 22, in <module>\n    from opentelemetry import trace\n  File \"/opt/python/opentelemetry/trace/__init__.py\", line 85, in <module>\n    from opentelemetry import context as context_api\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 70, in <module>\n    *RUNTIME*CONTEXT = *load*runtime_context()\n  File \"/opt/python/opentelemetry/context/__init__.py\", line 60, in *load*runtime_context\n    return next(  # type: ignore\nINIT_REPORT Init Duration: 595.41 ms\tPhase: invoke\tStatus: error\tError Type: Runtime.Unknown\nSTART RequestId: 5cca313d-b16a-4cbd-8423-188319c7073b Version: $LATEST\nEND RequestId: 5cca313d-b16a-4cbd-8423-188319c7073b\nREPORT RequestId: 5cca313d-b16a-4cbd-8423-188319c7073b\tDuration: 605.35 ms\tBilled Duration: 606 ms\tMemory Size: 2000 MB\tMax Memory Used: 74 MB\tStatus: error\tError Type: Runtime.Unknown\n\n\n```\n\n\n\nI have this in my requirements.txt\n**strands-agents\nstrands-agents-tools\nboto3\nrequests\npydantic**\n\nThis is the script to build the zip file for lambda:\n\n```\n  $DOCKER_CMD run --rm \\\n        --entrypoint=\"\" \\\n        -v \"$PWD\":/var/task \\\n        -w /var/task \\\n        public.ecr.aws/lambda/python:3.11 \\\n        /bin/bash -c \"\n            echo '=== Installing zip utility ==='\n            yum update -y && yum install -y zip\n            \n            echo '=== Installing shared infrastructure dependencies ==='\n            rm -rf python/\n            mkdir python\n            \n            echo 'Contents of requirements.txt:'\n            cat requirements.txt\n            \n            echo 'Installing packages with verbose output:'\n            pip install -v -r requirements.txt -t python/\n            \n            echo '=== Checking installed packages ==='\n            ls -la python/ | head -10\n            echo 'Total packages installed:' \\$(ls python/ | wc -l)\n            \n            echo '=== Looking for key modules ==='\n            find python/ -name '*boto*' -type d | head -5\n            find python/ -name '*aws*' -type d | head -5\n            \n            echo '=== Testing imports ==='\n            cd python\n            python3 -c 'import boto3; print(\\\"✅ boto3 import successful\\\")' || echo '❌ boto3 import failed'\n            python3 -c 'import botocore; print(\\\"✅ botocore import successful\\\")' || echo '❌ botocore import failed'\n            cd ..\n            \n            echo '=== Creating zip file ==='\n            zip -r shared-infrastructure-layer.zip python/ -x '*.pyc' '*/__pycache__/*' '*/tests/*' '*.dist-info/*'\n            echo 'Shared infrastructure layer build complete!'\n            ls -la shared-infrastructure-layer.zip\n        \n\n```\n\n### Expected Behavior\n\nLambda invokes as expected\n\n### Actual Behavior\n\nError, see above\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "rpostulart",
      "author_type": "User",
      "created_at": "2025-06-09T21:16:38Z",
      "updated_at": "2025-06-13T19:54:04Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/195/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/195",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/195",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:48.440632",
      "comments": [
        {
          "author": "karthiks3000",
          "body": "+1",
          "created_at": "2025-06-10T21:21:21Z"
        },
        {
          "author": "rpostulart",
          "body": "This seems to work.\n\nPut this in requirements.txt\n\n```\nstrands-agents\n\nstrands-agents-tools\nboto3\nbotocore\n\npydantic\npydantic-core\ntyping-extensions\n```\n\n\nrun this script to create the zip file:\n```\n\n#!/bin/bash\nset -e\n\necho \"🔍 Debugging layer build process...\"\n\ncd book-layer\n\necho \"📋 Current requir",
          "created_at": "2025-06-11T11:32:05Z"
        },
        {
          "author": "karthiks3000",
          "body": "@rpostulart did you try this on aws lambda? I'm still getting the error with those exact requirements.",
          "created_at": "2025-06-13T19:54:04Z"
        }
      ]
    },
    {
      "issue_number": 191,
      "title": "[FEATURE] Add configurable limits for cycles, token counts, and overall runtime",
      "body": "### Problem Statement\n\nFor our use case, we want to be able to set limits to handle when the agent is stuck in a loop/when the task is more complex than anticipated. This is to address a concern with the potential costs of letting the agent dictate how much compute it needs.\n\nWith [Callback Handlers](https://strandsagents.com/0.1.x/user-guide/concepts/streaming/callback-handlers/) we can see the information we need with this toy example for max_cycles:\n```\nimport functools\nfrom strands import Agent\n\ndef _callback_handler(max_cycles, **kwargs):\n    if \"event_loop_metrics\" in kwargs:\n        event_loop_metrics = kwargs[\"event_loop_metrics\"]\n        if event_loop_metrics.cycle_count > max_cycles:\n            logger.warning(\n                f\"TODO: end run, cycle budget exhausted: {event_loop_metrics.cycle_count} > {max_cycles}\"\n            )\n\n_handler = functools.partial(_callback_handler, max_cycles=100)\nagent = Agent(model=model, callback_handler=_handler)\n```\n\nBut once we have this information, there is currently no way to act on it. \n\n\n### Proposed Solution\n\nThe ideal state for this feature would be that you can pass a limits object at the time of constructing the agent and have the agent handle it:\n```\nfrom pydantic import BaseModel\n\nclass AgentLimits(BaseModel):\n      token_budget: int\n      cycle_budget: int\n      runtime: float # in seconds\n   \nbudget = AgentLimits(token_budget=10000, cycle_budget=100, runtime=1800)\nagent = Agent(model=model, callback_handler=_handler limits=budget)\n```\n\nOR,\n\nProvide hooks that we can implement to catch these updates and exit out gracefully. \n\n\n\n### Use Case\n\n- As a user, I have a limited bedrock budget, and want to make sure my agent doesn't exceed my allocation. \n- As a user, I want to cancel out an agent workflow if it takes more than 10 minutes.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "timsee",
      "author_type": "User",
      "created_at": "2025-06-09T16:24:50Z",
      "updated_at": "2025-06-13T19:16:53Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "under consideration"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/191/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/191",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/191",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:48.708589",
      "comments": []
    },
    {
      "issue_number": 116,
      "title": "[FEATURE] Support for async Tool",
      "body": "### Problem Statement\n\nHi team,\n\nI’m looking to create tools for LLM calls and search systems, but these functions are implemented as async functions in my codebase.\n\nDoes StrandsAgents support defining tools as async functions? If not, I would like to request support for async tool definitions to better integrate with asynchronous workflows.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nMany modern applications use asynchronous operations for network-bound tasks like API calls or database queries. For example:\n\t•\tCalling an external LLM API such as OpenAI or Claude, which requires awaiting the HTTP response\n\t•\tPerforming a vector search against an async-compatible database or search engine (e.g., Redis, Qdrant, or OpenSearch via async clients)\n\t•\tFetching contextual information from other services in parallel\n\nAllowing tools to be defined as async def would enable developers to:\n\t•\tSeamlessly integrate StrandsAgents into async applications without blocking the event loop\n\t•\tCompose multiple async tools in parallel using asyncio.gather\n\t•\tImprove responsiveness and scalability in production environments\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "tan-z-tan",
      "author_type": "User",
      "created_at": "2025-05-26T07:31:41Z",
      "updated_at": "2025-06-13T17:11:27Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/116/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/116",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/116",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:48.708625",
      "comments": [
        {
          "author": "kandakji",
          "body": "+1",
          "created_at": "2025-05-26T12:48:53Z"
        },
        {
          "author": "awsarron",
          "body": "Thank you for opening this feature request @tan-z-tan.\n\nThis is something that the team is actively thinking about. https://github.com/strands-agents/sdk-python/issues/83 is a little related as well so tagging that here.",
          "created_at": "2025-05-26T17:10:23Z"
        },
        {
          "author": "ayoubak141",
          "body": "# +1",
          "created_at": "2025-05-27T17:57:04Z"
        },
        {
          "author": "AshuJoshi",
          "body": "# Notes on Async support for Tools in Strands\n\nA brief write up on the unsystematic hacking/patching to support `async` support for tool invocation in the Strands Agents Python SDK. It covers the incremental patches applied, the challenges encountered, the final outcome. Also, outlined is a comparis",
          "created_at": "2025-06-13T17:11:27Z"
        }
      ]
    },
    {
      "issue_number": 167,
      "title": "[BUG] Tool response truncation occurs silently",
      "body": "### Problem Statement\n\nTurns out some of my research tools have been unusable for my agent and I had no idea. I didn't discover this until I started dumping agent.messages to disk for review and noticed `The tool result was too large!` in replace of the tool response. Examining the code, it's not clear that even if I did enable debug logging that this  behavior would be obvious to me during development. Even if it was, there is no mechanism today to handle this situation dynamically at runtime\n\n### Proposed Solution\n\nI don't have a solution in mind but wanted to start with this issue for conversation\n\n### Use Case\n\nI have research tools that browse the internet/read documentation pages/etc. The content is dynamic and not something I control and could be a large amount of content\n\n\n\n### Alternatives Solutions\n\nAs a workaround I can add pagination to my tool or use an llm to summarize the content.\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "prestomation",
      "author_type": "User",
      "created_at": "2025-06-03T04:08:39Z",
      "updated_at": "2025-06-13T14:27:34Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/167/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "poshinchen"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/167",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/167",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:48.965090",
      "comments": [
        {
          "author": "zastrowm",
          "body": "This is currently being done here: https://github.com/strands-agents/sdk-python/blob/8ffe24b44b90c015282845876c219b5b375baef7/src/strands/event_loop/message_processor.py#L159\n\nWe think this should be:\n\n - [x] Part of the [context management](https://strandsagents.com/latest/user-guide/concepts/agent",
          "created_at": "2025-06-05T18:37:04Z"
        },
        {
          "author": "Unshure",
          "body": "Hi @prestomation , wanted to point you toward this issue: https://github.com/strands-agents/sdk-python/issues/152#issuecomment-2945637950\n\nThere was an infinite loop bug found in the implementation of the `toolResult` truncation logic. As a part of that fix, we plan to move this to the context manag",
          "created_at": "2025-06-06T19:53:43Z"
        },
        {
          "author": "poshinchen",
          "body": "Change has been merged, user will be able to use `should_truncate_results=False` to disable truncating the tool result in the next PyPI release.",
          "created_at": "2025-06-13T14:27:23Z"
        }
      ]
    },
    {
      "issue_number": 152,
      "title": "[BUG] RecursionError + \"input length and `max_tokens` exceed context limit: 142422 + 64000 > 204658\"",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.0\n\n### Python Version\n\n3.10\n\n### Operating System\n\nAmazon Linux 2\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n# RecursionError: maximum recursion depth exceeded\n\n## Error Description\nWhen running the Strands agent, I'm encountering a context window overflow error followed by a recursion error.\n\n## Error Details\nThe primary error is a `ContextWindowOverflowException` with the following details:\n```\ninput length and `max_tokens` exceed context limit: 142422 + 64000 > 204658\n```\n\nThis indicates that the total tokens (input + max_tokens) exceeds the model's context window limit of 204,658 tokens.\n\n## Full Error Trace\n```python\nTraceback (most recent call last):\n  # ... [previous trace details]\n  \nstrands.types.exceptions.ContextWindowOverflowException: An error occurred (validationException) when calling the ConverseStream operation: The model returned the following errors: input length and `max_tokens` exceed context limit: 142422 + 64000 > 204658, decrease input length or `max_tokens` and try again\n```\n\nThis is followed by a recursion error while handling the initial exception:\n```python\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"XXX/.venv/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 220, in event_loop_cycle\n    return _handle_tool_execution(\n  File \"XXX/.venv/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 428, in _handle_tool_execution\n    return recurse_event_loop(\n  File \"XXX/.venv/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 305, in recurse_event_loop\n    ) = event_loop_cycle(**kwargs)\n  File \"XXX/.venv/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 163, in event_loop_cycle\n    return handle_input_too_long_error(\n  File \"XXX/.venv/lib/python3.10/site-packages/strands/event_loop/error_handler.py\", line 108, in handle_input_too_long_error\n\n  File \"XXX/.venv/lib/python3.10/site-packages/botocore/validate.py\", line 213, in _validate\n    getattr(self, f'_validate_{shape.type_name}')(\n  File \"XXX/.venv/lib/python3.10/site-packages/botocore/validate.py\", line 54, in _on_passes_type_check\n    return func(self, param, shape, errors, name)\n  File \"XXX/.venv/lib/python3.10/site-packages/botocore/validate.py\", line 282, in _validate_structure\n    self._validate(\n  File \"XXX/.venv/lib/python3.10/site-packages/botocore/validate.py\", line 209, in _validate\n    special_validator = self._check_special_validation_cases(shape)\n  File \"XXX/.venv/lib/python3.10/site-packages/botocore/validate.py\", line 203, in _check_special_validation_cases\n    if is_json_value_header(shape):\nRecursionError: maximum recursion depth exceeded\n```\n\n## Environment Details\n- Python version: 3.10\n- Package: Strands\n- Running in virtual environment\n\n## Question\nHas anyone encountered this issue and found a solution? I'm particularly interested in best practices for handling large inputs with the Strands agent.\n\n---\nPlease let me know if you need any additional information or clarification.\n\n### Expected Behavior\n\nRecursion length should be handled. \n\n### Actual Behavior\n\nFailed due to - RecursionError: maximum recursion depth exceeded\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "gargshilpi22",
      "author_type": "User",
      "created_at": "2025-05-30T18:15:27Z",
      "updated_at": "2025-06-13T14:24:39Z",
      "closed_at": "2025-06-13T14:24:39Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/152/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "poshinchen"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/152",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/152",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:49.195065",
      "comments": [
        {
          "author": "Unshure",
          "body": "Hi @gargshilpi22, thanks for reporting this bug! Taking a look into it!",
          "created_at": "2025-06-03T22:34:35Z"
        },
        {
          "author": "Unshure",
          "body": "I saw the [pull request that you created for this issue](https://github.com/strands-agents/sdk-python/pull/164), and I wanted to point you to the logic in our `Agent` class where we are calling `reduce_context` on the conversation_manager: https://github.com/strands-agents/sdk-python/blob/main/src/s",
          "created_at": "2025-06-04T00:37:30Z"
        },
        {
          "author": "ForeverZyh",
          "body": "Hi @Unshure , to my understanding, the issue is in [`event_loop_cycle`](https://github.com/strands-agents/sdk-python/blob/8ffe24b44b90c015282845876c219b5b375baef7/src/strands/event_loop/event_loop.py#L53), the `ContextWindowOverflowException` cannot be handled by `handle_input_too_long_error`, but w",
          "created_at": "2025-06-05T18:37:45Z"
        },
        {
          "author": "Unshure",
          "body": "Ahh, thanks for the clarification! Yes, this is definitely a bug in our `handle_input_too_long_error` method.\n\nI think what is happening is that during a long conversation, the agent's conversation fills up to the point where its right on the edge of the model's conversation context limit. At this p",
          "created_at": "2025-06-06T19:52:22Z"
        },
        {
          "author": "poshinchen",
          "body": "Hi, we have merged the fix and will release it in the next PyPI release.",
          "created_at": "2025-06-13T14:24:39Z"
        }
      ]
    },
    {
      "issue_number": 196,
      "title": "[FEATURE] LlamaFirewall support in Strands SDK",
      "body": "### Problem Statement\n\nhttps://github.com/meta-llama/PurpleLlama/tree/main/LlamaFirewall is a comprehensive suite for guarding inputs and outputs at every step of an Agent loop.\n\n### Proposed Solution\n\nAllow customers to use LlamaFirewall, similar to how we support Guardrails.\n\n### Use Case\n\nMinimize the risk of prompt injection, insecure code generation (e.g. for python repl tools), etc.\n\n### Alternatives Solutions\n\nContinue support only Bedrock Guardrails\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "theagenticguy",
      "author_type": "User",
      "created_at": "2025-06-09T22:54:48Z",
      "updated_at": "2025-06-13T10:50:29Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/196/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/196",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/196",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:49.408542",
      "comments": [
        {
          "author": "akingscote",
          "body": "[NemoGuardrails ](https://github.com/NVIDIA/NeMo-Guardrails) and [Guardrails AI](https://www.guardrailsai.com/) support would also be great. I assume the expectation is to manually add these checks in ourselves for now. It would be good if there were some examples for doing that",
          "created_at": "2025-06-13T10:50:29Z"
        }
      ]
    },
    {
      "issue_number": 216,
      "title": "[BUG] 0.1.7 Pydantic @tool parameter regression",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.7\n\n### Python Version\n\n3.13.2\n\n### Operating System\n\nmacOS (Also Lambda)\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Install strands-agents version 0.1.7\n\n2. run the below in an index.py\n\n```\nfrom pydantic import BaseModel\nfrom strands import Agent, tool, models\n\n\nclass StoryboardEntry(BaseModel):\n    sceneIndex: int\n    sceneDescription: str\n    sceneType: str\n\n\n@tool\ndef save_full_storyboard(storyboard_data: StoryboardEntry):\n    print(storyboard_data)\n    return \"done\"\n\n\nbedrock_model = models.BedrockModel(\n    model=\"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    max_tokens=40000,\n    region_name=\"us-west-2\"\n)\n\nagent = Agent(\n        model=bedrock_model,\n        tools=[save_full_storyboard]\n    )\n\nagent(\"Your task is to generate a children's novel storyboard scene\")\n```\n\n\n### Expected Behavior\n\nPydantic types can be used as method parameter.\n\n### Actual Behavior\n\n\nTool error: \n\n```\nbotocore.exceptions.EventStreamError: An error occurred (validationException) when calling the ConverseStream operation: The model returned the following errors: tools.0.custom.input_schema: JSON schema is invalid. It must match JSON Schema draft 2020-12 (https://json-schema.org/draft/2020-12). Learn more about tool use at https://docs.anthropic.com/en/docs/tool-use.\n```\n\nFull stacktrace \n\n```\nTraceback (most recent call last):\n  File \"/Users/joshtoth/dev/strands-test/index.py\", line 29, in <module>\n    agent(\"Your task is to generate a childrens novel storyboard\")\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 358, in __call__\n    result = self._run_loop(prompt, kwargs)\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 462, in _run_loop\n    return self._execute_event_loop_cycle(invocation_callback_handler, kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 490, in _execute_event_loop_cycle\n    stop_reason, message, metrics, state = event_loop_cycle(\n                                           ~~~~~~~~~~~~~~~~^\n        model=model,\n        ^^^^^^^^^^^^\n    ...<9 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ~~~~~~~~~~~~~~~^\n        model,\n        ^^^^^^\n    ...<4 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/models/bedrock.py\", line 369, in stream\n    raise e\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/strands/models/bedrock.py\", line 331, in stream\n    for chunk in response[\"stream\"]:\n                 ~~~~~~~~^^^^^^^^^^\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/botocore/eventstream.py\", line 592, in __iter__\n    parsed_event = self._parse_event(event)\n  File \"/Users/joshtoth/dev/strands-test/.venv/lib/python3.13/site-packages/botocore/eventstream.py\", line 608, in _parse_event\n    raise EventStreamError(parsed_response, self._operation_name)\nbotocore.exceptions.EventStreamError: An error occurred (validationException) when calling the ConverseStream operation: The model returned the following errors: tools.0.custom.input_schema: JSON schema is invalid. It must match JSON Schema draft 2020-12 (https://json-schema.org/draft/2020-12). Learn more about tool use at https://docs.anthropic.com/en/docs/tool-use.\n```\n\n### Additional Context\n\n3. Either change the method to just use a 'str' or change back to version 0.1.6 and it works again.\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "JoshuaToth",
      "author_type": "User",
      "created_at": "2025-06-13T03:19:14Z",
      "updated_at": "2025-06-13T03:47:36Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/216/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/216",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/216",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:49.604395",
      "comments": []
    },
    {
      "issue_number": 64,
      "title": "[FEATURE] Swarm multi-agent pattern",
      "body": "### Problem Statement\n\nHi, it seems that maybe the only multi-agent pattern available is the \"supervisor\" pattern, where control is always returned to the calling agent.\n\nIs the swarm multi-agent pattern possible currently? If not, I'd like to add that as a feature request.\n\n### Proposed Solution\n\nAllow control to pass to another agent who can then respond to the user directly, or pass to another agent (without needing to route back to a supervisor)\n\n### Use Case\n\nCan reduce LLM calls for tasks that require multiple agents but don't require central planning via supervisor\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "austinmw",
      "author_type": "User",
      "created_at": "2025-05-20T21:25:23Z",
      "updated_at": "2025-06-13T03:33:03Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/64/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/64",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/64",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:49.604420",
      "comments": [
        {
          "author": "awsarron",
          "body": "Hi @austinmw, thank you for your feedback.\n\nDoes https://strandsagents.com/0.1.x/user-guide/concepts/multi-agent/swarm/ help?",
          "created_at": "2025-05-21T04:56:55Z"
        },
        {
          "author": "austinmw",
          "body": "Hey, thanks for pointing me to this, didn't see it before.\n\nI noticed that it's a bit different from what I expected — I was expecting it to work similar to the langgraph-swarm repo where an entry point agent transfers control to a sub-agent (which may have its own tools), who can then answer direct",
          "created_at": "2025-05-22T20:46:16Z"
        },
        {
          "author": "austinmw",
          "body": "@awsarron Think I found a bug:\nhttps://github.com/strands-agents/tools/issues/27",
          "created_at": "2025-05-22T20:54:18Z"
        },
        {
          "author": "awsarron",
          "body": "We have created https://github.com/strands-agents/sdk-python/issues/214 to encompass several multi-agent features. This task is part of that epic.",
          "created_at": "2025-06-13T03:33:03Z"
        }
      ]
    },
    {
      "issue_number": 135,
      "title": "[FEATURE] Adding Subgraph Creation and Graph Visualization",
      "body": "### Problem Statement\n\nwe believe that the addition of subgraph and graph visualization features would significantly enhance the user experience, especially for developers working with large, modular, or nested workflows.\n\nWe are requesting that AWS Strands incorporate features similar to those found in LangGraph, such as:\n\n* Graph visualization (e.g., visual representation of nodes and edges)\n* Subgraph support (modular components that can be reused and nested within larger workflows)\n* Interactive editing and debugging of graph structures (Optional)\n* Export / import of graph definitions for version control and collaboration (Optional)\n\n\n### Proposed Solution\n\nagent.tool.subgraph()\nagent.tool.get_graph()\n\nagent.tool.get_graph().draw_mermaid()\nagent.tool.get_graph().draw_png()\nagent.tool.subgraph().get_graph().draw_mermaid()\nagent.tool.subgraph().get_graph().draw_png()\n\n### Use Case\n\nHere are some scenarios where subgraph and graph visualization would be beneficial:\n\n* Complex workflows: Visualizing and debugging workflows with multiple nested or conditional steps.\n* Modular development: Reusing and testing subgraphs across different workflows.\n* Collaboration: Sharing and reviewing graph structures with team members.\n* Training and documentation: Creating visual guides or documentation for complex logic.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "alfredcs",
      "author_type": "User",
      "created_at": "2025-05-28T17:28:04Z",
      "updated_at": "2025-06-13T03:32:34Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/135/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/135",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/135",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:49.814061",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thank you for your feedback @alfredcs. The team is taking a holistic look at multi-agent orchestration now and will report back with updates soon.",
          "created_at": "2025-06-10T08:19:34Z"
        },
        {
          "author": "awsarron",
          "body": "We have created https://github.com/strands-agents/sdk-python/issues/214 to encompass several multi-agent features. This task is part of that epic.",
          "created_at": "2025-06-13T03:32:34Z"
        }
      ]
    },
    {
      "issue_number": 36,
      "title": "[FEATURE] Pause and resume a workflow",
      "body": "### Problem Statement\n\nI am looking for a feature where I can pause at a certain step in a multi agent orchestration (for example to take human feedback) and then resume at a later time. I did not find a way to do this with strands. This feature is also required for restart ability after a workflow fails at a certain agent. In that case would like restart from where the workflow failed instead of staring from beginning\n\n### Proposed Solution\n\nNone\n\n### Use Case\n\nThis would help with human feedback and restartability\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "rajib76",
      "author_type": "User",
      "created_at": "2025-05-18T06:26:13Z",
      "updated_at": "2025-06-13T03:31:30Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/36/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/36",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/36",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T00:51:50.019838",
      "comments": [
        {
          "author": "AutoJunjie",
          "body": "not sure if this is what you want：https://strandsagents.com/0.1.x/user-guide/concepts/multi-agent/workflow/#:~:text=persistent%20state%20management",
          "created_at": "2025-05-18T08:00:05Z"
        },
        {
          "author": "rajib76",
          "body": "I have seen this but this does not address the feature I am talking about ",
          "created_at": "2025-05-18T14:02:02Z"
        },
        {
          "author": "zastrowm",
          "body": "Hi @rajib76 - do you have an example code sample of what you'd like to suspend/resume?  That would help us better determine requirements",
          "created_at": "2025-05-20T16:39:11Z"
        },
        {
          "author": "rajib76",
          "body": "Here is the scenario.\n\nLets say I have three agents, first one does task 1, 2nd one does task 2 and 3rd task 3. When I run this flow, agent 1 and 2 runs successfully, but agent 3 fails. My support team looks at the problem, finds a solution and fixes it. But since I ran agent 1 and 2 successfully, I",
          "created_at": "2025-05-25T15:12:50Z"
        },
        {
          "author": "mrityunjayshukla",
          "body": "Implementing a **\"resume from failure\"** capability could be valuable—particularly in cases of crashes, unexpected termination, or other unintended failures during an agent’s execution. @zastrowm, what are your thoughts on this?\n\nThe functional requirements would be similar to **resuming a failed wo",
          "created_at": "2025-06-02T07:52:09Z"
        }
      ]
    },
    {
      "issue_number": 204,
      "title": "[FEATURE] Support Human-in-the-Loop (HIL) capabilities",
      "body": "### Problem Statement\n\nConsider to provide Human-in-the-Loop (HIL) capabilities to enable human intervention at any point during execution\n\n### Proposed Solution\n\nEnhancement on existing mechanism that could be used to implement HIL patterns:\n\n#### Callback Handler System\nThrough the callback handler system. The Agent class accepts a callback_handler parameter that receives events throughout execution and processes events during the event loop cycle.\n\n#### Tool-Based Intervention Points\nThrough custom tools that can pause execution and request human input. The tool system supports custom Python functions decorated with @tool, and tools can access the agent context through parameter injection.\n\n#### Streaming Interface for Real-time Monitoring\nThrough stream_async() that yields events as they occur. This could enable real-time monitoring and intervention, though it would require custom implementation to pause execution.\n\n#### Request State Management\nThe event loop maintains a request_state that can be modified during execution in event loop. A custom implementation could use this to signal when human intervention is needed.\n\n### Use Case\n\nProvide robust mechanisms for pausing workflows, collecting human input, and resuming execution with the provided feedback or modifications, which are common cases in regulation impose and data sensitive industries, e.g. Finance\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "yike5460",
      "author_type": "User",
      "created_at": "2025-06-11T09:37:03Z",
      "updated_at": "2025-06-13T03:30:08Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/204/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/204",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/204",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:23:31.001584",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thank you for your feedback @yike5460. We have created https://github.com/strands-agents/sdk-python/issues/214 to encompass several multi-agent and return of control (HIL) features. This task is part of that epic.",
          "created_at": "2025-06-13T03:30:08Z"
        }
      ]
    },
    {
      "issue_number": 214,
      "title": "[FEATURE] Multi-Agent Primitives",
      "body": "### Problem Statement\n\nStrands builders are increasingly asking for enhanced multi-agent capabilities that go beyond our current tool-based approach. Based on community feedback and customer requests, developers want:\n\n- **First-Class Multi-Agent Patterns**: Builders want native SDK support for common coordination patterns like hierarchical delegation, autonomous collaboration, and deterministic workflows\n- **Seamless Agent Composition**: The community is asking for the ability to easily combine different coordination styles - mixing autonomous swarms with deterministic graphs, nesting patterns within each other\n- **Simplified Multi-Agent APIs**: Developers want intuitive interfaces that make complex multi-agent systems as easy to build as single-agent applications\n- **Better State Management**: Requests for built-in persistence and state resumption capabilities that work seamlessly across multi-agent scenarios\n- **Native Agent Orchestration**: Builders want direct control over agent lifecycle, tool injection, and coordination without the overhead of tool-level abstractions\n\n### Proposed Solution\n\nIn response to builder requests, we propose introducing **four core multi-agent orchestration primitives** as top-level SDK concepts that address the complete spectrum of coordination patterns developers are asking for.\n\n#### **1. Agents-as-Tools**\nSpecialized agents provided as tools to supervisor agents, enabling the hierarchical delegation patterns.\n\n```python\nfrom strands import Agent\n\n# Create specialized agents\nresearch_assistant = Agent(\n    name=\"research_assistant\", \n    description=\"Use this agent to perform deep research on any topic.\",\n    system_prompt=\"You are a specialized research assistant with access to web search and analysis tools.\",\n    tools=[web_search, http_request, current_time, memory]\n)\n\nproduct_assistant = Agent(\n    name=\"product_assistant\",\n    description=\"Use this agent for product recommendations and comparisons.\", \n    system_prompt=\"You are a product specialist who helps with recommendations.\",\n    tools=[product_search, price_compare, review_analyzer]\n)\n\ntravel_assistant = Agent(\n    name=\"travel_assistant\",\n    description=\"Use this agent for travel planning and bookings.\",\n    system_prompt=\"You are a travel planning specialist.\",\n    tools=[flight_search, hotel_search, weather_check]\n)\n\n# Orchestrator agent coordinates specialists\norchestrator = Agent(\n    name=\"travel_coordinator\",\n    tools=[research_assistant, product_assistant, travel_assistant]\n)\n\n# Natural delegation through tool calls\nresult = orchestrator(\"I need to plan a business trip to Amsterdam on August 10. Research the city, find good hotels, and book flights.\")\n```\n\n#### **2. Handoffs**\nStructured agent-to-agent and agent-to-user communication through injected coordination tools that enable the explicit control transfer.\n\n```python\nfrom strands import Agent\nfrom strands.multi_agent import handoff_to_agent, get_swarm_context, handoff_to_user\n\n# Agents automatically receive coordination tools\nsales_agent = Agent(\n    name=\"sales\",\n    system_prompt=\"Handle initial customer inquiries and qualify leads.\",\n    tools=[crm_lookup, handoff_to_agent, handoff_to_user]\n)\n\ntechnical_agent = Agent(\n    name=\"technical\", \n    system_prompt=\"Provide technical support and troubleshooting.\",\n    tools=[knowledge_base, system_check, handoff_to_agent, handoff_to_user]\n)\n\n# Agents can hand off with context preservation\n# Sales agent handling inquiry:\nhandoff_to_agent(\n    target_agent=\"technical\",\n    message=\"Customer needs help with API integration error\",\n    context={\n        \"customer_id\": \"12345\",\n        \"issue_type\": \"integration\",\n        \"priority\": \"high\"\n    }\n)\n```\n\n#### **3. Swarms**\nSelf-organizing collaborative agent teams with shared working memory.\n\n```python\nfrom strands import Agent\nfrom strands.multi_agent import Swarm\n\n# Create agents with different specializations\nresearcher = Agent(\n    name=\"researcher\",\n    system_prompt=\"You research topics thoroughly using web search.\",\n    tools=[web_search, memory]\n)\n\nanalyst = Agent(\n    name=\"analyst\", \n    system_prompt=\"You analyze data and create insights.\",\n    tools=[calculator, data_processor, memory]\n)\n\nwriter = Agent(\n    name=\"writer\",\n    system_prompt=\"You write comprehensive reports based on research and analysis.\",\n    tools=[file_write, document_formatter, memory]\n)\n\n# Swarm automatically injects coordination tools\nmarket_research_team = Swarm(\n    agents=[researcher, analyst, writer],\n)\n\n# Agents coordinate autonomously to complete the task\nresults = await market_research_team.execute(\n    \"Analyze the current AI agent market trends and create a comprehensive report\"\n)\n\n# Check coordination summary\nsummary = market_research_team.get_swarm_summary()\nprint(f\"Agents used: {' → '.join(summary['swarm_history'])}\")\nprint(f\"Status: {summary['status']}\")\n```\n\n#### **4. Graphs**\nDeterministic workflow orchestration with conditional execution paths for structured control over multi-agent orchestration.\n\n```python\nfrom strands import Agent\nfrom strands.multi_agent import GraphBuilder\n\n# Create specialized agents\nanalyzer_agent = Agent(\n    name=\"analyzer\",\n    system_prompt=\"Analyze customer requests and categorize them.\",\n    tools=[text_classifier, sentiment_analyzer]\n)\n\nai_processor = Agent(\n    name=\"ai_processor\", \n    system_prompt=\"Handle routine requests automatically.\",\n    tools=[knowledge_base, auto_responder]\n)\n\ndef get_human_input(request):\n    \"\"\"Function for human escalation\"\"\"\n    return {\"requires_human\": True, \"escalated_request\": request}\n\ndef is_approved(analysis_result):\n    \"\"\"Condition function for routing\"\"\"\n    return analysis_result.get(\"confidence\", 0) > 0.8\n\ndef is_critical(analysis_result):\n    \"\"\"Condition function for critical cases\"\"\"\n    return \"urgent\" in analysis_result.get(\"categories\", [])\n\n# Build deterministic workflow\nbuilder = GraphBuilder()\nbuilder.add_node(analyzer_agent, \"analyze\")\nbuilder.add_node(ai_processor, \"ai_processor\")\nbuilder.add_node(get_human_input, \"manual_processor\")\n\n# Define conditional edges\nbuilder.add_edge(\"analyze\", \"ai_processor\", condition=is_approved)\nbuilder.add_edge(\"analyze\", \"manual_processor\", condition=is_critical)\nbuilder.set_entry_point(\"analyze\")\n\ncustomer_support_graph = builder.build()\n\n# Execute with deterministic routing\nresults = await customer_support_graph.execute(\n    \"Please refund my order #12345, it was damaged during shipping\"\n)\n```\n\n#### **Advanced Composability**\nThe primitives naturally compose to handle complex scenarios builders envision:\n\n```python\n# Swarm of graphs - each research area has its own workflow\nresearch_workflows = [\n    create_market_analysis_graph(),  # type is strands.multi_agent.Graph\n    create_competitor_analysis_graph(), \n    create_trend_analysis_graph()\n]\n\nanalysis_swarm = Swarm(\n    research_workflows,  # Graphs as swarm members\n)\n\n# Graph with swarm nodes - structured workflow with collaborative stages\ncontent_pipeline = GraphBuilder()\ncontent_pipeline.add_node(research_swarm, \"research_phase\")  # research_swarm type is strands.multi_agent.Swarm\ncontent_pipeline.add_node(writing_swarm, \"writing_phase\") \ncontent_pipeline.add_node(review_agent, \"final_review\")\ncontent_pipeline.add_edge(\"research_phase\", \"writing_phase\")\ncontent_pipeline.add_edge(\"writing_phase\", \"final_review\")\ncontent_pipeline.set_entry_point(\"research_phase\")\ncontent_graph = content_pipeline.build()\n\n# Agents-as-tools within swarms - specialists available to team members\ncode_writer = Agent(\n    name=\"code_writer\",\n    system_prompt=\"Write code, test it, debug, iterate until it works! Work in coordination with the code_reviewer to get feedback on your code and implement the feedback until they are satisfied.\",\n    tools=[file_read, file_write, editor, shell, journal]\n)\ncode_reviewer_python = Agent(\n    name=\"code_reviewer_python\",\n    system_prompt=\"Review the code thoroughly and offer suggestions for improvements if there are any. Iterate with the code_writer until you are satisfied with the code that they have written.\",\n    tools=[file_read, python_repl]\n)\ncode_reviewer = Agent(\n    name=\"code_reviewer\",\n    system_prompt=\"Analyze and review the Python code thoroughly.\",\n    tools=[code_reviewer_python, memory]  # code_reviewer_python included as an Agent-as-a-Tool\n)\nspecialist_swarm = Swarm(\n    agents=[code_writer, code_reviewer],  # code_reviewer_python is not included directly in the Swarm, instead it is called by the code_reviewer agent\n)\n```\n\n### Use Case\n\n#### **Agents-as-Tools: Consultation Model**\n• **Specialist Consultation**: Main agent consults domain experts without giving up control\n• **Hierarchical Decision Making**: Senior agent delegates specific analysis to junior specialists\n• **Expert Advisory**: Orchestrator maintains oversight while leveraging specialized knowledge\n• **Tool-like Interaction**: Agents used as sophisticated, intelligent tools with natural language interfaces\n\n#### **Handoffs: Delegation Model**\n• **Sequential Processing**: Work passes from one agent to another in a chain\n• **Context Preservation**: Full state transfer between agents with conversation history\n• **Human-in-the-Loop**: Agents can escalate to humans at decision points\n• **Responsibility Transfer**: Clear handoff of ownership and accountability\n\n#### **Swarms: Self-Organizing Teams**\n• **Autonomous Collaboration**: Agents coordinate themselves without central control\n• **Dynamic Task Distribution**: Work allocation emerges from agent capabilities and availability\n• **Collective Intelligence**: Shared working memory enables emergent problem-solving\n• **Adaptive Coordination**: Team structure adapts to task requirements in real-time\n\n#### **Graphs: Deterministic Orchestration**\n• **Conditional Branching**: Different execution paths based on runtime conditions\n• **Workflow Control**: Explicit definition of agent interaction sequences\n• **Quality Gates**: Validation checkpoints that control flow progression\n• **Parallel Processing**: Multiple agents working simultaneously on independent tasks\n• **Error Handling**: Predefined fallback paths and recovery mechanisms\n\n#### **Composable Patterns**\n• **Nested Coordination**: Swarms within graphs, graphs as swarm members\n• **Multi-Modal Teams**: Combining autonomous and deterministic coordination\n• **Scalable Hierarchies**: Complex organizational structures with multiple coordination layers\n• **Pattern Mixing**: Different coordination styles for different phases of work\n\n### Additional Context\n\n* Optional `name` and `description` parameters will be added to the `Agent` class.\n* The existing `swarm` and `agent_graph` tools interfaces will be enhanced and use the underlying SDK multi-agent primitives. This means that your agents can autonomously create and execute their own swarms and graphs using a model-driven approach.\n\nPlease share your feedback and use cases to help shape multi-agent primitives in Strands Agents.",
      "state": "open",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-06-13T00:01:54Z",
      "updated_at": "2025-06-13T02:46:53Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/214/reactions",
        "total_count": 11,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 11,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/214",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/214",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.415474",
      "comments": []
    },
    {
      "issue_number": 215,
      "title": "[BUG] OpenAIModel with custom base URL fails when using tool messages",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.7\n\n### Python Version\n\n3.13.0\n\n### Operating System\n\nmacOS\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Create a script with the following code:\n\n```\nfrom strands import Agent\nfrom strands.models.openai import OpenAIModel\nfrom strands_tools import calculator\n\nmodel = OpenAIModel(\n        client_args={\n            \"api_key\": \"dummy_key\",\n            \"base_url\": \"http://custom-proxy-endpoint.example.com/api/v1\",\n        },\n        model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        params={\n            \"max_tokens\": 1000,\n            \"temperature\": 0.7,\n        }\n    )\n\nagent = Agent(model=model, tools=[calculator])\nresponse = agent(\"What is 2+2\")\n```\n\n2. Run the script\n3. The agent attempts to use the calculator tool but fails when processing the response\n\n### Expected Behavior\n\nThe agent should successfully use the calculator tool and return the result.\n\n### Actual Behavior\n\nThe script fails with a detailed error trace when the agent tries to use the calculator tool:\n\nI can solve this simple arithmetic problem for you using the calculator tool.\nTool #1: calculator\nTraceback (most recent call last):\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 220, in event_loop_cycle\n    return _handle_tool_execution(\n        stop_reason,\n    ...<12 lines>...\n        kwargs,\n    )\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 428, in _handle_tool_execution\n    return recurse_event_loop(\n        model=model,\n    ...<5 lines>...\n        **kwargs,\n    )\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 305, in recurse_event_loop\n    ) = event_loop_cycle(**kwargs)\n        ~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ~~~~~~~~~~~~~~~^\n        model,\n        ^^^^^^\n    ...<4 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/path/to/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/path/to/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/path/to/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/path/to/site-packages/strands/models/openai.py\", line 89, in stream\n    response = self.client.chat.completions.create(**request)\n  File \"/path/to/site-packages/openai/_utils/_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n  File \"/path/to/site-packages/openai/resources/chat/completions/completions.py\", line 925, in create\n    return self._post(\n           ~~~~~~~~~~^\n        \"/chat/completions\",\n        ^^^^^^^^^^^^^^^^^^^^\n    ...<43 lines>...\n        stream_cls=Stream[ChatCompletionChunk],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/path/to/site-packages/openai/_base_client.py\", line 1242, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/path/to/site-packages/openai/_base_client.py\", line 1037, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.BadRequestError: [{'type': 'literal_error', 'loc': ('body', 'messages', 2, 'SystemMessage', 'role'), 'msg': \"Input should be 'system'\", 'input': 'tool', 'ctx': {'expected': \"'system'\"}}, {'type': 'string_type', 'loc': ('body', 'messages', 2, 'SystemMessage', 'content'), 'msg': 'Input should be a valid string', 'input': [{'text': 'Result: 4', 'type': 'text'}]}, {'type': 'literal_error', 'loc': ('body', 'messages', 2, 'UserMessage', 'role'), 'msg': \"Input should be 'user'\", 'input': 'tool', 'ctx': {'expected': \"'user'\"}}, {'type': 'literal_error', 'loc': ('body', 'messages', 2, 'AssistantMessage', 'role'), 'msg': \"Input should be 'assistant'\", 'input': 'tool', 'ctx': {'expected': \"'assistant'\"}}, {'type': 'string_type', 'loc': ('body', 'messages', 2, 'ToolMessage', 'content'), 'msg': 'Input should be a valid string', 'input': [{'text': 'Result: 4', 'type': 'text'}]}]\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/path/to/sdk-python/baseurl.py\", line 19, in <module>\n    response = agent(\"What is 2+2\")\n  File \"/path/to/site-packages/strands/agent/agent.py\", line 358, in __call__\n    result = self._run_loop(prompt, kwargs)\n  File \"/path/to/site-packages/strands/agent/agent.py\", line 462, in _run_loop\n    return self._execute_event_loop_cycle(invocation_callback_handler, kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/path/to/site-packages/strands/agent/agent.py\", line 490, in _execute_event_loop_cycle\n    stop_reason, message, metrics, state = event_loop_cycle(\n                                           ~~~~~~~~~~~~~~~~^\n        model=model,\n        ^^^^^^^^^^^^\n    ...<9 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/path/to/site-packages/strands/event_loop/event_loop.py\", line 258, in event_loop_cycle\n    raise EventLoopException(e, kwargs[\"request_state\"]) from e\nstrands.types.exceptions.EventLoopException: [{'type': 'literal_error', 'loc': ('body', 'messages', 2, 'SystemMessage', 'role'), 'msg': \"Input should be 'system'\", 'input': 'tool', 'ctx': {'expected': \"'system'\"}}, {'type': 'string_type', 'loc': ('body', 'messages', 2, 'SystemMessage', 'content'), 'msg': 'Input should be a valid string', 'input': [{'text': 'Result: 4', 'type': 'text'}]}, {'type': 'literal_error', 'loc': ('body', 'messages', 2, 'UserMessage', 'role'), 'msg': \"Input should be 'user'\", 'input': 'tool', 'ctx': {'expected': \"'user'\"}}, {'type': 'literal_error', 'loc': ('body', 'messages', 2, 'AssistantMessage', 'role'), 'msg': \"Input should be 'assistant'\", 'input': 'tool', 'ctx': {'expected': \"'assistant'\"}}, {'type': 'string_type', 'loc': ('body', 'messages', 2, 'ToolMessage', 'content'), 'msg': 'Input should be a valid string', 'input': [{'text': 'Result: 4', 'type': 'text'}]}]\n\nThe error clearly shows that the agent successfully identifies it should use the calculator tool, but fails when trying to process the \ntool's response. The key validation errors are:\n\n1. The custom endpoint expects specific role values ('system', 'user', 'assistant') but receives 'tool'\n2. The content format is incorrect - it expects a string but receives a structured object with [{'text': 'Result: 4', 'type': 'text'}]\n\nThis indicates a format mismatch between how the Strands SDK formats tool messages and what the custom API endpoint expects.\n\n\n### Additional Context\n\nThis appears to be a compatibility issue between:\n1. The Strands SDK's OpenAI model implementation (which formats messages in a specific way)\n2. The custom proxy endpoint (which expects a different format)\n\nI'm connecting to a Claude model through an OpenAI-compatible base URL due to customer environment constraints which require all model \ninvocations to go through their custom endpoint. While using BedrockModel directly would be preferable, this isn't possible in my \nenvironment.\n\nThe proxy endpoint appears to be validating the message format strictly according to OpenAI's API schema, but the Strands SDK might be \nusing extensions or variations of this format, particularly for tool messages.\n\nI initially thought this was related to issue #136, but that issue was about empty choices in the response, while this is about message \nformat validation.\n\n### Possible Solution\n\n• #136 (OpenAIModel Chat Completion Request errors out)\n• #185 (Handle empty choices in OpenAI model provider)\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "ilove2git",
      "author_type": "User",
      "created_at": "2025-06-13T01:23:06Z",
      "updated_at": "2025-06-13T01:23:06Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/215/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/215",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/215",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.415494",
      "comments": []
    },
    {
      "issue_number": 83,
      "title": "[FEATURE] Implement native async iterator support ",
      "body": "### Problem Statement\n\nThe `Agent` class provides the `stream_async` function that returns an `AsyncIterator`:\n\nhttps://github.com/strands-agents/sdk-python/blob/77f5fa73f62913b19014d7246dd2ef63c34f2551/src/strands/agent/agent.py#L356\n\nThe current `stream_async` implementation calls `_run_loop` and uses threads with a queue to yield streamed data events from the Strands Agents event loop:\n\nhttps://github.com/strands-agents/sdk-python/blob/77f5fa73f62913b19014d7246dd2ef63c34f2551/src/strands/agent/agent.py#L423\n\nhttps://github.com/strands-agents/sdk-python/blob/77f5fa73f62913b19014d7246dd2ef63c34f2551/src/strands/agent/agent.py#L409-L421\n\nThe problem is that this threading implementation doesn't work with Python features like thread local [contextvars](https://docs.python.org/3/library/contextvars.html). Certain Python libraries (e.g. https://github.com/UKGovernmentBEIS/inspect_ai) use thread local context vars and require them to function correctly. The only reasonable solution for correctly supporting concurrency within a single thread is async.\n\nThis issue is to propose, discuss, and refine a true async implementation of the `Agent.stream_async` function and Strands Agent event loop.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\n* Thread local contextvars\n* A more maintainable implementation of async agent requests\n* Allows for future enhancements that enable streamed tool results\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-05-23T01:02:58Z",
      "updated_at": "2025-06-12T21:24:44Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/83/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/83",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/83",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.415501",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Another use case is providing caller control over the lifecycle of an agent request. Right now all events are enqueued eagerly - meaning that if even when callers stop iterating, the agent continues until it hits a natural stopping point.  In theory, an async iterator could/would be pull-based, allo",
          "created_at": "2025-05-23T01:32:19Z"
        },
        {
          "author": "pgrayy",
          "body": "The following is a high level breakdown of the tasks required to achieve true async support:\n\n## Part 1: Core Async Implementation (Est: 7 Days)\n\n- Reimplement `stream_async` as a real async method:\n  - Await the event loop instead of using threads\n  - Modify event loop to yield events individually ",
          "created_at": "2025-06-12T14:01:42Z"
        },
        {
          "author": "pgrayy",
          "body": "## PRs\n* https://github.com/strands-agents/sdk-python/pull/213",
          "created_at": "2025-06-12T21:24:44Z"
        }
      ]
    },
    {
      "issue_number": 58,
      "title": "[TASK] Migrate from hatch to uv for developing/contributing",
      "body": "### Problem Statement\n\nI'm currently implementing #25 and I have had a tough time with the dev experience using hatch.\n\n* I had to install venv's myself.\n* The hatch fmt and hatch run commands weren't very intuitive and hard to debug my lint and test errors.\n* Trying to use mypy outside of hatch resulting in not following the mypy config inside pyproject.toml.\n\n`uv` from Astral fully manages pyproject.toml, manages and installs venv's, installing and managing dependencies and resolution, supports tool configuration, builds, etc. It's also really fast\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nI would have a better developer/contributor experience using `uv`\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "theagenticguy",
      "author_type": "User",
      "created_at": "2025-05-20T14:05:19Z",
      "updated_at": "2025-06-12T20:50:04Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "ready for contribution"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/58/reactions",
        "total_count": 14,
        "+1": 14,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/58",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/58",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.634145",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Hey, thanks for the request! The team is open to switching to `uv` and would gladly accept community contributions to make the switch, as we're not sure when we would be able to get to this ourselves.\n\nIf anyone is interested in picking this up, the requirements would be:\n\n- Update all strands-agent",
          "created_at": "2025-05-20T17:31:56Z"
        },
        {
          "author": "kenliao94",
          "body": "Do I just submit a PR if I am interested in taking on this task? Or is there a process that I need to follow?",
          "created_at": "2025-05-20T22:25:44Z"
        },
        {
          "author": "awsarron",
          "body": "PRs are very welcome! Our contribution guide has some details - https://github.com/strands-agents/sdk-python/blob/main/CONTRIBUTING.md.",
          "created_at": "2025-05-21T04:58:10Z"
        },
        {
          "author": "brianloyal",
          "body": "Took a stab at it as well in #77 ",
          "created_at": "2025-05-21T22:02:31Z"
        },
        {
          "author": "zastrowm",
          "body": "I've been looking at this a bit in my downtime and discussed a bit with the team.\n\nSwitching to UV has benefits, but it's not a replacement for hatch as we initially thought.  It's more of an alternative to PIP and solving some of the venv problems that the team has encountered.  \n\nWe think the bigg",
          "created_at": "2025-06-12T20:50:04Z"
        }
      ]
    },
    {
      "issue_number": 211,
      "title": "[FEATURE] Strands Agents should provide a built-in intent confidence",
      "body": "### Problem Statement\n\nCustomers can use it as a confidence check to choose correct tools.\n\n### Proposed Solution\n\nCustomers can use it as a confidence check to choose correct tools.\n\n### Use Case\n\nSometimes, the agent may pick up a wrong tools. Adding a built-in intent confidence, users can set up threshold to control the tools usage. \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "leecooper007",
      "author_type": "User",
      "created_at": "2025-06-12T18:39:24Z",
      "updated_at": "2025-06-12T18:39:24Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/211/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/211",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/211",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.867090",
      "comments": []
    },
    {
      "issue_number": 198,
      "title": "[FEATURE] Improved MCP DX to prevent common context manager scoping issue",
      "body": "### Problem Statement\n\nCurrently, many users are encountering a common issue with MCP, where the user needs to manage the lifecycle of the connection using a context manager.\n\nThe intended syntax is the following\n```\nwith mcp_client:\n   agent = Agent(tools=mcp_client.list_tools_sync())\n   agent(\"do something\")\n```\n\nHowever, in both #96 and #184 we have seen customers encounter MCPClientInitializationError because they do something like the following which fails because the mcp connection is closed when we exit the `with` statement\n```\nwith mcp_client:\n   agent = Agent(tools=mcp_client.list_tools_sync())\nagent(\"do something\")\n```\n\nWe have enhanced error messaging #175 and documentation https://github.com/strands-agents/docs/pull/81, but customers will still likely encounter this creating a poor initial experience.\n\n### Proposed Solution\n\nI would like to be able to provide an MCP Transport implementation to an Agent class, where the lifecycle of the MCP connection is managed by the Agent, not the user.\n\nFrom the customer's perspective, this would look something like\n\n\n```\nagent = Agent(tools=[mcp_client])\n```\nor \n\n```\nagent=Agent(mcp_clients=[mcp_client])\n```\n\n\nThe mechanism by which the connections are closed is TBD. We should consider things like atexit and and weakref\n\n### Use Case\n\nCustomers would use this to be abel to offload the initialization of the mcp server to the agent class. This would obscure the initialization of the client however, for example\n\n```\nmcp_client = ...\nagent = Agent(tools=[mcp_client]) # initializes client\nmcp_client.get_prompt() # relies on initialization within the Agent class\n```\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "dbschmigelski",
      "author_type": "User",
      "created_at": "2025-06-10T09:30:44Z",
      "updated_at": "2025-06-12T12:52:51Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/198/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/198",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/198",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:46.867112",
      "comments": [
        {
          "author": "zastrowm",
          "body": "@dbschmigelski a couple other callout for consideration:\n\n - Can you pass the client to multiple agents?\n - Can you initialize the client before passing it to an agent?\n\nI think we could support both of these, but it's worth determining if we want to and if so how we might do so.  We should also kee",
          "created_at": "2025-06-10T12:57:16Z"
        },
        {
          "author": "dbschmigelski",
          "body": "@zastrowm 100% agree, a lot to flesh out both for the DX and the underlying implementation. Let's use the \"proposed solution\" as a starting point, but not over index on it.",
          "created_at": "2025-06-10T13:27:09Z"
        },
        {
          "author": "bdastur",
          "body": "Can this also support an Agent interfacing with multiple MCP servers?",
          "created_at": "2025-06-10T22:09:04Z"
        },
        {
          "author": "stuart-aws",
          "body": "Hi @dbschmigelski,\n\nI think you probably want to allow for two scenario's, one where the Agent class entirely controls the MCP client lifecycle and another where it's external.\n\nThe Agent constructor could have an optional `mcp_client_factory` parameter which is a function that returns an array of M",
          "created_at": "2025-06-11T01:10:50Z"
        },
        {
          "author": "dbschmigelski",
          "body": "> Can this also support an Agent interfacing with multiple MCP servers?\n\n@bdastur absolutely, are you having trouble with this at the moment, though? You *should* be able to do that now https://strandsagents.com/latest/user-guide/concepts/tools/mcp-tools/#using-multiple-mcp-servers as at the end of ",
          "created_at": "2025-06-11T11:14:14Z"
        }
      ]
    },
    {
      "issue_number": 206,
      "title": "[FEATURE] Image input support",
      "body": "### Problem Statement\n\nCould you please support image input. In some scenarios, direct image input is needed\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nmulti-modal scenarios\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "xqun3",
      "author_type": "User",
      "created_at": "2025-06-11T15:38:11Z",
      "updated_at": "2025-06-12T08:28:28Z",
      "closed_at": "2025-06-12T08:28:28Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/206/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/206",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/206",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.128769",
      "comments": []
    },
    {
      "issue_number": 208,
      "title": "[FEATURE] Need a UI layer as well",
      "body": "### Problem Statement\n\nChainlit is no longer maintained, would be good for AWS to take over it, It mostly python as well. Good be a great fit with strands.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nEasy to use Python UI for agents.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "jkfnc",
      "author_type": "User",
      "created_at": "2025-06-11T21:19:50Z",
      "updated_at": "2025-06-11T21:19:50Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/208/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/208",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/208",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.128788",
      "comments": []
    },
    {
      "issue_number": 16,
      "title": "[FEATURE] Support for Amazon SageMaker AI endpoints as Model Provider",
      "body": "### Problem Statement\n\nI would like Strands to natively support Amazon SageMaker AI among the model providers.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nDeploy LLMs on Amazon SageMaker AI and use Strands Agents to create AI agents.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "dgallitelli",
      "author_type": "User",
      "created_at": "2025-05-16T20:21:39Z",
      "updated_at": "2025-06-11T14:04:37Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/16/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "mehtarac"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/16",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/16",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.128796",
      "comments": [
        {
          "author": "niklas-palm",
          "body": "Isn't this already supported through LiteLLM? ",
          "created_at": "2025-05-20T13:41:39Z"
        },
        {
          "author": "pgrayy",
          "body": "Left comments on https://github.com/strands-agents/sdk-python/pull/30.",
          "created_at": "2025-05-21T13:15:10Z"
        },
        {
          "author": "pgrayy",
          "body": "> Isn't this already supported through LiteLLM?\n\nYes it is, but there are a few benefits to supporting direct access:\n1. Slight optimization as we avoid the layer of abstraction LiteLLM creates.\n2. Eliminate extra dependencies when users only want to run SageMaker.",
          "created_at": "2025-05-21T13:16:50Z"
        },
        {
          "author": "dgallitelli",
          "body": "> Isn't this already supported through LiteLLM?\n\n@niklas-palm LiteLLM also does have a couple of problems:\n\n1. `sagemaker_chat` provider in LiteLLM does not support SageMaker AI endpoints with Inference Components\n2. both `sagemaker` and `sagemaker_chat` providers in LiteLLM do not support tool call",
          "created_at": "2025-05-22T06:07:55Z"
        },
        {
          "author": "dgallitelli",
          "body": "@niklas-palm FYI: `litellm` seems to have added recently support for tool calling with SageMaker AI. I couldn't find a specific release tag in its doc, however I tested successfully:\n\n```python\nimport litellm\n\nstream = True\npayload = {\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"What is t",
          "created_at": "2025-06-11T14:04:37Z"
        }
      ]
    },
    {
      "issue_number": 129,
      "title": "[EPIC] Implement native async iterator support",
      "body": "This issue represents the tracking item for improving the async support within the SDK.\n\nIn order to implement async iterators natively within the SDK, we'll want to:\n\n - Update the event loop to be implemented via an async iterator\n    - We expect this will require making the event loop a loop instead of recursive\n - Update tools to be allow being invoked asynchronously\n    - Will need to explore whether tools can/should return async iterators  \n - Enable models to return async iterators and update current models\n    - See https://github.com/awslabs/aws-sdk-python for bedrock \n\nAs part of this, we'll also want to make sure that we support and look into:\n\n - Cancellation\n    - Including the possible need for cancellation tokens\n - Async MCP servers\n - AgentResult wrapping\n - Bidirectional streaming\n - Implementing non-async iterators on top of Async-iterators\n\nTesting should include:\n\n - Usage of thread local contextvars",
      "state": "open",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-05-27T19:03:09Z",
      "updated_at": "2025-06-11T14:02:32Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/129/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/129",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/129",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.375270",
      "comments": [
        {
          "author": "pgrayy",
          "body": "Update: We have a POC implemented and are now in the stage of integrating the changes into main. We will also be updating the sub-issues with explicit implementation details and timelines.",
          "created_at": "2025-06-11T14:00:51Z"
        }
      ]
    },
    {
      "issue_number": 90,
      "title": "[FEATURE] Compaction Conversation Manager",
      "body": "### Problem Statement\n\nThe addition of a ConversationManager that can summarize and replace the conversation thus far. Currently, when faced with a ContextWindowOverflowError, the Agent can be configured with a SlidingWindowConversationManager that trims off the oldest messages in the conversation until it fits into the models context window. This leads to the deletion of context from the conversation.\n\n### Proposed Solution\nWhen trying to reduce the context of the conversation history, instead of removing context all-together, instead the Agent can use an LLM to summarize the conversation thus-far, and then use the summarization to replace the history. \n\n1. Create a new `CompactionConversationManager` class\n2. Implement the `reduce_context` function that will call an agent with the compaction prompt and the current messages array. It will overwrite the messages history with the summarized version.\n3. Have this `ConversationManager` use the parent `Agent` model_provider by default, but allow for an optional `system_prompt` override.\n4. The new `ConversationManager` can also take in an `Agent` at initialization time that would be used for summarization instead of the default parent Agent. This allows for the specification of a summarization agent that can use tools as part of the summarization process.\n\n\nConsiderations:\n- This will need to update `reduce_context` abstract method to pass in an `agent: Agent` parameter\n- Tools should be able to be used by the summarization agent override\n- If the messages array is too large to summarize, break it in half by character count, and summarize each part\n\n### Use Case\n\n- If the messages array overflows during conversation, the conversation is summarized and can continue as normal.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-05-23T18:30:46Z",
      "updated_at": "2025-06-10T22:58:40Z",
      "closed_at": "2025-06-10T22:58:40Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/90/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Unshure"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/90",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/90",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.643644",
      "comments": [
        {
          "author": "stefanoamorelli",
          "body": "@Unshure I would find this very useful and agree with this approach. A few comments:\n\n1. Nitpick: `SummarizationConversationManager`/`SummarizingConversationManager` naming sounds more descriptive vs `CompactionConversationManager` (no strong preference here, just a thought);\n2. Do you think it woul",
          "created_at": "2025-05-26T18:20:16Z"
        },
        {
          "author": "Unshure",
          "body": "@stefanoamorelli, to address your comments:\n1. I agree, both of the names you suggested are more descriptive. I'm fine with either of those.\n2. I think these are useful configurations to help adjust the summarization. Lets make sure that the `preserve_recent_messages` take precedence over the `summa",
          "created_at": "2025-05-26T21:29:51Z"
        }
      ]
    },
    {
      "issue_number": 202,
      "title": "[BUG] Concurrent Agent Executions Fail with LiteLLM Provider - [Errno 9] Bad file descriptor",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.7\n\n### Python Version\n\n3.12.7\n\n### Operating System\n\nDebian Linux\n\n### Installation Method\n\nother\n\n### Steps to Reproduce\n\n1. Install Strands with LiteLLM\n```shell\npoetry add \"strands-agents[litellm]\"\n```\n2. Create a simple FastAPI app with one API method\n3. In this method, create Agent with LiteLLMModel\n```python\nmodel = LiteLLMModel(\n    model_id='bedrock/us.anthropic.claude-3-7-sonnet-20250219-v1:0'\n)\nresearcher_agent = Agent(\n    model=model,\n    callback_handler=None\n)\n# use any prompt\nasync for event in researcher_agent.stream_async(\"....\"):\n  if 'message' in event:\n    print(event)\n```\n4. Call FastAPI method simultaneously multiple times to simulate concurrency\n\n\n### Expected Behavior\n\nRequests are processed successfully\n\n### Actual Behavior\n\nAll requests except the very last request fail with the following error:\n```\nGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new\nLiteLLM.Info: If you need to debug this error, use `litellm._turn_on_debug()'.\n\n  File \"/usr/local/lib/python3.12/site-packages/httpcore/_sync/http11.py\", line 334, in __iter__\n    for chunk in self._connection._receive_response_body(**kwargs):\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpcore/_sync/http11.py\", line 203, in _receive_response_body\n    event = self._receive_event(timeout=timeout)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpcore/_sync/http11.py\", line 217, in _receive_event\n    data = self._network_stream.read(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpcore/_backends/sync.py\", line 126, in read\n    with map_exceptions(exc_map):\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/contextlib.py\", line 158, in __exit__\n    self.gen.throw(value)\n  File \"/usr/local/lib/python3.12/site-packages/httpcore/_exceptions.py\", line 14, in map_exceptions\n    raise to_exc(exc) from exc\nhttpcore.ReadError: [Errno 9] Bad file descriptor\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/litellm/litellm_core_utils/streaming_handler.py\", line 1491, in __next__\n    chunk = next(self.completion_stream)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/litellm/llms/bedrock/chat/invoke_handler.py\", line 1484, in iter_bytes\n    for chunk in iterator:\n                 ^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpx/_models.py\", line 897, in iter_bytes\n    for raw_bytes in self.iter_raw():\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpx/_models.py\", line 951, in iter_raw\n    for raw_stream_bytes in self.stream:\n                            ^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpx/_client.py\", line 153, in __iter__\n    for chunk in self._stream:\n                 ^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/httpx/_transports/default.py\", line 126, in __iter__\n    with map_httpcore_exceptions():\n         ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/contextlib.py\", line 158, in __exit__\n    self.gen.throw(value)\n  File \"/usr/local/lib/python3.12/site-packages/httpx/_transports/default.py\", line 118, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\nhttpx.ReadError: [Errno 9] Bad file descriptor\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/workspace/src/strands_api/main.py\", line 83, in conduct_research\n    result = await research(research_params)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/src/strands_api/research.py\", line 79, in research\n    async for event in researcher_agent.stream_async(prompt):\n  File \"/usr/local/lib/python3.12/site-packages/strands/agent/agent.py\", line 435, in stream_async\n    raise item\n  File \"/usr/local/lib/python3.12/site-packages/strands/agent/agent.py\", line 418, in target_callback\n    result = self._run_loop(prompt, kwargs, supplementary_callback_handler=queuing_callback_handler)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/agent/agent.py\", line 462, in _run_loop\n    return self._execute_event_loop_cycle(invocation_callback_handler, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/agent/agent.py\", line 490, in _execute_event_loop_cycle\n    stop_reason, message, metrics, state = event_loop_cycle(\n                                           ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/strands/models/openai.py\", line 96, in stream\n    for event in response:\n                 ^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/litellm/litellm_core_utils/streaming_handler.py\", line 1603, in __next__\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py\", line 2270, in exception_type\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py\", line 2239, in exception_type\n    raise APIConnectionError(\nlitellm.exceptions.APIConnectionError: litellm.APIConnectionError: BedrockException - [Errno 9] Bad file descriptor\n```\n\n### Additional Context\n\nIf I use any other model provider (e.g. Bedrock directly), concurrent requests are handled correctly.\n\n### Possible Solution\n\nMy current workaround is to introduce random delay in the method to minimize the chance of two agents executed simultaneously - even 1 second delay is enough to avoid the error, but this approach is not sustainable.\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "hellhound1988",
      "author_type": "User",
      "created_at": "2025-06-10T20:41:51Z",
      "updated_at": "2025-06-10T20:43:45Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/202/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/202",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/202",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:47.912200",
      "comments": []
    },
    {
      "issue_number": 183,
      "title": "[BUG] Failed to get data source ID: No data sources found for knowledge base INSBJQX888",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.6\n\n### Python Version\n\n3.13\n\n### Operating System\n\nmacOS 15.3.2\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Install Strands\n2. Run the application \n\n### Expected Behavior\n\nI expect the agent to retrieve information from the bedrock knowledge base\n\n### Actual Behavior\n\n`response is {'status': 'error', 'content': [{'text': '❌ Failed to get data source ID: No data sources found for knowledge base INSBJQX4KN'}], 'toolUseId': 'tooluse_memory_402927007'}`\n\n\n### Additional Context\n\nI have the knowledge base already created in Bedrock \n\n![Image](https://github.com/user-attachments/assets/4ed16011-22bd-4730-8e12-8b6759f3e633)\n\nHere's the complete code \n\n```\nimport os\n\nfrom strands import Agent\nfrom strands_tools import http_request\nfrom strands_tools import use_llm, memory\nfrom strands.models import  BedrockModel\n\nSTRANDS_KNOWLEDGE_BASE_ID=os.environ[\"STRANDS_KNOWLEDGE_BASE_ID\"]\nSYSTEM_PROMPT = \"\"\"\nYou are an AI Social Media Post Generation Agent. Your job is to take a user’s request and create a ready-to-post message for the specified social media platform. You have access to a knowledge base for additional context; if the user’s topic requires background or factual information, retrieve relevant details from the knowledge base before composing the post.\n\n──────────────\n### Capabilities\n1. **Multi-Platform**  \n   • The user will specify a target platform (e.g., Twitter, Facebook, LinkedIn, Instagram).  \n   • Adhere to each platform’s best practices and tone (e.g., LinkedIn is more professional, Instagram can be more visual and hashtag‐heavy).\n\n2. **Twitter Character Limit Enforcement**  \n   • If the user requests a Twitter post, ensure the final message does not exceed 280 characters (including spaces and punctuation).  \n   • Use URL shorteners or trim unnecessary words if needed to stay within limits.  \n   • If given a long piece of content, summarize concisely without losing the core message.\n\n3. **Knowledge Base Querying**  \n   • Before drafting, consult the knowledge base for relevant facts, statistics, quotes, or background information about the topic.  \n   • If the user explicitly references the knowledge base (“fetch statistics on X”), gather those details first and weave them into the post.  \n   • If no knowledge base content is needed, you may skip this step and rely on general knowledge.\n\n4. **Tone and Style Adaptation**  \n   • Match the user’s requested tone (e.g., friendly, professional, humorous, motivational).  \n   • Use appropriate hashtags, emojis, or formatting according to platform norms.  \n   • Keep posts engaging, concise, and clear.\n\n──────────────\n### Input Schema\nUsers will send a JSON-like request with fields:\n• `platform`: required.  \n• `topic`: required.  \n• `tone`: if omitted, default to “engaging” and “informal.”  \n• `length`: if “short,” prioritize brevity; if “long,” you may use up to the platform’s maximum.  \n• `useKB`: if true, first query knowledge base for relevant context before writing.\n\n──────────────\n### Output Requirements\n• Return exactly one text string: the post ready for publishing.  \n• Do not wrap the text in quotes or metadata.  \n• Do not include analysis, reasoning, or commentary—only the final post content.  \n• If the platform is X(Twitter), verify the character count ≤ 280. If you exceed 280 characters, revise until it fits.\n\n──────────────\n### Processing Steps\n1. **Validate `platform`**:  \n   - If `platform` is “X(Twitter),” prepare to count characters.  \n   - If unknown, ask the user to specify one of the supported platforms.\n\n2. **Optionally Query Knowledge Base**:  \n   - If `\"useKB\": true` or the topic seems to require extra facts, search the knowledge base for up-to-date information.  \n   - Use only the most relevant 1–2 sentences from the KB to inform your post.\n\n3. **Compose the Post**:  \n   - Apply platform‐specific best practices (e.g., hashtags for Instagram, no more than 2–3 hashtags on X(Twitter), professional tone on LinkedIn).  \n   - Use the user’s requested tone and length.  \n   - For X(Twitter), ensure ≤ 280 characters. Count “https://…” or “@username” properly as part of the character limit.  \n   - For other platforms, respect reasonable length guidelines (e.g., 150–200 words maximum for Facebook or LinkedIn).\n\n4. **Final Check**:  \n   - If X(Twitter): recount characters, revise if needed.  \n   - Ensure the final post reads naturally, is engaging, and accurately reflects the topic.  \n   - Do not mention KB details explicitly; weave them seamlessly into the narrative.\n\n\n\"\"\"\nbedrock_model = BedrockModel(\n    model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    region_name='us-east-1',\n    temperature=0.3,\n    cache_tools='default',\n\n)\n# Create an agent with HTTP capabilities\nweather_agent = Agent(\n    model=bedrock_model,\n    system_prompt=SYSTEM_PROMPT,\n    tools=[use_llm,memory],  # Explicitly enable http_request tool\n)\nresult = weather_agent.tool.memory(action=\"retrieve\",\n                    STRANDS_KNOWLEDGE_BASE_ID=\"INSBJQX4KN\",\n                    query=\"Create a post on the course 'Build A Nanny Booking API' for linkedIn\", min_score=0.4, max_results=9)\nprint(f\"response is {result}\")\n```\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "trey-rosius",
      "author_type": "User",
      "created_at": "2025-06-05T23:23:15Z",
      "updated_at": "2025-06-10T13:25:16Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/183/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/183",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/183",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:49.672631",
      "comments": [
        {
          "author": "mrityunjayshukla",
          "body": "Hi @trey-rosius , did u add any of data sources to your knowledge base? Ref: https://docs.aws.amazon.com/bedrock/latest/userguide/data-source-connectors.html",
          "created_at": "2025-06-09T08:25:13Z"
        },
        {
          "author": "trey-rosius",
          "body": "> Hi [@trey-rosius](https://github.com/trey-rosius) , did u add any of data sources to your knowledge base? Ref: https://docs.aws.amazon.com/bedrock/latest/userguide/data-source-connectors.html\n\nyes i did. Actually, i tried with 2 different knowledge bases. One that's currently in use by another app",
          "created_at": "2025-06-09T08:34:17Z"
        },
        {
          "author": "mrityunjayshukla",
          "body": "can you share output for AWS CLI command `aws bedrock-agent list-knowledge-base-data-sources \\\n  --knowledge-base-id INSBJQX4KN` or for KB Id = `0VAFFPBUTY ` using same AWS credential that agent is using? Just want to confirm that direct API call is able to return the data sources associated with Be",
          "created_at": "2025-06-09T09:27:47Z"
        },
        {
          "author": "trey-rosius",
          "body": "> can you share output for AWS CLI command `aws bedrock-agent list-knowledge-base-data-sources \\ --knowledge-base-id INSBJQX4KN` or for KB Id = `0VAFFPBUTY ` using same AWS credential that agent is using? Just want to confirm that direct API call is able to return the data sources associated with Be",
          "created_at": "2025-06-09T09:32:11Z"
        },
        {
          "author": "mrityunjayshukla",
          "body": "I see. can you explicitly set AWS_REGION = `us-east-1` as env variable and retry once?",
          "created_at": "2025-06-09T09:54:37Z"
        }
      ]
    },
    {
      "issue_number": 184,
      "title": "[FEATURE] Support for stateless MCP Servers",
      "body": "### Problem Statement\n\nOne approach to a scalable MCP server architecture is to have multiple stateless server instances (described [here](https://github.com/modelcontextprotocol/typescript-sdk/tree/main/src/examples#multi-node-deployment)). This means there is no persistent session between client and server. Presently when using Streamable HTTP with the MCP Client provided with Strands Agents throws a MCPClientInitializationError whenever it tries to invoke a tool on a stateless server. \n\n### Proposed Solution\n\nAllow MCPClient to be created in stateless mode.\n\n### Use Case\n\nFor use with highly scalable backend MCP Server infrastructure. \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "stuart-aws",
      "author_type": "User",
      "created_at": "2025-06-06T04:05:50Z",
      "updated_at": "2025-06-10T09:35:02Z",
      "closed_at": "2025-06-10T02:23:52Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/184/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/184",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/184",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:49.882751",
      "comments": [
        {
          "author": "dbschmigelski",
          "body": "Hi, thanks for pointing this out! I am going to mark this as a BUG rather than an enhancement. To help us debug can you provide some information about your system: python version, strands version, mcp version, OS, strands installation method, etc?\n\nCan you also show the test code you are using? A [c",
          "created_at": "2025-06-09T20:17:53Z"
        },
        {
          "author": "stuart-aws",
          "body": "Hi @dbschmigelski, thanks for picking this up. I noticed the [commit](https://github.com/strands-agents/sdk-python/pull/175) you made yesterday and this did in fact relate to the problem I was experiencing.\n\nI misinterpreted the \"the client session is not running\" error message as being related to t",
          "created_at": "2025-06-10T02:23:52Z"
        },
        {
          "author": "dbschmigelski",
          "body": "Thanks for the fast reply @stuart-aws, I opened #198 as this seems to be a common problem. I am hoping we can arrive at a less error prone DX through that issue. If you have any thoughts, positive or negative, your input would be appreciated there, thanks!",
          "created_at": "2025-06-10T09:35:02Z"
        }
      ]
    },
    {
      "issue_number": 194,
      "title": "[FEATURE] Pass tool use id into a `@tool`-decortated tools",
      "body": "### Problem Statement\n\nToday, if we define a module-based tool (that requires `TOOL_SPEC`), the tool use id is passed into the tool as a part of the `tool: ToolUse` parameter.\n\nThis parameter isn't available in a `@tool`-decorated tool, which means it is impossible for a `@tool`-decorated tool to access the same information that's available in the module-based counterpart.\n\n(Originally posted at https://github.com/strands-agents/tools/issues, but I figured this repo is the more appropriate place for this issue)\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\n\n#### Why do I need tool use id?\n\nMy tool needs to write to a global storage in my agent app, preferably indexed with tool use id.\n\n#### Why do I not use module-based tool?\n\nIt is harder to pass a global storage into my tool if it is a module-based tool. )Perhaps this is due to my lack of knowledge when it comes to python modules though!)\n\nWith @tool-decorated, I could do\n```\ndef create_my_ask_human_tool(global_storage: Storage) -> Callable:\n   @tool\n   def my_ask_human_tool():\n       global_storage.add(something)\n\n  return my_ask_human_tool\n\n\ndef create_agent(global_storage: Storage):\n    my_ask_human_tool = create_my_ask_human_tool(global_storage)\n    my_agent = strands.Agent(custom_tools=[my_ask_human_tool])\n```\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "Lou1415926",
      "author_type": "User",
      "created_at": "2025-06-09T20:30:19Z",
      "updated_at": "2025-06-09T20:30:19Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/194/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/194",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/194",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.181402",
      "comments": []
    },
    {
      "issue_number": 139,
      "title": "[BUG] Unable to directly invoke tools with a hyphen with the tool name",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.2\n\n### Python Version\n\n3.12\n\n### Operating System\n\nmacos\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nAdd a tool with a hyphen in the name\n\n```\nfrom strands import Agent, tool\n\n@tool(name=\"example-tool\")\ndef example_tool():\n    return \"done\"\n\nagent = Agent(\n    tools=[example_tool],\n    model=ollama_model,\n)\nagent.tool.example_tool() # doesn't work to call the function\nagent.tool.example-tool() # not valid syntax\n```\n\nNotice that there's no way to directly invoke that tool\n\n### Expected Behavior\n\nThere should be a way to invoke a tool with a hyphen in the name\n\n### Actual Behavior\n\nThere is no way\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\nAllow subscripting of any name by implementing `__getitem__` for looking up tools.  That would enable this format:\n\n```\nagent.tool[\"example-tool\"]() \n```\n\nAlternatively, we could normalize the name of tools with dashes to underscores:\n\n```\nagent.tool.example_tool() \n```\n\nThe only downside there would be if there are two tools with similar names, but that's probably rare enough to not be a significant issue.\n\n### Related Issues\n\n#54",
      "state": "closed",
      "author": "zastrowm",
      "author_type": "User",
      "created_at": "2025-05-29T00:46:12Z",
      "updated_at": "2025-06-09T18:36:49Z",
      "closed_at": "2025-06-09T18:36:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/139/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/139",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/139",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.181425",
      "comments": []
    },
    {
      "issue_number": 189,
      "title": "[FEATURE] Nova Sonic streaming",
      "body": "### Problem Statement\n\nI did not find any specific mention of \"Nova Sonic\" in the repository\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nspeech to speech agent\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "timwukp",
      "author_type": "User",
      "created_at": "2025-06-08T10:12:41Z",
      "updated_at": "2025-06-09T16:51:18Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/189/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/189",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/189",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.181433",
      "comments": [
        {
          "author": "zastrowm",
          "body": "We expect that https://github.com/strands-agents/sdk-python/issues/129 will pave the way to implementing support for this, specifically as part of the \"Bidirectional streaming\" component of that",
          "created_at": "2025-06-09T16:51:17Z"
        }
      ]
    },
    {
      "issue_number": 127,
      "title": "[FEATURE] Amazon EKS AI Model Provider implementation",
      "body": "### Problem Statement\n\nWe would like strands to support Amazon EKS endpoint as Model provider. We would like strands to support EKSModelProvider natively such as AmazonBedrock. \n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nThis usecase supports the customers who have already chosen Amazon EKS as platform of choice to host models at scale. Providing AmazonEKS as a model provider supports customers with native integration with models hosted on EKS. \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "sheetaljoshi",
      "author_type": "User",
      "created_at": "2025-05-27T17:05:44Z",
      "updated_at": "2025-06-09T14:42:43Z",
      "closed_at": "2025-06-09T14:42:42Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/127/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/127",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/127",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.402547",
      "comments": [
        {
          "author": "ryanycoleman",
          "body": "That's interesting! How would this work? We would want it to be simple for the Strands developer to specify their inference endpoint, model id, and necessary auth. \n\nStrands' custom model provider abstraction is documented [here](https://strandsagents.com/0.1.x/user-guide/concepts/model-providers/cu",
          "created_at": "2025-05-27T17:22:43Z"
        },
        {
          "author": "sheetaljoshi",
          "body": "Closing this issue for now as from docs it appears that we can use OpenAI model provider or the Custom Model provider integrations for the models hosted on EKS. ",
          "created_at": "2025-06-09T14:42:42Z"
        }
      ]
    },
    {
      "issue_number": 136,
      "title": "[BUG] OpenAIModel Chat Completion Request errors out",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.5\n\n### Python Version\n\n3.13.3\n\n### Operating System\n\nmacOS 15.4.1\n\n### Installation Method\n\nother\n\n### Steps to Reproduce\n\n1. Add agent that uses OpenAIModel\n```\nparams = {\n    \"client_args\": {\n        \"base_url\": \"https://mygateway.domain.com/openai/deployments/gpt-4o-mini_mymodel\",\n        \"api_key\": \"...\",\n        \"timeout\": 60,\n        \"default_query\": {\n            \"api-version\": \"a-particular-version\",\n        },\n    },\n    \"model_id\": \"gpt-4o-mini_mymodel\",\n    \"params\": {\n        \"max_tokens\": 1000,\n        \"temperature\": 0.7,\n        \"stream\": True,  # Enable streaming\n        \"stream_options\": None,  # Use default streaming options\n    },\n}\nmodel = OpenAIModel(**params)\n\nwith mcp_server:\n    # Define the naming agent with tools and a system prompt\n    mcp_tools = mcp_server.list_tools_sync()\n    print(f\"Available tools: {[tool.tool_name for tool in mcp_tools]}\")\n    naming_agent = Agent(\n        tools=mcp_tools,\n        model=model,\n        system_prompt=SYSTEM_PROMPT\n    )\n\n    # Run the naming agent with the end user's prompt\n    naming_agent(\"my new task\")\n```\n2. The response from model have event stream and few of them have empty content array.\n3. Strands model code errors out when trying to parse openai response in the line https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/openai.py#L97\n\n### Expected Behavior\n\nAble to parse response from model and process next steps.\n\n### Actual Behavior\n\nErrors out with:\n```\nTraceback (most recent call last):\n  File \"/hidden/proto-strands/agent.py\", line 56, in <module>\n    naming_agent(\"my new task\")\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 335, in __call__\n    result = self._run_loop(prompt, kwargs)\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 439, in _run_loop\n    return self._execute_event_loop_cycle(invocation_callback_handler, kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/agent/agent.py\", line 467, in _execute_event_loop_cycle\n    stop_reason, message, metrics, state = event_loop_cycle(\n                                           ~~~~~~~~~~~~~~~~^\n        model=model,\n        ^^^^^^^^^^^^\n    ...<9 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ~~~~~~~~~~~~~~~^\n        model,\n        ^^^^^^\n    ...<4 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/hidden/proto-strands/.venv/lib/python3.13/site-packages/strands/models/openai.py\", line 100, in stream\n    choice = event.choices[0]\n             ~~~~~~~~~~~~~^^^\nIndexError: list index out of range\n```\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "ksankaran",
      "author_type": "User",
      "created_at": "2025-05-28T20:23:31Z",
      "updated_at": "2025-06-09T14:39:01Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/136/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jer96"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/136",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/136",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.635448",
      "comments": [
        {
          "author": "jer96",
          "body": "hi @mrityunjayshukla thank you for submitting this issue and your contribution to Strands! i see your PR for skipping empty chunks has been merged - which is great! we have seen other issues where endpoints which are seemingly OpenAI compatible, but do not actually support the full OpenAI API spec (",
          "created_at": "2025-06-09T14:36:37Z"
        }
      ]
    },
    {
      "issue_number": 188,
      "title": "[FEATURE] Configure the number of responses / chuncks when using BEDROCK KB",
      "body": "### Problem Statement\n\nI have an Agent (not using memoty tool or mem0) initilised with the Environment variable for the\nBedrock KB Id. \n\n\n### Proposed Solution\n\nId like to state how many responses i want from Bedrock ID wo/ using any tools, just like i did with the env variable \n\n### Use Case\n\nId like to state how many responses i want from Bedrock ID wo/ using any tools, just like i did with the env variable \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "david-lopez-b",
      "author_type": "User",
      "created_at": "2025-06-07T14:33:52Z",
      "updated_at": "2025-06-07T14:33:52Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/188/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/188",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/188",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.839858",
      "comments": []
    },
    {
      "issue_number": 92,
      "title": "[FEATURE] Add cross-platform uvx command support to StdioServerParameters",
      "body": "### Problem Statement\n\n#### Issue\n\n**Current behavior:** `StdioServerParameters` requires users to manually handle platform-specific `uvx` command syntax, leading to Windows compatibility issues and a poor developer experience.\n\n**Expected behavior:** `StdioServerParameters` should automatically handle cross-platform `uvx` commands, allowing the same code to work on Windows, macOS, and Linux.\n\n#### Root Cause\n\nThe `uvx` package manager uses different command syntax across platforms:\n\n**macOS/Linux:**\n```bash\nuvx package-name@version\n```\n\n**Windows:**\n```bash\nuvx --from package-name@version package-name.exe\n```\n\nThis forces users to write platform-specific code or encounter runtime errors like `MCPClientInitializationError: background thread did not start in 30 seconds` on Windows.\n\n#### Current Workaround\n\nUsers must implement platform detection manually:\n\n```python\nimport platform\nfrom mcp import stdio_client, StdioServerParameters\n\ndef get_platform_args(base_args):\n    \"\"\"Convert base uvx args to platform-specific format\"\"\"\n    if platform.system() == \"Windows\":\n        package_name = base_args[0].split(\"@\")[0]\n        return [\"--from\"] + base_args + [f\"{package_name}.exe\"]\n    return base_args\n\n# Platform-aware usage\nstdio_mcp_client = MCPClient(lambda: stdio_client(\n    StdioServerParameters(\n        command=\"uvx\", \n        args=get_platform_args([\"awslabs.aws-documentation-mcp-server@latest\"])\n    )\n))\n```\n\n\n\n### Proposed Solution\n\nEnhance `StdioServerParameters` to automatically detect and transform `uvx` commands based on the current platform:\n\n#### Implementation Approach\n\n1. **Detect uvx commands** - Check if `command=\"uvx\"` \n2. **Platform detection** - Use `platform.system()` to identify Windows vs Unix-like systems\n3. **Automatic transformation** - Convert arguments for Windows compatibility when needed\n4. **Backward compatibility** - Preserve existing behavior for non-uvx commands\n\n#### Example API\n\n```python\n# This should work identically on all platforms:\nStdioServerParameters(\n    command=\"uvx\", \n    args=[\"awslabs.aws-documentation-mcp-server@latest\"]\n)\n\n# Internally transforms to Windows format when on Windows:\n# args=[\"--from\", \"awslabs.aws-documentation-mcp-server@latest\", \"awslabs.aws-documentation-mcp-server.exe\"]\n```\n\n#### Benefits\n\n- **Better developer experience** - Write once, run anywhere\n- **Reduced support burden** - Eliminate platform-specific documentation and troubleshooting\n- **Lower barrier to entry** - New users don't need to understand platform differences\n- **Backward compatibility** - Existing code continues to work unchanged\n\n#### Related Issues\n\n#71 \n\nThis enhancement addresses user-reported, internally reproducible compatibility issues where Windows users encounter `MCPClientInitializationError` when following cross-platform documentation examples.\n\n### Use Case\n\n**As a** developer building applications with Strands Agents\n**I want** to use MCP stdio connections with `uvx` commands that work across all platforms  \n**So that** I can write portable code without needing to handle platform-specific command syntax\n\n#### Current User Journey (Problematic)\n1. Developer follows documentation example using `uvx` command\n2. Code works fine on macOS/Linux during development\n3. When deployed/tested on Windows, encounters `MCPClientInitializationError: background thread did not start in 30 seconds`\n4. Developer must research the issue, discover platform differences, and implement custom platform detection\n5. Developer maintains separate code paths or conditional logic for different platforms\n\n#### Desired User Journey  \n1. Developer follows documentation example using `uvx` command\n2. Same code works seamlessly on Windows, macOS, and Linux\n3. No platform-specific considerations needed\n4. Focus remains on business logic rather than infrastructure compatibility\n\numentation examples.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\nAs a preliminary workaround, we've updated the documentation to include clear platform-specific examples for Windows and macOS/Linux users. This change was merged in strands-agents/docs#47 and provides immediate relief for users encountering this issue.\nCurrent documentation workaround:\n\n- Shows separate Windows and macOS/Linux examples with correct uvx syntax\n- Provides copy-paste ready solutions for both platforms\n\nWhile this documentation fix helps users get unblocked immediately, the underlying framework enhancement is still needed to provide a seamless developer experience without requiring platform-specific code or awareness.\n\nLinks:\n\n- Documentation fix PR: strands-agents/docs#47\n- Original user report: #71 ",
      "state": "open",
      "author": "DennisTraub",
      "author_type": "User",
      "created_at": "2025-05-23T19:10:40Z",
      "updated_at": "2025-06-06T09:57:24Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/92/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/92",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/92",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:50.839882",
      "comments": [
        {
          "author": "dbschmigelski",
          "body": "Hi, thanks for raising this. I have some concerns with adding this automatic transformation, though. \n\nFor example, when should we decide to perform this transformation? Is it anytime we see see uvx? What if the users already has `[\"--from package-name@version package-name.exe\"]` or `[\"--from\", \"pac",
          "created_at": "2025-06-03T12:08:07Z"
        },
        {
          "author": "dbschmigelski",
          "body": "Regarding path #1, it appears an [attempt has already been made](https://github.com/modelcontextprotocol/python-sdk/blob/544176770b53e6a0ae8c413d3b6c5116421f67df/src/mcp/client/stdio/win32.py#L1) to address the windows compatibility issues. This was initially deployed in version [1.6.0](https://gith",
          "created_at": "2025-06-06T09:57:24Z"
        }
      ]
    },
    {
      "issue_number": 155,
      "title": "[BUG] Openai Compatible Endpoint Issue",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.5\n\n### Python Version\n\n3.11.0\n\n### Operating System\n\nmacOS 15.4.1\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nCertain models which use the Openai compatible endpoint capability return a `router returned invalid model undefined` error; however, the strands logs show that the model was successfully invoked.\n\nSteps to reproduce:\n1. Install with pip and set up agents.py file as directed on the [Welcome page](https://strandsagents.com/latest/)\n2. Set up a connection to an Openai compatible server as instructed in the [user guide](https://strandsagents.com/latest/user-guide/concepts/model-providers/openai/). To exactly replicate this error, I'm using models from [Arcee Conductor](https://conductor.arcee.ai/), which you can get an API key for free.\n3. Add debugging logs as directed in the \"Debug Logs\" section of the [Quickstart](https://strandsagents.com/latest/user-guide/quickstart/)\n\nThe code now looks like this:\n```\nfrom strands import Agent\nfrom strands.models.openai import OpenAIModel\nimport logging\n\n# Define model connection details\nbase_url=\"https://conductor.arcee.ai/v1\"\napi_key=\"\" # Your key here\nmodel_id = \"auto\"\n\n# Enables Strands debug log level\nlogging.getLogger(\"strands\").setLevel(logging.DEBUG)\n\n# Sets the logging format and streams logs to stderr\nlogging.basicConfig(#\n    format=\"%(levelname)s | %(name)s | %(message)s\",\n    handlers=[logging.StreamHandler()]\n)\n\n# Define the model\nmodel = OpenAIModel(\n    client_args={\n      \"api_key\": api_key,\n      \"base_url\": base_url,\n    },\n    model_id=model_id,\n    params={\n        \"max_tokens\": 1000,\n        \"temperature\": 0.7,\n    }\n)\n\nagent = Agent(\n    model=model\n)\n\n# Ask the agent a question\nagent(\"Tell me about agentic AI\")\n```\n\n4. Run the script using `python -u agents.py`\n\n### Expected Behavior\n\nIf the model_id in the script above is a specific model, such as \"blitz\", the script runs as expected.  Setting the model_id to \"auto\", which has the exact same response as an individual model, should work exactly as all other models do and this script should return an answer to the question.\n\n### Actual Behavior\n\n#### Debugging Logs:\n```\nDEBUG | strands.models.openai | config=<{'model_id': 'auto', 'params': {'max_tokens': 1000, 'temperature': 0.7}}> | initializing\nDEBUG | strands.tools.registry | tools_dir=</Users/XXX/Desktop/aws-strands/tools> | tools directory not found\nDEBUG | strands.tools.registry | tool_modules=<[]> | discovered\nDEBUG | strands.tools.registry | tool_count=<0>, success_count=<0> | finished loading tools\nDEBUG | strands.tools.registry | tools_dir=</Users/XXX/Desktop/aws-strands/tools> | tools directory not found\nDEBUG | strands.tools.watcher | tool directory watching initialized\nDEBUG | strands.tools.registry | getting tool configurations\nDEBUG | strands.tools.registry | tool_count=<0> | tools configured\nDEBUG | strands.tools.registry | getting tool configurations\nDEBUG | strands.tools.registry | tool_count=<0> | tools configured\nDEBUG | strands.event_loop.streaming | model=<<strands.models.openai.OpenAIModel object at 0x1024e2050>> | streaming messages\nDEBUG | strands.types.models.model | formatting request\nDEBUG | strands.types.models.model | invoking model\nDEBUG | strands.types.models.model | got response from model\nDEBUG | strands.agent.conversation_manager.sliding_window_conversation_manager | window_size=<0>, message_count=<40> | skipping context reduction\n```\n\n#### Full Error Trace:\n```\nTraceback (most recent call last):\n  File \"/Users/XXX/Desktop/aws-strands/agents.py\", line 38, in <module>\n    agent(\"Tell me about agentic AI\")\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/agent/agent.py\", line 335, in __call__\n    result = self._run_loop(prompt, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/agent/agent.py\", line 439, in _run_loop\n    return self._execute_event_loop_cycle(invocation_callback_handler, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/agent/agent.py\", line 467, in _execute_event_loop_cycle\n    stop_reason, message, metrics, state = event_loop_cycle(\n                                           ^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/strands/models/openai.py\", line 89, in stream\n    response = self.client.chat.completions.create(**request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/openai/_utils/_utils.py\", line 287, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py\", line 925, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1239, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/XXX/Desktop/aws-strands/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1034, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.InternalServerError: router returned invalid model undefined\n```\n\n#### Issue\n\nThe trace logs show that the model is undefined, but the debug logs show that a response was received from the model. \n\nNote: I noticed that any time the word \"auto\" is in the model_id, this behavior occurs. For example, \"auto\", \"auto-reasoning\", and \"auto-tools\" all give this same behavior.\n\n### Additional Context\n\nIf you invoke these models directly using the chat completions API, you'll notice that the responses are the exact same. For example, take the following code snippet:\n\n```\nfrom openai import OpenAI\n\nbase_url=\"https://conductor.arcee.ai/v1\"\napi_key=\"\" # Your key here\nmodel_id = \"auto\"\n\nclient = OpenAI(\n    base_url=base_url,\n    api_key=api_key\n)\n\ncompletion = client.chat.completions.create(\n    model=model_id,\n    messages=[{'role': 'user', 'content': 'Say hi'}],\n    max_tokens=2,\n)\n\nprint(completion)\n```\n\nIf model_id is set to \"blitz\" the output is:\n```\nChatCompletion(id='nwAUeSR-z1gNr-94816eb40a19cf56', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content='Hi!', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[]), seed=None)], created=1748641672, model='arcee-ai/arcee-blitz', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=2, prompt_tokens=171, total_tokens=173, completion_tokens_details=None, prompt_tokens_details=None), prompt=[])\n```\n\nIf the model_id is set to \"auto\" the output is:\n```\nChatCompletion(id='nwAVSVp-z1gNr-9481727c4f9c1528', choices=[Choice(finish_reason='length', index=0, logprobs=None, message=ChatCompletionMessage(content='Hello!', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[]), seed=None)], created=1748641827, model='arcee-ai/arcee-blitz', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=2, prompt_tokens=171, total_tokens=173, completion_tokens_details=None, prompt_tokens_details=None), prompt=[])\n```\n\nNotice there is no difference in the format of the response, so I'd expect both of these to work similarly in Strands.\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "andrew-arcee",
      "author_type": "User",
      "created_at": "2025-05-30T21:53:49Z",
      "updated_at": "2025-06-05T18:13:59Z",
      "closed_at": "2025-06-05T18:13:58Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/155/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jer96"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/155",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/155",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.035386",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thanks for reporting this @andrew-arcee, the team is taking a look in to it.",
          "created_at": "2025-06-03T21:39:26Z"
        },
        {
          "author": "jer96",
          "body": "hi @andrew-arcee, thanks again for reporting this! here are the findings:\n\ni've reproduced the error and i have found that the format of the `messages` attribute within strands is\n\n```\nmessages=[{\"role\": \"user\", \"content\": [{\"text\": \"say hi\", \"type\": \"text\"}]}]\n```\n\nwhich differs from the working sn",
          "created_at": "2025-06-05T15:35:04Z"
        },
        {
          "author": "andrew-arcee",
          "body": "Hi @jer96, thank you for the detailed response. I've replicated your findings and agree with your conclusion. Thank you for calling out the messages format that is utilized by strands.",
          "created_at": "2025-06-05T17:31:33Z"
        },
        {
          "author": "jer96",
          "body": "no problem! i will go ahead and resolve this. please feel free reach out again!",
          "created_at": "2025-06-05T18:13:58Z"
        }
      ]
    },
    {
      "issue_number": 177,
      "title": "[FEATURE] Strongly Type the SDK",
      "body": "### Problem Statement\n\nThroughout the SDK, there is a lot of unnecessary use of the `Any` type, and `**kwargs` for passing data around. The overuse of the `Any` type makes it difficult for customers to understand the shape of the data being returned by the sdk. Additionally, the use of `**kwargs` within the sdk can lead to customer passed-in objects being overwritten, leading to hard to debug issues.\n\n### Proposed Solution\n\n- The SDK should be updated to limit usage of the `Any` type to only necessary places.\n  - Previously ambiguous objects should be given more strict types, like `callback_handler` event's\n- `**kwargs` should not be touched by the SDK internals, and should be transparently passed through to tool execution\n\n### Use Case\n\n- Strongly typed events will generate documentation that customers can reference when implementing their features\n- Removing reliance on `**kwargs` will allow customers to pass in arbitrary data through the agent to their tool's execution.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-06-04T15:47:26Z",
      "updated_at": "2025-06-05T17:59:54Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/177/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/177",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/177",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.297752",
      "comments": [
        {
          "author": "tjcsrc16",
          "body": "Another typing issue is that unions are not properly indicated. For example, in `class ContentBlock(TypedDict, total=False):` it is not indicated anywhere that exactly one attribute must be defined. \n",
          "created_at": "2025-06-04T16:15:24Z"
        }
      ]
    },
    {
      "issue_number": 151,
      "title": "[FEATURE] Strands MCP client should support prompts/resources/sampling",
      "body": "### Problem Statement\n\nCurrently the strands MCP client only supports tools, which is only a part of the MCP spec. The other functionality like prompts/resources and sampling should also be supported in the Strands MCP client \n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\nAllowing the Strands MCP client to support resources/prompts and sampling will allow Strands to leverage the entire power of MCP, not just the tools functionality \n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "shamikatamazon",
      "author_type": "User",
      "created_at": "2025-05-30T17:45:55Z",
      "updated_at": "2025-06-05T17:58:38Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dbschmigelski"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/151",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/151",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.537617",
      "comments": [
        {
          "author": "dbschmigelski",
          "body": "The current design has agents interacting with MCP servers through the AgentTool interface, where mcp tools are exposed via list_tools_sync and provided to the agent. The key architectural question this feature raises is how we should expose this functionality to the user and the Agent.\n\nThere seem ",
          "created_at": "2025-06-04T09:17:06Z"
        },
        {
          "author": "theagenticguy",
          "body": "Based on my understanding, Prompts and Resources are primitives that are used more deterministically in code, rather than self-determined by an agent. E.g. you might start an MCP client, get a Prompt, format with your prompt inputs, then start the agent with the formatted string.\n\nResource is slight",
          "created_at": "2025-06-04T13:08:57Z"
        },
        {
          "author": "dbschmigelski",
          "body": "I agree @theagenticguy, I do not want to be too prescriptive, but definitely want to leave the door open for the agents to leverage the MCP server on its own.\n\nBased on the [MCP documentation](https://modelcontextprotocol.io/docs/concepts/resources#overview) resources do seem like something an agent",
          "created_at": "2025-06-04T15:41:38Z"
        }
      ]
    },
    {
      "issue_number": 140,
      "title": "[FEATURE] AG-UI",
      "body": "### Problem Statement\n\n[AG-UI Protocol](https://github.com/ag-ui-protocol/ag-ui) (Agent-GUI Protocol) is an open, lightweight, event-based protocol that standardizes how AI agents connect to front-end applications.\n\n### Proposed Solution\n\nLooks like a wrapper that maps Strands events to AG-UI format, enabling managing of state information between the Agent and the UI. \n\n### Use Case\n\nAG-UI could be an emerging standard for how various web applications interoperate with agents. See https://agui-demo.vercel.app/ for a demo. \n\n### Alternatives Solutions\n\nA tools approach might work. \n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "ryanycoleman",
      "author_type": "User",
      "created_at": "2025-05-29T03:07:49Z",
      "updated_at": "2025-06-05T17:58:17Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/140/reactions",
        "total_count": 5,
        "+1": 5,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/140",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/140",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.748036",
      "comments": []
    },
    {
      "issue_number": 124,
      "title": "[BUG] Tool spec normalization",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.5\n\n### Python Version\n\n3.13.3\n\n### Operating System\n\nmacOS\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Create a module tool with `TOOL_SPEC` defined. In the tool spec, include deeply nested objects.\n2. Create an agent with the tool and check its tool configuration after tool loading:\n```python\nfrom strands import Agent\nfrom my_tools import test_nested_tool\n\nagent = Agent(tools=[test_nested_tool])\nprint(agent.tool_config)\n```\n\n### Expected Behavior\n\nExpected loaded tools with deeply nested objects in the tool spec to preserve the nesting.\n\n### Actual Behavior\n\nDeeply nested object structures are not preserved, leading to context loss in the specification provided to the model during inference.\n\n### Additional Context\n\nExample provided tool spec:\n```python\n{\n    \"name\": \"generate_income_assessment\",\n    \"description\": \"Generate an income assessment report\",\n    \"inputSchema\": {\n        \"json\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"application_id\",\n                \"assessment_type\",\n                \"assessment_criteria\"\n            ],\n            \"properties\": {\n                \"application_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The ID of the application being assessed\"\n                },\n                \"assessment_type\": {\n                    \"type\": \"string\",\n                    \"description\": \"Type of assessment being performed\",\n                    \"const\": \"INCOME\"\n                },\n                \"assessment_criteria\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"verify_application_document\",\n                        \"verify_payslip_document\", \n                        \"verify_bank_statements\",\n                        \"verify_employer_matches\",\n                        \"verify_salary_matches\"\n                    ],\n                    \"properties\": {\n                        \"verify_application_document\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"question\": { \n                                    \"const\": \"Verify application document is present\",\n                                    \"description\": \"A specific evaluation criteria that must be assessed as part of the income verification process\"\n                                },\n                                \"result\": { \n                                    \"type\": \"string\",\n                                    \"enum\": [\"PASS\", \"FAIL\", \"UNKNOWN\"],\n                                    \"description\": \"The outcome of the assessment check: PASS indicates criteria are met, FAIL indicates criteria are not met, or UNKNOWN if insufficient information is available\"\n                                },\n                                \"explanation\": { \n                                    \"type\": \"string\",\n                                    \"description\": \"A concise justification supporting the result, including evidence and reasoning\"\n                                }\n                            },\n                            \"required\": [\"question\", \"result\", \"explanation\"]\n                        },\n                        \"verify_payslip_document\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"question\": { \n                                    \"const\": \"Verify payslip document is present\",\n                                    \"description\": \"A specific evaluation criteria that must be assessed as part of the income verification process\"\n                                },\n                                \"result\": { \n                                    \"type\": \"string\",\n                                    \"enum\": [\"PASS\", \"FAIL\", \"UNKNOWN\"],\n                                    \"description\": \"The outcome of the assessment check: PASS indicates criteria are met, FAIL indicates criteria are not met, or UNKNOWN if insufficient information is available\"\n                                },\n                                \"explanation\": { \n                                    \"type\": \"string\",\n                                    \"description\": \"A concise justification supporting the result, including evidence and reasoning\"\n                                }\n                            },\n                            \"required\": [\"question\", \"result\", \"explanation\"]\n                        },\n                        \"verify_bank_statements\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"question\": { \n                                    \"const\": \"Verify bank statements are present\",\n                                    \"description\": \"A specific evaluation criteria that must be assessed as part of the income verification process\"\n                                },\n                                \"result\": { \n                                    \"type\": \"string\",\n                                    \"enum\": [\"PASS\", \"FAIL\", \"UNKNOWN\"],\n                                    \"description\": \"The outcome of the assessment check: PASS indicates criteria are met, FAIL indicates criteria are not met, or UNKNOWN if insufficient information is available\"\n                                },\n                                \"explanation\": { \n                                    \"type\": \"string\",\n                                    \"description\": \"A concise justification supporting the result, including evidence and reasoning\"\n                                }\n                            },\n                            \"required\": [\"question\", \"result\", \"explanation\"]\n                        },\n                        \"verify_employer_matches\": {\n                            \"type\": \"object\", \n                            \"properties\": {\n                                \"question\": { \n                                    \"const\": \"Verify employer matches across documents\",\n                                    \"description\": \"A specific evaluation criteria that must be assessed as part of the income verification process\"\n                                },\n                                \"result\": { \n                                    \"type\": \"string\",\n                                    \"enum\": [\"PASS\", \"FAIL\", \"UNKNOWN\"],\n                                    \"description\": \"The outcome of the assessment check: PASS indicates criteria are met, FAIL indicates criteria are not met, or UNKNOWN if insufficient information is available\"\n                                },\n                                \"explanation\": { \n                                    \"type\": \"string\",\n                                    \"description\": \"A concise justification supporting the result, including evidence and reasoning\"\n                                }\n                            },\n                            \"required\": [\"question\", \"result\", \"explanation\"]\n                        },\n                        \"verify_salary_matches\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"question\": { \n                                    \"const\": \"Verify salary matches payslip\",\n                                    \"description\": \"A specific evaluation criteria that must be assessed as part of the income verification process\"\n                                },\n                                \"result\": { \n                                    \"type\": \"string\",\n                                    \"enum\": [\"PASS\", \"FAIL\", \"UNKNOWN\"],\n                                    \"description\": \"The outcome of the assessment check: PASS indicates criteria are met, FAIL indicates criteria are not met, or UNKNOWN if insufficient information is available\"\n                                },\n                                \"explanation\": { \n                                    \"type\": \"string\",\n                                    \"description\": \"A concise justification supporting the result, including evidence and reasoning\"\n                                }\n                            },\n                            \"required\": [\"question\", \"result\", \"explanation\"]\n                        }\n                    },\n                    \"additionalProperties\": False\n                }\n            }\n        }\n    }\n}\n```\n\nAfter normalization:\n```python\n{\n  \"toolSpec\": {\n    \"name\": \"generate_income_assessment\",\n    \"description\": \"Generate an income assessment report\",\n    \"inputSchema\": {\n      \"json\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"application_id\": {\n            \"type\": \"string\",\n            \"description\": \"The ID of the application being assessed\"\n          },\n          \"assessment_type\": {\n            \"type\": \"string\",\n            \"description\": \"Type of assessment being performed\"\n          },\n          \"assessment_criteria\": {\n            \"type\": \"object\",\n            \"description\": \"Property assessment_criteria\"\n          }\n        },\n        \"required\": [\n          \"application_id\",\n          \"assessment_type\",\n          \"assessment_criteria\"\n        ]\n      }\n    }\n  }\n}\n```\n\n### Possible Solution\n\nFix tool spec normalization to preserve deeply nested objects.\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-05-27T14:45:47Z",
      "updated_at": "2025-06-05T13:18:46Z",
      "closed_at": "2025-06-05T13:18:46Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/124/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jer96"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/124",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/124",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.748056",
      "comments": []
    },
    {
      "issue_number": 158,
      "title": "[FEATURE] Add tool result caching",
      "body": "### Problem Statement\n\nA tool result caching mechanism to the Strands Agent framework, allowing agents to store and reuse tool execution results for identical inputs. This improves performance and reduces unnecessary API calls or expensive computations.\n\n### Proposed Solution\n\n- **Configurable caching**: Enable/disable caching with customizable max size and TTL like that.\n- **Selective caching**: Specify which tools to cache or exclude from caching\n- **Cache statistics**: Access hit/miss metrics through get_tool_cache_stats()\n- **Cache invalidation**: Clear entire cache or specific tool results\n\n### Use Case\n\n1. Static Data Retrieval\n- Documentation lookup tools\n- Configuration data retrieval\n- Static reference data queries\n\n2. Computationally Expensive Operations\n- Complex calculations\n- Large data processing\n- Image processing operations\n\n3. Rate-Limited API Calls\n- External API calls with rate limits\n- Third-party service integrations\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "Konippi",
      "author_type": "User",
      "created_at": "2025-05-31T16:32:22Z",
      "updated_at": "2025-06-05T06:56:28Z",
      "closed_at": "2025-06-05T06:56:28Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/158/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Unshure"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/158",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/158",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.748064",
      "comments": [
        {
          "author": "Unshure",
          "body": "Hi @Konippi thanks for the suggestion here. We are currently re-working our tool execution implementation to be async-native. As to not interfere with that rework, and not add additional complexity to the tool system, I don't think this is a feature we are interested in at the moment.\n\nUsers of stra",
          "created_at": "2025-06-04T16:53:15Z"
        },
        {
          "author": "Konippi",
          "body": "Definitely. Thank you for your opinion.",
          "created_at": "2025-06-05T06:56:28Z"
        }
      ]
    },
    {
      "issue_number": 165,
      "title": "[FEATURE] AWS Xray tracing support",
      "body": "### Problem Statement\n\nI can see how Strands OpenTelemetry support can conceivably be adapted to sent to xray via multiple layers, but for applications already using the XRay SDK it would be great for some samples/straight forward configuration to hook these things together.\n\nIn particular, the current tracing interfaces seem to always assume an OpenTelemetry endpoint on a HTTP endpoint. Maybe this is common in a sidecar scenario, but for local dev/in lambda/etc, it would be great to send directly to xray without this overhead.\n\n### Proposed Solution\n\nI can envision some kind of `strands-agents/xray-adapter` library that I import and do something like\n\n```python\n\nfrom strands.telemetry.tracer import set_tracer\nfrom strands_xray import XRayAdapter\n\nset_tracer(XRayAdapter(sampling=...))\n\nAgent(\"Do Something cool\")\n\n```\n\nI'm not very familiar with OpenTelemetry so maybe there are other shapes that make more sense. \n\n### Use Case\n\nThe, I assume, common usecase of running Strands on Lambda or local development.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "prestomation",
      "author_type": "User",
      "created_at": "2025-06-02T21:13:19Z",
      "updated_at": "2025-06-04T21:52:03Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/165/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/165",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/165",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.963346",
      "comments": []
    },
    {
      "issue_number": 163,
      "title": "[FEATURE] Add Strands Agents to conda-forge",
      "body": "### Problem Statement\n\nCurrently, Strands Agents is released to PyPI and installed with pip. I would like Strands Agents to be available on conda-forge so that it can be installed with other package managers like conda, micromamba, etc.\n\n### Proposed Solution\n\nAdding a package to conda-forge requires creating a recipe and adding it to the [conda-forge/staged-recipes](https://github.com/conda-forge/staged-recipes) GitHub repository. Conda-forge documents this process [here](https://conda-forge.org/docs/maintainer/adding_pkgs/). Since Strands Agents is already available on PyPI, the recipe can use that as the source.\n\n### Use Case\n\nAdding Strands Agents to conda-forge gives people more installation options other than pip. For example, if a person is managing a more complex environment or image, they may prefer conda-based package managers since they are better at handling dependencies and ensuring compatibility.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "omursalo",
      "author_type": "User",
      "created_at": "2025-06-02T17:40:42Z",
      "updated_at": "2025-06-04T21:50:47Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/163/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/163",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/163",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.963369",
      "comments": []
    },
    {
      "issue_number": 148,
      "title": "[TASK] Convert ContentBlock TypedDict into Union",
      "body": "## Overview\n\nThe [ContentBlock](https://github.com/strands-agents/sdk-python/blob/main/src/strands/types/content.py) `TypedDict` is based on the Bedrock type, which is a Union that must include one member and only one member ([docs](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_ContentBlock.html)). To highlight that further, if you call bedrock with an empty content block, you will receive the following error message:\n```txt\nMust set one of the following keys for tagged unionstructure messages[0].content[0]: text, image, document, video, toolUse, toolResult, guardContent, reasoningContent.\n```\nIf you call with multiple members, you get:\n```txt\nInvalid number of parameters set for tagged union structure messages[0].content[0]. Can only set one of the following keys: text, image, document, video, toolUse, toolResult, guardContent, reasoningContent.\n```\n\nWith all that said, we did not correctly define the type on our end. The correct type definition should actually be something like:\n```Python\nclass ContentBlockDocument(TypedDict):\n    document: DocumentContent\n\nclass ContentBlockGuardContent(TypedDict):\n    guardContent: GuardContent\n\n...\n\nContentBlock = Union[ContentBlockDocument, ContentBlockGuardContent, ...]\n```",
      "state": "open",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-05-30T13:32:03Z",
      "updated_at": "2025-06-04T16:36:34Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "help wanted"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/148/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/148",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/148",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.963377",
      "comments": []
    },
    {
      "issue_number": 150,
      "title": "[BUG] Bedrock Marketplace model error",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.6\n\n### Python Version\n\n3.12.10\n\n### Operating System\n\nmacOS 15.5\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nFirst Install Mistral-Small-24B-Instruct-2501 model from Bedrock Marketplace. \nProvide model endpoint ARN in blow code example \ncode example:  \n\n```\nimport asyncio\nfrom mcp import stdio_client, StdioServerParameters\nfrom strands import Agent\nfrom strands.tools.mcp import MCPClient\nfrom strands.models import BedrockModel\n\nasync def main():\n    # Connect to multiple MCP servers\n    google_mcp_client = MCPClient(lambda: stdio_client(\n        StdioServerParameters(\n                command=\"npx\",\n                args=[\"-y\", \"@modelcontextprotocol/server-google-maps\"],\n                env={\"GOOGLE_MAPS_API_KEY\": \"<GOOGLE_API>\"})\n            )\n        )\n    time_mcp_client = MCPClient(lambda: stdio_client(\n        StdioServerParameters(\n                command=\"npx\",\n                args=[\"-y\", \"time-mcp\"])\n            )\n        )\n    \n    # Set up the clients using context managers (not async)\n    with google_mcp_client, time_mcp_client:\n        # Get tools from both clients\n        tools = google_mcp_client.list_tools_sync() + time_mcp_client.list_tools_sync()\n        \n        # Define the model ID directly\n\n        model_id = \"<BEDROCK_MARKETPLACE_ENDPOINT_ARN>\"\n\n        bedrock_model = BedrockModel(\n            model_id=model_id,\n            streaming=False\n        )\n        \n        # Create an agent with the model ID and tools\n        print(f\"Creating agent with model {model_id}...\")\n        \n        agent = Agent(model=bedrock_model, tools=tools)\n        response = agent(\"What are the top 3 Department stores in London?\")\n        print(f\"Response: {response}\")\n\n        response = agent(\"Are they open now?\")\n        print(f\"Follow-up response: {response}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n### Expected Behavior\n\nIt should complete the conversation and use correct tools to answer questions. \n\n### Actual Behavior\n\nIt shows below error: \n```\nstrands.types.exceptions.EventLoopException: An error occurred (ValidationException) when calling the Converse operation: This model doesn't support the status field. Remove status and try again.\n```\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "yhou-uk",
      "author_type": "User",
      "created_at": "2025-05-30T15:24:12Z",
      "updated_at": "2025-06-04T16:14:49Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/150/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "mehtarac"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/150",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/150",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:51.963383",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thanks for reporting this @yhou-uk, the team is taking a look in to it.",
          "created_at": "2025-06-03T21:40:35Z"
        },
        {
          "author": "Unshure",
          "body": "Hi @yhou-uk, I dug into this issue a bit more, and it looks like the validation logic used by the models deployed via the Bedrock marketplace is a bit different from the validation logic used by Bedrock Foundation models. Specifically, the [ToolResultBlock](https://docs.aws.amazon.com/bedrock/latest",
          "created_at": "2025-06-04T00:45:21Z"
        }
      ]
    },
    {
      "issue_number": 84,
      "title": "[FEATURE] Pass Agent objects directly to other Agent objects",
      "body": "### Problem Statement\n\nI would love to be able to pass `Agent` objects directly to another `Agent`'s tool list, implementing the agents-as-tools supervisor multi-agent pattern with a simpler interface.\n\nCurrently I am able to implement this by wrapping an Agent in a function and decorating it with `@tool`, however that's a bit more effort for me.\n\n### Proposed Solution\n\n1. Add optional `name` and `description` parameters to the `Agent` class\n2. Allow objects of type `Agent` to be passed to another `Agent`'s `tools` list\n3. When `Agent` objects are passed as tools, require `name` and `description` to be set\n4. Generate a tool specification for `Agent` objects that are passed as tools to another `Agent`:\n    * Name: `Agent.name`\n    * Description: `Agent.description`\n\nConsiderations:\n* Some modes could be useful, for example invoking the sub agent with just a reformatted query by adding a `text` input parameter to the generated tool specification, along with another mode that invokes the sub agent with the full context of the parent agent without rewriting any queries to the sub agent\n\n### Use Case\n\n* Agents as tools\n* Supervisor multi-agent pattern\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-05-23T03:33:50Z",
      "updated_at": "2025-06-04T15:36:29Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/84/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 1,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "mehtarac"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/84",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/84",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.159431",
      "comments": [
        {
          "author": "zastrowm",
          "body": "As part of this issue, we should take a look at the samples/example use cases that we have to identify what sort of features we need to support.  The [current documented approach](https://strandsagents.com/0.1.x/user-guide/concepts/multi-agent/agents-as-tools/) means that you can customize *what* is",
          "created_at": "2025-05-23T14:22:24Z"
        }
      ]
    },
    {
      "issue_number": 174,
      "title": "[FEATURE] Enhanced Parameter Preservation and Docstring Validation",
      "body": "### Problem Statement\n\nWe met the corner case below:\nSimple function tool call: function A -> function B, function A processed and returned complete parameters for function B, function B can receive the parameters passed, but some fields are empty/null, thus leading the function B failed to execute, in condition that:\n\n1. The passed parameter have nested structure, \"segments\" in example below;\n2. Not all fields in the nested structure described in docstring, \n\n```\n@tool\ndef function A (...) -> List[Dict[str, Any]]:\n    \"\"\"Search for relevant video content using natural language queries\n    \n    Args:\n        query: Natural language search query describing the video content needed\n        indexes: Optional list of video indexes to search (default: ['videos'])\n        top_k: Maximum number of results to return (default: 5)\n        min_confidence: Minimum confidence score for results (default: 0.3)\n    \n    Returns:\n        List of video segments with metadata including:\n        - videoId: Unique identifier for the video\n        - segmentId: Unique identifier for the segment\n        - indexId: Index where the video is stored\n        - s3Path: S3 path to the video file\n        - ...\n    \"\"\"\n\n@tool\ndef function_B (\n    segments: List[Dict[str, Any]],\n    output_name: str,\n    resolution: str = \"720p\",\n    transition_type: str = \"cut\",\n    transition_duration: int = 500\n) -> Dict[str, Any]:\n    \"\"\"Merge multiple video segments into a single video\n    \n    Args:\n        segments: List of video segments to merge. Each segment should contain:\n                 - videoId: Unique identifier for the video\n                 - segmentId: Unique identifier for the segment\n                 - indexId: Index where the video is stored\n                 - \"we don't define the s3Path parameter\"\n    Returns:\n            Dictionary containing information about the merge job:\n            - success: Boolean indicating if merge was initiated successfully\n```\n\n### Proposed Solution\n\nThe root cause I assume could be tool decorator creates Pydantic models based on function signatures and uses docstring content for parameter descriptions, while Pydantic treats the nested dictionary contents as unstructured data, AI model will reconstructs tool parameters based on the docstring specification, potentially dropping fields not explicitly documented. \n\nWe could consider to:\n1. Preserve all nested data structures regardless of docstring completeness;\n2. Implement validation that ensures docstring completeness matches actual data structures being passed between tools, warning developers when nested fields might be lost.\n\n### Use Case\n\nWhen user have nested parameter while the docstring might not updated or incomplete\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "yike5460",
      "author_type": "User",
      "created_at": "2025-06-04T07:34:43Z",
      "updated_at": "2025-06-04T07:34:43Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/174/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/174",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/174",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.391644",
      "comments": []
    },
    {
      "issue_number": 99,
      "title": "[FEATURE] BedrockModel - support redactedContent in reasoningContent streamed events",
      "body": "### Problem Statement\n\nBedrock models with extended thinking return `reasoningContent` events. These events can contain either `reasoningText` or `redactedContent` (https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_ReasoningContentBlock.html). Currently the BedrockModel provider handles `reasoningText` but not `redactedContent`:\n\nhttps://github.com/strands-agents/sdk-python/blob/61c3bf794f81c46aef4cd40ded6a68b7b48acb20/src/strands/event_loop/streaming.py#L131-L142\n\n### Proposed Solution\n\nSupport `redactedContent` in `reasoningContent` Bedrock Model events.\n\n### Use Case\n\nImplement handling of `redactedContent` in my agent's async iterator or callback handler.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-05-24T02:35:46Z",
      "updated_at": "2025-06-03T21:54:32Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue",
        "ready for contribution"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/99/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/99",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/99",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.391665",
      "comments": []
    },
    {
      "issue_number": 85,
      "title": "[BUG] receiving 'invalid start byte' when using ImageSource with Azure OpenAI",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.3\n\n### Python Version\n\n3.12\n\n### Operating System\n\nWindows 11\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Generate image bytes\n2. Create a message with:\n```\nMessage(role=\"user\", content=[ContentBlock(image=ImageContent(format=ImageFormat[str(file_extension)], source=ImageSource(bytes=image_blob)))])\n```\n2. run the agent against Azure OpenAI\n\n### Expected Behavior\n\nThe ability to use ImageSource optionally with an base64 encoded image.\n\n### Actual Behavior\n\nAzure OpenAI expects base64 encoded format instead of bytes.\n\nI tried using this code:\n\n```\nMessage(role=\"user\", content=[ContentBlock(image=ImageContent(format=ImageFormat[str(file_extension)], source=ImageSource(bytes=image_blob)))])\n```\n\nBut i received the following error when running the agent with the message:\nUnicodeDecodeError('utf-8', b'\\xff\\xd8\\xff\\...\nreason =\n 'invalid start byte'\nstart =\n 0\n\n\n\n### Additional Context\n\nThis works within a normal completion:\n\n```\nuser_content = [\n        {\n            \"type\": \"image_url\",\n            \"image_url\": {\n                \"url\": f\"data:image/jpeg;base64,{encoded_image}\"\n            }\n        }\n    ]\n\n```\n\n### Possible Solution\n\nSupport base64 encoded string in ImageSource\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "patrickpenn",
      "author_type": "User",
      "created_at": "2025-05-23T13:54:43Z",
      "updated_at": "2025-06-03T21:42:06Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/85/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/85",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/85",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.391672",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thanks for reporting this @patrickpenn, the team is taking a look in to it.",
          "created_at": "2025-06-03T21:42:05Z"
        }
      ]
    },
    {
      "issue_number": 157,
      "title": "[BUG] Duplicated answer",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.6\n\n### Python Version\n\n3.12\n\n### Operating System\n\nmacOs 14.6.1\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n```\nfrom strands import Agent\nfrom strands.models.litellm import LiteLLMModel\nfrom strands_tools import calculator\n\nmodel = LiteLLMModel(\n    client_args={\n        \"api_key\": \"<my_api_key>\",\n    },\n    # **model_config\n    model_id=\"gpt-4.1-mini\",\n    params={\n        \"max_tokens\": 1000,\n        \"temperature\": 0.7,\n    }\n)\n\nagent = Agent(system_prompt=(\n        \"You are a an expert in math. \"\n    ), model=model, tools=[calculator])\nresponse = agent(\"What's 2+89\")\nprint(response)\n```\n\n### Expected Behavior\n\nNo duplicated answer\n\n### Actual Behavior\n\n<img width=\"802\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/57891bd4-c5c0-4fd4-b485-d2e4968e8427\" />\n\n### Additional Context\n\nI've tried using OpenAI instead of LiteLLM and the answer is still duplicated. Anthropic is duplicated as well.\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "eibednejo",
      "author_type": "User",
      "created_at": "2025-05-31T13:58:03Z",
      "updated_at": "2025-06-03T21:36:26Z",
      "closed_at": "2025-06-03T21:36:26Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/157/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/157",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/157",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.669680",
      "comments": [
        {
          "author": "mazyu36",
          "body": "Default callback handler is `PrintingCallbackHandler`.\n\nhttps://strandsagents.com/latest/user-guide/concepts/streaming/callback-handlers/#default-callback-handler\n\nTo prevent duplicate answers, I think we should either set the callback to None or remove a print statement.",
          "created_at": "2025-06-01T14:03:56Z"
        },
        {
          "author": "awsarron",
          "body": "Thanks for raising this @eibednejo. As @mazyu36 pointed out, this is the expected behavior but it's a little hidden in the documentation at the moment. I've taken a note for us to improve that.\n\nIn your code sample:\n\n```python\nfrom strands import Agent\nfrom strands.models.litellm import LiteLLMModel",
          "created_at": "2025-06-03T21:35:11Z"
        }
      ]
    },
    {
      "issue_number": 32,
      "title": "[FEATURE] Add support for non-streaming bedrock models",
      "body": "### Problem Statement\n\nThe strands BedrockModel class currently only supports the `converseStream` API when calling models. Certain models only support the non-streaming `converse` API ([see \"Streaming Supported\" column](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html)). This model providers should support both streaming and non streaming models.\n\n### Proposed Solution\n\n_No response_\n\n### Use Case\n\n```\nfrom strands import Agent\nfrom strands.models.bedrock import Bedrock Model\n\nmodel = BedrockModel(model_id=\"cohere.rerank-v3-5:0\", streaming=False)\nagent = Agent(model=model)\nagent(\"Hello!\")\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "Unshure",
      "author_type": "User",
      "created_at": "2025-05-17T13:16:06Z",
      "updated_at": "2025-06-02T16:49:49Z",
      "closed_at": "2025-06-02T16:49:48Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/32/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Unshure"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/32",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/32",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:52.859288",
      "comments": [
        {
          "author": "massi-ang",
          "body": "All text generation models available in Bedrock support streaming. The example given in the issue is for a rerank model which is not suitable as LLM for creating an agent. The same for embedding model. Can you explain which non-streaming text generation LLM you would like to support? Or do you want ",
          "created_at": "2025-05-20T09:19:32Z"
        },
        {
          "author": "yhou-uk",
          "body": "Hi Massi, good to see you here!\n\nCurrently Strands only supports FMs that have the \"streaming tool use\" feature. Please see [this document](https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference-supported-models-features.html). Meta and Mistral models are not supported due to th",
          "created_at": "2025-05-20T11:24:15Z"
        },
        {
          "author": "Unshure",
          "body": "This feature has been implemented as a part of this pr: https://github.com/strands-agents/sdk-python/pull/75",
          "created_at": "2025-06-02T16:49:48Z"
        }
      ]
    },
    {
      "issue_number": 79,
      "title": "[BUG] Reasoning events not properly implemented",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.2\n\n### Python Version\n\n3.11.5\n\n### Operating System\n\nmacOS 15.3\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Create an agent with tools:\n\n```python\nfrom strands import Agent, tool\n\n@tool\ndef calculator(expression: str) -> str:\n    \"\"\"Simple calculator tool.\"\"\"\n    result = eval(expression, {\"__builtins__\": {}})\n    return f\"Result: {result}\"\n\ndef track_reasoning(**kwargs):\n    if kwargs.get(\"reasoning\") is True and \"reasoningText\" in kwargs:\n        print(f\"REASONING: {kwargs['reasoningText']}\")\n\nagent = Agent(\n    model=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    tools=[calculator],\n    callback_handler=track_reasoning\n)\n```\n\n2. Send a query that should use a tool:\n\n```python\nresponse = agent(\"Calculate 42 * 7 and explain your thinking\")\n```\n\n3. Observe that no reasoning events are emitted, although Claude is clearly providing reasoning before using the tool.\n\n### Expected Behavior\n\nWhen a model uses a tool, reasoning text that precedes the tool use should be detected and emitted as reasoning events via the callback handler with `reasoning=True` and `reasoningText` containing the model's explanation. The [documentation](https://strandsagents.com/0.1.x/user-guide/concepts/streaming/callback-handlers/) states that this is the case as well.\n\nThis aligns with AWS Bedrock's API design which includes support for `reasoningContent` fields (see [AWS documentation for DeepSeek models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-deepseek.html)), indicating reasoning detection is an intended feature. However, this is only true when using the Converse API with DeepSeek models.\n\n### Actual Behavior\n\nThe SDK is only looking for a `reasoningContent` field in the streaming events from AWS Bedrock. However, these fields are not populated in Claude's current streaming format - instead, Claude provides its reasoning as regular text chunks before initiating tool use.\n\nAs a result:\n\n- No reasoning events are emitted when Claude explains its thinking\n- Callbacks with `reasoning=True` and `reasoningText` are never triggered\n- The reasoning appears as regular text in the final output, not distinguished as reasoning\n\nThis happens because in `streaming.py`, the code only emits reasoning events when it sees a specific `reasoningContent` field:\n\n```python\nelif \"reasoningContent\" in delta_content:\n    if \"text\" in delta_content[\"reasoningContent\"]:\n        # Emit reasoning events...\n```\n\n### Additional Context\n\nThe AWS Bedrock API has a design that includes reasoning content fields. According to the [DeepSeek models documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-deepseek.html), the API can include a `reasoningContent` field with `reasoningText`, suggesting this is part of the intended design.\n\nCurrently, Claude models send their reasoning as regular text chunks before indicating tool use. This text represents the model's deliberate reasoning process but isn't marked with special fields.\n\nA clear pattern exists:\n\n1. Claude sends explanatory text: \"I need to calculate X, so I'll use the calculator...\"\n2. This is followed by a tool use event\n3. This sequence indicates reasoning was provided, but the SDK doesn't recognize it\n\n### Possible Solution\n\nImplement a smarter reasoning detection mechanism that:\n\n1. Buffers regular text content as potential reasoning\n2. When a tool use signal is detected (either via contentBlockStart with toolUse or messageStop with \"tool_use\" reason), treat the accumulated text as reasoning\n3. Emit appropriate reasoning events with the buffered text\n4. Include proper state management to handle multiple tool uses and to discard potential reasoning when no tool follows\n\nThis approach would:\n\n- Work with the current Claude over Bedrock API behavior\n- Be future-compatible with models that might use dedicated reasoning fields\n- Not require any special prompting from users\n- Provide a better developer experience by exposing reasoning events as documented\n\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "niklas-palm",
      "author_type": "User",
      "created_at": "2025-05-22T14:20:13Z",
      "updated_at": "2025-05-30T14:45:17Z",
      "closed_at": "2025-05-30T14:44:26Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/79/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/79",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/79",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:53.096229",
      "comments": [
        {
          "author": "cagataycali",
          "body": "Hey niklas!\n\nSonnet 3.7 default settings does not stream thinking in default settings, if you give it a try with this version you can see the streaming thinking:\n\nModified snippet:\n\n```python\nfrom strands import Agent, tool\nfrom strands.models.bedrock import BedrockModel\n\nfrom botocore.config import",
          "created_at": "2025-05-22T18:35:11Z"
        },
        {
          "author": "niklas-palm",
          "body": "I understand it's possible to make it work, but what you suggest would only work with models that have an explicit \"thinking\" parameter. Nova models, Llama models etc would not work, and there is no mention about this in the documentation either.\n\nMy 2 cents is that reasoning is tied to the model de",
          "created_at": "2025-05-23T11:30:32Z"
        },
        {
          "author": "awsarron",
          "body": "Hi @niklas-palm, thank you for your additional feedback.\n\nThere are two types of text returned by models:\n1. A regular text stream (all text models)\n2. Extended thinking (only some models, like Claude 3.7 - https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking)\n\nFor 1) these are emi",
          "created_at": "2025-05-24T02:19:24Z"
        },
        {
          "author": "awsarron",
          "body": "Hey @niklas-palm, I'm closing this one as it has been a week without a response. Happy to discuss further!",
          "created_at": "2025-05-30T14:45:16Z"
        }
      ]
    },
    {
      "issue_number": 149,
      "title": "[TASK] Handle ModelThrottleException and ContextWindowOverflowException in all Model Providers #148",
      "body": "## Overview\n\nIn the `stream` method of each model provider, it is expected that throttling and overflow exceptions will be converted to the equivalent `ModelThrottledException` and `ContextWindowOverflowException` types respectively ([example](https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/anthropic.py)). This is important for triggering special handling workflows in the event loop. Currently, only the [Anthropic](https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/anthropic.py) and [Bedrock](https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/bedrock.py) model providers implement the conversions. We need to do the same for all other providers.\n",
      "state": "open",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-05-30T13:42:42Z",
      "updated_at": "2025-05-30T13:44:36Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/149/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/149",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/149",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:53.327347",
      "comments": []
    },
    {
      "issue_number": 82,
      "title": "[FEATURE] Provide agent access via web UI and API in addition to the CLI",
      "body": "### Problem Statement\n\nOne of the key activities when building agents is prompt engineering. We need to refine the prompts, and to test their effectiveness we need a feature to quickly experiment with agents with different modes of operation. It would be great to quickly spin up agents in a web interface and API endpoint. \n\nFor instance, Google ADK allows you to start any agent in a web interface, and exposes all the events happening with the agent (e.g. request, responses, MCP calls, etc). It also provides an evaluation interface, which we can use to quickly run a set of test cases for the agent. It also allows querying agents via a standard API endpoint, which makes it easy to deploy these agents.\n\n\n\n### Proposed Solution\n\nMy proposal is to create a web interface similar to [Google ADK](https://google.github.io/adk-docs/get-started/quickstart/#dev-ui-adk-web), with pretty much the same features. Also, it would be great to have the API endpoint access mode as well, again, similar to Google ADK.\n\n### Use Case\n\n1. Quickly test agents and debug MCP calls\n2. Deploy agents using FastAPI endpoints\n3. Enable non-engineering roles to iterate on prompts and agent development\n4. Evaluate agents through a set of standard use cases\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "lucasdamiani",
      "author_type": "User",
      "created_at": "2025-05-22T16:58:49Z",
      "updated_at": "2025-05-30T13:14:24Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/82/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/82",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/82",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:53.327367",
      "comments": [
        {
          "author": "osteffmann",
          "body": "Happy to contribute for this enhancement. You can assign it to me.",
          "created_at": "2025-05-30T13:14:01Z"
        }
      ]
    },
    {
      "issue_number": 43,
      "title": "[FEATURE]Support for vLLM as Model Provider",
      "body": "### Problem Statement\n\n Support for vLLM as Model Provider\n\n### Proposed Solution\n\nCreate a new vLLM Model Provider\n\n### Use Case\n\nvLLM will be available as a Model Provider in strands\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "AhilanPonnusamy",
      "author_type": "User",
      "created_at": "2025-05-19T04:05:32Z",
      "updated_at": "2025-05-30T00:04:38Z",
      "closed_at": "2025-05-30T00:03:42Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/43/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/43",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/43",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:53.585670",
      "comments": [
        {
          "author": "AhilanPonnusamy",
          "body": "https://github.com/strands-agents/sdk-python/pull/44",
          "created_at": "2025-05-19T04:44:30Z"
        },
        {
          "author": "pgrayy",
          "body": "> [#44](https://github.com/strands-agents/sdk-python/pull/44)\n\nLeft comments on the PR.",
          "created_at": "2025-05-21T13:14:18Z"
        },
        {
          "author": "pgrayy",
          "body": "Following the discussion and code samples presented in https://github.com/strands-agents/sdk-python/pull/44, we are going to encourage customers to use either the OpenAI or LiteLLM model providers to interact with models served by vLLM. If you have any more concerns or questions, please don't hesita",
          "created_at": "2025-05-30T00:03:42Z"
        }
      ]
    },
    {
      "issue_number": 54,
      "title": "[BUG] tavily-mcp@0.1.3 cannot pass the tool name validation in Strands",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.2\n\n### Python Version\n\n3.13.2\n\n### Operating System\n\nubuntu\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nI am buiding a agent with MCP server from tavily search https://docs.tavily.com/documentation/mcp\nhowever it raises exception :\n```\ntool_name=<tavily-search> | invalid tool name pattern\n```\n\n\nthan I looked at the code,\nhttps://github.com/strands-agents/sdk-python/blob/912e1104fd52e3da99767a644b90b22b7eb606de/src/strands/tools/tools.py#L50\n it seems that the validation regex did not include pattern as \"tavily-search\".\n```\ndef validate_tool_use_name(tool: ToolUse) -> None:\n    \"\"\"Validate the name of a tool use.\n\n    Args:\n        tool: The tool use to validate.\n\n    Raises:\n        InvalidToolUseNameException: If the tool name is invalid.\n    \"\"\"\n    # We need to fix some typing here, because we dont actually expect a ToolUse, but dict[str, Any]\n    if \"name\" not in tool:\n        message = \"tool name missing\"  # type: ignore[unreachable]\n        logger.warning(message)\n        raise InvalidToolUseNameException(message)\n\n    tool_name = tool[\"name\"]\n    tool_name_pattern = r\"^[a-zA-Z][a-zA-Z0-9_]*$\"\n```\n\n\n\n### Expected Behavior\n\nshould pass the validation, as tavily mcp is widely used in agents\n\n### Actual Behavior\n\nfailed to pass the name validation\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\ntool_name_pattern = r\"^[a-zA-Z][a-zA-Z0-9_\\-]*$\"  # Added hyphen to allowed characters\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "xiehust",
      "author_type": "User",
      "created_at": "2025-05-20T05:16:44Z",
      "updated_at": "2025-05-29T13:05:02Z",
      "closed_at": "2025-05-29T00:37:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/54/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/54",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/54",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:53.811428",
      "comments": [
        {
          "author": "ybalbert001",
          "body": "I reproduce this bug",
          "created_at": "2025-05-27T02:59:02Z"
        },
        {
          "author": "zastrowm",
          "body": "Fixed by #55",
          "created_at": "2025-05-29T00:37:49Z"
        },
        {
          "author": "zastrowm",
          "body": "Created #139 to track direct method invocation of tools with hyphen in the name ",
          "created_at": "2025-05-29T00:47:23Z"
        },
        {
          "author": "mrityunjayshukla",
          "body": "@zastrowm is there an ETA to merge the fix for this bug?",
          "created_at": "2025-05-29T07:43:09Z"
        },
        {
          "author": "zastrowm",
          "body": "> @zastrowm is there an ETA to merge the fix for this bug?\n\n#55 fixes this and was merged yesterday. It should be available the next time we release to pypi ",
          "created_at": "2025-05-29T13:05:01Z"
        }
      ]
    },
    {
      "issue_number": 137,
      "title": "[FEATURE] Designing a mechanism to reuse patterns contributed by the community",
      "body": "### Problem Statement\n\n\nI would like to reuse the patterns contributed by the community. Currently there is a repository collecting samples of using strands (https://github.com/strands-agents/samples), this is great for teaching and demo purposes but the user needs to copy and paste from the jupyter notebook if they need to use the ideas from the samples.\n\nThe Strands SDK contains several options that can be potentially customized by the user by injecting in the Agent constructor. For example, https://github.com/strands-agents/sdk-python/blob/bd60f90e53d11757b30195c5024575ab05ccfe04/src/strands/types/tools.py#L240 implemented by https://github.com/strands-agents/sdk-python/blob/bd60f90e53d11757b30195c5024575ab05ccfe04/src/strands/handlers/tool_handler.py#L13\n\nCurrently, there is no mechanism to reuse community contributed custom implementation of these classes.\n\n### Proposed Solution\n\nI propose to create a new package `strands-agents/contrib` where the community curate useful patterns to be reused. The contrib package is published as `strands-agents-contribe` which can be imported via `strands.contrib` (or `strands_contrib`, whichever makes sense)\n\n`strands/contrib/__init__.py`\n\n```python\ntry:\n  from strands_contrib import *\nexcept ImportError as e:\n  raise ImportError('strands_contrib is not installed, use `pip install \"strands-agents[contrib]\"`) from e\n```\n\n\nThis has been the practice of various successful open source projects to include optional features, `requests[security]`, `fastapi[standard]`.\n\n### Use Case\n\nI work on an agent that can do cost analysis and data visualization. There are some use cases where a customized tool-call handler would be very useful.\n\nFor example, `fetch_cost` fetches the cost data from a remote data store, `create_chart` creates a chart from this data. In my implementation of `create_chart`, I use [vega-lite](https://vega.github.io/vega-lite/docs/) to declaratively create the chart. Since the second tool needs to accept the output from the first tool as a field, I would like the agent to be able to reference the previous tool `Output[1]` as the `data` field of its input. In order make the output referencing work, the tool handler needs to \n\n1. save the output in an array\n2. add a prompt in the tool output so that LLM know this output is `Output[1]`\n3. the `tool_handler` should also contribute the instruction of referencing output to the system prompt\n4. scan the LLM generated tool input for strings like `Output\\[\\d+\\]` and substitute with the actual value\n\nThe above is just an example, it may or may not be generalized to other SDK users. But there could be various other use case where customized implementation of the abstract classes such as `ToolHandler` or `ConversationManager` can be reused as patterns. When the pattern is repeatedly requested, as a SDK user, I want to conveniently import the patterns contributed by the community as `strands.contrib.tool_handlers.<...>`.\n\n### Alternatives Solutions\n\n1. keep using the https://github.com/strands-agents/samples repository \n2. create an `awesome-x` to collect curated resources of building with strands\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "wzxxing",
      "author_type": "User",
      "created_at": "2025-05-28T21:14:16Z",
      "updated_at": "2025-05-29T00:10:39Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/137/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/137",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/137",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.038144",
      "comments": []
    },
    {
      "issue_number": 28,
      "title": "[BUG] Bedrock API Throttling Exception in Strands CLI Impacting Basic Operations",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.1\n\n### Python Version\n\n3.10.17\n\n### Operating System\n\nmacOS 15.4.1 \n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n```markdown\n1. Install and configure the latest version of Strands CLI\n2. Ensure AWS credentials are properly configured with Bedrock access\n3. Launch Strands CLI using the standard command: `strands`\n4. Submit a simple query (even a basic \"hello\" prompt)\n5. Observe that the system returns the throttling error after attempting retries\n6. Wait several minutes and try again with another simple query\n7. Notice that the throttling error persists across multiple sessions\n```\n\n\n### Expected Behavior\n\n```markdown\nThe Strands CLI should process basic queries without encountering throttling exceptions. Each request should be handled properly with appropriate rate limiting management that allows for normal operation, even if occasional pauses are needed between complex queries.\n```\n\n\n### Actual Behavior\n\n```markdown\nThe application consistently throws `ModelThrottledException` errors even with minimal queries. After four retry attempts, the system fails with the following error:\n\n```\nTraceback (most recent call last):\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/models/bedrock.py\", line 249, in stream\n    response = self.client.converse_stream(**request)\n  File \"/opt/homebrew/lib/python3.10/site-packages/botocore/client.py\", line 595, in _api_call\n    return self._make_api_call(operation_name, kwargs)\n  File \"/opt/homebrew/lib/python3.10/site-packages/botocore/context.py\", line 123, in wrapper\n    return func(*args, **kwargs)\n  File \"/opt/homebrew/lib/python3.10/site-packages/botocore/client.py\", line 1058, in _make_api_call\n    raise error_class(parsed_response, operation_name)\nbotocore.errorfactory.ThrottlingException: An error occurred (ThrottlingException) when calling the ConverseStream operation (reached max retries: 4): Too many tokens, please wait before trying again.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 272, in event_loop_cycle\n    return recurse_event_loop(\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 350, in recurse_event_loop\n    ) = event_loop_cycle(**kwargs)\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 186, in event_loop_cycle\n    raise e\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/types/models.py\", line 115, in converse\n    for event in response:\n  File \"/opt/homebrew/lib/python3.10/site-packages/strands/models/bedrock.py\", line 300, in stream\n    raise ModelThrottledException(str(e)) from e\nstrands.types.exceptions.ModelThrottledException: An error occurred (ThrottlingException) when calling the ConverseStream operation (reached max retries: 4): Too many tokens, please wait before trying again.\n```\n\nThis error effectively renders the CLI unusable for even the most basic operations. The system does not implement adaptive backoff or token management strategies that would allow recovery from throttling states.\n```\n\n\n\n### Additional Context\n\n```markdown\nThis issue appears consistently across different terminal sessions and persists even after system reboots. The error is specifically related to AWS Bedrock's rate limiting, but the application does not handle these limits gracefully.\n\nThe stack trace indicates the failure happens during the streaming response process, suggesting that the token management system is not properly accounting for token consumption rates or implementing appropriate throttling avoidance strategies.\n```\n\n\n### Possible Solution\n\n```markdown\nSeveral potential solutions could address this issue:\n\n1. **Improve token management**: Implement a token budget system that tracks usage and adjusts request sizes dynamically.\n\n2. **Enhanced backoff strategy**: Replace the current retry mechanism with a more sophisticated exponential backoff with jitter that adapts to Bedrock's specific throttling patterns.\n\n3. **Request chunking**: Break larger requests into smaller chunks with appropriate delays between them to stay below rate limits.\n\n4. **Client-side rate limiting**: Implement proactive rate limiting on the client side that prevents hitting AWS throttling limits by managing request timing.\n\n5. **Response caching**: Cache responses for similar queries to reduce redundant API calls and token consumption.\n\n6. **User-configurable settings**: Add configuration options that allow users to adjust request patterns based on their specific AWS account limits.\n```\n\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "mertozbas",
      "author_type": "User",
      "created_at": "2025-05-17T02:08:01Z",
      "updated_at": "2025-05-27T23:14:53Z",
      "closed_at": "2025-05-17T02:34:10Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/28/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/28",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/28",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.038242",
      "comments": [
        {
          "author": "ricardoceci",
          "body": "Why is this closed? I still get the throttling error.",
          "created_at": "2025-05-27T23:14:52Z"
        }
      ]
    },
    {
      "issue_number": 114,
      "title": "[BUG] Protocol Error from Bedrock not handled well",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.4\n\n### Python Version\n\n3.13\n\n### Operating System\n\nMac\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nI have an agent that uses another agent as a tool. Both are using Nova Premiere in this example if that's important\n\n\nAt one point the subagent received a ProtocolError in the event loop which seems to have been handed back to the orchestrator agent. If I tell my orchestrator to continue my orchestrator tells me it receives the same error. I dunno if this is now bad state locally or if there is something going wrong with the use of the bedrock client.\n\n```\nlERROR | strands.event_loop.event_loop | cycle failed\nTraceback (most recent call last):\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 272, in event_loop_cycle\n    return recurse_event_loop(\n        model=model,\n    ...<5 lines>...\n        **kwargs,\n    )\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 350, in recurse_event_loop\n    ) = event_loop_cycle(**kwargs)\n        ~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 190, in event_loop_cycle\n    raise e\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/event_loop.py\", line 148, in event_loop_cycle\n    stop_reason, message, usage, metrics, kwargs[\"request_state\"] = stream_messages(\n                                                                    ~~~~~~~~~~~~~~~^\n        model,\n        ^^^^^^\n    ...<4 lines>...\n        **kwargs,\n        ^^^^^^^^^\n    )\n    ^\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 340, in stream_messages\n    return process_stream(chunks, callback_handler, messages, **kwargs)\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/event_loop/streaming.py\", line 290, in process_stream\n    for chunk in chunks:\n                 ^^^^^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/types/models/model.py\", line 115, in converse\n    for event in response:\n                 ^^^^^^^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/strands/models/bedrock.py\", line 267, in stream\n    for chunk in response[\"stream\"]:\n                 ~~~~~~~~^^^^^^^^^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/botocore/eventstream.py\", line 591, in __iter__\n    for event in self._event_generator:\n                 ^^^^^^^^^^^^^^^^^^^^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/botocore/eventstream.py\", line 598, in _create_raw_event_generator\n    for chunk in self._raw_stream.stream():\n                 ~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/urllib3/response.py\", line 1063, in stream\n    yield from self.read_chunked(amt, decode_content=decode_content)\n  File \"/myagent/.venv/lib/python3.13/site-packages/urllib3/response.py\", line 1219, in read_chunked\n    self._update_chunk_length()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/myagent/.venv/lib/python3.13/site-packages/urllib3/response.py\", line 1149, in _update_chunk_length\n    raise ProtocolError(\"Response ended prematurely\") from None\nurllib3.exceptions.ProtocolError: Response ended prematurely\n\n\n<thinking>The attempt failed with the same ValidationException. This indicates a persistent system-level error rather than parameter issues...\n```\n\n### Expected Behavior\n\nIf this is a transport error I expect the SDK to retry invisibly. \n\n### Actual Behavior\n\nI'm now in a broken agent and need to retry\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "open",
      "author": "prestomation",
      "author_type": "User",
      "created_at": "2025-05-25T23:31:30Z",
      "updated_at": "2025-05-27T22:43:33Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/114/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/114",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/114",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.248173",
      "comments": [
        {
          "author": "awsarron",
          "body": "Hi @prestomation, thank you for reaching out.\n\nCan you please share a code sample that reproduces the issue, or your full agent and tools code?\n\nI wonder if https://zenn-dev.translate.goog/moritalous/scraps/db12bad93057f3?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en&_x_tr_pto=wapp&_x_tr_hist=true could be ",
          "created_at": "2025-05-25T23:37:41Z"
        },
        {
          "author": "prestomation",
          "body": "It's not deterministic and I've only seen it once but my general pattern is like this:\n\n```\ndef build_subagent(model, tools):\n\n    subagent = Agent(system_prompt=\"some prompt\", model=model, tools=tools)\n    @tool\n    def build(query: str) -> str:\n        return subagent(query)\nsubagent = build_subag",
          "created_at": "2025-05-26T22:49:15Z"
        }
      ]
    },
    {
      "issue_number": 130,
      "title": "[BUG] `swarm` always logs to stdout",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.5\n\n### Python Version\n\n3.13.2\n\n### Operating System\n\nmacOS 15.5\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nRun the following simple swarm agent:\n\n```\nfrom strands import Agent\nfrom strands_tools import swarm\n\nagent = Agent(tools=[swarm], callback_handler=None)\n\nresult = agent.tool.swarm(\n    task=\"Come up with 10 of the funniest jokes you can about chickens\",\n    swarm_size=3,\n    coordination_pattern=\"hybrid\"\n)\n\nfor c in result[\"content\"]:\n    print(c[\"text\"])\n```\n\n### Expected Behavior\n\nThe agent is set to have no callback handler (replacing the default ), so it shouldn't have any output. \n\n### Actual Behavior\n\nHowever, when the swarm tool is invoked, each swarm agent streams its output to stdout at the same time, making it hard to read.\n\n```\n# Chicken# Hybrid Agent 1  JokesContribution Contribution - - Phase Agent 0\n\nHere 3\n\nHere are 10  are 10 oforiginal chicken jokes that the funniest chicken balance# Agent 2: Chicken Joke Contribution (Phase 0)\n\nHere are 10 funny chicken jokes I jokes I've develope classicd:\n\n1. humor with some fresh can Why did the chicken takes join a:\n\n1. come up with: band? Because it Why did the chicken\n\n1. Why did the chicken join join had the a a band? It ban drumsticks! had excellentd? Because it ha drumd the\n\n2. What sticks! drumdo you call a chicken\n...\n```\n\nThe final result is printed correctly afterwards.\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "brdskggs",
      "author_type": "User",
      "created_at": "2025-05-27T19:29:06Z",
      "updated_at": "2025-05-27T21:01:39Z",
      "closed_at": "2025-05-27T21:01:38Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/130/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/130",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/130",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.487481",
      "comments": [
        {
          "author": "brdskggs",
          "body": "Moved to https://github.com/strands-agents/tools/issues/54",
          "created_at": "2025-05-27T21:01:38Z"
        }
      ]
    },
    {
      "issue_number": 118,
      "title": "[BUG] stream_async does not initialize the parent span in opentelemetry",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.4\n\n### Python Version\n\n3.13.1\n\n### Operating System\n\nmacOS 15.5\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. Install Strands using pip\n2. Run an agent call using stream_async, and configure the opentelemetry (to the console or a collector)\n3. Review the spans. The Cycle spans does not have a parent \"Strands Agent\" span\n\n### Expected Behavior\n\nCreate a \"Strands Agent\" Span\n\n<img width=\"398\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ed1fab89-f271-4b61-a5cc-f54eb11831a2\" />\n\n### Actual Behavior\n\nThe parent span is not created\n\n<img width=\"399\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fae1c241-840f-4b4b-ba9d-9c38e5546f03\" />\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\nInitialize the self.tracer in the stream_async method of the Agent class, as it is initialized in the __call__ method.\nI'd add this peace of code to the stream_async method:\n`self.trace_span = self.tracer.start_agent_span(\n            prompt=prompt,\n            model_id=model_id,\n            tools=self.tool_names,\n            system_prompt=self.system_prompt,\n            custom_trace_attributes=self.trace_attributes,\n        )`\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "jros2300",
      "author_type": "User",
      "created_at": "2025-05-26T13:44:56Z",
      "updated_at": "2025-05-26T23:09:18Z",
      "closed_at": "2025-05-26T23:09:17Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/118/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/118",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/118",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.705035",
      "comments": [
        {
          "author": "awsarron",
          "body": "Hi @jros2300, thank you for reporting this issue.\n\nI just published https://github.com/strands-agents/sdk-python/pull/119 that should resolve this in the next SDK version release.",
          "created_at": "2025-05-26T16:37:56Z"
        },
        {
          "author": "awsarron",
          "body": "The fix for this was released in v0.1.5 of the SDK. Thank you again for the report @jros2300!",
          "created_at": "2025-05-26T23:09:17Z"
        }
      ]
    },
    {
      "issue_number": 95,
      "title": "[BUG]: SlidingWindowConversationManager corrupts toolResult JSON structure causing LLM hallucinations",
      "body": "## Description\n\nThe SlidingWindowConversationManager converts structured toolResult JSON to plain text when trimming conversation history, which causes LLMs to lose the ability to properly parse tool results and leads to hallucinations.\n\n## Current Behavior\n\nWhen the conversation exceeds the window size and the trim point falls on a message containing toolResult content, the `_map_tool_result_content()` method converts structured JSON like:\n\n```json\n{\"toolResult\": {\"toolUseId\": \"123\", \"content\": [{\"text\": \"Result\"}], \"status\": \"success\"}}\n```\n\nInto plain text like:\n```\n\"Tool Result Text Content: Result\"\n\"Tool Result JSON Content: {...}\"\n\"Tool Result Status: success\"\n```\n\nThis flattened text format loses the structured information that LLMs need to understand tool results, causing them to hallucinate and make incorrect tool calls.\n\n## Expected Behavior\n\nThe tool result JSON structure should be preserved throughout the conversation history, even when messages are trimmed due to window size constraints.\n\n## Impact\n\n- LLMs cannot properly parse tool results after context reduction\n- Leads to tool call hallucinations\n- May be related to repeated \"bedrock threw context window overflow error\" warnings\n- Breaks tool interaction patterns when conversations exceed window size\n\n## Root Cause\n\nThe `_map_tool_result_content()` method in `sliding_window_conversation_manager.py` was designed to convert tool results to plain text to work around the limitation of needing ToolUse and ToolResults to be paired. However, this approach corrupts the message structure that LLMs depend on.\n\n## Comparison with Internal Version\n\nThe internal Phoenix window manager (linked in the issue) correctly preserves tool use/result pairs without corrupting the JSON structure. It uses a different approach with `_find_valid_cut_index()` that adjusts cut points to keep tool pairs together.\n\n## Proposed Solution\n\nThe fix in PR https://github.com/strands-agents/sdk-python/pull/94 removes the problematic `_map_tool_result_content()` method and implements a new approach that:\n1. Maps tool IDs to track relationships between toolUse and toolResult\n2. Finds safe cutting points that preserve tool pairs together\n3. Maintains the original JSON structure throughout the conversation\n\n## Additional Context\n\nThis issue may also be related to the repeated \"bedrock threw context window overflow error\" warnings observed in some cases, as the corrupted message structure might be causing invalid requests to Bedrock.",
      "state": "closed",
      "author": "cagataycali",
      "author_type": "User",
      "created_at": "2025-05-23T19:51:03Z",
      "updated_at": "2025-05-26T18:40:00Z",
      "closed_at": "2025-05-26T18:40:00Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/95/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/95",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/95",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.927813",
      "comments": []
    },
    {
      "issue_number": 111,
      "title": "[FEATURE] Implement a summarizing conversation  manager",
      "body": "### Problem Statement\n\nCurrently, the `SlidingWindowConversationManager` only offers a \"hard truncation\" approach - when the conversation exceeds the window size, older messages are simply discarded. While this effectively manages memory and costs, it creates a significant limitation: all context from the beginning of the conversation is permanently lost.\n\nThis means that in longer conversations, users may need to re-explain background information, repeat previous decisions, or lose the benefit of earlier troubleshooting steps.\n\nThe sliding window approach treats all messages as equally disposable based solely on their age regardless of their semantic importance to the ongoing conversation.\n\n### Proposed Solution\n\nImplement a `SummarizingConversationManager` that preserves conversation context by summarizing older messages instead of discarding them when the window limit is exceeded.\n\n- Flexible configuration: configurable ratio of messages to summarize vs preserve;\n- Fallback: falls back to sliding window behavior when summarization fails;\n- Cost awareness: can use a separate (and potentially faster/cheaper) model for summarization.\n\n```python\nsummarization_model = AnthropicModel(\n    model_id=\"claude-opus-4-20250514\",\n    max_tokens=500,  # Keep summaries concise\n    params={\n        \"temperature\": 0.3  # Lower temperature for more consistent summaries\n    },\n)\n\nmanager = SummarizingConversationManager(\n    window_size=6,  # Window treshold\n    enable_summarization=True,\n    summarization_model=summarization_model,  # Use Anthropic model for summaries\n    summary_ratio=0.5,  # Summarize 50% of oldest messages\n    preserve_recent_messages=3,  # Always keep 3 most recent messages\n)\n```\n\n```mermaid\ngraph TD\n      A[New Message Added] --> B{Messages > Window Size?}\n      B -->|No| C[Continue Normal Flow]\n      B -->|Yes| D{Summarization Enabled?}\n\n      D -->|No| E[SlidingWindowConversationManager]\n      E --> F[Trim Oldest Messages]\n      F --> G[Preserve Tool Use Pairs]\n      G --> H[Return Trimmed Messages]\n\n      D -->|Yes| I[SummarizingConversationManager]\n      I --> J{Enough Messages to Summarize?}\n      J -->|No| K[Fallback to Sliding Window]\n      K --> F\n\n      J -->|Yes| L[Calculate Messages to Summarize]\n      L --> M[Extract Oldest Messages]\n      M --> N[Generate AI Summary]\n\n      N --> O{Summary Generation Success?}\n      O -->|No| P[Log Warning & Fallback]\n      P --> F\n\n      O -->|Yes| Q[Create Summary Message]\n      Q --> R[Replace Old Messages with Summary]\n      R --> S[Preserve Recent Messages]\n      S --> T[Return: Summary + Recent Messages]\n\n      style A fill:#e1f5fe\n      style D fill:#fff3e0\n      style I fill:#e8f5e8\n      style E fill:#fce4ec\n      style N fill:#f3e5f5\n      style T fill:#e8f5e8\n      style H fill:#fce4ec\n```\n\n### Use Case\n\nWhen agents deal with long conversations, the conversation eventually hits the model's context limit. At that point, we can either cut off the older messages and lose that context forever, or summarize the earlier parts so the agent can still reference what happened before. A summarization technique prevents the \"goldfish memory\" problem where the agent suddenly forgets everything that was discussed in the first beginning of the conversation.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "stefanoamorelli",
      "author_type": "User",
      "created_at": "2025-05-25T15:32:39Z",
      "updated_at": "2025-05-26T18:02:12Z",
      "closed_at": "2025-05-26T17:49:06Z",
      "labels": [
        "duplicate",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/111/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/111",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/111",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:54.927835",
      "comments": [
        {
          "author": "Unshure",
          "body": "Hi @stefanoamorelli, thanks for making this feature request and and associated pull requests! We already have a feature request open for this type of a feature, with a slightly different approach: https://github.com/strands-agents/sdk-python/issues/90\n\nOne main difference between the approaches is u",
          "created_at": "2025-05-26T17:49:06Z"
        },
        {
          "author": "stefanoamorelli",
          "body": "Apologies, indeed, I did not see the open issue (did not search exhaustively). Sure, let's continue the conversation there!",
          "created_at": "2025-05-26T18:02:11Z"
        }
      ]
    },
    {
      "issue_number": 98,
      "title": "[FEATURE] Show reasoning text in PrintingCallbackHandler",
      "body": "### Problem Statement\n\nIn `PrintingCallbackHandler` (https://github.com/strands-agents/sdk-python/blob/61c3bf794f81c46aef4cd40ded6a68b7b48acb20/src/strands/handlers/callback_handler.py#L7C7-L7C30) I would like reasoning text (extended thinking) to be printed for models that support it.\n\n### Proposed Solution\n\nModify the `PrintingCallbackHandler` to handle `reasoningText` events.\n\nExample in agent-builder:\nhttps://github.com/strands-agents/agent-builder/blob/d61eca45745f3573cfc321ef3a5df90637f01d2e/src/strands_agents_builder/handlers/callback_handler.py#L116-L117.\n\n### Use Case\n\nShow reasoning text returned by models that support it.\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "closed",
      "author": "awsarron",
      "author_type": "User",
      "created_at": "2025-05-24T02:10:23Z",
      "updated_at": "2025-05-26T17:13:07Z",
      "closed_at": "2025-05-26T17:13:06Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/98/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/98",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/98",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:55.180695",
      "comments": [
        {
          "author": "awsarron",
          "body": "Resolving this as it was contributed in https://github.com/strands-agents/sdk-python/pull/109 by @josephgultekin.",
          "created_at": "2025-05-26T17:13:06Z"
        }
      ]
    },
    {
      "issue_number": 47,
      "title": "[BUG] accumulated_usage token count is always 0 (Azure OpenAI)",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.2\n\n### Python Version\n\n3.12.0\n\n### Operating System\n\nWindows 11\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\n1. install strands-agents version 0.1.2. via pip install\n2. Create environment variables for Azure OpenAI through LiteLLM\n\n### Expected Behavior\n\nSeeing an output greater than 0 for inputTokens and outputTokens.\n\n### Actual Behavior\n\nCurrent output is \nInput tokens: 0\nOutput tokens: 0\n\n### Additional Context\n\nHere is my script:\n\n```\nimport os\nimport sys\nfrom strands import Agent\nfrom strands.models.litellm import LiteLLMModel\n\nopenai_model = \"gpt-4omini\"\nos.environ[\"AZURE_API_KEY\"] = \"\"\nos.environ[\"AZURE_API_BASE\"] = \"\"\nos.environ[\"AZURE_API_VERSION\"] = \"\"\n\n\nmodel = LiteLLMModel(\n    model_id=f\"azure/{openai_model}\",\n    \n    params={\n        \"max_tokens\": 16384,\n        \"temperature\": 0.1,\n    }\n)\n\nagent = Agent(model=model, system_prompt=\"Say hello to the user\")\n\nresponse = agent(\"Hi, my name is John Doe.\")\n\nprint(f\"Input tokens: {response.metrics.accumulated_usage['inputTokens']}\")\nprint(f\"Output tokens: {response.metrics.accumulated_usage['outputTokens']}\")\nprint(f\"Execution time: {sum(response.metrics.cycle_durations):.2f} seconds\")\nsys.exit(0)\n\n```\n\nThe output is\n```\nHello, John Doe! How can I assist you today?\nInput tokens: 0\nOutput tokens: 0\nExecution time: 0.93 seconds\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "patrickpenn",
      "author_type": "User",
      "created_at": "2025-05-19T09:35:33Z",
      "updated_at": "2025-05-26T12:07:59Z",
      "closed_at": "2025-05-25T15:37:54Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/47/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/47",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/47",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:55.427518",
      "comments": [
        {
          "author": "pgrayy",
          "body": "Thank you for brining this to our attention. [Here](https://github.com/strands-agents/sdk-python/pull/73) is the fix. Will have a teammate review.",
          "created_at": "2025-05-21T14:31:19Z"
        },
        {
          "author": "pgrayy",
          "body": "The PR is merged into main. I'll now consult with the team to determine the next PYPI release.",
          "created_at": "2025-05-21T16:26:26Z"
        },
        {
          "author": "patrickpenn",
          "body": "Love it and looking forward to test this fix! Thank you very much!",
          "created_at": "2025-05-22T11:42:05Z"
        },
        {
          "author": "pgrayy",
          "body": "The latest PyPI release now includes the fix. Let us know if you continue to run into this issue. Thank you again for reporting.",
          "created_at": "2025-05-23T23:35:04Z"
        },
        {
          "author": "patrickpenn",
          "body": "It works like expected. Thx",
          "created_at": "2025-05-26T12:07:57Z"
        }
      ]
    },
    {
      "issue_number": 113,
      "title": "[BUG] native workflow works but with tool getting access violation",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.14\n\n### Python Version\n\n3.11\n\n### Operating System\n\nwindows\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nThis may be similar to #110 \n\nThe below code works\n\n```\nimport os\n\nimport boto3\nfrom dotenv import load_dotenv\nfrom strands import Agent\nfrom strands.models import BedrockModel\n\nload_dotenv()\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nboto_session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                     region_name=\"us-east-1\")\n\nmodel = BedrockModel(\n    model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    temperature=0.3,\n    boto_session=boto_session\n)\n# Create specialized agents\nresearcher = Agent(system_prompt=\"You are a research specialist. Find key information.\", callback_handler=None,\n                   model=model)\nanalyst = Agent(system_prompt=\"You analyze research data and extract insights.\", callback_handler=None, model=model)\nwriter = Agent(system_prompt=\"You create polished reports based on analysis.\", model=model)\n\n\n# Sequential workflow processing\ndef process_workflow(topic):\n    # Step 1: Research\n    research_results = researcher(f\"Research the latest developments in {topic}\")\n\n    # Step 2: Analysis\n    analysis = analyst(f\"Analyze these research findings: {research_results}\")\n\n    # Step 3: Report writing\n    final_report = writer(f\"Create a report based on this analysis: {analysis}\")\n\n    return final_report\n\n\nprint(process_workflow(\"quantim computing\"))\n\n```\n\nHowever the below fails with access violation \n\n```\nimport os\n\nimport boto3\nfrom dotenv import load_dotenv\nfrom strands import Agent\nfrom strands.models import BedrockModel\nfrom strands_tools import workflow\nload_dotenv()\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\nboto_session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                     region_name=\"us-east-1\")\n\nmodel = BedrockModel(\n    model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    temperature=0.3,\n    boto_session=boto_session\n)\n# Create an agent with workflow capability\nagent = Agent(tools=[workflow],model=model)\n\n# Create a multi-agent workflow\nagent.tool.workflow(\n    action=\"create\",\n    workflow_id=\"data_analysis\",\n    tasks=[\n        {\n            \"task_id\": \"data_extraction\",\n            \"description\": \"Extract key financial data from the quarterly report\",\n            \"system_prompt\": \"You extract and structure financial data from reports.\",\n            \"priority\": 5\n        },\n        {\n            \"task_id\": \"trend_analysis\",\n            \"description\": \"Analyze trends in the data compared to previous quarters\",\n            \"dependencies\": [\"data_extraction\"],\n            \"system_prompt\": \"You identify trends in financial time series.\",\n            \"priority\": 3\n        },\n        {\n            \"task_id\": \"report_generation\",\n            \"description\": \"Generate a comprehensive analysis report\",\n            \"dependencies\": [\"trend_analysis\"],\n            \"system_prompt\": \"You create clear financial analysis reports.\",\n            \"priority\": 2\n        }\n    ]\n)\n\n# Execute workflow (parallel processing where possible)\nagent.tool.workflow(action=\"start\", workflow_id=\"data_analysis\")\n\n# Check results\nstatus = agent.tool.workflow(action=\"status\", workflow_id=\"data_analysis\")\n```\n\nError: Error executing task data_extraction: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.\n\n\n### Expected Behavior\n\nBoth should work\n\n### Actual Behavior\n\none works , other does not\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "rajib76",
      "author_type": "User",
      "created_at": "2025-05-25T16:13:45Z",
      "updated_at": "2025-05-25T23:48:48Z",
      "closed_at": "2025-05-25T23:44:20Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/113/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/113",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/113",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:55.687253",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thank you for reporting this @rajib76. This issue has the same root cause as https://github.com/strands-agents/tools/issues/20 where the agents created by the swarm, workflow, and agent_graph tools aren't using configured models.\n\nI'll close this issue and we can continue the resolution in https://g",
          "created_at": "2025-05-25T23:44:20Z"
        }
      ]
    },
    {
      "issue_number": 110,
      "title": "[BUG] Getting access violation error",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.14\n\n### Python Version\n\n3.11\n\n### Operating System\n\nwindoww\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nGetting an error when I run the below program. I have access to the model \n\nError processing message in node coordinator: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.\n\n\n```\nimport os\n\nimport boto3\nfrom dotenv import load_dotenv\nfrom strands import Agent\nfrom strands.models import BedrockModel\nfrom strands_tools import agent_graph\nload_dotenv()\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\nboto_session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                     region_name=\"us-east-1\")\n\nmodel = BedrockModel(\n    model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    temperature=0.3,\n    boto_session=boto_session\n)\n# Create an agent with agent_graph capability\nagent = Agent(tools=[agent_graph],model=model)\n\n# Create a research team with a star topology\nresult = agent.tool.agent_graph(\n    action=\"create\",\n    graph_id=\"research_team\",\n    topology={\n        \"type\": \"star\",\n        \"nodes\": [\n            {\n                \"id\": \"coordinator\",\n                \"role\": \"team_lead\",\n                \"system_prompt\": \"You are a research team leader coordinating specialists.\"\n            },\n            {\n                \"id\": \"data_analyst\",\n                \"role\": \"analyst\",\n                \"system_prompt\": \"You are a data analyst specializing in statistical analysis.\"\n            },\n            {\n                \"id\": \"domain_expert\",\n                \"role\": \"expert\",\n                \"system_prompt\": \"You are a domain expert with deep subject knowledge.\"\n            }\n        ],\n        \"edges\": [\n            {\"from\": \"coordinator\", \"to\": \"data_analyst\"},\n            {\"from\": \"coordinator\", \"to\": \"domain_expert\"},\n            {\"from\": \"data_analyst\", \"to\": \"coordinator\"},\n            {\"from\": \"domain_expert\", \"to\": \"coordinator\"}\n        ]\n    }\n)\n\n# Send a task to the coordinator\nagent.tool.agent_graph(\n    action=\"message\",\n    graph_id=\"research_team\",\n    message={\n        \"target\": \"coordinator\",\n        \"content\": \"Analyze the impact of remote work on productivity.\"\n    }\n)\n```\n\n### Expected Behavior\n\nIt should run as I am able to run the below code without errors\n\nhttps://github.com/rajib76/aws_strands_examples/blob/main/examples/01_hello_strands.py\n\n\n### Actual Behavior\n\nGetting the error\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "rajib76",
      "author_type": "User",
      "created_at": "2025-05-25T15:09:57Z",
      "updated_at": "2025-05-25T23:44:58Z",
      "closed_at": "2025-05-25T23:40:53Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/110/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/110",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/110",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:55.926424",
      "comments": [
        {
          "author": "awsarron",
          "body": "Hi @rajib76, thank you for your report.\n\nThis error is returned by Amazon Bedrock when your AWS account doesn't have the model enabled in your specified region. It looks like you're calling Bedrock in the `us-east-1` region with the `us.anthropic.claude-3-7-sonnet-20250219-v1:0` model ID.\n\nPlease do",
          "created_at": "2025-05-25T15:21:24Z"
        },
        {
          "author": "rajib76",
          "body": "Hi, the below code works perfectly\n\n```\nimport os\n\nimport boto3\nfrom dotenv import load_dotenv\nfrom strands import Agent\nfrom strands.models import BedrockModel\nfrom strands.models.litellm import LiteLLMModel\n\nload_dotenv()\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KE",
          "created_at": "2025-05-25T15:39:29Z"
        },
        {
          "author": "rajib76",
          "body": "I feel the tool call agent graph uses some bedrock model by default, and that may be causing the issue",
          "created_at": "2025-05-25T15:41:32Z"
        },
        {
          "author": "rajib76",
          "body": "I also have another question, how do i assign different models to different nodes in the workflow\n\n```\nresult = agent.tool.agent_graph(\n    action=\"create\",\n    graph_id=\"research_team\",\n    topology={\n        \"type\": \"star\",\n        \"nodes\": [\n            {\n                \"id\": \"coordinator\",\n    ",
          "created_at": "2025-05-25T15:54:50Z"
        },
        {
          "author": "awsarron",
          "body": "Thanks @rajib76, that makes sense. Indeed the `agent_graph` tool is using the default `BedrockModel` in this sample.\n\nLet's track this issue in https://github.com/strands-agents/sdk-python/issues/113, thank you for creating that.",
          "created_at": "2025-05-25T23:40:53Z"
        }
      ]
    },
    {
      "issue_number": 103,
      "title": "[BUG] Agent.__call__() removes kwargs preventing dynamic system_prompt override",
      "body": "## Description\n\nThe current implementation of `Agent._execute_event_loop_cycle()` removes kwargs parameters including `system_prompt`, making it impossible to dynamically override the system prompt when calling the agent.\n\nSee agent-builder: https://github.com/strands-agents/agent-builder/blob/main/src/strands_agents_builder/strands.py#L178\n\n## Current Behavior\n\nIn `src/strands/agent/agent.py`, the `_execute_event_loop_cycle` method removes several kwargs:\n\n```python\ndef _execute_event_loop_cycle(self, callback_handler: Callable, kwargs: dict[str, Any]) -> AgentResult:\n    # ... docstring ...\n    kwargs.pop(\"agent\", None)\n    kwargs.pop(\"model\", None)\n    kwargs.pop(\"system_prompt\", None)  # <-- This prevents dynamic override\n    kwargs.pop(\"tool_execution_handler\", None)\n    kwargs.pop(\"event_loop_metrics\", None)\n    kwargs.pop(\"callback_handler\", None)\n    kwargs.pop(\"tool_handler\", None)\n    kwargs.pop(\"messages\", None)\n    kwargs.pop(\"tool_config\", None)\n    \n    # ... rest of the method uses self.system_prompt instead\n```\n\nThis means calls like `agent(query, system_prompt=\"new prompt\")` are ignored.\n\n## Expected Behavior\n\nUsers should be able to dynamically override the system prompt (and other parameters) on a per-call basis:\n\n```python\nagent = Agent(system_prompt=\"Default prompt\")\nresponse = agent(\"Hello\", system_prompt=\"Custom prompt for this call\")\n```\n\n## Proposed Solution\n\nInstead of removing the kwargs, extract them with fallbacks to instance values:\n\n```python\ndef _execute_event_loop_cycle(self, callback_handler: Callable, kwargs: dict[str, Any]) -> AgentResult:\n    # Extract parameters with fallbacks to instance values\n    system_prompt = kwargs.pop(\"system_prompt\", self.system_prompt)\n    model = kwargs.pop(\"model\", self.model)\n    tool_execution_handler = kwargs.pop(\"tool_execution_handler\", self.thread_pool_wrapper)\n    event_loop_metrics = kwargs.pop(\"event_loop_metrics\", self.event_loop_metrics)\n    callback_handler = kwargs.pop(\"callback_handler\", callback_handler)\n    tool_handler = kwargs.pop(\"tool_handler\", self.tool_handler)\n    messages = kwargs.pop(\"messages\", self.messages)\n    tool_config = kwargs.pop(\"tool_config\", self.tool_config)\n    kwargs.pop(\"agent\", None)  # Remove agent to avoid conflicts\n    \n    try:\n        # Execute the main event loop cycle with extracted parameters\n        stop_reason, message, metrics, state = event_loop_cycle(\n            model=model,\n            system_prompt=system_prompt,  # Use extracted value\n            messages=messages,\n            tool_config=tool_config,\n            callback_handler=callback_handler,\n            tool_handler=tool_handler,\n            tool_execution_handler=tool_execution_handler,\n            event_loop_metrics=event_loop_metrics,\n            agent=self,\n            event_loop_parent_span=self.trace_span,\n            **kwargs,\n        )\n        # ... rest of method\n```\n\n## Use Case Example\n\nThis enhancement would enable powerful patterns like dynamic system prompt switching:\n\n```python\n#!/usr/bin/env python3\nfrom strands import Agent\n\nagent = Agent(system_prompt=\"You are a helpful assistant.\")\n\n# Use default system prompt\nresponse1 = agent(\"Hello\")\n\n# Override system prompt for specific interaction\nresponse2 = agent(\"Analyze this code\", system_prompt=\"You are a senior code reviewer.\")\n\n# Use different prompt for creative tasks\nresponse3 = agent(\"Write a poem\", system_prompt=\"You are a creative poet.\")\n```\n\n## Real-World Impact\n\nThis feature is particularly valuable for:\n\n1. **Multi-purpose agents** that need different personas/expertise per interaction\n2. **Conversation management** where system prompts include dynamic context\n3. **CLI tools** that want to inject conversation history into system prompts\n4. **Testing scenarios** where different prompts need to be evaluated\n\n## Current Workaround\n\nCurrently, users must create new Agent instances for different system prompts, which is inefficient and loses conversation context.\n\n## Files Affected\n\n- `src/strands/agent/agent.py` - Main fix in `_execute_event_loop_cycle` method\n- Potentially related test files for validation\n\n## Breaking Changes\n\nThis change should be **backwards compatible** as it maintains existing behavior while adding new functionality.",
      "state": "closed",
      "author": "cagataycali",
      "author_type": "User",
      "created_at": "2025-05-25T01:37:12Z",
      "updated_at": "2025-05-25T20:19:32Z",
      "closed_at": "2025-05-25T20:19:32Z",
      "labels": [
        "bug",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/103/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/103",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/103",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:56.177043",
      "comments": [
        {
          "author": "Shubhamraut01",
          "body": "Hello @cagataycali,\n\nI have raised an PR for the same kindly check feel free to assign this issue to me in case some additional changes are required in the current issue.",
          "created_at": "2025-05-25T14:15:52Z"
        }
      ]
    },
    {
      "issue_number": 38,
      "title": "[BUG] (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\nlatest\n\n### Python Version\n\n3.12.6\n\n### Operating System\n\nmac\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nI have deployed the repo for a lambda agent as is with CDk to region US-east-1 and EU-west-1, but in both regions I get the same error: Error: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.\n\nWhile I have access to all antrophic models also in both regions. \n\nEven when I add the model ref self so not the default is taken:\n\n   weather_agent = Agent(\n            system_prompt=WEATHER_SYSTEM_PROMPT,\n            tools=[http_request],\n            model=\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\"\n        )\n\nI get  the error\n\n### Expected Behavior\n\nI expect a result, in the case the actual weather. \n\n### Actual Behavior\n\nn error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "rpostulart",
      "author_type": "User",
      "created_at": "2025-05-18T16:33:01Z",
      "updated_at": "2025-05-25T08:42:39Z",
      "closed_at": "2025-05-25T08:42:39Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 23,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/38/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/38",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/38",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:56.400776",
      "comments": []
    },
    {
      "issue_number": 88,
      "title": "[BUG] AWS Lambda: package conflicts on install of strands-agents and strands-agents-tools when building a Lambda layer on MacOS",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.3 for strands-agents & 0.1.2 for strands-agents-tools\n\n### Python Version\n\n3.13\n\n### Operating System\n\nMacOS Sequoia 15.5\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nRun the following command:\n\n`pip3.13 install --no-cache --platform manylinux2014_x86_64 --target /tmp/strands-layer/python/lib/python3.13/site-packages --implementation cp --python-version 3.13 --only-binary=:all: --upgrade strands-agents strands-agents-tools`\n\nThis command is preparing a Linux layer for AWS Lambda from MacOS. Hence the options for cross-build in the pip command.\n\nThis command is fully self-container: it should be able to run this command on another Mac and get same results\n\n### Expected Behavior\n\nGiven the fact that we do not impose any version on the 2 Strands packages, we would expect pip install to complete successfully.  But it generates errors: see below.\n\nWe use the same kind of pip command for cross-build on other projects and it works. We'd expect the same here.\n\n### Actual Behavior\n\nERROR: \n\n```\npip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntraceloop-sdk 0.40.7 requires posthog<4,>3.0.2, but you have posthog 4.1.0 which is incompatible.\nuptrace 1.31.0 requires opentelemetry-api~=1.31.0, but you have opentelemetry-api 1.33.1 which is incompatible.\nuptrace 1.31.0 requires opentelemetry-sdk~=1.31.0, but you have opentelemetry-sdk 1.33.1 which is incompatible.\nopentelemetry-instrumentation-urllib3 0.52b1 requires opentelemetry-semantic-conventions==0.52b1, but you have opentelemetry-semantic-conventions 0.54b1 which is incompatible.\nopentelemetry-instrumentation-requests 0.52b1 requires opentelemetry-semantic-conventions==0.52b1, but you have opentelemetry-semantic-conventions 0.54b1 which is incompatible.\nchainlit 2.5.5 requires python-multipart<0.0.19,>=0.0.18, but you have python-multipart 0.0.20 which is incompatible.\nchainlit 2.5.5 requires starlette<0.42.0,>=0.41.2, but you have starlette 0.46.2 which is incompatible.\nopentelemetry-exporter-otlp 1.31.1 requires opentelemetry-exporter-otlp-proto-http==1.31.1, but you have opentelemetry-exporter-otlp-proto-http 1.33.1 which is incompatible.\nopentelemetry-instrumentation 0.52b1 requires opentelemetry-semantic-conventions==0.52b1, but you have opentelemetry-semantic-conventions 0.54b1 which is incompatible.\nopentelemetry-instrumentation-sqlalchemy 0.52b1 requires opentelemetry-semantic-conventions==0.52b1, but you have opentelemetry-semantic-conventions 0.54b1 which is incompatible.\nopentelemetry-exporter-otlp-proto-grpc 1.31.1 requires opentelemetry-exporter-otlp-proto-common==1.31.1, but you have opentelemetry-exporter-otlp-proto-common 1.33.1 which is incompatible.\nopentelemetry-exporter-otlp-proto-grpc 1.31.1 requires opentelemetry-proto==1.31.1, but you have opentelemetry-proto 1.33.1 which is incompatible.\nopentelemetry-exporter-otlp-proto-grpc 1.31.1 requires opentelemetry-sdk~=1.31.1, but you have opentelemetry-sdk 1.33.1 which is incompatible.\n\n\nSuccessfully installed Events-0.5 annotated-types-0.7.0 anyio-4.9.0 aws-requests-auth-0.4.3 backoff-2.2.1 boto3-1.38.22 botocore-1.38.22 certifi-2025.4.26 charset-normalizer-3.4.2 click-8.2.1 colorama-0.4.6 deprecated-1.2.18 dill-0.4.0 distro-1.9.0 docstring-parser-0.15 googleapis-common-protos-1.70.0 greenlet-3.2.2 grpcio-1.71.0 h11-0.16.0 h2-4.2.0 hpack-4.1.0 httpcore-1.0.9 httpx-0.28.1 httpx-sse-0.4.0 hyperframe-6.1.0 idna-3.10 importlib-metadata-8.6.1 jiter-0.10.0 jmespath-1.0.1 markdown-it-py-3.0.0 mcp-1.9.1 mdurl-0.1.2 mem0ai-0.1.101 mpmath-1.3.0 numpy-2.2.6 openai-1.82.0 opensearch-py-2.8.0 opentelemetry-api-1.33.1 opentelemetry-exporter-otlp-proto-common-1.33.1 opentelemetry-exporter-otlp-proto-http-1.33.1 opentelemetry-proto-1.33.1 opentelemetry-sdk-1.33.1 opentelemetry-semantic-conventions-0.54b1 pillow-11.2.1 portalocker-2.10.1 posthog-4.1.0 prompt-toolkit-3.0.51 protobuf-5.29.4 pydantic-2.11.5 pydantic-core-2.33.2 pydantic-settings-2.9.1 pygments-2.19.1 pyjwt-2.10.1 python-dateutil-2.9.0.post0 python-dotenv-1.1.0 python-multipart-0.0.20 pytz-2025.2 qdrant-client-1.14.2 requests-2.32.3 rich-14.0.0 s3transfer-0.13.0 six-1.17.0 slack-bolt-1.23.0 slack_sdk-3.35.0 sniffio-1.3.1 sqlalchemy-2.0.41 sse-starlette-2.3.5 starlette-0.46.2 strands-agents-0.1.3 strands-agents-tools-0.1.2 sympy-1.14.0 tenacity-9.1.2 tqdm-4.67.1 typing-extensions-4.13.2 typing-inspection-0.4.1 urllib3-2.4.0 uvicorn-0.34.2 watchdog-6.0.0 wcwidth-0.2.13 wrapt-1.17.2 zipp-3.21.0\n\n\n```\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "didier-durand",
      "author_type": "User",
      "created_at": "2025-05-23T16:19:29Z",
      "updated_at": "2025-05-24T19:23:32Z",
      "closed_at": "2025-05-24T19:23:31Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/88/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "zastrowm"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/88",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/88",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:56.400802",
      "comments": [
        {
          "author": "zastrowm",
          "body": "(note this is *not* the same case as [Cannot install Python dependencies for lambda with correct architecture · Issue #19 · strands-agents/docs](https://github.com/strands-agents/docs/issues/19)).\n\nIt seems like the primary problem is:\n\n - `uptrace` 1.31.0 requires opentelemetry-sdk~=1.31.0\n - `agen",
          "created_at": "2025-05-23T17:52:48Z"
        },
        {
          "author": "didier-durand",
          "body": "Hi,\n\nI retested the new version with following command:\n\n`pip3.13 install --no-cache --platform manylinux2014_x86_64 --target /Users/didduran/dev/a2a-ui-private/tmp/strands-layer/python/lib/python3.13/site-packages --implementation cp --python-version 3.13 --only-binary=:all: --upgrade \"strands-agen",
          "created_at": "2025-05-24T05:32:39Z"
        },
        {
          "author": "zastrowm",
          "body": "@didier-durand is there an e2e example we can reproduce with? It seems as if there's un-mentioned dependency somewhere.\n\nAttempting the above command works on my machine:\n\n```\npip install --no-cache --platform manylinux2014_x86_64 --target ./dependencies --implementation cp --python-version 3.13 --o",
          "created_at": "2025-05-24T14:12:06Z"
        },
        {
          "author": "didier-durand",
          "body": "@zastrowm : Hi, thanks for having re-opened this. \n\nBased on the fact that it works on your side, I made additional tests on my side. The situation is following:\n\n1. when I try to build the Lambda Linux layer with the pip command above from within my PyCharm venv (so, with my app package installed i",
          "created_at": "2025-05-24T15:18:36Z"
        },
        {
          "author": "zastrowm",
          "body": "Great to hear it's fixed!  I found python dependency management to be more complicated than I expected.\n\nThanks for the initial issue and let us know if you have any other problems.",
          "created_at": "2025-05-24T19:23:31Z"
        }
      ]
    },
    {
      "issue_number": 52,
      "title": "[FEATURE] OpenAI Model Provider",
      "body": "### Problem Statement\n\nI would like Strands Agents to support an OpenAI model provider. This would allow us to connect to OpenAI models directly. Additionally, any OpenAI compatible provider (e.g., [LiteLLM](https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/litellm.py)) could reuse the request/response formatting logic and thus reduce code duplication.\n\n### Proposed Solution\n\nImplement the provider in a similar manner to the existing providers (e.g., [LiteLLM](https://github.com/strands-agents/sdk-python/blob/main/src/strands/models/litellm.py)). As part of this work, we can also setup an abstract OpenAI class so that any OpenAI compatible provider can reuse the request/response formatting logic.\n\n### Use Case\n\n- Call OpenAI models directly\n\n### Alternatives Solutions\n\nN/A\n\n### Additional Context\n\nN/A",
      "state": "closed",
      "author": "pgrayy",
      "author_type": "User",
      "created_at": "2025-05-19T19:54:49Z",
      "updated_at": "2025-05-23T23:33:58Z",
      "closed_at": "2025-05-23T23:33:58Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/52/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "pgrayy"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/52",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/52",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:56.672507",
      "comments": [
        {
          "author": "niklas-palm",
          "body": "Is this not already supported?\n[LiteLLM support](https://strandsagents.com/0.1.x/user-guide/concepts/model-providers/litellm/)",
          "created_at": "2025-05-20T15:48:53Z"
        },
        {
          "author": "pgrayy",
          "body": "> Is this not already supported? [LiteLLM support](https://strandsagents.com/0.1.x/user-guide/concepts/model-providers/litellm/)\n\nYes it is, but we want to add direct support for a few reasons:\n1. Slight optimization as we avoid the layer of abstraction LiteLLM creates.\n2. Eliminate extra dependenci",
          "created_at": "2025-05-20T19:54:37Z"
        },
        {
          "author": "pgrayy",
          "body": "https://github.com/strands-agents/sdk-python/pull/65",
          "created_at": "2025-05-20T22:57:39Z"
        },
        {
          "author": "pgrayy",
          "body": "PR is merged into main and will go out with our next PyPI release.",
          "created_at": "2025-05-22T20:31:05Z"
        }
      ]
    },
    {
      "issue_number": 50,
      "title": "[FEATURE] Enhance ToolRegistry to automatically flatten nested tool collections",
      "body": "### Problem Statement\n\nCurrently, the Agent's `process_tools` method expects a flat list of tool objects but doesn't handle nested structures gracefully. When initialized with tools from multiple sources (built-in tools, MCP-fetched tools, custom tools), developers need to manually flatten these collections:\n\n```python\nbuilt_in_tools = [calculator, memory]    # a list\nmcp_tools = mcp_client.list_tools_sync() # another list\ncustom_tool = \"custom_tool.py\"           # an individual item\n```\n\nWhen passing these collections directly:\n```python\nagent = Agent(tools=[built_in_tools, mcp_tools, custom_tool])\n```\n\nThe Agent treats each list itself as a tool object rather than processing the items within the lists, leading to errors like:\n\n```\ntool=<[<function calculator at 0x7f7265a29800>, ...]> | unrecognized tool specification\n```\n\nThis forces developers to manually flatten collections using one of these verbose and error-prone patterns, all while remembering which of the items is a list of tools, and which is an individual tool:\n\n```python\n# List concatenation\ntools = built_in_tools + mcp_tools + [custom_tool]\n\n# Unpacking\ntools = [*built_in_tools, *mcp_tools, custom_tool]\n\n# Manual list manipulation \nall_tools = []\nall_tools.extend(built_in_tools)\nall_tools.extend(mcp_tools)\nall_tools.append(custom_tool)\ntools = all_tools\n```\n\n### Proposed Solution\n\nEnhance the `process_tools` method in the `ToolRegistry` class to automatically flatten nested tool collections. This would allow developers to simply pass in tools however they have them without worrying about the structure.\n\n### Implementation Details\n\nAdd a recursive flattening function to the `ToolRegistry` class:\n\n```python\ndef _flatten_tools(self, tools: Any) -> List[Any]:\n    \"\"\"Recursively flatten tool collections into a single list.\n    \n    Args:\n        tools: A single tool, a list of tools, or nested lists of tools.\n        \n    Returns:\n        A flattened list of tools.\n    \"\"\"\n    # Handle None or empty case\n    if tools is None:\n        return []\n        \n    # Handle single tool case (non-iterable)\n    if not isinstance(tools, (list, tuple)):\n        # Check against both list and tuple:\n        # 1. For defensive programming - handles both sequence types\n        # 2. To support unpacking syntax which can produce tuples\n        # 3. To properly process cases where tools might be provided as a tuple\n        return [tools]\n        \n    # Recursively handle nested lists/tuples\n    flattened = []\n    for item in tools:\n        if isinstance(item, (list, tuple)):\n            flattened.extend(self._flatten_tools(item))\n        else:\n            flattened.append(item)\n    \n    return flattened\n```\n\nThen, modify the `process_tools` method to use this flattening function:\n\n```python\ndef process_tools(self, tools: List[Any]) -> List[str]:\n    \"\"\"Process tools list that can contain tool names, paths, imported modules, or functions.\n\n    Args:\n        tools: List of tool specifications.\n            Can be:\n\n            - ...\n            - Lists of any of the above (NEW)\n\n    Returns:\n        List of tool names that were processed.\n    \"\"\"\n    # NEW: Flatten nested lists of tools first\n    flattened_tools = self._flatten_tools(tools)\n    tool_names = []\n\n    for tool in flattened_tools:\n        # Rest of the existing process_tools method remains unchanged...\n        # ...\n```\n\n## Benefits\n\n1. **Reduces cognitive load**: Developers no longer need to know implementation details about tool registration\n2. **Prevents errors**: Eliminates a common source of bugs from improperly flattened lists\n3. **Consistency**: Encourages consistent patterns across the codebase\n4. **Backward compatible**: All existing code that uses flat lists will continue to work\n5. **Intuitive API**: Follows the principle of \"be liberal in what you accept\" common in well-designed libraries\n\n## Impact\n\nThis change has minimal performance impact since tool registration typically happens once during initialization. It maintains backward compatibility while making the API more intuitive and resilient.\n\n### Use Case\n\nThis feature directly addresses three scenarios developers may face:\n\n**1: Combining multiple tool sources** - When developers need to combine built-in tools, MCP service tools, and custom tools in a single agent. Currently, they must remember which variables are lists and which are individual tools:\n\n```python\nagent = Agent(\n    tools=built_in_tools + mcp_tools + [custom_tool]  # Error-prone manual flattening\n)\n```\n\n**2: Dynamic tool loading** - When tools are loaded dynamically from different sources based on configuration, the developer often ends up with a mix of lists and individual tools:\n\n```python\ntools = []\ntools.extend(get_built_in_tools())\ntools.extend(mcp_client.list_tools_sync())\ntools.append(config.custom_tool_path)\n\nagent = Agent(tools=tools)\n```\n\n**3: Simplified API usage** - For new developers learning the framework, the current behavior is counterintuitive and requires detailed knowledge of internal implementation. With this improvement, all these work identically:\n\n```python\n# All these would work correctly and identically:\nagent = Agent(\n    tools=[built_in_tools, mcp_tools, custom_tool]\n)\n\nagent = Agent(\n    tools=built_in_tools + mcp_tools + [custom_tool]\n)\n\nagent = Agent(\n    tools=[*built_in_tools, *mcp_tools, custom_tool]\n)\n```\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\n_No response_",
      "state": "open",
      "author": "DennisTraub",
      "author_type": "User",
      "created_at": "2025-05-19T17:31:03Z",
      "updated_at": "2025-05-20T17:22:39Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "ready for contribution"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/50/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/50",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/50",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:58.442612",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Thanks for the request - I really appreciate the detail in the feature request!\n\nAt one point prior to release we had a feature where instead of calling `mcp_client.list_tools_sync` and passing in the tools to `Agent` you could pass in `mcp_client` and the Agent would call `list_tools_sync` on your ",
          "created_at": "2025-05-19T19:30:50Z"
        },
        {
          "author": "DennisTraub",
          "body": "@zastrowm Thank you for considering this request. Feel free to reach out with any additional ideas, or if you would like me to prepare a PR with a draft for implementation.",
          "created_at": "2025-05-19T19:46:37Z"
        },
        {
          "author": "zastrowm",
          "body": "The team's aligned on bringing this in would gladly accept PRs for this feature.\n\nThere are [related docs](https://strandsagents.com/0.1.x/user-guide/concepts/tools/tools_overview/#adding-tools-to-agents) that could also be updated along with this feature, calling out that passing in lists/collectio",
          "created_at": "2025-05-20T17:19:48Z"
        }
      ]
    },
    {
      "issue_number": 53,
      "title": "[FEATURE] Adapt to windows, such as windows 10",
      "body": "### Problem Statement\n\nMicrosoft Windows [版本 10.0.14393]\nError when running quickstart agent：\nNo module named 'termios'\nNo module named 'fcntl'\n\n\n\n### Proposed Solution\n\nAfter checking that these modules are dedicated to unix or linux, can they be adapted to windows , such as windows 10\n\n### Use Case\n\nMicrosoft Windows [版本 10.0.14393]\n\n### Alternatives Solutions\n\n_No response_\n\n### Additional Context\n\nMicrosoft Windows [版本 10.0.14393]",
      "state": "closed",
      "author": "Galileo2017",
      "author_type": "User",
      "created_at": "2025-05-20T04:16:10Z",
      "updated_at": "2025-05-20T14:03:59Z",
      "closed_at": "2025-05-20T14:03:57Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/53/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/53",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/53",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:58.641037",
      "comments": [
        {
          "author": "zastrowm",
          "body": "Thanks for the request.\n\nWindows compatibility of the tools is still a work in progress - strands-agents/tools#15 calls out the fcntl module and we created strands-agents/tools#17 as a work item to improve compatibility. Please watch strands-agents/tools#17 going forward for updates.\n",
          "created_at": "2025-05-20T14:03:58Z"
        }
      ]
    },
    {
      "issue_number": 42,
      "title": "[BUG] from strands_tools import use_llm,mem0_memory is not working",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.0\n\n### Python Version\n\n3.11\n\n### Operating System\n\nwindows\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nfrom strands_tools import use_llm,mem0_memory - It says mem0_memory is not available\n\n### Expected Behavior\n\nI should be able to import mem0_memory\n\n### Actual Behavior\n\nnot able to import\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "rajib76",
      "author_type": "User",
      "created_at": "2025-05-18T23:54:16Z",
      "updated_at": "2025-05-20T09:27:18Z",
      "closed_at": "2025-05-20T07:22:02Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/42/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "awsarron"
      ],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/42",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/42",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:58.876723",
      "comments": [
        {
          "author": "rajib76",
          "body": "Even the KB based memory is not working. Says agent has no module \"memory\"\n\n```\nfrom strands import Agent\nfrom strands_tools.memory import memory\n\nagent = Agent(tools=[memory])\n\n# Store content in Knowledge Base\nagent.memory(\n    action=\"store\",\n    content=\"Important information to remember\",\n    t",
          "created_at": "2025-05-19T01:11:42Z"
        },
        {
          "author": "awsarron",
          "body": "Thank you for reporting this issue @rajib76.\n\nWe just released `v0.1.1` of `strands-agents-tools` that includes the mem0_memory tool. Upgrade your version with:\n\n```\npip install strands-agents-tools -U\n```\n\nYou will then be able to use the mem0_memory tool in your Strands agents:\n\n```python\nfrom str",
          "created_at": "2025-05-19T01:38:03Z"
        },
        {
          "author": "rajib76",
          "body": "Changed to from strands_tools import memory\n\nStill getting the error\n\n/Users/joyeed/strands_examples/aws_strands_examples/venv/bin/python /Users/joyeed/strands_examples/aws_strands_examples/examples/07_memory_kb.py \nWarning: Input is not a terminal (fd=0).\nTraceback (most recent call last):\n  File \"",
          "created_at": "2025-05-19T04:52:13Z"
        },
        {
          "author": "awsarron",
          "body": "@rajib76 please share the full updated code paste that reproduces the issue.",
          "created_at": "2025-05-19T05:00:23Z"
        },
        {
          "author": "rajib76",
          "body": "```\nfrom strands import Agent\nfrom strands_tools import use_llm\nfrom strands_tools import memory\n\nagent = Agent(tools=[memory])\n\nmemory_agent = Agent(\n    tools=[memory, use_llm],\n)\n\n# Store content in Knowledge Base\nmemory_agent.memory(\n    action=\"store\",\n    content=\"Important information to reme",
          "created_at": "2025-05-19T05:30:46Z"
        }
      ]
    },
    {
      "issue_number": 35,
      "title": "Access keys and secrets are not getting passed when creating the session",
      "body": "### Checks\n\n- [x] I have updated to the lastest minor and patch version of Strands\n- [x] I have checked the documentation and this is not expected behavior\n- [x] I have searched [./issues](./issues?q=) and there are no duplicates of my issue\n\n### Strands Version\n\n0.1.1\n\n### Python Version\n\n3.11\n\n### Operating System\n\nwindows\n\n### Installation Method\n\npip\n\n### Steps to Reproduce\n\nAlthough, I have the keys and secret in .env. I am getting \"Your account is not authorized to invoke this API operation.\"\n\nBelow is the code I am running \n\n```\nboto_session = boto3.session.Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                                     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                                     region_name=\"us-west-1\")\n\nbedrock_model = BedrockModel(\n    model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    temperature=0.3,\n    boto_session=boto_session\n)\nagent = Agent(model=bedrock_model)\n\n# Ask the agent a question\nagent(\"Tell me about agentic AI\")\n```\n\nTo make it work, I had to update \n\nstrands/models/bedrock.py code as below\n\n```\n        # updated self.client as below\n\nclass BedrockModel(Model):\n        ....\n        ....\n        self.client = boto3.client('bedrock-runtime', region_name=\"us-east-1\")\n        # self.client = session.client(\n        #     service_name=\"bedrock-runtime\",\n        #     config=client_config,\n        # )\n```\n\n\n### Expected Behavior\n\nIt should not give me access violation as I already have access\n\n### Actual Behavior\n\ngetting error as \"Your account is not authorized to invoke this API operation.\"\n\n### Additional Context\n\n_No response_\n\n### Possible Solution\n\n_No response_\n\n### Related Issues\n\n_No response_",
      "state": "closed",
      "author": "rajib76",
      "author_type": "User",
      "created_at": "2025-05-18T00:31:57Z",
      "updated_at": "2025-05-18T03:44:15Z",
      "closed_at": "2025-05-18T03:38:40Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/strands-agents/sdk-python/issues/35/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/strands-agents/sdk-python/issues/35",
      "api_url": "https://api.github.com/repos/strands-agents/sdk-python/issues/35",
      "repository": "strands-agents/sdk-python",
      "extraction_date": "2025-06-22T01:24:59.091657",
      "comments": [
        {
          "author": "awsarron",
          "body": "Thank you for reporting this issue @rajib76.\n\nIn your first code sample the `us-west-1` region is used. In your second code sample the `us-east-1` region is used. Amazon Bedrock is not available in the `us-west-1` (N. California) region - https://docs.aws.amazon.com/bedrock/latest/userguide/models-s",
          "created_at": "2025-05-18T02:54:59Z"
        },
        {
          "author": "rajib76",
          "body": "No, I tried this as well. Looks like the access key and secret key are not getting passed to the client \n\nGot the same error\nbotocore.errorfactory.AccessDeniedException: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the s",
          "created_at": "2025-05-18T03:04:47Z"
        },
        {
          "author": "awsarron",
          "body": "Thanks for the additional information.\n\nIn this case using the `us-east-1` region the error message is different:\n```\nbotocore.errorfactory.AccessDeniedException: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specifie",
          "created_at": "2025-05-18T03:11:09Z"
        },
        {
          "author": "rajib76",
          "body": "I tried with us-west-1 also. It is the same error\n\nbotocore.errorfactory.AccessDeniedException: An error occurred (AccessDeniedException) when calling the ConverseStream operation: You don't have access to the model with the specified model ID.\n\nHowever, if I change the code in bedrock.py as below, ",
          "created_at": "2025-05-18T03:11:56Z"
        },
        {
          "author": "awsarron",
          "body": "The error message shown is because model access has not been enabled in your AWS account. Try these steps:\n\n1. Enable model access for Claude 3.7 Sonnet in your desired AWS region (us-east-1 in this example) following https://strandsagents.com/0.1.x/user-guide/concepts/model-providers/amazon-bedrock",
          "created_at": "2025-05-18T03:17:48Z"
        }
      ]
    }
  ]
}