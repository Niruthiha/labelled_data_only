{
  "repository": "griptape-ai/griptape",
  "repository_info": {
    "repo": "griptape-ai/griptape",
    "stars": 2321,
    "language": "Python",
    "description": "Modular Python framework for AI agents and workflows with chain-of-thought reasoning, tools, and memory. ",
    "url": "https://github.com/griptape-ai/griptape",
    "topics": [
      "ai",
      "anthropic",
      "claude",
      "gpt",
      "huggingface",
      "llm",
      "openai",
      "python"
    ],
    "created_at": "2023-01-14T18:02:16Z",
    "updated_at": "2025-06-21T09:00:24Z",
    "search_query": "openai anthropic language:python stars:>2",
    "total_issues_estimate": 50,
    "labeled_issues_estimate": 50,
    "labeling_rate": 100.0,
    "sample_labeled": 6,
    "sample_total": 6,
    "has_issues": true,
    "repo_id": 588992876,
    "default_branch": "main",
    "size": 21689
  },
  "extraction_date": "2025-06-22T00:46:54.835847",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 109,
  "issues": [
    {
      "issue_number": 1955,
      "title": "Griptape Cloud driver base_url's do not respect routes",
      "body": "For example, a base_url like `https://kindel.com/griptape-cloud/` will result in a url like `https://kindel.com/api/threads` [here](https://github.com/griptape-ai/griptape/blob/125997a658100e3904595cb1209c019a7e18a589/griptape/drivers/assistant/griptape_cloud_assistant_driver.py#L75) instead of the correct `https://kindel.com/griptape-cloud/api/threads`\n",
      "state": "closed",
      "author": "cjkindel",
      "author_type": "User",
      "created_at": "2025-06-06T15:50:03Z",
      "updated_at": "2025-06-06T19:02:46Z",
      "closed_at": "2025-06-06T19:02:46Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1955/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cjkindel"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1955",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1955",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.370617",
      "comments": []
    },
    {
      "issue_number": 1746,
      "title": "Driver Based Loaders",
      "body": "File Loaders (`BaseFileLoader`) and `EmailLoader` are not currently Driver-based. This causes the following problems:\n1.  New implementations require subclassing rather than replacing a Driver.\n2. Third party dependencies are no longer exclusive to Drivers. This leads to some [weird extras](https://github.com/griptape-ai/griptape/blob/37b543fe8dab04ab58de065674daabae389f7f4e/pyproject.toml?plain=1#L153-L156).\n\nMaking them Driver-based solves these issues and opens the door to Loaders that rely on external services like [unstructured.io](https://unstructured.io/).\n\nDo we create `FileTypeDriver`s and `EmailDriver`s?",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-19T17:14:53Z",
      "updated_at": "2025-05-23T01:40:03Z",
      "closed_at": null,
      "labels": [
        "drivers",
        "loaders"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1746/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1746",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1746",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.370645",
      "comments": [
        {
          "author": "torabshaikh",
          "body": "Hi @collindutter,  If it is still pending, I can take it up.",
          "created_at": "2025-04-30T17:09:55Z"
        },
        {
          "author": "collindutter",
          "body": "Thanks @torabshaikh! Before you start any work, could you please write up a summary of what you're envisioning?",
          "created_at": "2025-04-30T17:19:45Z"
        },
        {
          "author": "torabshaikh",
          "body": "@collindutter From what I understand is we want to separate drivers and loaders. I think what the issue is that loaders are tightly coupled with the methods that use for loading. For example, the `PdfLoader` always uses pypdf to load but if a user wants to use something else, they will need to subcl",
          "created_at": "2025-05-23T01:40:03Z"
        }
      ]
    },
    {
      "issue_number": 1946,
      "title": "Parse OpenAi Exceptions",
      "body": "\nThe `OpenAiChatPromptDriver` should parse exceptions raised by the underlying SDK to make it easier for downstream applications to consume the errors.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-05-19T21:20:08Z",
      "updated_at": "2025-05-19T21:20:08Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1946/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1946",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1946",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.573425",
      "comments": []
    },
    {
      "issue_number": 1942,
      "title": "Add GriptapeCloudAudioTranscriptionDriver",
      "body": "We would like to be able to use a default AudioTranscription driver for Griptape Nodes.\n\nCan we have a GriptapeCloudAudioTranscriptionDriver for this?",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-05-15T18:50:41Z",
      "updated_at": "2025-05-15T18:50:49Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1942/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1942",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1942",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.573447",
      "comments": []
    },
    {
      "issue_number": 1941,
      "title": "Add GriptapeCloudTextToSpeech Driver",
      "body": "We would like to be able to use a default TextToSpeech driver for Griptape Nodes. \n\nCan we have a GriptapeCloudTextToSpeechDriver for this?",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-05-15T18:40:48Z",
      "updated_at": "2025-05-15T18:50:06Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1941/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1941",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1941",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.573453",
      "comments": []
    },
    {
      "issue_number": 1928,
      "title": "Implement `AmazonBedrockRerankDriver`",
      "body": "support Bedrock's [rerank API](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Rerank.html)",
      "state": "open",
      "author": "vachillo",
      "author_type": "User",
      "created_at": "2025-05-02T19:26:14Z",
      "updated_at": "2025-05-13T02:50:17Z",
      "closed_at": null,
      "labels": [
        "drivers",
        "python"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1928/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1928",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1928",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.573463",
      "comments": []
    },
    {
      "issue_number": 1624,
      "title": "Use New Google GenAI SDK",
      "body": "Google appears to have a new SDK for genai: https://googleapis.github.io/python-genai/. This new SDK seems to solve a few quirks with the current one:\n\n- [Hack](https://github.com/griptape-ai/griptape/blob/f59dce6c475d0c05a81c40a1bfea9d6548767f53/griptape/drivers/prompt/google_prompt_driver.py?plain=1#L143-L147) for setting system prompt at runtime. https://googleapis.github.io/python-genai/#system-instructions-and-other-configs\n- [Hack](https://github.com/griptape-ai/griptape/blob/f59dce6c475d0c05a81c40a1bfea9d6548767f53/griptape/drivers/prompt/google_prompt_driver.py?plain=1#L194-L224) to convert into Google's schema format. This new SDK [supports pydantic](https://googleapis.github.io/python-genai/#json-response-schema) which will be used by Griptape 2.0.\n- Missing Vertex support. https://googleapis.github.io/python-genai/genai.html#genai.client.Client.vertexai",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-27T19:37:52Z",
      "updated_at": "2025-05-06T16:50:18Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1624/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1624",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1624",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.799778",
      "comments": []
    },
    {
      "issue_number": 1572,
      "title": "Google Gemini doesn't work with `QueryTool`",
      "body": "When using GoogleDriversConfig and `off_prompt=True` I'm getting an error - `Unknown field for Schema: anyOf`\r\n\r\n```python\r\nfrom griptape.configs import Defaults\r\nfrom griptape.configs.drivers import GoogleDriversConfig\r\nfrom griptape.structures import Agent\r\nfrom griptape.tools import QueryTool, WebScraperTool\r\n\r\nDefaults.drivers_config = GoogleDriversConfig()\r\n\r\nagent = Agent(tools=[WebScraperTool(off_prompt=True), QueryTool()])\r\n\r\nagent.run(\r\n    \"How does off-prompt work? https://docs.griptape.ai/stable/griptape-framework/structures/task-memory/ \"\r\n)\r\n```\r\n\r\nHere's the error:\r\n\r\n```python\r\n[01/14/25 11:36:25] INFO     PromptTask 6d49e7b57c0e4fb88b1b379e2e63e8ae\r\n                             Input: How does off-prompt work? https://docs.griptape.ai/stable/griptape-framework/structures/task-memory/  \r\n                    ERROR    PromptTask 6d49e7b57c0e4fb88b1b379e2e63e8ae\r\n                             Unknown field for Schema: anyOf\r\n                             Traceback (most recent call last):\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\rules\\message.py\"\r\n                             , line 36, in to_proto\r\n                                 return self._descriptor(**value)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                             TypeError: Parameter to CopyFrom() must be instance of same class: expected <class 'Schema'> got <class      \r\n                             'dict'>.\r\n\r\n                             During handling of the above exception, another exception occurred:\r\n\r\n                             Traceback (most recent call last):\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\rules\\message.py\"\r\n                             , line 36, in to_proto\r\n                                 return self._descriptor(**value)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                             ValueError: Protocol message Schema has no \"anyOf\" field.\r\n\r\n                             During handling of the above exception, another exception occurred:\r\n\r\n                             Traceback (most recent call last):\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\tasks\\base_task.py\",  \r\n                             line 163, in run\r\n                                 self.output = self.try_run()\r\n                                               ^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\tasks\\prompt_task.py\",\r\n                             line 205, in try_run\r\n                                 result = self.prompt_driver.run(self.prompt_stack)\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\decorators.py\",\r\n                             line 18, in decorator\r\n                                 Observability.observe(\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\observability\\observab\r\n                             ility.py\", line 36, in observe\r\n                                 return driver.observe(call)\r\n                                        ^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\observability\\\r\n                             no_op_observability_driver.py\", line 16, in observe\r\n                                 return call()\r\n                                        ^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\observable.py\",\r\n                             line 19, in __call__\r\n                                 return self.func(*self.args, **self.kwargs)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_pr\r\n                             ompt_driver.py\", line 81, in run\r\n                                 for attempt in self.retrying():\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\",  \r\n                             line 443, in __iter__\r\n                                 do = self.iter(retry_state=retry_state)\r\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\",  \r\n                             line 376, in iter\r\n                                 result = action(retry_state)\r\n                                          ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\",  \r\n                             line 398, in <lambda>\r\n                                 self._add_action_func(lambda rs: rs.outcome.result())\r\n                                                                  ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py\", line 449, in\r\n                             result\r\n                                 return self.__get_result()\r\n                                        ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py\", line 401, in\r\n                             __get_result\r\n                                 raise self._exception\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_pr\r\n                             ompt_driver.py\", line 85, in run\r\n                                 result = self.__process_stream(prompt_stack) if self.stream else self.__process_run(prompt_stack)        \r\n                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        \r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_pr\r\n                             ompt_driver.py\", line 126, in __process_run\r\n                                 return self.try_run(prompt_stack)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\decorators.py\",\r\n                             line 18, in decorator\r\n                                 Observability.observe(\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\observability\\observab\r\n                             ility.py\", line 36, in observe\r\n                                 return driver.observe(call)\r\n                                        ^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\observability\\\r\n                             no_op_observability_driver.py\", line 16, in observe\r\n                                 return call()\r\n                                        ^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\observable.py\",\r\n                             line 19, in __call__\r\n                                 return self.func(*self.args, **self.kwargs)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\google_\r\n                             prompt_driver.py\", line 79, in try_run\r\n                                 params = self._base_params(prompt_stack)\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\google_\r\n                             prompt_driver.py\", line 153, in _base_params\r\n                                 \"tools\": self.__to_google_tools(prompt_stack.tools),\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\google_\r\n                             prompt_driver.py\", line 193, in __to_google_tools\r\n                                 tool_declaration = types.FunctionDeclaration(\r\n                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\google\\generativeai\\types\\conte\r\n                             nt_types.py\", line 558, in __init__\r\n                                 self._proto = protos.FunctionDeclaration(\r\n                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\message.py\", line \r\n                             728, in __init__\r\n                                 pb_value = marshal.to_proto(pb_type, value)\r\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\marshal.py\", line\r\n                             235, in to_proto\r\n                                 pb_value = self.get_rule(proto_type=proto_type).to_proto(value)\r\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\rules\\message.py\"\r\n                             , line 45, in to_proto\r\n                                 return self._wrapper(value)._pb\r\n                                        ^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\message.py\", line \r\n                             728, in __init__\r\n                                 pb_value = marshal.to_proto(pb_type, value)\r\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\marshal.py\", line\r\n                             233, in to_proto\r\n                                 return {k: self.to_proto(recursive_type, v) for k, v in value.items()}\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\marshal.py\", line\r\n                             233, in <dictcomp>\r\n                                 return {k: self.to_proto(recursive_type, v) for k, v in value.items()}\r\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\marshal.py\", line\r\n                             235, in to_proto\r\n                                 pb_value = self.get_rule(proto_type=proto_type).to_proto(value)\r\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File\r\n                             \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\marshal\\rules\\message.py\"\r\n                             , line 45, in to_proto\r\n                                 return self._wrapper(value)._pb\r\n                                        ^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\proto\\message.py\", line \r\n                             724, in __init__\r\n                                 raise ValueError(\r\n                             ValueError: Unknown field for Schema: anyOf\r\n```",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-01-13T22:38:30Z",
      "updated_at": "2025-05-06T16:50:13Z",
      "closed_at": null,
      "labels": [
        "blocked",
        "drivers",
        "tools"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1572/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1572",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1572",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:29.799800",
      "comments": [
        {
          "author": "collindutter",
          "body": "Can be simplified to:\r\n```python\r\nfrom griptape.drivers import GooglePromptDriver\r\nfrom griptape.structures import Agent\r\nfrom griptape.tools import QueryTool\r\n\r\nagent = Agent(\r\n    prompt_driver=GooglePromptDriver(model=\"gemini-1.5-pro\"), tools=[QueryTool()]\r\n)\r\n\r\nagent.run()\r\n```\r\n\r\nIt's not an is",
          "created_at": "2025-01-13T22:44:29Z"
        },
        {
          "author": "collindutter",
          "body": "It looks like Google Gemini does not support `anyOf` in its json schemas. This is far from ideal, but in the meantime you can \"fix\" the tool by removing the use of `schema.Or`.\r\n\r\n```python\r\nfrom __future__ import annotations\r\n\r\nfrom attrs import define\r\nfrom griptape.artifacts import ErrorArtifact,",
          "created_at": "2025-01-13T23:19:03Z"
        },
        {
          "author": "shhlife",
          "body": "yeeks. :) \r\n\r\nI can fix that if I'm using it on my own, but would rather not try and fix it in comfyUI where our customer is hitting it. Is there another fix that we can use for the framework, or is this a biggie?",
          "created_at": "2025-01-13T23:44:24Z"
        },
        {
          "author": "collindutter",
          "body": "The issue boils down to this [tool using schema.Or](https://github.com/griptape-ai/griptape/blob/53bbbbd34cfbe34c5ff4c0bd18deaeaf98962f4f/griptape/tools/query/tool.py?plain=1#L50-L58) which turns into `anyOf` when rendered as a json schema. Others are running into it [here](https://github.com/google",
          "created_at": "2025-01-14T00:15:29Z"
        },
        {
          "author": "shhlife",
          "body": "I'm giving it a try - but I'm getting this error:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\jason\\Documents\\GitHub\\ComfyUI\\.venv\\Lib\\site-packages\\griptape\\tools\\base_tool.py\", line 136, in run\r\n    output = self.try_run(activity, subtask, action, output)\r\n             ^^^^^",
          "created_at": "2025-01-14T01:11:53Z"
        }
      ]
    },
    {
      "issue_number": 1912,
      "title": "Add `NvidiaNimEmbeddingDriver`",
      "body": "Add `NvidiaNimEmbeddingDriver` for integration with Nvidia NIM NEMO embedding API. it is mostly openai compatible with one parameter `input_type` being an outlier",
      "state": "closed",
      "author": "vachillo",
      "author_type": "User",
      "created_at": "2025-04-25T17:08:40Z",
      "updated_at": "2025-04-30T17:34:20Z",
      "closed_at": "2025-04-30T17:34:19Z",
      "labels": [
        "drivers",
        "python"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1912/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "vachillo"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1912",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1912",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:31.990207",
      "comments": []
    },
    {
      "issue_number": 1476,
      "title": "PdfLoader Parse Images",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\n\n**Is your feature request related to a problem? Please describe.**\nPDF can contain images, `PdfLoader` does not parse them out.\n\n**Describe the solution you'd like**\n`PdfLoader` should return `ImageArtifact`s.\n\n**Additional context**\nRelated to #1475 \n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-20T00:13:27Z",
      "updated_at": "2025-04-30T17:09:23Z",
      "closed_at": null,
      "labels": [
        "loaders"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1476/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1476",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1476",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:31.990370",
      "comments": []
    },
    {
      "issue_number": 1893,
      "title": "Create a GriptapeCloudConfig",
      "body": "We have default configs for OpenAi, Anthropic, etc - it would be helpful to have one for GriptapeCloudConfig as well, complete with all the appropriate drivers:\n \n* GriptapeCloudPromptDriver\n* GriptapeCloudImageGenerationDriver\n\nAlong with this, we should create GriptapeCloudDrivers for all the other types necessary. This way every interaction can start with the default of GriptapeCloudConfig.\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-04-21T16:18:49Z",
      "updated_at": "2025-04-29T17:04:48Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1893/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1893",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1893",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.212856",
      "comments": [
        {
          "author": "collindutter",
          "body": "Great idea, for now I'd suggest creating a [custom config](https://docs.griptape.ai/stable/griptape-framework/structures/configs/#custom).",
          "created_at": "2025-04-21T18:07:32Z"
        },
        {
          "author": "shhlife",
          "body": "Totally - that's what I do for my own stuff, but having a default one for the framework would be super awesome. :)",
          "created_at": "2025-04-21T20:52:43Z"
        }
      ]
    },
    {
      "issue_number": 1873,
      "title": "Add username support to Redis conversation memory driver",
      "body": "It's not currently possible to use a username other than default with the Redis Conversation Memory driver.\n\nTo fix this this, I think we need to add an additional kwonly attribute for username to the driver (not sure whether this should be serializable or not) and then pass that attribute as username when creating the Redis client instance.\n\n",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-04-09T07:32:20Z",
      "updated_at": "2025-04-29T17:03:05Z",
      "closed_at": "2025-04-29T17:03:05Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1873/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1873",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1873",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.457458",
      "comments": [
        {
          "author": "torabshaikh",
          "body": "Hi @collindutter , I would like to work on it.",
          "created_at": "2025-04-27T17:57:21Z"
        }
      ]
    },
    {
      "issue_number": 1590,
      "title": "Persist Summary In Conversation Memory Drivers",
      "body": "Summary Conversation Memory does not store/load its summary in Summary Conversation Memory Drivers. That means this information is lost in a new session and requires the user to \"nudge\" the Task in order to regenerate it. We can store this information in the metadata.\n\n### Discussed in https://github.com/orgs/griptape-ai/discussions/1585\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **shhlife** January 17, 2025</sup>\nIt would be wonderful to be able to maintain a summary of a threaded conversation in Threads - that way you can always get the summary without needing to execute a new run.</div>",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-17T17:51:33Z",
      "updated_at": "2025-04-29T17:02:10Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1590/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1590",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1590",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.704640",
      "comments": [
        {
          "author": "torabshaikh",
          "body": "Hi @collindutter  If you would like, I can take it up.",
          "created_at": "2025-04-29T03:43:02Z"
        },
        {
          "author": "collindutter",
          "body": "Sure @torabshaikh thank you!",
          "created_at": "2025-04-29T17:02:09Z"
        }
      ]
    },
    {
      "issue_number": 1915,
      "title": "Model `o4-mini` does not support a few different parameters",
      "body": "temperature: (not a big deal since this is configurable)\n```\n400 - {'error': {'message': \"Unsupported value: 'temperature' does not support 0.1 with this model. Only the default (1) value is supported.\", 'type': 'invalid_request_error', 'param': 'temperature', 'code': 'unsupported_value'}}\n```\n\nstop (tokenizer.stop_sequences): this one is more tricky since it gets set by default in `PromptTask`\n```\n400 - {'error': {'message': \"Unsupported parameter: 'stop' is not supported with this model.\", 'type': 'invalid_request_error', 'param': 'stop', 'code': 'unsupported_parameter'}}\n```\n\n```\nfrom griptape.drivers.prompt.openai_chat_prompt_driver import OpenAiChatPromptDriver\nfrom griptape.tasks import PromptTask\n\ntask = PromptTask(prompt_driver=OpenAiChatPromptDriver(model=\"o4-mini\"))\n\ntask.run(\"Hello there!\")\n```",
      "state": "closed",
      "author": "vachillo",
      "author_type": "User",
      "created_at": "2025-04-26T01:35:19Z",
      "updated_at": "2025-04-28T22:14:15Z",
      "closed_at": "2025-04-28T22:14:15Z",
      "labels": [
        "drivers",
        "tasks",
        "bug"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1915/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1915",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1915",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.953677",
      "comments": []
    },
    {
      "issue_number": 1359,
      "title": "Store URLs In Image Artifact",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n`ImageArtifact` only supports bytes values. Often times APIs accept URLs as the image format.\r\n\r\n**Describe the solution you'd like**\r\nSome way for me to pass URLs to things like Image Variation Drivers\r\n\r\n**Describe alternatives you've considered**\r\nCramming URLs into Image Artifacts and relying on the `to_text` to just work out.\r\n\r\n**Additional context**\r\nRequirement came from trying to implement https://bria-ai-api-docs.redoc.ly/tag/Image-Generation#operation/reimagine in https://github.com/griptape-ai/griptape-bria",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-11-19T00:54:51Z",
      "updated_at": "2025-04-25T18:30:44Z",
      "closed_at": "2025-04-25T18:30:44Z",
      "labels": [
        "artifacts"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1359/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1359",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1359",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.953712",
      "comments": []
    },
    {
      "issue_number": 1888,
      "title": "EDB Postgres AI Knowledge Base Driver",
      "body": "Griptape will support querying EDB Postgres AI (PG.AI) Knowledge Bases. Initially, only querying these PG.AI Knowledge Bases will be supported, with upserting vectors being out of scope for now",
      "state": "closed",
      "author": "cjkindel",
      "author_type": "User",
      "created_at": "2025-04-16T20:16:12Z",
      "updated_at": "2025-04-23T18:01:41Z",
      "closed_at": "2025-04-23T18:01:41Z",
      "labels": [
        "drivers",
        "rag"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1888/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cjkindel"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1888",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1888",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.953726",
      "comments": []
    },
    {
      "issue_number": 1897,
      "title": "Add support for `reasoningContent` returned from Deepseek R1 on Amazon Bedrock",
      "body": "Using Deepseek R1 on Amazon Bedrock produces an error in the form...\n\n\n`ERROR    PromptTask 9b73d8a64d0a438590f26c75183ab1fe                                                                                                 \n                             Unsupported message content type: {'reasoningContent': {'reasoningText': {'text': \"Okay, so I need to find the square root of 911. Hmm,     `\n\n\nI think we need to add support for handling `reasoningContent` in the driver",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-04-22T15:21:02Z",
      "updated_at": "2025-04-22T18:33:17Z",
      "closed_at": "2025-04-22T18:33:16Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1897/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1897",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1897",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:32.953740",
      "comments": [
        {
          "author": "ian-griptape-ai",
          "body": "use this to replicat\n\n```\nfrom griptape.drivers.prompt import amazon_bedrock_prompt_driver\n\nfrom griptape.tasks import PromptTask\n\nreasoning_task = PromptTask(\n    prompt_driver=amazon_bedrock_prompt_driver.AmazonBedrockPromptDriver(\n        model=\"us.deepseek.r1-v1:0\"\n    ),\n    tools=[],\n    rules",
          "created_at": "2025-04-22T16:06:16Z"
        }
      ]
    },
    {
      "issue_number": 1898,
      "title": "Structured output fails with warnings and error with the `us.anthropic.claude-3-7-sonnet-20250219-v1:0` model on Amazon Bedrock",
      "body": "The sample code at the bottom of this issue below causes multiple warnings of the type\n\n`/Users/ian/griptape-1.6/.venv/lib/python3.12/site-packages/pydantic/json_schema.py:2324: PydanticJsonSchemaWarning: Default value <class '__main__.Output'> is not JSON serializable; excluding default from JSON schema [non-serializable-default] warnings.warn(message, PydanticJsonSchemaWarning)`\n\nand then fails with the following errors when attempting schema validation. \n\n`OutputSchemaValidationSubtask Validation error: [{'type': 'json_type', 'loc': (), 'msg': 'JSON input should be string, bytes or bytearray', 'input': {'Sender': {'name': 'Ian Massingham', 'email': 'ian@griptape.ai'}, 'KeyDates': [{'date':             \n                             '2025-11-01', 'explanation': 'AI governance event taking place on November 1st, 2025 (approximately 192 days from now)'}], 'Summary': 'This email contains a summary of a discussion about an upcoming AI governance event. The event will focus on       \n                             creating comprehensive governance strategies aligned with business objectives and responsible AI use. It will provide practical insights through case studies, workshops on best practices, and discussions on overcoming challenges in AI governance. The\n                             goal is to help organizations navigate the AI landscape and leverage AI assets strategically.', 'NeedToTakeAction': True, 'NeedToRespond': False}, 'url': 'https://errors.pydantic.dev/2.11/v/json_type'}] `\n\n`Unsupported artifact type: <class 'griptape.artifacts.json_artifact.JsonArtifact'>`\n\n```\nfrom pydantic import BaseModel\nfrom rich.pretty import pprint\n\nfrom griptape.rules import Rule\nfrom griptape.structures import Pipeline\nfrom griptape.tasks import PromptTask\nfrom griptape.tools import DateTimeTool\n\nfrom griptape.drivers.prompt import amazon_bedrock_prompt_driver\n\n\nclass DateItem(BaseModel):\n    explanation: str\n    date: str\n\n\nclass Sender(BaseModel):\n    name: str\n    email: str\n\n\nclass Output(BaseModel):\n    Sender: Sender\n    KeyDates: list[DateItem]\n    Summary: str\n    NeedToTakeAction: bool\n    NeedToRespond: bool\n\n\npipeline = Pipeline(\n    tasks=[\n        PromptTask(\n            prompt_driver=amazon_bedrock_prompt_driver.AmazonBedrockPromptDriver(\n                model=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\"\n            ),\n            tools=[DateTimeTool()],\n            output_schema=Output,\n            rules=[\n                Rule(\n                    \"Clearly state if there are any dates or deadlines mentioned in the email. If there are upcoming dates or deadlines, use the DateTimeTool to calculate how many days or weeks they are in the future and state this in your response. Always calculate the date or time difference in comparison to the current date and time. Get the current date and time with the datetime tool.\"\n                ),\n                Rule(\n                    \"Include the following information to the summary: Do I need to take any action based on this email?\"\n                ),\n                Rule(\n                    \"Include the following information to the summary: Do I need to respond to this email?\"\n                ),\n                Rule(\n                    \"Include the following information to the summary: Who is the sender of this email?\"\n                ),\n                Rule(\n                    \"You are an email summarizing agent. You role is to read email, summarize the content and pull out key facts. Refer to your rules for the mandatory information that you must provide with each summary\"\n                ),\n                Rule(\n                    \"Be concise and clear in your summary. Do not include any unnecessary information or details.\"\n                ),\n            ],\n        )\n    ]\n)\n\nemail = \"\"\"\nTo: \"'Ian Massingham'\" <ian@griptape.ai>\" From: Sender <sender@example.com> Date: Fri, 11 Apr 2025 11:15:43 +0100 Message Body: Hi All, I though the summary below was a fair capture of what we discussed. Thanks again for your time, it’s hugely appreciated. The conversation highlighted the importance of creating a comprehensive governance strategy that aligns with business objectives and facilitates the responsible use of AI technologies. Furthermore, the committee agreed that the event should provide practical insights and actionable strategies for attendees to improve their AI governance practices. This could involve showcasing successful case studies, offering workshops on best practices, and facilitating discussions on overcoming common challenges in the field. By focusing on these critical aspects of AI governance, the event aims to empower organizations to navigate the complexities of the AI landscape and leverage their AI assets for strategic advantage. A reminder that this event takes place 1st November 2025. \n\"\"\"\n\noutput = pipeline.run(email).output.value\n\n\npprint(output)  # OutputModel\n```",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-04-22T15:28:32Z",
      "updated_at": "2025-04-22T16:56:29Z",
      "closed_at": "2025-04-22T16:56:29Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1898/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1898",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1898",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.188226",
      "comments": []
    },
    {
      "issue_number": 1890,
      "title": "Marshmallow 4 Broke Serialization",
      "body": "Marshmallow 4 was just [released](https://marshmallow.readthedocs.io/en/latest/changelog.html) and we don't pin `<4`. We're running into:\n\n> Backwards-incompatible: Rename schema parameter to parent in marshmallow.fields.Field._bind_to_schema ([#1360](https://github.com/marshmallow-code/marshmallow/issues/1360))\n  \nHere:\nhttps://github.com/griptape-ai/griptape/blob/8d36c442cdaa58e15bd27d7a0a185aeb9a236dbd/griptape/schemas/polymorphic_schema.py?plain=1#L70",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-04-17T19:02:30Z",
      "updated_at": "2025-04-17T19:10:01Z",
      "closed_at": "2025-04-17T19:10:01Z",
      "labels": [
        "serialization"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1890/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1890",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1890",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.188263",
      "comments": []
    },
    {
      "issue_number": 1876,
      "title": "Structured Output + Conversation Memory Fails With Pydantic Models",
      "body": "```python\nfrom griptape.drivers.memory.conversation.local import LocalConversationMemoryDriver\nfrom griptape.memory.structure import ConversationMemory\nfrom griptape.structures import Pipeline\nfrom griptape.tasks import PromptTask\nfrom pydantic import BaseModel\n\n\nclass Output(BaseModel):\n    answer: str\n\n\npipeline = Pipeline(\n    conversation_memory=ConversationMemory(\n        conversation_memory_driver=LocalConversationMemoryDriver(\n            persist_file=\"conversation_memory.json\"\n        )\n    ),\n    tasks=[\n        PromptTask(\n            output_schema=Output,\n        )\n    ],\n)\n\npipeline.run(\"Hi\")\npipeline.run(\"What's my name?\")\n```\n\nRun it twice.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-04-11T16:43:43Z",
      "updated_at": "2025-04-14T16:20:40Z",
      "closed_at": "2025-04-14T16:20:40Z",
      "labels": [
        "tasks",
        "memory"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1876/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.7",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1876",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1876",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.188280",
      "comments": []
    },
    {
      "issue_number": 1469,
      "title": "Unstructured Output",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nUsers want some way to get [structured output](https://github.com/griptape-ai/griptape/issues/1468) like behavior for non-deterministic output. For instance, if I've got a Rule that says \"Talk like a Pirate\", I want something that automatically enforces (and automatically corrects) an LLM to output that way.\r\n\r\n**Describe the solution you'd like**\r\n- Use `EvalEngine` to automatically evaluate output on whether it follows the provided Rulesets.\r\n- Provide a custom function that can do whatever kind of check they'd like.\r\n**Describe alternatives you've considered**\r\nBuild the loop myself:\r\n\r\n```python\r\nfrom griptape.engines import EvalEngine\r\nfrom griptape.structures import Pipeline\r\nfrom griptape.tasks import PromptTask\r\n\r\nengine = EvalEngine(\r\n    criteria=\"Determine whether the answer is spoken like a pirate.\",\r\n    evaluation_params=[EvalEngine.Param.INPUT, EvalEngine.Param.ACTUAL_OUTPUT],\r\n)\r\n\r\n\r\npipeline = Pipeline(\r\n    tasks=[\r\n        PromptTask(\"What is 2 + 2? {% if args and args[0] %}{{ args[0] }}{% endif %}\"),\r\n    ]\r\n)\r\n\r\n\r\nscore = -1\r\nreason = None\r\nwhile score < 0.5:\r\n    pipeline.run(reason)\r\n    score, reason = engine.evaluate(input=pipeline.input, actual_output=pipeline.output)\r\n```",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-19T20:03:46Z",
      "updated_at": "2025-04-09T21:42:37Z",
      "closed_at": null,
      "labels": [
        "engines"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1469/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1469",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1469",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.188296",
      "comments": [
        {
          "author": "collindutter",
          "body": "Opportunity for new subtask: https://github.com/griptape-ai/griptape/pull/1865",
          "created_at": "2025-04-09T21:42:36Z"
        }
      ]
    },
    {
      "issue_number": 1826,
      "title": "Evaluate Prompt Task System Prompt",
      "body": "              i know its always been this way, but does \"information input\" make sense to the LLM?\r\n\r\nas a side note, im wondering if we would have a task that doesnt use \"NEVER ask the user for more information\". there is a lot of talk about prompting techniques involving having the LLM ALWAYS ask for more information to get a better answer.\r\n\r\n_Originally posted by @vachillo in https://github.com/griptape-ai/griptape/pull/1810#discussion_r1991846730_\r\n            ",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-12T16:36:31Z",
      "updated_at": "2025-04-09T21:41:58Z",
      "closed_at": null,
      "labels": [
        "tasks"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1826/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1826",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1826",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.456278",
      "comments": []
    },
    {
      "issue_number": 1866,
      "title": "Automatically Validate Structured Output",
      "body": "Occasionally, LLMs still goof up structured output. We should automatically validate the LLM's output against the provided output schema in a subtask. If it fails validation, re-prompt the LLM with instructions to fix it.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-04-04T16:29:36Z",
      "updated_at": "2025-04-08T19:53:07Z",
      "closed_at": "2025-04-08T19:53:06Z",
      "labels": [
        "tasks"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1866/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.6",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1866",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1866",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.456313",
      "comments": []
    },
    {
      "issue_number": 1868,
      "title": "Can't Serialize Tool With Task Memory",
      "body": "```python\nfrom griptape.memory.task.task_memory import TaskMemory\nfrom griptape.tools import CalculatorTool\n\nprint(CalculatorTool(output_memory={\"calculate\": [TaskMemory()]}))\n```\n\n```\nTraceback (most recent call last):\n  File \"/Users/collindutter/Documents/griptape/griptape-playground/src/misc/task_memory_serialization.py\", line 4, in <module>\n    print(CalculatorTool(output_memory={\"calculate\": [TaskMemory()]}))\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/mixins/serializable_mixin.py\", line 96, in __str__\n    return json.dumps(self.to_dict())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/json/encoder.py\", line 200, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/json/encoder.py\", line 258, in iterencode\n    return _iterencode(o, 0)\n           ^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/json/encoder.py\", line 180, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type TaskMemory is not JSON serializable\n```",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-04-07T18:53:41Z",
      "updated_at": "2025-04-07T21:40:08Z",
      "closed_at": "2025-04-07T21:40:07Z",
      "labels": [
        "tools",
        "serialization"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1868/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.6",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1868",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1868",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:33.456325",
      "comments": []
    },
    {
      "issue_number": 131,
      "title": "Add `subtask_summarizer` to `ToolkitTask`",
      "body": "Toolkit task subtasks are not included in the conversation history after the task is completed. It's fine for single runs but often results in lost context in conversational workflows.\r\n\r\nI propose adding an`Optional` parameter `subtask_summarizer ` to `ToolkitTask` that, if not `None` summarizers the subtask and includes it in the conversation history.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-07-24T19:59:07Z",
      "updated_at": "2025-04-02T20:47:54Z",
      "closed_at": null,
      "labels": [
        "tasks"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/131/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/131",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/131",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:35.323435",
      "comments": [
        {
          "author": "invke",
          "body": "Just to add context to anyone else searching for a similar issue, I talked with @collindutter about an error I was experiencing where we think this would be a solution.\n\nEssentially, if there isn't summaries of a subtask an agent is required to perform in the conversation memory then it can pick up ",
          "created_at": "2025-04-02T19:58:37Z"
        },
        {
          "author": "collindutter",
          "body": "Bit more context, here is a basic repro script. May take a few runs to trigger.\n\n```python\nimport logging\n\nimport schema\nfrom griptape.artifacts import InfoArtifact\nfrom griptape.configs import Defaults\nfrom griptape.configs.logging import JsonFormatter\nfrom griptape.drivers.prompt.openai import Ope",
          "created_at": "2025-04-02T20:47:53Z"
        }
      ]
    },
    {
      "issue_number": 1840,
      "title": "Embedding Driver Example for OpenAiEmbeddingDriver Shows Method That Needs to be Updated",
      "body": "# Issue Details \n\n## Documentation Example\n\nI was working on the [documentationexample](https://docs.griptape.ai/stable/griptape-framework/drivers/embedding-drivers/) for the `OpenAiEmbeddingDriver` and saw that I was running into an issue when embedding:\n\n```shell\nError: 'OpenAiEmbeddingDriver' object has no attribute 'embed'\n```\n\nAt first I thought I just missed something, but this is the example in the documentation:\n\n```python\n\nfrom griptape.drivers.embedding.openai import OpenAiEmbeddingDriver\n\nembeddings = OpenAiEmbeddingDriver().embed(\"Hello Griptape!\")\n\n# display the first 3 embeddings\nprint(embeddings[:3])\n\n```\n\nAs a sanity check, I checked the reference and saw this method for [try_embed_chunk(chunk)](https://docs.griptape.ai/stable/reference/griptape/drivers/embedding/openai_embedding_driver/):\n\n```python\n\ndef try_embed_chunk(self, chunk: str) -> list[float]:\n    # Address a performance issue in older ada models\n    # https://github.com/openai/openai-python/issues/418#issuecomment-1525939500\n    if self.model.endswith(\"001\"):\n        chunk = chunk.replace(\"\\n\", \" \")\n    return self.client.embeddings.create(**self._params(chunk)).data[0].embedding\n\n```\n\nI made the update in the example code to test, and this appears to fix the issue (had been using this with the MongoDB Atlas Vector Store",
      "state": "closed",
      "author": "yakuzadave",
      "author_type": "User",
      "created_at": "2025-03-15T03:52:36Z",
      "updated_at": "2025-03-25T18:10:54Z",
      "closed_at": "2025-03-25T18:10:54Z",
      "labels": [
        "can't reproduce",
        "drivers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1840/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1840",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1840",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:35.591674",
      "comments": [
        {
          "author": "collindutter",
          "body": "Hey @yakuzadave, thanks for the report! Can you please confirm you're running the latest version of griptape (`>=1.5.0`)? `embed` was introduced in this version, so it's likely a mismatch of versions.\n\nI just confirmed I was able to run your example with no issue on `1.5.0`.",
          "created_at": "2025-03-17T15:57:43Z"
        },
        {
          "author": "yakuzadave",
          "body": "I think you are right.  Checked my griptape version and I had been running `1.4.3`.  Updating now and testing (I suspect that it will work in the new version).",
          "created_at": "2025-03-19T23:50:46Z"
        }
      ]
    },
    {
      "issue_number": 1688,
      "title": "Coverage for modalities (audio input/output) & parameters for reasoning models needs improvement",
      "body": "The 1.3 release includes some features that do not currently have coverage in the documentation.\n\n- modalities (audio input/output) #1793\n- parameters for OpenAI reasoning models\n\nAre two examples that I spotted from this release.\n\nLooking back at 1.2, I *think* structured_output needs to be added too? \n\n",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-02-11T14:56:24Z",
      "updated_at": "2025-03-24T20:45:01Z",
      "closed_at": "2025-03-24T20:45:01Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1688/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.6",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1688",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1688",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:35.889942",
      "comments": [
        {
          "author": "collindutter",
          "body": "@ian-griptape-ai, structured output is tucked away [here](https://docs.griptape.ai/latest/griptape-framework/drivers/prompt-drivers/#structured-output), though I'm open to relocating.\n\nWhat did you have in mind for the reasoning models? They basically function the same as any other openai model.",
          "created_at": "2025-03-03T22:24:16Z"
        }
      ]
    },
    {
      "issue_number": 1842,
      "title": "Resolve `WARNING: :root:Model amazon.titan-embed-text-v1 not found...` when using Amazon Titan embedding models",
      "body": "Whenever using a Titan embedding model with the framework, the following warning is generated:\n\n`WARNING:root:Model amazon.titan-embed-text-v1 not found in MODEL_PREFIXES_TO_MAX_OUTPUT_TOKENS, using default value of 1000.`",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-03-17T16:12:22Z",
      "updated_at": "2025-03-24T20:36:31Z",
      "closed_at": "2025-03-24T20:36:31Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1842/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.6",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1842",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1842",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181761",
      "comments": []
    },
    {
      "issue_number": 1844,
      "title": "Remove Tokenizer Output Token Tracking",
      "body": "Griptape's Tokenizers maintain two maps: `MODEL_PREFIXES_TO_MAX_INPUT_TOKENS` and `MODEL_PREFIXES_TO_MAX_OUTPUT_TOKENS`. The former is used when performing operations that try to maximize the LLM's context window, like summarization. The latter, is an artifact of when we used to calculate output tokens with OpenAi to avoid rate limiting. This was removed quite a while ago and the functionality is not used anywhere else in the framework.\n\nSide effect of it existing is:\n- Maintenance on this token mapping.\n- Messiness with how to treat embedding models (#1842).\n\nThe functionality should be removed.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-17T16:33:36Z",
      "updated_at": "2025-03-17T16:33:37Z",
      "closed_at": null,
      "labels": [
        "tokenizers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1844/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1844",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1844",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181802",
      "comments": []
    },
    {
      "issue_number": 1790,
      "title": "Add Observability Metrics to PromptDrivers",
      "body": "Add Observability metrics to PromptDrivers (and potentially to other parts of the Framework) using the [OTel Semantic Conventions for Generative AI Metrics](https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-metrics/)\n ",
      "state": "open",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-03-03T19:10:17Z",
      "updated_at": "2025-03-17T16:14:02Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1790/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1790",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1790",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181814",
      "comments": []
    },
    {
      "issue_number": 1607,
      "title": "Improve Overview Page",
      "body": "Our [overview page](https://docs.griptape.ai/stable/griptape-framework/) does not do a great job at actually providing an overview of the framework. It should provide a high level of all framework components and what purpose they serve.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-23T20:11:09Z",
      "updated_at": "2025-03-13T20:39:24Z",
      "closed_at": "2025-03-13T20:39:23Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1607/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1607",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1607",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181827",
      "comments": []
    },
    {
      "issue_number": 1471,
      "title": "Get Tool Output From `ToolkitTask`",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThere is no easy way to get Tool outputs in `ToolkitTask`. The output of the Task is always the LLM's textual response.\r\n\r\n**Describe the solution you'd like**\r\nBe able to access Tool outputs from `ToolkitTask` instead of (in addition to?) the LLM's final interpretation of it.\r\n\r\n**Describe alternatives you've considered**\r\n- Using `ToolTask`. This Task lacks the CoT of `ToolkitTask` and only supports a single Tool.\r\n- Accessing `ToolkitTask.subtasks`. Maybe a variation of this could work. That way we're not making any assumptions about which Tool call the user wants.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-19T20:59:23Z",
      "updated_at": "2025-03-12T16:47:19Z",
      "closed_at": "2025-03-12T16:47:18Z",
      "labels": [
        "tasks",
        "tools"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1471/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1471",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1471",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181837",
      "comments": []
    },
    {
      "issue_number": 1599,
      "title": "Create PerplexityAI Web Search Driver",
      "body": "Support https://sonar.perplexity.ai/",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-21T22:29:46Z",
      "updated_at": "2025-03-12T16:37:16Z",
      "closed_at": "2025-03-12T16:37:16Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1599/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1599",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1599",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181845",
      "comments": []
    },
    {
      "issue_number": 1824,
      "title": "Tool Drivers don't seem to be serializing properly",
      "body": "Some Tool Drivers aren't serializing properly.\n\nFor example, the `AudioTranscriptionTool` takes an `audio_transcription_driver` - but when you use `to_dict()` on it, the `audio_transcription_driver` is not included.\n\n```python\nfrom griptape.drivers.audio_transcription.openai import OpenAiAudioTranscriptionDriver\nfrom griptape.tools import AudioTranscriptionTool\nfrom rich import print\n\ndriver = OpenAiAudioTranscriptionDriver(model=\"whisper-1\")\ntool = AudioTranscriptionTool(audio_transcription_driver=driver)\n\nprint(\"Original tool\")\nprint(tool)\ntool_dict = tool.to_dict()\nprint(\"\\nTool as dict\")\nprint(tool_dict)\n```\n\nResult:\n```\nOriginal tool\nAudioTranscriptionTool(\n    on_before_run=None,\n    on_after_run=None,\n    type='AudioTranscriptionTool',\n    module_name='griptape.tools.audio_transcription.tool',\n    allowlist=None,\n    denylist=None,\n    extra_schema_properties=None,\n    name='AudioTranscriptionTool',\n    input_memory=None,\n    output_memory=None,\n    install_dependencies_on_init=True,\n    dependencies_install_directory=None,\n    verbose=False,\n    off_prompt=False,\n    audio_transcription_driver=OpenAiAudioTranscriptionDriver(\n        min_retry_delay=2,\n        max_retry_delay=10,\n        max_attempts=2,\n        after_hook=<function ExponentialBackoffMixin.<lambda> at 0x1076149a0>,\n        ignored_exception_types=(),\n        type='OpenAiAudioTranscriptionDriver',\n        module_name='griptape.drivers.audio_transcription.openai_audio_transcription_driver',\n        model='whisper-1',\n        api_type=None,\n        api_version=None,\n        base_url=None,\n        api_key=None,\n        organization=None,\n        _client=None\n    ),\n    audio_loader=AudioLoader(\n        create_futures_executor=<function FuturesExecutorMixin.<lambda>.<locals>.<lambda> at 0x1030351c0>,\n        _futures_executor=<concurrent.futures.thread.ThreadPoolExecutor object at 0x1030e4f50>,\n        reference=None,\n        file_manager_driver=LocalFileManagerDriver(encoding=None, _workdir='/Users/jason/Documents/GitHub/griptape-intro-demos'),\n        encoding='utf-8'\n    )\n)\n\nTool as dict\n{\n    'type': 'AudioTranscriptionTool',\n    'name': 'AudioTranscriptionTool',\n    'input_memory': None,\n    'output_memory': None,\n    'install_dependencies_on_init': True,\n    'dependencies_install_directory': None,\n    'verbose': False,\n    'off_prompt': False\n}```\n\nAs you can see, there's no `audio_transcription_driver` in the `tool_dict`.\n\n",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-03-09T21:51:16Z",
      "updated_at": "2025-03-12T16:27:23Z",
      "closed_at": "2025-03-12T16:27:22Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1824/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1824",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1824",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:36.181853",
      "comments": [
        {
          "author": "shhlife",
          "body": "We're also seeing this type of error a lot where we get a notification about some missing `Base` driver.. for example:\n\n```python\nfrom griptape.drivers.web_search.duck_duck_go import DuckDuckGoWebSearchDriver\nfrom griptape.tools import WebSearchTool\n\n\"\"\" Web Search Tool \"\"\"\nweb_driver = DuckDuckGoWe",
          "created_at": "2025-03-09T21:56:48Z"
        },
        {
          "author": "shhlife",
          "body": "Other areas we are seeing it:\n\nKnowledgeBaseTool\nFileManagerTool\nExtractionTool",
          "created_at": "2025-03-09T22:01:26Z"
        },
        {
          "author": "collindutter",
          "body": "#1587 strikes again",
          "created_at": "2025-03-10T16:41:56Z"
        }
      ]
    },
    {
      "issue_number": 1809,
      "title": "Human In The Loop",
      "body": "Griptape needs a clear story for how to implement real-world human in the loop. Many of the demos online rely on either:\n1.  Sticking an `input()` in a Tool call. \n2. Using a finite state machine.\n\nOption 1 is not realistic for real-world usage, option 2 is complex and requires significant code changes. Can we provide a middle ground example that uses what we've got today? ",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-05T16:56:53Z",
      "updated_at": "2025-03-06T17:05:32Z",
      "closed_at": null,
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1809/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1809",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1809",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:38.409229",
      "comments": [
        {
          "author": "collindutter",
          "body": "Adding a relatively simple method to `EventBus` and we can do:\n\n```python\ndef publish_and_wait(self, event: BaseEvent, response_event_type: type[T]) -> T:\n        future = Future()\n\n        def on_event(event: BaseEvent) -> None:\n            future.set_result(event)\n\n        EventBus.add_event_liste",
          "created_at": "2025-03-06T17:02:30Z"
        },
        {
          "author": "collindutter",
          "body": "Same pattern applied to a decorator for blocking Tool uses.\n```python\nimport logging\nimport random\nfrom collections.abc import Callable\nfrom functools import wraps\nfrom typing import Any\n\nfrom attrs import define\nfrom griptape.artifacts import InfoArtifact\nfrom griptape.events import BaseEvent, Even",
          "created_at": "2025-03-06T17:03:07Z"
        }
      ]
    },
    {
      "issue_number": 1798,
      "title": "Marqo Failing To Upsert",
      "body": "```\n❮ uv run python docs/griptape-framework/drivers/src/vector_store_drivers_4.py\n/Users/collindutter/Documents/griptape/griptape/docs/griptape-framework/drivers/src/vector_store_drivers_4.py:29: DeprecationWarning: `BaseVectorStoreDriver.upsert_text_artifacts` is deprecated and will be removed in a future release. `BaseEmbeddingDriver.upsert_collection` is a drop-in replacement.\n  vector_store_driver.upsert_text_artifacts(\n2025-03-04 09:58:39,573 logger:'marqo' WARNING Your Marqo Python client requires a minimum Marqo version of 2.15.0 to function properly, but your Marqo version is 2.13.6. Please upgrade your Marqo instance to avoid potential errors. If you have already changed your Marqo instance but still get this warning, please restart your Python interpreter.\nTraceback (most recent call last):\n  File \"/Users/collindutter/Documents/griptape/griptape/docs/griptape-framework/drivers/src/vector_store_drivers_4.py\", line 29, in <module>\n    vector_store_driver.upsert_text_artifacts(\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/drivers/vector/base_vector_store_driver.py\", line 49, in upsert_text_artifacts\n    return self.upsert_collection(artifacts, meta=meta, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/drivers/vector/base_vector_store_driver.py\", line 133, in upsert_collection\n    return utils.execute_futures_list_dict(futures_dict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/utils/futures.py\", line 22, in execute_futures_list_dict\n    execute_futures_list([item for sublist in fs_dict.values() for item in sublist])\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/utils/futures.py\", line 18, in execute_futures_list\n    return [future.result() for future in fs_list]\n            ^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/Users/collindutter/.local/share/mise/installs/python/3.12.9/lib/python3.12/concurrent/futures/thread.py\", line 59, in run\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/utils/contextvars_utils.py\", line 9, in wrapper\n    return ctx.run(wrapped, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/drivers/vector/base_vector_store_driver.py\", line 159, in upsert\n    return self.upsert_vector(vector, vector_id=vector_id, namespace=namespace, meta=meta, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/collindutter/Documents/griptape/griptape/griptape/drivers/vector/marqo_vector_store_driver.py\", line 275, in upsert_vector\n    raise NotImplementedError(f\"{self.__class__.__name__} does not support upserting a vector.\")\nNotImplementedError: MarqoVectorStoreDriver does not support upserting a vector.\n```",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-04T17:59:21Z",
      "updated_at": "2025-03-05T22:54:44Z",
      "closed_at": "2025-03-05T22:54:44Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1798/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1798",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1798",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:38.645716",
      "comments": []
    },
    {
      "issue_number": 1793,
      "title": "Add Docs For Audio Modalities",
      "body": null,
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-03T22:13:29Z",
      "updated_at": "2025-03-05T21:48:16Z",
      "closed_at": "2025-03-05T21:48:16Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1793/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1793",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1793",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:38.645735",
      "comments": []
    },
    {
      "issue_number": 1649,
      "title": "Would like have the ability to fix json output when streaming from a structure",
      "body": "When streaming output from a structure that's using structured output, it would be helpful to ensure the output data is valid.\n\nFor example:\n\n```python\nfrom griptape.structures import Agent\nfrom griptape.utils import Stream\nimport schema\nagent = Agent(stream=True, \n              output_schema=schema.Schema({\"item\": str, \"description\": str})\n              )\nfull_result = \"\"\nfor artifact in Stream(agent).run(\"give me a cookie name and its description\"):\n    full_result += artifact.value\n    print(full_result)\n ```\n\nwill print out partial strings as the chunks come back\n\n```json\n{\"\n{\"item\n{\"item\":\"\n{\"item\":\"**\n{\"item\":\"**C\n{\"item\":\"**Cinnamon\n{\"item\":\"**Cinnamon Sw\n{\"item\":\"**Cinnamon Swirl\n{\"item\":\"**Cinnamon Swirl Delight\n{\"item\":\"**Cinnamon Swirl Delight**\n{\"item\":\"**Cinnamon Swirl Delight**\",\"\n{\"item\":\"**Cinnamon Swirl Delight**\",\"description\n{\"item\":\"**Cinnamon Swirl Delight**\",\"description\":\"\n{\"item\":\"**Cinnamon Swirl Delight**\",\"description\":\"A\n{\"item\":\"**Cinnamon Swirl Delight**\",\"description\":\"A delightful\n```\n\nit's cool seeing this, but unfortunately the results aren't clean json.\n\nIf we integrate the library `json-repair`, we can make it output cleaner results..\n\n```python\nfrom griptape.structures import Agent\nfrom griptape.utils import Stream\nfrom json_repair import repair_json # json_repair\nimport schema\nagent = Agent(stream=True, \n              output_schema=schema.Schema({\"item\": str, \"description\": str})\n              )\nfull_result = \"\"\nfor artifact in Stream(agent).run(\"give me a cookie name and a short description\"):\n    full_result += artifact.value\n    print(repair_json(full_result)) # repair it\n```\n\nand we get these results:\n\n```json\n\"\"\n{}\n{}\n{\"item\": \"\"}\n{\"item\": \"Moon\"}\n{\"item\": \"Moonlit\"}\n{\"item\": \"Moonlit Almond\"}\n{\"item\": \"Moonlit Almond Delight\"}\n{\"item\": \"Moonlit Almond Delight\"}\n{\"item\": \"Moonlit Almond Delight\"}\n{\"item\": \"Moonlit Almond Delight\", \"description\": \"\"}\n{\"item\": \"Moonlit Almond Delight\", \"description\": \"A\"}\n```\n\ncan we add this as part of Stream?",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-02-05T18:32:43Z",
      "updated_at": "2025-03-05T20:02:35Z",
      "closed_at": null,
      "labels": [
        "blocked",
        "utils",
        "loaders"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1649/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1649",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1649",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:38.645742",
      "comments": [
        {
          "author": "collindutter",
          "body": "Once Loaders are Driver-based, this library would fit great into `JsonParser.parse`.",
          "created_at": "2025-02-14T18:12:05Z"
        },
        {
          "author": "collindutter",
          "body": "Blocked on #1746 ",
          "created_at": "2025-03-05T20:02:23Z"
        }
      ]
    },
    {
      "issue_number": 1796,
      "title": "maximum recursion depth exceeded using MarkdownChunker.chunk with certain inputs",
      "body": "If [`BaseChunker.chunk`](https://github.com/griptape-ai/griptape/blob/bdc19214501a80006d5ff44ff4c90707c04086b1/griptape/chunkers/base_chunker.py#L35-L39) ends up having to split using the ` ` separator, and there are multiple ` ` characters in the chunk, then `BaseChunker._chunk_recursively` can end up being called indefinitely until the maximum recursion depth is reached.\n\nI originally hit the issue chunking [an mdx doc of size 929 tokens](https://github.com/EnterpriseDB/docs/blob/6d3e3ec278f9f4af09647ec6f372ea51391c5024/product_docs/docs/pgd/5/cli/command_ref/pgd_show-raft.mdx) using a `max_tokens` of 384 but the simplest possible reproduction I could come up with is:\n\n```python\n#!/usr/bin/env python\n\nfrom griptape.chunkers import MarkdownChunker\n\nchunker = MarkdownChunker(max_tokens=3)\n\nassert len(chunker.chunk(\"foo bar baz\")) == 1\nassert len(chunker.chunk(\"foo bar baz \")) == 2\n\n# This should also yield two chunks but instead hits the recursion max depth\nassert len(chunker.chunk(\"foo  bar baz\")) == 2\n```",
      "state": "closed",
      "author": "mikewallace1979",
      "author_type": "User",
      "created_at": "2025-03-04T16:12:10Z",
      "updated_at": "2025-03-05T09:52:02Z",
      "closed_at": "2025-03-04T22:32:28Z",
      "labels": [
        "chunkers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1796/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1796",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1796",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:38.920802",
      "comments": [
        {
          "author": "collindutter",
          "body": "Thanks again for the great repro @mikewallace1979, I'm on it!",
          "created_at": "2025-03-04T16:59:17Z"
        },
        {
          "author": "collindutter",
          "body": "@mikewallace1979 this has been released in [1.4.3](https://github.com/griptape-ai/griptape/releases/tag/v1.4.3).",
          "created_at": "2025-03-04T23:29:27Z"
        },
        {
          "author": "mikewallace1979",
          "body": "@collindutter thanks again for the quick response - confirming I can now chunk the document which triggered the issue :)",
          "created_at": "2025-03-05T09:52:02Z"
        }
      ]
    },
    {
      "issue_number": 1804,
      "title": "Incorrect Deprecation Warning",
      "body": "```python\nfrom griptape.structures import Agent\n\nagent = Agent()\n\nagent.run()\n```\n\n```\n/Users/collindutter/Documents/griptape/griptape-playground/.venv/lib/python3.12/site-packages/attr/setters.py:51: UserWarning: `Agent.prompt_driver` is set, but `Agent.stream` was provided. `Agent.stream` will be ignored. This will be an error in the future.\n  v(instance, attrib, new_value)\n[03/04/25 15:08:38] INFO     PromptTask ea9935f4e91d4e108c1ae1f2bf42c48c\n                             Input:\n[03/04/25 15:08:39] INFO     PromptTask ea9935f4e91d4e108c1ae1f2bf42c48c\n                             Output: Hello! How can I assist you today?\n```",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-04T23:19:17Z",
      "updated_at": "2025-03-04T23:34:10Z",
      "closed_at": "2025-03-04T23:34:10Z",
      "labels": [
        "structures"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1804/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1804",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1804",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.154290",
      "comments": []
    },
    {
      "issue_number": 1802,
      "title": "Support Upserting Custom Vectors In Marqo Vector Store Driver",
      "body": "This is currently [unimplemented](https://github.com/griptape-ai/griptape/blob/b3e74c486b0580e27dd2cd70b17f427673344e9f/griptape/drivers/vector/marqo_vector_store_driver.py?plain=1#L251-L275) but it is supported with [custom vectors](https://docs.marqo.ai/latest/reference/api/documents/add-or-replace-documents/#unstructured-index-default_1). Rough implementation:\n\n```python\ndef upsert_vector(\n        self,\n        vector: list[float],\n        *,\n        vector_id: Optional[str] = None,\n        namespace: Optional[str] = None,\n        meta: Optional[dict] = None,\n        **kwargs: Any,\n    ) -> str:\n        \"\"\"Upsert a vector into the Marqo index.\n\n        Args:\n            vector: The vector to be indexed.\n            vector_id: The ID for the vector. If None, Marqo will generate an ID.\n            namespace: An optional namespace for the vector.\n            meta: An optional dictionary of metadata for the vector.\n            kwargs: Additional keyword arguments to pass to the Marqo client.\n\n        Raises:\n            Exception: This function is not yet implemented.\n\n        Returns:\n            The ID of the vector that was added.\n        \"\"\"\n        doc = {\n            \"_id\": vector_id,\n            \"vector\": {\"vector\": vector},\n            \"namespace\": namespace,\n            \"meta\": meta,\n        }\n\n        response = self.client.index(self.index).add_documents(\n            [doc], mappings={\"vector\": {\"type\": \"custom_vector\"}}, tensor_fields=[\"vector\"]\n        )\n        if isinstance(response, dict) and \"items\" in response and response[\"items\"]:\n            return response[\"items\"][0][\"_id\"]\n        else:\n            raise ValueError(f\"Failed to upsert text: {response}\")\n```",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-03-04T22:13:48Z",
      "updated_at": "2025-03-04T22:14:13Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1802/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1802",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1802",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.154319",
      "comments": []
    },
    {
      "issue_number": 1781,
      "title": "Race condition when using upsert_text_artifacts with the meta kwarg to upsert multiple chunks",
      "body": "If [BaseVectorStoreDriver.upsert_text_artifacts](https://github.com/griptape-ai/griptape/blob/1074cc7b3e71bbbed00ad94b240ce0e47e051645/griptape/drivers/vector/base_vector_store_driver.py#L41-L72) is used to upsert multiple chunks, and a dict is provided via its `meta` kwarg, then the `TextArtifact` stored in the `meta` column in the embeddings table is not guaranteed to be the artifact used to generate the embedding vector.\n\nTo reproduce (requires OpenAI credentials and a local PostgreSQL instance with pgvector):\n\n```python\n#!/usr/bin/env python\n\nfrom griptape.chunkers import TextChunker\nfrom griptape.drivers.vector.pgvector import PgVectorVectorStoreDriver\nfrom griptape.drivers.embedding.openai import OpenAiEmbeddingDriver\n\n# Prepare external deps\nembedding_driver = OpenAiEmbeddingDriver(model=\"text-embedding-3-small\")\nvector_store = PgVectorVectorStoreDriver(\n    connection_string=\"postgresql://localhost:5432/test_db\",\n    embedding_driver=embedding_driver,\n    table_name=\"test_embeddings\",\n)\nvector_store.setup()\n\ntest_text=\"\"\"\nThis is some content for testing embeddings.\nIt spans multiple lines.\nIt is otherwise quite uninteresting.\n\"\"\"\n\nchunker = TextChunker(max_tokens=10)\nchunks = chunker.chunk(test_text)\n\nfor i, chunk in enumerate(chunks):\n    print(f\"Chunk {i}: {chunk.to_text()}\")\n\nprint(f\"Upserting {len(chunks)} chunks...\")\nvector_store.upsert_text_artifacts(chunks, meta={\"metadata_field\": \"metadata_value\"})\n\nprint(\"Done!\")\n```\n\nIn the database we end up with:\n```sql\ntest_db=# select (vector::float4[])[0:3],meta->'artifact' from test_embeddings;\n                 vector                  |                                                                                                 ?column?                                                                                                 \n-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n {0.015975304,-0.01191094,0.0093917055}  | \"{\\\"type\\\": \\\"TextArtifact\\\", \\\"id\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"reference\\\": null, \\\"meta\\\": {}, \\\"name\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"value\\\": \\\"It spans multiple lines.\\\"}\"\n {-0.012808571,0.011958273,0.09028612}   | \"{\\\"type\\\": \\\"TextArtifact\\\", \\\"id\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"reference\\\": null, \\\"meta\\\": {}, \\\"name\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"value\\\": \\\"It spans multiple lines.\\\"}\"\n {-0.041691482,0.023411594,-0.032732744} | \"{\\\"type\\\": \\\"TextArtifact\\\", \\\"id\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"reference\\\": null, \\\"meta\\\": {}, \\\"name\\\": \\\"747c4fff2f00453dbedc64cb7b14b28e\\\", \\\"value\\\": \\\"It spans multiple lines.\\\"}\"\n(3 rows)\n```\n\nWe see different vectors for each row but the TextArtifact stored in the `meta` column is always the same chunk.\n\nI spent a bit of time debugging and I think the following is a likely explanation:\n\n1. `upsert_text_artifacts` executes `BaseVectorStoreDriver.upsert_text_artifact` using worker threads.\n2. Each thread adds its `TextArtifact` to the `meta` dict via [`meta[\"artifact\"] = artifact.to_json()`](https://github.com/griptape-ai/griptape/blob/1074cc7b3e71bbbed00ad94b240ce0e47e051645/griptape/drivers/vector/base_vector_store_driver.py#L92).\n3. This causes the dict to be modified for all threads.\n4. When it is time for a thread to send the `meta` dict to the vector store then the `artifact` field may contain a TextArtifact handled by a different thread.\n\nIf the `meta` dict is omitted when calling `upsert_text_artifacts` then everything works as expected because [each thread creates its own `meta` dict](https://github.com/griptape-ai/griptape/blob/1074cc7b3e71bbbed00ad94b240ce0e47e051645/griptape/drivers/vector/base_vector_store_driver.py#L83).",
      "state": "closed",
      "author": "mikewallace1979",
      "author_type": "User",
      "created_at": "2025-02-28T09:59:59Z",
      "updated_at": "2025-03-04T21:33:49Z",
      "closed_at": "2025-03-04T21:33:48Z",
      "labels": [
        "drivers",
        "rag"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1781/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1781",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1781",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.154330",
      "comments": [
        {
          "author": "collindutter",
          "body": "Thanks for the report @mikewallace1979, I'm on it.",
          "created_at": "2025-02-28T17:17:53Z"
        },
        {
          "author": "collindutter",
          "body": "Hey @mikewallace1979, this has been released in [1.4.2](https://github.com/griptape-ai/griptape/releases/tag/v1.4.2). Thanks for the excellent repro.",
          "created_at": "2025-02-28T17:57:07Z"
        },
        {
          "author": "mikewallace1979",
          "body": "@collindutter You're welcome and thanks for the speedy fix!",
          "created_at": "2025-02-28T19:43:10Z"
        },
        {
          "author": "collindutter",
          "body": "@mikewallace1979 I'm re-opening this since I'm still occasionally running into it. This test triggers it:\n\n```python\n    @pytest.mark.parametrize(\"execution_number\", range(1000))\n    def test_upsert_text_artifacts_meta(self, driver, mocker, execution_number):\n        spy = mocker.spy(driver, \"upsert",
          "created_at": "2025-03-04T18:01:44Z"
        },
        {
          "author": "collindutter",
          "body": "Scratch that, appears to have been a bug with the test. Fixed [here](https://github.com/griptape-ai/griptape/pull/1801).",
          "created_at": "2025-03-04T21:33:49Z"
        }
      ]
    },
    {
      "issue_number": 1488,
      "title": "Update Driver Config Models",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\n\n**Is your feature request related to a problem? Please describe.**\nSome of the Driver Configs provide out of date model configurations.\n\n**Describe the solution you'd like**\nA pass through all of the Driver Configs to update the models with the latest and greatest. For instance, \n- [ ] `AnthropicDriversConfig` https://github.com/griptape-ai/griptape/pull/1770\n- [ ] `AmazonBedrockDriversConfig` https://github.com/griptape-ai/griptape/pull/1770\n- [x]  `CohereDriversConfig` verified we're all updated\n- [ ] `GoogleDriversConfig`: https://github.com/griptape-ai/griptape/pull/1769",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-26T19:58:57Z",
      "updated_at": "2025-03-04T16:52:10Z",
      "closed_at": "2025-03-04T16:52:10Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1488/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1488",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1488",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.407881",
      "comments": []
    },
    {
      "issue_number": 1737,
      "title": "Improve example on RAG Engines Page in Framework Documentation",
      "body": "https://docs.griptape.ai/stable/griptape-framework/engines/rag-engines/\n\nImprove the code sample associated with this example, removing pirate speak and illustrating more  of what's happening as the different modules in the RAG Pipeline are invoked could be some good improvements to make.",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-02-14T18:50:55Z",
      "updated_at": "2025-03-04T01:19:05Z",
      "closed_at": "2025-03-04T01:19:05Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1737/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1737",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1737",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.407906",
      "comments": []
    },
    {
      "issue_number": 1566,
      "title": "Update griptape tool docs for how to pass parameters",
      "body": "Currently in the custom tools documentation (https://docs.griptape.ai/stable/griptape-tools/custom-tools/) it demonstrates passing parameters through a `params` parameter:\r\n\r\n```python\r\n    def generate(self, params: dict) -> TextArtifact:\r\n        return TextArtifact(str(round(random.random(), params[\"values\"].get(\"decimals\"))))\r\n```\r\n\r\nBut in the past few releases it's been possible to pass the parameter directly:\r\n\r\n```python\r\n    def generate(self, decimals: int) -> TextArtifact:\r\n        return TextArtifact(str(round(random.random(), decimals)))\r\n```\r\n\r\nwe should update the docs to demonstrate both options",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-01-13T17:59:13Z",
      "updated_at": "2025-03-03T22:45:12Z",
      "closed_at": "2025-03-03T22:45:12Z",
      "labels": [
        "docs",
        "tools"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1566/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1566",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1566",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.407914",
      "comments": []
    },
    {
      "issue_number": 1729,
      "title": "Image Embedding Drivers",
      "body": "\n### Discussed in https://github.com/orgs/griptape-ai/discussions/1528\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **collindutter** December 31, 2024</sup>\n- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI can't use image embedding models like [OpenAi's CLIP](https://github.com/openai/CLIP) in Griptape.\r\n**Describe the solution you'd like**\r\nI want Embedding Drivers to support images.\r\n**Describe alternatives you've considered**\r\n- [fastembed](https://github.com/qdrant/fastembed)\r\n- [transformers](https://huggingface.co/openai/clip-vit-base-patch32#use-with-transformers)\n\r\n**Additional context**\r\nThe eventual goal is to use the embeddings with Vector Store Drivers which means I'd maybe need `upsert_image_artifact` and `query_image` methods. `upsert_vector` and [query_vector](https://github.com/griptape-ai/griptape/pull/1494) may be sufficient for now.\r\n</div>",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-13T20:10:05Z",
      "updated_at": "2025-03-03T21:43:21Z",
      "closed_at": "2025-03-03T21:43:20Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1729/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1729",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1729",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.407924",
      "comments": []
    },
    {
      "issue_number": 1778,
      "title": "Pyright Default None",
      "body": "We make frequent use of this pattern to lazily initialize values:\n\nhttps://github.com/griptape-ai/griptape/blob/f5503bdc3c89c9db47498c75eff44ad1201b2873/griptape/drivers/prompt/openai_chat_prompt_driver.py?plain=1#L107-L115\n\nhttps://github.com/griptape-ai/griptape/blob/f5503bdc3c89c9db47498c75eff44ad1201b2873/griptape/tokenizers/base_tokenizer.py?plain=1#L18-L27\n\nWe default the field with a value of `None`, and lazily initialize it later on if the user did not provide their own, non-`None`, value.\n\nPyright's [latest release](https://github.com/microsoft/pyright/releases/tag/1.1.395) seems to have patched this out.\n\nNow we get many of these:\n```\n  /Users/collindutter/Documents/griptape/griptape/docs/examples/src/talk_to_a_webpage_1.py:41:9 - error: Argument of type \"None\" cannot be assigned to parameter \"prompt_driver\" of type \"BasePromptDriver\" in function \"__init__\"\n    \"None\" is not assignable to \"BasePromptDriver\" (reportArgumentType)\n```\n\n Presumably the change came from:\n\n> Fixed bug that leads to inconsistent behavior in certain cases involving the evaluation of a call whose target signature involves a parameter with a default argument value, notably where the type of the default value isn't assignable to the declared type of its parameter.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-27T22:33:07Z",
      "updated_at": "2025-03-03T21:12:33Z",
      "closed_at": "2025-03-03T21:12:32Z",
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1778/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 1,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1778",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1778",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.407930",
      "comments": [
        {
          "author": "collindutter",
          "body": "This is a mess, some of the errors are from 3p libraries:\n\nhttps://github.com/griptape-ai/griptape/blob/f5503bdc3c89c9db47498c75eff44ad1201b2873/griptape/tools/calculator/tool.py?plain=1#L29\n```\nDiagnostics:\n1. Argument of type \"None\" cannot be assigned to parameter \"out\" of type \"ndarray[Unknown, U",
          "created_at": "2025-02-27T23:39:48Z"
        },
        {
          "author": "collindutter",
          "body": "This was reverted in the [latest release](https://github.com/microsoft/pyright/releases/tag/1.1.396). We should still fix on our side, but it will be nice not to `pyright: ignore` 3p libraries.",
          "created_at": "2025-03-03T18:25:04Z"
        }
      ]
    },
    {
      "issue_number": 1780,
      "title": "Run Pyright on Tests",
      "body": "There's no good reason for us not to run pyright on the entire repo. Let's fix that.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-28T00:35:05Z",
      "updated_at": "2025-02-28T00:35:31Z",
      "closed_at": null,
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1780/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1780",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1780",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.657652",
      "comments": []
    },
    {
      "issue_number": 1773,
      "title": "Groq not working with latest Griptape using OpenAiChatPromptDriver",
      "body": "Before the most recent release (Gripatpe 1.4), I was able to use Groq using the `OpenAiChatPromptDriver` with code like this:\n\n```python\nimport os\n\nfrom dotenv import load_dotenv\nfrom griptape.drivers.prompt.openai import OpenAiChatPromptDriver\nfrom griptape.structures import Agent\n\nload_dotenv()\nGROQ_API_KEY = os.getenv(\"GROQ_API_KEY\")\n\nagent = Agent(\n    prompt_driver=OpenAiChatPromptDriver(\n        api_key=GROQ_API_KEY,\n        base_url=\"https://api.groq.com/openai/v1\",\n        model=\"llama-3.3-70b-versatile\",\n        stream=True,\n    ),\n)\n\nagent.run(\"Hello\")\n```\n\nHowever now I'm getting an error:\n\n```\n[02/28/25 04:37:08] ERROR    PromptTask cbbb962e9cbd42958f95fbd0fd6f0f01                                         \n                             Error code: 400 - {'error': {'message': \"property 'modalities' is unsupported, did  \n                             you mean 'model'?\", 'type': 'invalid_request_error'}}                               \n```\n\nI believe this is due to the new OpenAi `modalities` feature - we should probably have it set to `[]` by default?",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-02-27T15:42:22Z",
      "updated_at": "2025-02-27T17:12:29Z",
      "closed_at": "2025-02-27T17:12:28Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1773/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1773",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1773",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.657676",
      "comments": [
        {
          "author": "collindutter",
          "body": "Gah sorry about that! OpenAI compats are always tricky to test with. Will get that fixed and deployed first thing this morning.",
          "created_at": "2025-02-27T15:52:31Z"
        }
      ]
    },
    {
      "issue_number": 1763,
      "title": "Upgrade To Markdownify 1.0",
      "body": "[Markdownify](https://github.com/matthewwithanm/python-markdownify) just released 1.0, we should update. Only required change should be to update our custom converter to the [new method signature](https://github.com/matthewwithanm/python-markdownify/blob/daa9e28287220f6f1a2d9ef423679f14c6175bd5/markdownify/__init__.py#L405).",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-25T01:41:40Z",
      "updated_at": "2025-02-25T23:40:14Z",
      "closed_at": "2025-02-25T23:40:14Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1763/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1763",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1763",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:39.863873",
      "comments": [
        {
          "author": "collindutter",
          "body": "Blocked on #1401 ",
          "created_at": "2025-02-25T21:49:58Z"
        }
      ]
    },
    {
      "issue_number": 1771,
      "title": "VoyageAi Rerank Driver",
      "body": "https://docs.voyageai.com/docs/reranker",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-25T23:26:26Z",
      "updated_at": "2025-02-25T23:26:26Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1771/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1771",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1771",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.088482",
      "comments": []
    },
    {
      "issue_number": 1401,
      "title": "Replace Poetry With UV",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n[uv](https://github.com/astral-sh/uv) is a package manager written by the same people as [ruff](https://github.com/astral-sh/ruff). Ruff has been lovely so I think we should explore using uv. The installation speed improvements could have a significant effect on our github actions.\r\n\r\nhttps://github.com/fgmacedo/python-statemachine/commit/a5ef7feb432ca9bbaf5d9bede3ecf7b9a85b7f45",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-04T17:42:13Z",
      "updated_at": "2025-02-25T23:15:22Z",
      "closed_at": "2025-02-25T23:15:21Z",
      "labels": [
        "dependencies"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1401/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1401",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1401",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.088505",
      "comments": [
        {
          "author": "collindutter",
          "body": "Blocked on https://github.com/dependabot/dependabot-core/pull/10040",
          "created_at": "2024-12-10T00:55:20Z"
        }
      ]
    },
    {
      "issue_number": 1766,
      "title": "Type Hints Thrown Away By Decorator",
      "body": "![Image](https://github.com/user-attachments/assets/05f87fac-ff43-4d3e-be07-100756053037)\n\nAppears to be an issue with anything wrapped by `@observable`.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-25T18:26:22Z",
      "updated_at": "2025-02-25T20:53:48Z",
      "closed_at": "2025-02-25T20:53:48Z",
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1766/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1766",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1766",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.336698",
      "comments": []
    },
    {
      "issue_number": 1515,
      "title": "Update To Poetry 2.0",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nPoetry 2.0 just released and has a new `pyproject.toml` format that aligns it with [this standard](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/).\r\n\r\n**Describe the solution you'd like**\r\nMigrate `pyproject.toml` to the new format.\r\n\r\n**Additional context**\r\nUV also uses this new format so the work is still helpful towards #1401.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-07T01:03:45Z",
      "updated_at": "2025-02-25T01:56:53Z",
      "closed_at": "2025-02-25T01:56:52Z",
      "labels": [
        "dependencies"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1515/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1515",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1515",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.336719",
      "comments": [
        {
          "author": "collindutter",
          "body": "Going straight to uv: https://github.com/griptape-ai/griptape/issues/1401",
          "created_at": "2025-02-25T01:56:52Z"
        }
      ]
    },
    {
      "issue_number": 1759,
      "title": "Incompatibility with VisionAgent",
      "body": "When trying to install Griptape in a project with VisionAgent using poetry, I get the following error due to incompatible requirements:\n```\nBecause no versions of vision-agent match >0.2.245,<0.3.0\n and vision-agent (0.2.245) depends on pydantic (2.7.4), vision-agent (>=0.2.245,<0.3.0) requires pydantic (2.7.4).\nAnd because griptape (1.3.5) depends on pydantic (>=2.10.6,<3.0.0)\n and no versions of griptape match >1.3.5,<2.0.0, vision-agent (>=0.2.245,<0.3.0) is incompatible with griptape (>=1.3.5,<2.0.0).\nSo, because griptape-object-detection depends on both griptape (>=1.3.5,<2.0.0) and vision-agent (^0.2.245), version solving failed.\n```",
      "state": "closed",
      "author": "FifthFractal",
      "author_type": "User",
      "created_at": "2025-02-24T21:24:55Z",
      "updated_at": "2025-02-24T22:59:12Z",
      "closed_at": "2025-02-24T22:59:12Z",
      "labels": [
        "dependencies"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1759/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "1.5",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1759",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1759",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.581883",
      "comments": [
        {
          "author": "FifthFractal",
          "body": "when using pip, i also get this: \n```\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ngriptape 1.3.5 requires attrs<26.0.0,>=25.1.0, but you have attrs 23.2.0 which is incom",
          "created_at": "2025-02-24T21:31:44Z"
        }
      ]
    },
    {
      "issue_number": 1756,
      "title": "Properly Handle Serialization of Pydantic Models from structured output",
      "body": "currently, using a pydantic model as a value to `output_schema` returns `GenericArtifact[BaseModel]`. this is an issue for downstream `EventListeners` that try to naively call `to_dict()`, as the `BaseModel` class needs special handling\n\n```\nclass WordOutput(BaseModel):\n    thought: str\n    parts: List[str]\n    combinations: List[str]\n\ndef setup_config():\n      event_driver = GriptapeCloudEventListenerDriver(\n          api_key=get_listener_api_key()\n      )\n      \n      event_listener = EventListener(\n          event_listener_driver=event_driver,\n      )\n      \n      EventBus.add_event_listener(event_listener)\n\ndef create_word_agent() -> Agent:\n    return Agent(\n        output_schema=WordOutput,\n    )\n\nsetup_config()\nagent = create_word_agent()\n\nagent.run(\"hello\")\n```\nproduces\n```\n                               File                                             \n                             \"/usr/local/lib/python3.11/site-packages/requests/s\n                             essions.py\", line 484, in prepare_request          \n                                 p.prepare(                                     \n                               File                                             \n                             \"/usr/local/lib/python3.11/site-packages/requests/m\n                             odels.py\", line 370, in prepare                    \n                                 self.prepare_body(data, files, json)           \n                               File                                             \n                             \"/usr/local/lib/python3.11/site-packages/requests/m\n                             odels.py\", line 510, in prepare_body               \n                                 body = complexjson.dumps(json, allow_nan=False)\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                               File                                             \n                             \"/usr/local/lib/python3.11/json/__init__.py\", line \n                             238, in dumps                                      \n                                 **kw).encode(obj)                              \n                                       ^^^^^^^^^^^                              \n                               File \"/usr/local/lib/python3.11/json/encoder.py\",\n                             line 200, in encode                                \n                                 chunks = self.iterencode(o, _one_shot=True)    \n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    \n                               File \"/usr/local/lib/python3.11/json/encoder.py\",\n                             line 258, in iterencode                            \n                                 return _iterencode(o, 0)                       \n                                        ^^^^^^^^^^^^^^^^^                       \n                               File \"/usr/local/lib/python3.11/json/encoder.py\",\n                             line 180, in default                               \n                                 raise TypeError(f'Object of type               \n                             {o.__class__.__name__} '                           \n                             TypeError: Object of type WordOutput is not JSON   \n                             serializable \n```",
      "state": "closed",
      "author": "vachillo",
      "author_type": "User",
      "created_at": "2025-02-21T19:22:36Z",
      "updated_at": "2025-02-24T20:43:21Z",
      "closed_at": "2025-02-24T20:43:20Z",
      "labels": [
        "tasks",
        "artifacts",
        "events"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1756/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.4",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1756",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1756",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:40.810530",
      "comments": [
        {
          "author": "collindutter",
          "body": "Copy-pasteable example:\n\n```python\nfrom griptape.drivers.event_listener.griptape_cloud import (\n    GriptapeCloudEventListenerDriver,\n)\nfrom griptape.events import EventBus, EventListener\nfrom griptape.structures import Agent\nfrom pydantic import BaseModel\n\n\nclass Output(BaseModel):\n    text: str\n\n\n",
          "created_at": "2025-02-24T17:57:35Z"
        },
        {
          "author": "collindutter",
          "body": "Even simpler:\n\n```python\nfrom griptape.artifacts.model_artifact import ModelArtifact\nfrom griptape.events import FinishStructureRunEvent\nfrom pydantic import BaseModel\nfrom rich.pretty import pprint\n\n\nclass Output(BaseModel):\n    text: str\n\n\nevent = FinishStructureRunEvent(output_task_output=ModelAr",
          "created_at": "2025-02-24T18:23:27Z"
        }
      ]
    },
    {
      "issue_number": 1747,
      "title": "Rename Prompt Drivers To Llm Chat Drivers",
      "body": "The name \"Prompt Drivers\" originated when interacting with LLMs was limited to text-based prompts. However, with modern LLMs now capable of processing text, images, audio, tool results, and documents, the term \"Prompt\" no longer feels appropriate.\n\nI propose renaming `PromptDriver` to `LlmChatDriver`. While `LlmDriver` was also considered, it's important to highlight that all the LLMs we support operate through chat interfaces. Although non-chat completion endpoints appear to be fading out, I'd like to keep that namespace open in case they make a comeback.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-19T17:21:25Z",
      "updated_at": "2025-02-20T17:53:58Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1747/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1747",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1747",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.037055",
      "comments": [
        {
          "author": "shhlife",
          "body": "Is LlmChatDriver clear to users? Every time I talk to people about Griptape who aren't steeped in this world, they don't know what LLM means. I wonder if instead ChatDriver would be clearer? or ModelDriver? ",
          "created_at": "2025-02-19T22:39:39Z"
        },
        {
          "author": "collindutter",
          "body": "Great point @shhlife. Though `ChatDriver` doesn't feel AI-ey enough, and `ModelDriver` feels too broad. We may have Drivers for non-chat models.\n\n> Every time I talk to people about Griptape who aren't steeped in this world, they don't know what LLM means.\n\nIs `PromptDriver` any more clear? I would ",
          "created_at": "2025-02-20T17:53:56Z"
        }
      ]
    },
    {
      "issue_number": 1687,
      "title": "Deprecation warning is a little confusing",
      "body": "When I got this deprecation warning:\n```\n/my_project/my_code.py:8: DeprecationWarning: Importing from `griptape.drivers` is deprecated and will be removed in a future release. Please import from the provider-specific package instead.\ne.g., `from griptape.drivers import OpenAiChatPromptDriver` -> `from griptape.drivers.prompt.openai import OpenAiChatPromptDriver`\n  from griptape.drivers import GriptapeCloudEventListenerDriver\n```\n\nI was confused by the example. I thought the framework code for (`GriptapeCloudEventListenerDriver`) must be doing this import since my code wasn't referencing `OpenAiChatPromptDriver`.\n\nIs it possible to make the warning specific to the actual import?\n\nIf this confused me, it will likely confuse others, and may lead to more/duplicated github issues.\n\n",
      "state": "open",
      "author": "dylanholmes",
      "author_type": "User",
      "created_at": "2025-02-11T14:20:23Z",
      "updated_at": "2025-02-20T17:31:57Z",
      "closed_at": null,
      "labels": [
        "needs information",
        "drivers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1687/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1687",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1687",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.279885",
      "comments": [
        {
          "author": "shhlife",
          "body": "Most times I had the warning I was able to pinpoint the issue, but a few times I got it I also didn't have an import that matched. I'll see if I can reproduce it.",
          "created_at": "2025-02-11T16:00:06Z"
        },
        {
          "author": "collindutter",
          "body": "Unfortunately it's hard to generalize because we're not entirely consistent. For example:\n\n```\nfrom griptape.drivers import OpenAiChatPromptDriver\n```\nShould really map to:\n```\nfrom griptape.drivers.prompt.openai_chat import OpenAiChatPromptDriver\n```\n\nThis is something I plan on cleaning up, but we",
          "created_at": "2025-02-11T16:54:02Z"
        },
        {
          "author": "collindutter",
          "body": "@dylanholmes do you have any idea for how we might generalize this?",
          "created_at": "2025-02-13T20:43:46Z"
        }
      ]
    },
    {
      "issue_number": 1513,
      "title": "Implement `GriptapeCloudVectorStoreDriver` Not Implemented Methods",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n`GriptapeCloudVectorStoreDriver` has a number of [unimplemented methods.](https://github.com/griptape-ai/griptape/blob/c80f087eaf99b04573ae9da3cde2d27e34fa0ba5/griptape/drivers/vector/griptape_cloud_vector_store_driver.py?plain=1#L43-L80)\r\n\r\n**Describe the solution you'd like**\r\nImplement 'em.\r\n\r\n**Describe alternatives you've considered**\r\nUsing Griptape Cloud API calls directly.\r\n\r\n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-06T18:44:16Z",
      "updated_at": "2025-02-20T00:26:24Z",
      "closed_at": null,
      "labels": [
        "blocked",
        "drivers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1513/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1513",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1513",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508210",
      "comments": []
    },
    {
      "issue_number": 1750,
      "title": "Eval Engine Prompt Missing Parameters",
      "body": "```python\n    def _generate_results(self, evaluation_params: dict[str, str]) -> tuple[float, str]:\n        system_prompt = self.generate_results_system_template.render(\n            evaluation_params=\", \".join(param for param in evaluation_params),\n            evaluation_steps=self.evaluation_steps,\n            evaluation_text=\"\\n\\n\".join(f\"{key}: {value}\" for key, value in evaluation_params.items()),\n        )\n```\nBut the template is\n```\nGiven the evaluation steps, return a JSON with two keys:\n1) a `score` key ranging from 0 - 10, with 10 being that it follows the criteria outlined in the steps and 0 being that it does not.\n2) a `reason` key, a reason for the given score. Please mention specific information from {{ parameters }} in your reason, but be very concise with it!\n\nEvaluation Steps:\n{{ evaluation_steps }}\n\n{{ evaluation_text }}\n```",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-19T23:23:09Z",
      "updated_at": "2025-02-19T23:36:44Z",
      "closed_at": "2025-02-19T23:36:43Z",
      "labels": [
        "engines"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1750/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.4",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1750",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1750",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508225",
      "comments": []
    },
    {
      "issue_number": 1749,
      "title": "Resolve 2.0 TODOs",
      "body": "We've added a number of TODOs that require breaking changes that need to be resolved before 2.0. Resolve these right before the release.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-19T21:44:09Z",
      "updated_at": "2025-02-19T21:44:09Z",
      "closed_at": null,
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1749/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1749",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1749",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508230",
      "comments": []
    },
    {
      "issue_number": 1748,
      "title": "Enhance MetaMemory for providing additional context",
      "body": "\n### Discussed in https://github.com/orgs/griptape-ai/discussions/1744\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **vachillo** February 17, 2025</sup>\nMetaMemory is set up well to supply additional context to the LLM, however it seems underutilized. Can we introduce types of `BaseMetaEntry`s to handle common use cases?\r\n\r\nex for supplying the current date:\r\n```\r\nimport os\r\nfrom attrs import define, field\r\n\r\nfrom griptape.configs import Defaults\r\nfrom griptape.memory.meta import BaseMetaEntry, MetaMemory\r\nfrom griptape.structures import Agent\r\nfrom griptape.tools import WebSearchTool\r\nfrom griptape.drivers import DuckDuckGoWebSearchDriver\r\nfrom griptape.tasks import PromptTask\r\nfrom griptape.utils import Stream\r\nfrom datetime import datetime\r\n\r\n\r\n@define\r\nclass DateTimeMetaEntry(BaseMetaEntry):\r\n    todays_date_and_time: str = field(factory=lambda: datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), metadata={\"serializable\": True})\r\n\r\n\r\nagent = Agent(\r\n    prompt_driver=prompt_driver,\r\n    tools=[\r\n        WebSearchTool(\r\n            web_search_driver=DuckDuckGoWebSearchDriver()\r\n        ),\r\n    ],\r\n    meta_memory=MetaMemory(entries=[DateTimeMetaEntry()]),\r\n)\r\nagent.run(\"whats the headlines today?\")\r\n```\r\n\r\nthis can also be extended to support something like a user context store, similar to services provided by [Memobase](https://docs.memobase.io/features/openai). something like a `UserMetaEntry` that contains contextual information (from previous conversations or data) given the current conversation would be exetremely valueable</div>",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-19T20:41:47Z",
      "updated_at": "2025-02-19T20:41:47Z",
      "closed_at": null,
      "labels": [
        "memory"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1748/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1748",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1748",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508235",
      "comments": []
    },
    {
      "issue_number": 1588,
      "title": "Improve Type Support",
      "body": "Type support could be greatly improved in Griptape. There are many instances of methods returning large unions of Artifacts, or Artifacts being black boxes of data. This is a tracking issue that can be worked on over time.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-17T17:46:51Z",
      "updated_at": "2025-02-19T17:33:43Z",
      "closed_at": null,
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1588/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1588",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1588",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508239",
      "comments": []
    },
    {
      "issue_number": 1470,
      "title": "Remove Use Of `import_optional_dependency`",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n`import_optional_dependency` was introduced in order to safely import optional dependencies while raising a helpful error message. Unfortunately this function removes the type hints on imports, and requires weird import patterns.\r\n \r\n**Describe the solution you'd like**\r\nRefactor the optional import dependency mechanism to use more native python functionality. I.e. \r\n\r\n```python\r\ntry:\r\n  import anthropic\r\ncatch ImportError:\r\n  raise \"You need to install the extra for anthropic\"\r\n```\r\nOr\r\n```python\r\ndef create_missing_extra_class(message):\r\n    class MissingExtra:\r\n        def __init__(self):\r\n            raise Exception(message)\r\n    return MissingExtra\r\n\r\nif is_dependency_installed(\"anthropic\"):\r\n    from .prompt.anthropic_prompt_driver import AnthropicPromptDriver\r\nelse:\r\n    AnthropicPromptDriver = create_missing_extra_class(\"You missed the anthropic-whatever extra!\")\r\n\r\n\r\n__all__ = ['AnthropicPromptDriver']\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAdding type hint support to `import_optional_dependency`. Doesn't seem possible, and is still clunky to use.\r\n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-19T20:48:44Z",
      "updated_at": "2025-02-19T17:33:18Z",
      "closed_at": null,
      "labels": [
        "drivers",
        "code health"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1470/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1470",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1470",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.508242",
      "comments": [
        {
          "author": "vachillo",
          "body": "it seems like `import_optional_dependency` is just a convenience around the first option no? if we can get type hints to work as expected, we should keep it around",
          "created_at": "2024-12-20T03:33:49Z"
        },
        {
          "author": "collindutter",
          "body": "Roughly, but the larger issue is how we use `import_optional_dependency`. We have all imports done lazily rather than eagerly at the top of the file. I think my ideal is something like:\r\n\r\n```python\r\nif is_dependency_installed(\"anthropic\"):\r\n    from anthropic import Client\r\nelse:\r\n    raise Missing",
          "created_at": "2024-12-20T16:58:47Z"
        },
        {
          "author": "collindutter",
          "body": "I don't think we can solve this without moving to [namespaced imports](https://github.com/griptape-ai/griptape/pull/1595). I tried the [first proposed solution](https://github.com/griptape-ai/griptape/issues/1470#issuecomment-2557387384) and it took a considerable amount of time to:\n1. Check whether",
          "created_at": "2025-01-21T20:06:36Z"
        }
      ]
    },
    {
      "issue_number": 1734,
      "title": "Docs need an example to show use of a rerank driver with RAG engines",
      "body": "The sample here does not show how to use a rerank driver with a RAG Engine\n\nhttps://docs.griptape.ai/stable/griptape-framework/engines/rag-engines/\n\nFrom the existing docs, I assumed the way to do this would be to add a `TextChunksRerankRagModule` to the `retrieval_modules` attribute as follows\n\n```\nrag_engine = RagEngine(\n    query_stage=QueryRagStage(query_modules=[TranslateQueryRagModule(prompt_driver=prompt_driver, language=\"english\")]),\n    retrieval_stage=RetrievalRagStage(\n        max_chunks=5,\n        retrieval_modules=[\n            VectorStoreRetrievalRagModule(\n                name=\"MyAwesomeRetriever\", vector_store_driver=vector_store, query_params={\"top_n\": 20}\n            ),\n            TextChunksRerankRagModule(\n                ...\n            )\n        ],\n    )\n```\n\nBut this throws a type warning because TextChunksRerankRagModule isn't a subclass of `BaseRetrievalRagModule`\n\n",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-02-14T12:37:59Z",
      "updated_at": "2025-02-19T01:10:28Z",
      "closed_at": "2025-02-14T19:04:57Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1734/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "1.4",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1734",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1734",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:41.744433",
      "comments": [
        {
          "author": "ian-griptape-ai",
          "body": "```\nrag_engine = RagEngine(\n    query_stage=QueryRagStage(\n        query_modules=[\n            TranslateQueryRagModule(prompt_driver=prompt_driver, language=\"english\")\n        ]\n    ),\n    retrieval_stage=RetrievalRagStage(\n        max_chunks=5,\n        retrieval_modules=[\n            VectorStoreRet",
          "created_at": "2025-02-14T13:33:11Z"
        },
        {
          "author": "ian-griptape-ai",
          "body": "```\ndocs/griptape-framework/engines/src/rag_engines_1.py:1:1: I001 [*] Import block is un-sorted or un-formatted\n   |\n 1 | / from griptape.chunkers import TextChunker\n 2 | | from griptape.drivers.embedding.openai import OpenAiEmbeddingDriver\n 3 | | from griptape.drivers.prompt.openai import OpenAiCh",
          "created_at": "2025-02-14T13:34:53Z"
        },
        {
          "author": "ian-griptape-ai",
          "body": "I'm using Black Formatter which is overriding my formatting of import statements. Any guidance on how to fix appreciated.",
          "created_at": "2025-02-14T13:35:39Z"
        },
        {
          "author": "collindutter",
          "body": "> I'm using Black Formatter\n\nUse ruff formatter 😄. It's what the commit pre-check is expecting, and can do everything Black can.",
          "created_at": "2025-02-14T15:21:38Z"
        },
        {
          "author": "collindutter",
          "body": "Run:\n`poetry run ruff format --fix`\nWe need a Makefile command for this. ",
          "created_at": "2025-02-14T15:22:41Z"
        }
      ]
    },
    {
      "issue_number": 1597,
      "title": "Structure/Task Run Args/Kwargs",
      "body": "`Structure.run` should accept args _and_ kwargs.`BaseTask.run` should support the same.",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-21T21:59:37Z",
      "updated_at": "2025-02-18T21:15:06Z",
      "closed_at": "2025-02-18T21:15:06Z",
      "labels": [
        "tasks",
        "structures"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1597/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.4",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1597",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1597",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:43.942619",
      "comments": []
    },
    {
      "issue_number": 1742,
      "title": "Improve `RestApiTool`",
      "body": "The `RestApiTool` is quite old and has a number of issues. [This PR](https://github.com/griptape-ai/griptape/pull/1239) cleans it up but comes with a few breaking changes that can't be completed until 2.0.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-17T19:39:16Z",
      "updated_at": "2025-02-17T22:47:14Z",
      "closed_at": null,
      "labels": [
        "tools"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1742/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1742",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1742",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:43.942647",
      "comments": []
    },
    {
      "issue_number": 1557,
      "title": "Add Rerank information to RagEngine docs",
      "body": "Currently the RagEngine documentation doesn't specify how to use CohereRerankDriver, which may cause people to try and insert the RerankDriver into the `retrieval_modules` into `rerank_module`.\r\n\r\nCan we add information on the right way to use it to the docs?",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-01-12T05:43:03Z",
      "updated_at": "2025-02-14T19:05:51Z",
      "closed_at": "2025-02-14T19:05:50Z",
      "labels": [
        "docs",
        "rag",
        "engines"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1557/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1557",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1557",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:43.942658",
      "comments": [
        {
          "author": "ian-griptape-ai",
          "body": "I think I closed this with #1734 . That uses Local Rerank, but it does show the syntax for including a rerank driver in  `retrieval_modules`.",
          "created_at": "2025-02-14T16:34:48Z"
        },
        {
          "author": "collindutter",
          "body": "@ian-griptape-ai I think you're right, but let's get @shhlife's blessing. If so, can you please update that other PR to close this?",
          "created_at": "2025-02-14T17:02:26Z"
        },
        {
          "author": "ian-griptape-ai",
          "body": "closed by https://github.com/griptape-ai/griptape/pull/1736",
          "created_at": "2025-02-14T19:05:50Z"
        }
      ]
    },
    {
      "issue_number": 1439,
      "title": "Reduce `max_attempts` default value",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\nCurrently `max_attempts` is set to 10, which can make it appear that the framework is hung when it's really just trying something a number of times.\r\n\r\nWould like to discuss reducing the default number to 2 or 3. Usually if something is going to fail, one or two retries is fine - and if the user needs more they can always increase it.\r\n\r\n",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-12-12T23:19:08Z",
      "updated_at": "2025-02-14T17:19:45Z",
      "closed_at": "2025-02-14T17:19:44Z",
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1439/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.4",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1439",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1439",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.241231",
      "comments": [
        {
          "author": "collindutter",
          "body": "I wonder if we should retry at all? Should it be opt-in?",
          "created_at": "2025-01-07T21:48:03Z"
        },
        {
          "author": "shhlife",
          "body": "good point, maybe not? Usually things fail due to something that retrying wouldn't resolve.. like an invalid api key.",
          "created_at": "2025-01-08T15:47:06Z"
        },
        {
          "author": "collindutter",
          "body": "Or maybe we just need to refine the [ignored exception types](https://github.com/griptape-ai/griptape/blob/36d5d2c0c22ffabc85b7e017952582905ee94554/griptape/drivers/prompt/openai_chat_prompt_driver.py?plain=1#L84-L96).",
          "created_at": "2025-01-08T16:33:16Z"
        },
        {
          "author": "shhlife",
          "body": "yeah, that would help :)",
          "created_at": "2025-01-08T16:40:15Z"
        }
      ]
    },
    {
      "issue_number": 1576,
      "title": "Support Vector Store Driver Batch Operations",
      "body": "Our Vector Store Drivers support [upserting batches of vectors](https://github.com/griptape-ai/griptape/blob/03b65295cabcea9c57343494c86c6d12ac0faa1c/griptape/drivers/vector/base_vector_store_driver.py?plain=1#L48-L57). This works by upserting one vector at a time in a thread pool executor. We could improve efficiency by leveraging batch operations provided by the respective vector stores.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-14T17:35:00Z",
      "updated_at": "2025-02-14T16:33:28Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1576/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1576",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1576",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.511744",
      "comments": []
    },
    {
      "issue_number": 1587,
      "title": "Serialization Woes",
      "body": "Issues like [this](https://github.com/griptape-ai/griptape/issues/1583) pop up because we maintain a [horrendous list of imports](https://github.com/griptape-ai/griptape/blob/f8d9bec12e5505243e12ab8b0fda40507432ff38/griptape/schemas/base_schema.py?plain=1#L145-L237) that needs to be updated any time a serializable field's type is exclusively imported in a `TYPE_CHECKING` block. Because they're only imported for the type checker, we get a name error when resolving the types unless we actually import it first.\n\nI _think_ the only solution is to move serialized field's type's out of `TYPE_CHECKING` blocks, but this will come with some tricky circular import issues. ",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-17T17:34:26Z",
      "updated_at": "2025-02-14T16:32:58Z",
      "closed_at": null,
      "labels": [
        "code health"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1587/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1587",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1587",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.511770",
      "comments": [
        {
          "author": "collindutter",
          "body": "https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-base-classes set to:\n\n```toml\nruntime-evaluated-base-classes = [\"griptape.mixins.serializable_mixin.SerializableMixin\"]\n```\n\nLooks like we may need to refactor `griptape.common` similar to what we did for https://githu",
          "created_at": "2025-01-17T21:23:31Z"
        }
      ]
    },
    {
      "issue_number": 39,
      "title": "Conversation Memory should store structure task results",
      "body": "There are some scenarios where it's useful to capture not just structure run inputs and outputs but also intermediate task and substask run inputs and outputs.\r\n\r\nTo store tasks and subtasks in memory, we'll need to add Marshmallow models for serialization and deserialization and integrate them with memory.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-05-16T13:09:51Z",
      "updated_at": "2025-02-14T16:32:34Z",
      "closed_at": null,
      "labels": [
        "memory"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/39/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/39",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/39",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.779486",
      "comments": []
    },
    {
      "issue_number": 50,
      "title": "Support regular inserts in `BaseVectorStorageDriver`",
      "body": "`BaseVectorStorageDriver` should support regular inserts in addition to upserts for `TextArtifact`s",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-05-18T13:34:36Z",
      "updated_at": "2025-02-14T16:32:18Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "drivers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/50/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/50",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/50",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.779523",
      "comments": []
    },
    {
      "issue_number": 54,
      "title": "Add support for custom dependencies in tools",
      "body": "`BaseTool` should have a `dependencies` property that can be used to add custom dependencies to tools. This is useful for tools like `SqlClient`.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-05-20T05:53:35Z",
      "updated_at": "2025-02-14T16:32:07Z",
      "closed_at": null,
      "labels": [
        "needs information",
        "dependencies"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/54/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/54",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/54",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:44.779534",
      "comments": [
        {
          "author": "collindutter",
          "body": "@vasinov In the case of `SqlClient`, we cannot install dependencies on tool instantiation because it requires a `SqlDriver` to create the tool. And the `SqlDriver` will throw an error if the necessary dependencies are not already installed i.e. `psycopg2`.\r\n\r\n",
          "created_at": "2023-09-12T20:32:20Z"
        }
      ]
    },
    {
      "issue_number": 129,
      "title": "Add an `EventTrace` object to Events",
      "body": "Developers need a way to send more information to event listeners. I propose adding a configurable `EventTrace` object to events with defaults for structure, task, prompt driver, etc.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-07-24T19:39:33Z",
      "updated_at": "2025-02-14T16:31:49Z",
      "closed_at": null,
      "labels": [
        "events"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/129/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/129",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/129",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.012651",
      "comments": []
    },
    {
      "issue_number": 132,
      "title": "Allow and deny lists for activity schema values",
      "body": "Developers want to enable/disable certain values in tool activity schemas to restrict LLMs.\r\n\r\nI propose adding `activity_schema_allowlist` and `activity_schema_denylist` to the `ActivityMixin` with defaults set to `None`. `ActivityMixin.activity_schema` can then use those lists to generate a modified schema.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-07-24T23:09:23Z",
      "updated_at": "2025-02-14T16:31:08Z",
      "closed_at": null,
      "labels": [
        "utils",
        "tools"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/132/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/132",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/132",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.012674",
      "comments": [
        {
          "author": "vachillo",
          "body": "are you imagining the syntax to be something like:\r\n```\r\nclass ActivityMixin:\r\n    allowlist: Optional[list[str] | dict[str, Optional[list[str]]]] = field(default=None, kw_only=True)\r\n    denylist: Optional[list[str] | dict[str, Optional[list[str]]]] = field(default=None, kw_only=True)\r\n```\r\nwhere d",
          "created_at": "2024-06-25T23:26:19Z"
        }
      ]
    },
    {
      "issue_number": 1023,
      "title": "Create `Activity` Class",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nRight now there is no type available for Tool Activities. This requires us to hackily [set](https://github.com/griptape-ai/griptape/blob/e1977ce2f42665221482a1d365cc92931c5c6179/griptape/utils/decorators.py#L23-L25) and [get](https://github.com/griptape-ai/griptape/blob/e1977ce2f42665221482a1d365cc92931c5c6179/griptape/tools/base_tool.py#L154) attributes on Callables\r\n**Describe the solution you'd like**\r\nCreate an `Activity` class that contains fields like `name`, `config`, `is_activity`.\r\n\r\n**Additional context**\r\nhttps://github.com/griptape-ai/griptape/pull/1015/files#r1692262326\r\n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-07-29T14:36:40Z",
      "updated_at": "2025-02-14T16:30:40Z",
      "closed_at": null,
      "labels": [
        "utils",
        "tools"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1023/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1023",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1023",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.248348",
      "comments": []
    },
    {
      "issue_number": 306,
      "title": "Automatically fill optional tool activity schema defaults if no values is provided",
      "body": "Tool activities can use `schema.Optional` fields with `default`s set by the tool creator. Today, tool creators have to manually check for the value passed by the LLM and then manually fill in the default in the activity implementation.\r\n\r\nI propose adding automatic activity default propagation in `ActionSubtask` in addition to the [already implemented](https://github.com/griptape-ai/griptape/blob/main/griptape/tasks/action_subtask.py#L169-L171) activity input validation.",
      "state": "open",
      "author": "vasinov",
      "author_type": "User",
      "created_at": "2023-10-01T21:44:10Z",
      "updated_at": "2025-02-14T16:30:24Z",
      "closed_at": null,
      "labels": [
        "tools"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/306/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/306",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/306",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.248369",
      "comments": [
        {
          "author": "collindutter",
          "body": "FYI I started this work but it's non-trivial to extract default values from a `schema.Schema` instance. https://github.com/griptape-ai/griptape/issues/1499 may help here since we can at least hide the uglyness in a Driver specific to `schema`.",
          "created_at": "2025-01-06T17:41:52Z"
        }
      ]
    },
    {
      "issue_number": 364,
      "title": "Chunking with overlap",
      "body": "Hello.\r\n\r\nI would like to know whether chunking with overlap is currently possible using the current implementations within `chunkers` and if not, is it going to be featured in the near future. If this is not the case, `LangChain` already has provided this functionality.\r\n",
      "state": "open",
      "author": "Ioannis-Pikoulis",
      "author_type": "User",
      "created_at": "2023-10-14T08:59:03Z",
      "updated_at": "2025-02-14T16:30:14Z",
      "closed_at": null,
      "labels": [
        "chunkers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/364/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/364",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/364",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.506525",
      "comments": [
        {
          "author": "derekpai",
          "body": "We'll investigate the relative performance with and without overlap.",
          "created_at": "2023-10-24T20:45:58Z"
        }
      ]
    },
    {
      "issue_number": 423,
      "title": "Compatibility matrix for tasks x models",
      "body": null,
      "state": "open",
      "author": "derekpai",
      "author_type": "User",
      "created_at": "2023-11-07T21:19:40Z",
      "updated_at": "2025-02-14T16:30:05Z",
      "closed_at": null,
      "labels": [
        "docs",
        "needs information"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/423/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/423",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/423",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.729792",
      "comments": [
        {
          "author": "derekpai",
          "body": "related to #356 ",
          "created_at": "2023-11-07T21:21:32Z"
        }
      ]
    },
    {
      "issue_number": 530,
      "title": "Support deletion in vector store drivers",
      "body": "Relevant [Discord thread](https://discord.com/channels/1096466116672487547/1187737692033785858)\n\nGriptape vector store drivers don't currently support deleting vectors from the vector store. Add a `delete` method to complete CRUD support.",
      "state": "open",
      "author": "andrewfrench",
      "author_type": "User",
      "created_at": "2023-12-22T18:58:25Z",
      "updated_at": "2025-02-14T16:30:01Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/530/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/530",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/530",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.954887",
      "comments": []
    },
    {
      "issue_number": 816,
      "title": "if `client` is passed as a parameter, other fields should be optional",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\nif a `client` parameter is passed in any class that has one, the other fields that are parameters solely for the internal client instantiation should not be required.\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\nRedisConversationMemoryDriver(\r\n            client=Redis.from_url(f\"rediss://{os.environ['REDIS_USERNAME']}:{os.environ['REDIS_PASSWORD']}@{os.environ['REDIS_HOST']}:{os.environ['REDIS_PORT']}\"),\r\n            index=\"index\",\r\n            # if host, port, or password are not defined, the driver will fail init, even though the client is defined above\r\n            host=os.environ[\"REDIS_HOST\"],\r\n            port=os.environ[\"REDIS_PORT\"],\r\n            password=os.environ['REDIS_PASSWORD'],\r\n            conversation_id=conversation_id,\r\n        ),\r\n```\r\n\r\n**Expected behavior**\r\nif client is passed in, other fields that are used only for building the client internally should not be required.\r\n",
      "state": "open",
      "author": "vachillo",
      "author_type": "User",
      "created_at": "2024-06-03T16:32:27Z",
      "updated_at": "2025-02-14T16:29:39Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/816/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/816",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/816",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:45.954902",
      "comments": [
        {
          "author": "collindutter",
          "body": "This is potentially a problem for any co-dependent public fields.\r\n\r\nOne option is to make all fields optional and then use validators to ensure a valid combination of fields. We lose type hints on creation with this.\r\n\r\nAnother option is to just `pyright: ignore` on the calling side in the exceptio",
          "created_at": "2025-01-07T22:00:05Z"
        }
      ]
    },
    {
      "issue_number": 981,
      "title": "Parameter in framework to set max_retries on ToolTask and ToolkitTask error",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThere is no way to differentiate between `PromptTask` running successful `ActionSubtask`s and unsuccessful ones. For instance, you may want an Agent to perform up to 100 subtasks but only retry error'd ones up to 3 times. \r\n\r\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-07-15T17:47:29Z",
      "updated_at": "2025-02-14T16:29:25Z",
      "closed_at": null,
      "labels": [
        "tasks"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/981/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/981",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/981",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.153541",
      "comments": []
    },
    {
      "issue_number": 995,
      "title": "Add More Ruff Rules",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nCurrently Griptape only uses a subset of the [available ruff rules](https://docs.astral.sh/ruff/rules/). To cut down on PR review time, we should enable as many ruff rules as possible, ignoring ones that we don't agree with or are prohibitive to fix.\r\n\r\n**Describe the solution you'd like**\r\nIncrementally add ruff rules. Eventually replace the rules with `ALL` and start removing ignored rules.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-07-18T17:24:12Z",
      "updated_at": "2025-02-14T16:29:07Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "code health"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/995/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/995",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/995",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.153567",
      "comments": []
    },
    {
      "issue_number": 1113,
      "title": "Update StructureVisualizer to be able to identify what model/prompt_driver is being used",
      "body": " - [X] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\nIt would be incredibly useful to be able to visualize where your data is going - for example, what data is going to go to gpt-4o vs llama3.1.\r\n\r\nPerhaps we could add the ability for `StructureVisualizer` to do this for Agents as well?\r\n\r\nfor example, for this code:\r\n\r\n```\r\nagent = Agent(\r\n    stream=True,\r\n    prompt_driver=OpenAiChatPromptDriver(model=\"gpt-4o\"),\r\n    tools=[\r\n        WebScraperTool(off_prompt=True),\r\n        QueryTool(prompt_driver=OllamaPromptDriver(model=\"llama3.1\")),\r\n    ],\r\n)\r\n```\r\n\r\nwe could display something like:\r\n\r\n![image](https://github.com/user-attachments/assets/2e11e52f-69e6-4148-b752-55ea2e7520ad)\r\n\r\n\r\nThis should also work for Workflows & Pipelines so you know what drivers various tasks are using.\r\n\r\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-08-27T20:41:04Z",
      "updated_at": "2025-02-14T16:28:19Z",
      "closed_at": null,
      "labels": [
        "utils"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1113/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1113",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1113",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.153574",
      "comments": [
        {
          "author": "collindutter",
          "body": "For anyone interested: the easiest way to implement this would likely be to convert the Structure to a dictionary, and then build a graph from the dictionary fields.",
          "created_at": "2024-08-27T20:50:53Z"
        }
      ]
    },
    {
      "issue_number": 1151,
      "title": "Add Ollama Tokenizer",
      "body": " - [x ] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\nCurrently we have a TokenCounter utility that will count tokens for drivers other than Ollama. Ollama currently doesn't provide token information in it's responses: https://github.com/ollama/ollama/issues/1716, but we could perhaps use a tokenizer to estimate token size?\r\n\r\nThis might be useful as well for customers to estimate a call before they run it.",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-09-06T16:18:04Z",
      "updated_at": "2025-02-14T16:27:58Z",
      "closed_at": null,
      "labels": [
        "blocked",
        "tokenizers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1151",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1151",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.379080",
      "comments": [
        {
          "author": "collindutter",
          "body": "Blocked on https://github.com/ollama/ollama/issues/3582",
          "created_at": "2024-12-10T00:56:30Z"
        },
        {
          "author": "collindutter",
          "body": "Seems to be some progress: https://github.com/ollama/ollama/pull/8106",
          "created_at": "2024-12-19T20:52:59Z"
        }
      ]
    },
    {
      "issue_number": 1206,
      "title": "Azure AI Search Vector Store Driver",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the solution you'd like**\r\nCreate new Retrieval Rag Module and Store Driver to support Azure AI Search (formerly known as \"Azure Cognitive Search\") .\r\n\r\n",
      "state": "open",
      "author": "qwe321389yfs8t7huqd89q",
      "author_type": "User",
      "created_at": "2024-09-27T08:45:00Z",
      "updated_at": "2025-02-14T16:27:19Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1206/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1206",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1206",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.617584",
      "comments": [
        {
          "author": "collindutter",
          "body": "@qwe321389yfs8t7huqd89q thanks for the issue! Would this make sense as a Vector Store Driver that could be used with the existing `VectorStoreRetrievalRagModule`?",
          "created_at": "2024-10-14T19:37:29Z"
        },
        {
          "author": "qwe321389yfs8t7huqd89q",
          "body": "@collindutter yes, thanks for picking this up.",
          "created_at": "2024-10-15T08:28:42Z"
        }
      ]
    },
    {
      "issue_number": 1217,
      "title": "Document `Chat` and `Conversation` Utilities When Using Summary Conversation Memory",
      "body": " - [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\nIt appears like SummaryConversationMemory is maintaining the entire thread of memory instead of summarizing it.\r\n\r\n**To Reproduce**\r\n```\r\nfrom griptape.memory.structure import SummaryConversationMemory\r\nfrom griptape.structures import Agent\r\nfrom griptape.utils import Conversation\r\n\r\nagent = Agent(\r\n    conversation_memory=SummaryConversationMemory(offset=2, autoprune=True), stream=True\r\n)\r\n\r\nagent.run(\"Hi, I'm jason\")\r\nagent.run(\"I love bananas and trees\")\r\nagent.run(\"I left my heart in San Francisco\")\r\nagent.run(\"I'm quite fond of apples\")\r\nagent.run(\"I just love food in general\")\r\n# Chat(agent).start()\r\n\r\nprint(Conversation(agent.conversation_memory))\r\n```\r\n\r\nprints out\r\n\r\n```\r\nQ: Hi, I'm jason\r\nA: Hello, Jason! How can I assist you today?\r\nQ: I love bananas and trees\r\nA: That's great to hear, Jason! Bananas are delicious and nutritious, and trees are essential for the environment. Do you have a favorite type of tree or a particular way you like to enjoy bananas?\r\nQ: I left my heart in San Francisco\r\nA: That's a beautiful sentiment, Jason! San Francisco is a city that captures the hearts of many with its iconic landmarks, vibrant culture, and stunning scenery. Do you have any special memories or favorite places in San Francisco that you'd like to share?\r\nQ: I'm quite fond of apples\r\nA: It sounds like you have a love for fruits! Apples are another fantastic choice—crisp, sweet, and versatile. Do you have a favorite variety of apple, or perhaps a favorite way to enjoy them, like in a pie or as a snack?\r\nQ: I just love food in general\r\nA: That's wonderful! Food can be such a delightful and diverse experience. Do you have any favorite cuisines or dishes that you particularly enjoy? Whether it's something savory, sweet, or a specific type of cuisine, I'd love to hear more about your food preferences!\r\nSummary: Jason introduces himself, and the assistant responds by greeting him and asking how it can help. Jason mentions that he loves bananas and trees. The assistant responds by expressing enthusiasm about bananas and trees, noting their benefits, and asking Jason if he has a favorite type of tree or a particular way he likes to enjoy bananas. Jason then shares that he left his heart in San Francisco. The assistant responds by acknowledging the sentiment and asking if Jason has any special memories or favorite places in San Francisco that he'd like to share.\r\n```\r\n\r\n**Expected behavior**\r\nI would expect it to just have the last 2 Q/A entries, and the summary.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: [e.g. iOS]\r\n - Version [e.g. 0.5.1]\r\n\r\n**Additional context**\r\nI also noticed that when using the `Chat` utility, it outputs the response AND the summary with each interaction.\r\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-10-02T15:05:21Z",
      "updated_at": "2025-02-14T16:27:07Z",
      "closed_at": null,
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1217/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1217",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1217",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:46.904233",
      "comments": [
        {
          "author": "collindutter",
          "body": "@shhlife  ah I had misunderstood; the behavior you see with the `Conversation` utility is expected. It just prints out the full list of runs followed by a summary. The auto-pruning only happens when sending to the LLM since pruning will happen at different times for different LLMs.\r\n\r\nThat said, thi",
          "created_at": "2024-10-03T22:31:19Z"
        },
        {
          "author": "shhlife",
          "body": "@collindutter ahh.. I didn't understand how that worked. Maybe we can update the docs to show what's expected & show what is being sent to the LLM?\r\n\r\nIs it possible to get just the summary itself?\r\n\r\nAlso, the showing of the summary is happening when using the Chat utility.\r\n```\r\nUser: Hi, I'm jaso",
          "created_at": "2024-10-03T23:39:17Z"
        },
        {
          "author": "shhlife",
          "body": "Just tried this in Griptape v1.0.1 and it's still an issue when doing streaming.. happens both with Chat and with the Stream utility. The extra information isn't showing up in the logs though.\r\n\r\njust logged in #1440 ",
          "created_at": "2024-12-13T08:55:24Z"
        }
      ]
    },
    {
      "issue_number": 1322,
      "title": "Add MistralAI PromptDriver ",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA customer from ComfyUI requested access to MistralAI's api, as it offers a nice free tier. I tried using the `OpenAiChatPromptDriver` to use it by setting the `base_url`, but received a number of errors.\r\n\r\n```\r\nimport os\r\n\r\nfrom dotenv import load_dotenv\r\nfrom griptape.drivers import OpenAiChatPromptDriver\r\nfrom griptape.structures import Agent\r\n\r\nload_dotenv()\r\n\r\nAPI_KEY = os.getenv(\"MISTRAL_API_KEY\")\r\n\r\n# Create an agent\r\n\r\nagent = Agent(\r\n    stream=True,\r\n    prompt_driver=OpenAiChatPromptDriver(\r\n        base_url=\"https://api.mistral.ai/v1\",\r\n        api_key=API_KEY,\r\n        model=\"mistral-small-latest\",\r\n    ),\r\n)\r\n\r\nagent.run(\"Hello\")\r\n```\r\n\r\nThe response was `Error code: 422`:\r\n\r\n```\r\n[11/08/24 05:19:08] INFO     PromptTask d2e9f21a4d6d459c8c318314ea068c0d\r\n                             Input: Hello\r\n[11/08/24 05:19:09] ERROR    PromptTask d2e9f21a4d6d459c8c318314ea068c0d\r\n                             Error code: 422 - {'object': 'error', 'message': {'detail': [{'type': 'extra_forbidden', 'loc': ['body', 'seed'], 'msg': 'Extra inputs are not permitted', 'input':     \r\n                             None}, {'type': 'extra_forbidden', 'loc': ['body', 'stream_options'], 'msg': 'Extra inputs are not permitted', 'input': {'include_usage': True}}, {'type':\r\n                             'extra_forbidden', 'loc': ['body', 'user'], 'msg': 'Extra inputs are not permitted', 'input': ''}]}, 'type': 'invalid_request_error', 'param': None, 'code': None}      \r\n                             Traceback (most recent call last):\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\tasks\\base_task.py\", line 158, in run\r\n                                 self.output = self.try_run()\r\n                                               ^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\tasks\\prompt_task.py\", line 98, in try_run\r\n                                 message = self.prompt_driver.run(self.prompt_stack)\r\n                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\decorators.py\", line 14, in decorator\r\n                                 return Observability.observe(\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\observability\\observability.py\", line 36, in observe\r\n                                 return driver.observe(call)\r\n                                        ^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\observability\\no_op_observability_driver.py\", line 16, in observe \r\n                                 return call()\r\n                                        ^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\common\\observable.py\", line 19, in __call__\r\n                                 return self.func(*self.args, **self.kwargs)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_prompt_driver.py\", line 75, in run\r\n                                 for attempt in self.retrying():\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\", line 443, in __iter__\r\n                                 do = self.iter(retry_state=retry_state)\r\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\r\n                                 result = action(retry_state)\r\n                                          ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\tenacity\\__init__.py\", line 398, in <lambda>\r\n                                 self._add_action_func(lambda rs: rs.outcome.result())\r\n                                                                  ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\r\n                                 return self.__get_result()\r\n                                        ^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\r\n                                 raise self._exception\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_prompt_driver.py\", line 79, in run\r\n                                 result = self.__process_stream(prompt_stack) if self.stream else self.__process_run(prompt_stack)\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_prompt_driver.py\", line 128, in __proc                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\base_prompt_driver.py\", line 128, in __process_stream                       for message_delta in message_deltas:\r\n                                 for message_delta in message_deltas:\r\ness_stream\r\n                                 for message_delta in message_deltas:\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\openai_chat_prompt_driver.py\", line 126, in try_stream\r\n                                 result = self.client.chat.completions.create(**params, stream=True)\r\n                                 for message_delta in message_deltas:\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\griptape\\drivers\\prompt\\openai_chat_prompt_driver.py\", line 126, in try_stream\r\n                                 result = self.client.chat.completions.create(**params, stream=True)\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_uti                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_ut                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_ut                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 274, in wrapper\r\n                                 return func(*args, **kwargs)\r\n_utils\\_utils.py\", line 274, in wrapper\r\n_utils\\_utils.py\", line 274, in wrapper\r\n                                 return func(*args, **kwargs)\r\n                                        ^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\resources\\chat\\completions.py\", line 668, in create\r\n                                 return self._post(\r\n                                        ^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1260, in post\r\n                                 return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r\n                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 937, in request\r\n                                 return self._request(\r\n                                        ^^^^^^^^^^^^^^\r\n                               File \"C:\\Users\\jason\\Documents\\GitHub\\griptape-intro-demos\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1041, in _request\r\n                                 raise self._make_status_error_from_response(err.response) from None\r\n                             openai.UnprocessableEntityError: Error code: 422 - {'object': 'error', 'message': {'detail': [{'type': 'extra_forbidden', 'loc': ['body', 'seed'], 'msg': 'Extra inputs\r\n                             are not permitted', 'input': None}, {'type': 'extra_forbidden', 'loc': ['body', 'stream_options'], 'msg': 'Extra inputs are not permitted', 'input': {'include_usage':\r\n                             True}}, {'type': 'extra_forbidden', 'loc': ['body', 'user'], 'msg': 'Extra inputs are not permitted', 'input': ''}]}, 'type': 'invalid_request_error', 'param': None,\r\n                             'code': None}\r\n```\r\n\r\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-11-07T16:22:05Z",
      "updated_at": "2025-02-14T16:26:49Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1322/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1322",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1322",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.161618",
      "comments": [
        {
          "author": "collindutter",
          "body": "Reverted back to enhancement since I had misinterpreted the issue. Mistral does not claim to be openai-compatible so it is expected that it does not work.",
          "created_at": "2024-11-11T18:46:31Z"
        }
      ]
    },
    {
      "issue_number": 1435,
      "title": "StructureVisualizer Should Be Able To Visualize Run Structures",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nRight now `StructureVisualizer` makes no differentiation between an un-run Structure, and one that has run.\r\n\r\n**Describe the solution you'd like**\r\nFor `StructureVisualizer` to change the visualization based on `BaseTask.state`.\r\n\r\n**Additional context**\r\nhttps://github.com/griptape-ai/griptape/pull/1404#discussion_r1882836933",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-12T20:27:45Z",
      "updated_at": "2025-02-14T16:26:20Z",
      "closed_at": null,
      "labels": [
        "utils"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1435/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1435",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1435",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.457173",
      "comments": []
    },
    {
      "issue_number": 1441,
      "title": "Use underlying SDKs to automatically fill in model options when creating drivers",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nCustomers can have a difficult time knowing what models to choose when creating drivers if they don't already know what models exist. For things like gpt-4o it's pretty easy to type.. but for options like sonnet unless you know the exact ids, it's a challenge.\r\n\r\nIt would be wonderful to be able to use the underlying model SDKs to grab the list of models available and dynamically fill them.\r\n\r\n**Describe the solution you'd like**\r\nHere's a loom demonstrating a modification I did with Anthropic to pull from their list:\r\nhttps://www.loom.com/share/d7299383d6894101bc14db3fe8c05e43?sid=d4fedfee-ec64-45fa-9477-9a0a12dac9db\r\n\r\nAnd to do the same with OpenAiChatPromptDriver I modified `openai_chat_prompt_driver.py`:\r\n\r\nin the `if TYPE_CHECKING:` section:\r\n\r\n```python\r\nif TYPE_CHECKING:\r\n    from collections.abc import Iterator\r\n\r\n    from openai.types.chat.chat_completion_chunk import ChoiceDelta\r\n    from openai.types.chat.chat_completion_message import ChatCompletionMessage\r\n    from openai.types.chat_model import ChatModel # Pull from OpenAi's types\r\n    from griptape.tools import BaseTool\r\n\r\n```\r\n\r\nand then I switched the model param:\r\n```python\r\n    # model: str = field(kw_only=True, metadata={\"serializable\": True})\r\n    model: ChatModel = field(kw_only=True, metadata={\"serializable\": True}) # Use OpenAi's ChatModel\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nWe could manually create the list, but this seems way more efficient and will adjust automatically as the libraries change.\r\n",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-12-13T17:36:05Z",
      "updated_at": "2025-02-14T16:25:52Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1441/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1441",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1441",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.457193",
      "comments": [
        {
          "author": "shhlife",
          "body": "I've been slowly implementing this in the Griptape ComfyUI nodes.. if it's helpful,  here are the types for OpenAi:\r\n\r\n```\r\nfrom openai.types import AudioModel, ChatModel, EmbeddingModel, ImageModel\r\nfrom openai.types.audio.speech_model import SpeechModel\r\n```",
          "created_at": "2024-12-20T23:49:58Z"
        },
        {
          "author": "collindutter",
          "body": "Blocked on #1587. Need to move imports out of `TYPE_CHECKING` to accomplish this.",
          "created_at": "2025-01-21T22:04:42Z"
        }
      ]
    },
    {
      "issue_number": 1460,
      "title": "Replace HuggingFaceTokenizer in AmazonSageMakerJumpstartPromptDriver with SimpleTokenizer",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nHuggingFaceTokenizer making requests to https://huggingface.co/{model_name} which is restricted without an access token.\r\n\r\n**Describe the solution you'd like**\r\nReplace HuggingFaceTokenizer with SimpleTokenizer in AmazonSageMakerJumpstartPromptDriver.\r\n\r\n**Describe alternatives you've considered**\r\nDescribe in docs and example how to get and pass token which using AmazonSageMakerJumpstartPromptDriver.\r\n\r\n**Additional context**\r\nThis replacement also will allow to remove 'transformers' from drivers-prompt-amazon-sagemaker extra.\r\n",
      "state": "open",
      "author": "igor-2lemetry",
      "author_type": "User",
      "created_at": "2024-12-18T07:17:27Z",
      "updated_at": "2025-02-14T16:25:42Z",
      "closed_at": null,
      "labels": [
        "drivers",
        "tokenizers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1460/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1460",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1460",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736711",
      "comments": []
    },
    {
      "issue_number": 1467,
      "title": "Override System Prompts Without Losing Rulesets",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nUsers occasionally want to override the system prompt while still persisting Rulesets.\r\n\r\n**Describe the solution you'd like**\r\nFor Rulesets to not be lost when overriding the system prompt.\r\n\r\n**Describe alternatives you've considered**\r\nTo accomplish this, users need to rely on `default_system_template_generator` which feels fragile.\r\n\r\n```python\r\ndef custom_system_template(task: PromptTask) -> str:\r\n    return \"\"\"\r\n    [context] there are oranges on the table. The forks are on the wall. There is a plant on my head.\r\n    \"\"\" + task.default_system_template_generator(task)\r\n\r\n\r\ntask = PromptTask(\r\n    input=\"{{args[0]}}\",\r\n    generate_system_template=custom_system_template,\r\n)\r\n\r\nagent = Agent(\r\n    rulesets=[Ruleset(name=\"language\", rules=[Rule(\"You speak in yoda\")])]\r\n)\r\n```\r\n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-19T19:17:23Z",
      "updated_at": "2025-02-14T16:25:21Z",
      "closed_at": null,
      "labels": [
        "tasks",
        "rules"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1467/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1467",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1467",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736742",
      "comments": []
    },
    {
      "issue_number": 1475,
      "title": "Document Artifact",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nSome LLMs have the ability to upload documents as part of the request. \r\n- https://community.aws/content/2i4v2vZRb9YgL2RxkawPiF8f0lZ/using-document-chat-with-the-amazon-bedrock-converse-api?lang=en\r\n- TODO: Add others (Anthropic?)\r\n\r\n**Describe the solution you'd like**\r\nA `DocumentArtifact` that allows me to pass a document to an LLM.\r\n\r\n**Describe alternatives you've considered**\r\nPassing a `GenericArtifact`.\r\n",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-20T00:12:17Z",
      "updated_at": "2025-02-14T16:23:52Z",
      "closed_at": null,
      "labels": [
        "artifacts"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1475/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1475",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1475",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736754",
      "comments": []
    },
    {
      "issue_number": 1487,
      "title": "`HuggingFaceHubPromptDriver` Image Inputs",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n[Some models](https://huggingface.co/Qwen/Qwen-VL) on HuggingFace support image inputs but `HuggingFaceHubPromptDriver` does not.\r\n\r\n**Describe the solution you'd like**\r\nFor `HuggingFaceHubPromptDriver` to support Image Artifacts as input.\r\n\r\n**Additional context**\r\nhttps://github.com/griptape-ai/ComfyUI-Griptape/issues/200\r\nMay be blocked on #1359",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-26T18:23:00Z",
      "updated_at": "2025-02-14T16:22:30Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1487/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1487",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1487",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736763",
      "comments": []
    },
    {
      "issue_number": 1531,
      "title": "Improve Chunker Documenation",
      "body": "Our [Chunker docs](https://docs.griptape.ai/stable/griptape-framework/data/chunkers/) are very barebones. Based on some offline conversations they should be improved in a few ways:\r\n- Explain how chunk size works WRT separators\r\n- Explain optimal chunk size ",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-08T22:07:24Z",
      "updated_at": "2025-02-14T16:21:08Z",
      "closed_at": null,
      "labels": [
        "docs",
        "chunkers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1531/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1531",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1531",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736770",
      "comments": []
    },
    {
      "issue_number": 1571,
      "title": "Improve Structure Authoring Syntax",
      "body": "The process for creating Structures could be improved a in a number of ways. Many of these ideas are ~stolen~ borrowed from [Airflow's TaskFlow syntax](https://airflow.apache.org/docs/apache-airflow/stable/tutorial/taskflow.html#example-taskflow-api-pipeline).\r\n\r\n- Use Structure as a context manager that automatically adds any Tasks created within its context.\r\n- Create `@task` decorator for creating `CodeExecutionTask`s.\r\n  - Automatically unwrap Artifact inputs similar to what we do with Tools.\r\n  - Automatically wrap return values from `CodeExecutionTask`s in an Artifact. \r\n- Automatically detect parent child relationships based on Task inputs.\r\n\r\nWIP [here](https://github.com/griptape-ai/griptape/commit/9f9be3487393baf0dd03a300f67a2c2e293e8e5e) that enables all these things.\r\n\r\nCode of it working\r\n\r\n```python\r\nimport random\r\n\r\nfrom griptape.common.decorators import task\r\nfrom griptape.structures import Workflow\r\nfrom griptape.tasks import PromptTask\r\n\r\nwith Workflow() as w:\r\n\r\n    @task()\r\n    def choose_animal() -> str:\r\n        return random.choice([\"Fox\", \"Whale\", \"Eagle\", \"Elephant\"])\r\n\r\n    @task()\r\n    def choose_emotion() -> str:\r\n        return random.choice([\"Joyful\", \"Melancholic\", \"Curious\", \"Calm\"])\r\n\r\n    @task()\r\n    def create_phrase(animal: str, emotion: str) -> str:\r\n        return f\"A {emotion.lower()} {animal.lower()} wandering the world\"\r\n\r\n    @task()\r\n    def transform_phrase(phrase: str) -> str:\r\n        return phrase.capitalize() + \", dancing in dreams.\"\r\n\r\n    animal = choose_animal()\r\n    emotion = choose_emotion()\r\n    phrase = create_phrase(animal, emotion)\r\n    poetic_phrase = transform_phrase(phrase)\r\n\r\n    PromptTask(\r\n        \"Write a story or poem based on: {{ poetic_phrase }}\",\r\n        id=\"poetic_task\",\r\n        context={\r\n            \"poetic_phrase\": poetic_phrase,\r\n        },\r\n    )\r\n\r\nw.run()\r\n```\r\n\r\nSome unknowns:\r\n- How to create a `BranchTask` using the `@task` decorator? Airflow has `@task.branch` but I don't love this. The decorator could live in the class itself. I.e. `@BranchTask`\r\n- Is `context` the appropriate place to detect relationships for non-`CodeExecutionTask`s? Doesn't feel quite the same as `create_phrase(animal, emotion)`.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-13T21:07:20Z",
      "updated_at": "2025-02-14T16:19:19Z",
      "closed_at": null,
      "labels": [
        "structures"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1571/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1571",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1571",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.736778",
      "comments": [
        {
          "author": "shhlife",
          "body": "For non-`CodeExecutionTask`s, could you do something where if the task was included as part of the input, that would set up the relationship as well as it does with context?\r\n\r\nexample:\r\n\r\n```python\r\nwith Workflow as w():\r\n    @task()\r\n    def choose_animal() -> str:\r\n        return random.choice([\"",
          "created_at": "2025-01-13T23:54:46Z"
        }
      ]
    },
    {
      "issue_number": 1575,
      "title": "Prompt Caching",
      "body": "LLM providers offer prompt caching to improve response times and cut down on costs. Some examples:\r\n- [OpenAI](https://platform.openai.com/docs/guides/prompt-caching)\r\n- [Anthropic](https://www.anthropic.com/news/prompt-caching)\r\n- [Gemini](https://ai.google.dev/gemini-api/docs/caching)\r\n\r\nUsers should be able to take advantage of this functionality.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-14T17:16:55Z",
      "updated_at": "2025-02-14T16:18:09Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1575/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1575",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1575",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.961463",
      "comments": []
    },
    {
      "issue_number": 1594,
      "title": "Support OpenAi Realtime Endpoints",
      "body": "Griptape should support [OpenAi Realtime models](https://github.com/openai/openai-python?tab=readme-ov-file#realtime-api-beta) in `OpenAiChatPromptDriver` by supporting AudioArtifact input/outputs.",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-21T16:58:14Z",
      "updated_at": "2025-02-14T16:17:07Z",
      "closed_at": null,
      "labels": [
        "blocked",
        "drivers"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1594/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1594",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1594",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:47.961486",
      "comments": [
        {
          "author": "collindutter",
          "body": "Blocked on #1280 ",
          "created_at": "2025-01-21T16:58:27Z"
        }
      ]
    },
    {
      "issue_number": 1666,
      "title": "OllamaPromptDriver doesn't stream responses when using tools",
      "body": "In Griptape 1.3.0, the issue with OllamaPromptDriver not working with Tools when `stream` was enabled was resolved, but now the responses aren't streaming at all.\n\nSee this example:\n\n```python\nfrom griptape.drivers import OllamaPromptDriver\nfrom griptape.structures import Agent\nfrom griptape.tools import DateTimeTool\nfrom griptape.utils import Stream\n\ndriver = OllamaPromptDriver(model=\"llama3.2\", stream=True)\nagent = Agent(prompt_driver=driver, tools=[DateTimeTool()])\n\nfor artifact in Stream(agent).run(\"What's today's date? Write a song about it\"):\n    print(artifact.value, end=\"\", flush=True)\n\n```\n\nIf you run this with the tools the response won't stream - but if you disable the tool it does.",
      "state": "open",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-02-10T02:59:58Z",
      "updated_at": "2025-02-14T16:15:19Z",
      "closed_at": null,
      "labels": [
        "blocked"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1666/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1666",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1666",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:48.238411",
      "comments": [
        {
          "author": "collindutter",
          "body": "@shhlife unfortunately this is blocked on the ollama side. See:\nhttps://github.com/ollama/ollama/issues/5796\nhttps://github.com/ollama/ollama/issues/7886",
          "created_at": "2025-02-10T18:05:29Z"
        }
      ]
    },
    {
      "issue_number": 1689,
      "title": "Add `extra_params` To All Drivers",
      "body": "\n### Discussed in https://github.com/orgs/griptape-ai/discussions/1685\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **shhlife** February 10, 2025</sup>\nSome drivers like those from ElevenLabs do allow for extra properties. It'd be nice to be able to use `extra_schema_properties` for them, and have it work with the TextToSpeechTool and TextToSpeechTask.\r\n\r\nElevenlabs also has a `with-timestamps` endpoint for the url - would it be possible to add that to the url for the driver, or get access to append it?\r\n</div>",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-11T16:59:58Z",
      "updated_at": "2025-02-14T16:14:45Z",
      "closed_at": null,
      "labels": [
        "drivers"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1689/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1689",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1689",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:48.518041",
      "comments": []
    },
    {
      "issue_number": 1690,
      "title": "Tutorial for integrating Cloud Tools with OpenAI Custom GPT Actions",
      "body": "\n### Discussed in https://github.com/orgs/griptape-ai/discussions/1564\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **vachillo** January 13, 2025</sup>\nGriptape Cloud hosted tools can integration with OpenAI Actions. the docs should have a walkthrough of this.</div>",
      "state": "open",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-02-11T17:02:43Z",
      "updated_at": "2025-02-14T16:14:05Z",
      "closed_at": null,
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1690/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "ian-griptape-ai"
      ],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1690",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1690",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:48.518070",
      "comments": []
    },
    {
      "issue_number": 1605,
      "title": "The sidebar for StructureRunTool in the docs is labeled \"Structure Run Client\"",
      "body": "I noticed that in the docs the Sidebar shows `structure run client` instead of `structure run tool`.\n\n<img width=\"986\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/17cb93d2-a76b-4e1e-8cd8-99f457d03b0c\" />",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2025-01-23T17:26:22Z",
      "updated_at": "2025-02-07T19:19:36Z",
      "closed_at": "2025-01-23T18:10:53Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1605/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.3",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1605",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1605",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:50.414072",
      "comments": []
    },
    {
      "issue_number": 1633,
      "title": "Griptape Cloud Data Lake documentation",
      "body": "Data Lakes are not currently documented\n",
      "state": "closed",
      "author": "cjkindel",
      "author_type": "User",
      "created_at": "2025-02-03T17:46:33Z",
      "updated_at": "2025-02-06T01:56:00Z",
      "closed_at": "2025-02-06T01:55:59Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1633/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cjkindel"
      ],
      "milestone": "1.3",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1633",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1633",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:50.414112",
      "comments": []
    },
    {
      "issue_number": 1500,
      "title": "Cannot Install Torch",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\n```bash\r\n  - Installing torch (2.5.1): Failed\r\n\r\n  RuntimeError\r\n\r\n  Unable to find installation candidates for torch (2.5.1)\r\n\r\n  at ~/.local/pipx/venvs/poetry/lib/python3.13/site-packages/poetry/installation/chooser.py:74 in choose_for\r\n       70│\r\n       71│             links.append(link)\r\n       72│\r\n       73│         if not links:\r\n    →  74│             raise RuntimeError(f\"Unable to find installation candidates for {package}\")\r\n       75│\r\n       76│         # Get the best link\r\n       77│         chosen = max(links, key=lambda link: self._sort_key(package, link))\r\n       78│\r\n\r\nCannot install torch.\r\n```\r\n\r\n**To Reproduce**\r\n```\r\nmake install\r\n```\r\n",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2025-01-02T17:36:49Z",
      "updated_at": "2025-01-22T00:37:05Z",
      "closed_at": "2025-01-22T00:37:03Z",
      "labels": [
        "blocked"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1500/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "[future] 2.0",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1500",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1500",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:50.414133",
      "comments": [
        {
          "author": "collindutter",
          "body": "Maybe fixed by `torch@2.6.0` https://github.com/pytorch/pytorch/issues/139005",
          "created_at": "2025-01-02T17:51:25Z"
        },
        {
          "author": "collindutter",
          "body": "Seems to have been an issue on my end with a mismatch of python and poetry env versions.\n\n`rm -rf .venv/`\n`mise use python@3.9`\n`poetry env use 3.9`\n`make install`\n\nResolved it.",
          "created_at": "2025-01-22T00:37:03Z"
        }
      ]
    },
    {
      "issue_number": 1466,
      "title": "Large Rules Being Entirely Ignored",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\nUsers have reported that creating a single massive rule performs _significantly_ worse compared to setting it directly in the system prompt. Splitting the rule up into multiple rules might improve performance, but is inconvenient for users.\r\n \r\n**To Reproduce**\r\n```python\r\nfrom griptape.rules import Rule\r\nfrom griptape.structures import Agent\r\nfrom griptape.tasks import PromptTask\r\n\r\nartifact_rule = Rule(\r\n    \"\"\"\r\nYou are a helpful AI assistant that creates well-structured responses with artifacts for substantial content. \r\n        \r\n        ARTIFACTS USAGE GUIDELINES:\r\n        \r\n        1. CREATE ARTIFACTS for:\r\n           - Original creative, analytical and business writing (reports, data analysis, financial models, presentations) over 20 lines\r\n           - In-depth analytical content (reviews, critiques, analyses) over 20 lines\r\n           - Custom code solving specific problems\r\n           - Technical documentation meant as reference material\r\n           - Content intended for use outside conversation\r\n           - Comprehensive guides or instructional content\r\n           - Content that will be edited, expanded, or reused\r\n           \r\n        2. DO NOT USE ARTIFACTS for:\r\n           - Explanatory content (explaining concepts, math problems, algorithms)\r\n           - Teaching or demonstrating concepts (even with examples)\r\n           - Answering questions about existing knowledge\r\n           - Purely informational responses\r\n           - Lists, rankings, or comparisons regardless of length\r\n           - Plot summaries, basic reviews, or descriptions\r\n           - Conversational responses and discussions\r\n           - Advice or tips\r\n\r\n        3. ARTIFACT FORMATTING:\r\n           - Use <artifact type=\"code\" language=\"[language]\"> for code\r\n           - Use <artifact type=\"markdown\"> for documents and long-form text\r\n           - Use <artifact type=\"html\"> for HTML/web content\r\n           - Use <artifact type=\"svg+xml\"> for SVG graphics\r\n           - Use <artifact type=\"mermaid\"> for diagrams\r\n           - Use <artifact type=\"react\"> for React components\r\n\r\n        4. GENERAL RULES:\r\n           - Keep outputs over 20 lines in artifacts\r\n           - Maintain conversational responses outside artifacts\r\n           - Use artifacts only when clearly beneficial\r\n           - Never mention or explain artifacts to users\r\n           - Always close artifact tags properly\r\n           - Place conversation or explanation outside artifacts\r\n           - If in doubt, prefer NOT to use an artifact\r\n           - One artifact per response unless specifically requested\r\n\r\n        5. RESPONSE STRUCTURE:\r\n           - Think through user request first\r\n           - If artifact needed, generate content inside appropriate tags\r\n           - Add conversational context/explanation outside artifact\r\n           - Keep responses natural and helpful\r\n           - Talk like a pirate\r\n        \r\n        Remember: Artifacts are for substantial, reusable content - not for regular conversation. When in doubt, err on the side of not using an artifact.\r\n\"\"\"\r\n)\r\n\r\n\r\nagent = Agent()\r\n\r\nagent.add_task(\r\n    PromptTask(\r\n        \"Let's create a short story of american psycho for modern times\",\r\n        # generate_system_template=lambda _: artifact_rule.value,\r\n        rules=[artifact_rule],\r\n    )\r\n)\r\n\r\nagent.run()\r\n```\r\nAgent does not talk like a pirate. Uncomment `generate_system_template` and it does.\r\n**Expected behavior**\r\nRules should be followed, regardless of size.\r\n\r\n**Additional context**\r\n[Relevant thread](https://discord.com/channels/1096466116672487547/1316523812560306308)",
      "state": "closed",
      "author": "collindutter",
      "author_type": "User",
      "created_at": "2024-12-19T18:12:55Z",
      "updated_at": "2025-01-14T14:31:33Z",
      "closed_at": "2025-01-14T14:31:32Z",
      "labels": [
        "can't reproduce"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1466/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "collindutter"
      ],
      "milestone": "1.2",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1466",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1466",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:50.628880",
      "comments": [
        {
          "author": "collindutter",
          "body": "I'm struggling to reproduce a significant difference between a custom system prompt and rules. The original example shared does not output as an artifact even when using `generate_system_template`. Furthermore, if I add \"Talk like a pirate\", it does not follow unless I simplify the custom system pro",
          "created_at": "2024-12-23T19:19:26Z"
        },
        {
          "author": "collindutter",
          "body": "I was not able to find any meaningful difference between the two techniques. I think the best we can do at this time is better explain how to write effective rules/override system prompts in #1535. \r\n\r\nFor future reference, this is how I evaluated it:\r\n```python\r\nfrom griptape.configs import Default",
          "created_at": "2025-01-10T18:00:00Z"
        }
      ]
    },
    {
      "issue_number": 1504,
      "title": "    from griptape.configs import StructureConfig, StructureGlobalDriversConfig ImportError: cannot import name 'StructureConfig' from 'griptape.configs' (D:\\AI\\web\\portfolio\\grape\\Lib\\site-packages\\griptape\\configs\\__init__.py)",
      "body": "- [ ] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\n\r\nInstalled griptape on windows as per the given pip command. Installation shows no error and says it was installed successfully.\r\n\r\nWhen I try to use it in the code, I get below error:\r\n\r\n(grape) PS D:\\AI\\web\\portfolio> python app.py\r\nTraceback (most recent call last):\r\n  File \"D:\\AI\\web\\portfolio\\app.py\", line 4, in <module>\r\n    from griptape.configs import StructureConfig, StructureGlobalDriversConfig\r\nImportError: cannot import name 'StructureConfig' from 'griptape.configs' (D:\\AI\\web\\portfolio\\grape\\Lib\\site-packages\\griptape\\configs\\__init__.py)\r\n\r\n\r\nI have tried to uninstall reinstall and upgrade numerous time",
      "state": "closed",
      "author": "KingLeoJr",
      "author_type": "User",
      "created_at": "2025-01-06T13:14:20Z",
      "updated_at": "2025-01-07T16:50:08Z",
      "closed_at": "2025-01-06T16:33:51Z",
      "labels": [
        "needs information"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1504/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1504",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1504",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:52.859705",
      "comments": [
        {
          "author": "collindutter",
          "body": "Hey @KingLeoJr, it looks like you may be referencing an older version of Griptape. For creating a [custom config](https://docs.griptape.ai/stable/griptape-framework/structures/configs/#custom), the import should be:\r\n\r\n```python\r\nfrom griptape.configs import Defaults\r\nfrom griptape.configs.drivers i",
          "created_at": "2025-01-06T16:33:51Z"
        },
        {
          "author": "KingLeoJr",
          "body": "I was just checking this framework out. So, I just did \r\npip install \"griptape[all]\" -U\r\nand created a simple code to test it.\r\n",
          "created_at": "2025-01-06T19:27:54Z"
        },
        {
          "author": "collindutter",
          "body": "Thanks for checking us out. Can you please share the code that triggers this error?",
          "created_at": "2025-01-06T21:11:17Z"
        },
        {
          "author": "KingLeoJr",
          "body": "I must have used some code generator to generate that code\r\nI am using below now, which seems to be working. [I wanted to try this with free models than OPENAI models.]\r\n\r\n```python\r\nimport os\r\nfrom dotenv import load_dotenv\r\nfrom griptape.drivers import GooglePromptDriver\r\nfrom griptape.structures ",
          "created_at": "2025-01-07T16:38:48Z"
        },
        {
          "author": "collindutter",
          "body": "Glad it's working now! We're always looking for ways to make the onboarding process easier, thank you for the feedback. Please don't hesitate to reach out on a Github Discussion or Discord if you have any further questions!",
          "created_at": "2025-01-07T16:50:07Z"
        }
      ]
    },
    {
      "issue_number": 1505,
      "title": "Subsection headings on the Agents overview docs page are transposed: Reported via Discord",
      "body": "☑️ I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\n**Describe the bug**\r\nTools example is labelled as Agent Input, Input example is labelled as Agent Tools \r\n\r\n[Agents Overview Page](https://docs.griptape.ai/stable/griptape-framework/structures/agents/)\r\n\r\n\r\n",
      "state": "closed",
      "author": "ian-griptape-ai",
      "author_type": "User",
      "created_at": "2025-01-06T15:22:03Z",
      "updated_at": "2025-01-06T16:30:49Z",
      "closed_at": "2025-01-06T16:30:49Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1505/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/griptape-ai/griptape/issues/1505",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1505",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:53.081642",
      "comments": []
    },
    {
      "issue_number": 1425,
      "title": "[Docs] Update the saving/loading config doc with code to save/read from disk",
      "body": "- [x] I have read and agree to the [contributing guidelines](https://github.com/griptape-ai/griptape#contributing).\r\n\r\nIt'd be great if the docs for saving & loading configurations would include examples on how to save/load configs from disk.\r\n\r\nFor example:\r\n\r\n```python\r\nfile = \"./config.json\"\r\n\r\n# Save config\r\nconfig_text = Defaults.drivers_config.to_json()\r\nPath(file).write_text(config_text)\r\n\r\n# Load config\r\nconfig_text = Path(file).read_text()\r\nDefaults.drivers_config = DriversConfig.from_json(config_text)\r\n```\r\n\r\nthis will be helpful for newish users. :)",
      "state": "closed",
      "author": "shhlife",
      "author_type": "User",
      "created_at": "2024-12-11T01:34:49Z",
      "updated_at": "2024-12-24T19:12:35Z",
      "closed_at": "2024-12-16T19:51:33Z",
      "labels": [
        "docs"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/griptape-ai/griptape/issues/1425/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "1.1",
      "html_url": "https://github.com/griptape-ai/griptape/issues/1425",
      "api_url": "https://api.github.com/repos/griptape-ai/griptape/issues/1425",
      "repository": "griptape-ai/griptape",
      "extraction_date": "2025-06-22T00:46:53.081675",
      "comments": []
    }
  ]
}