{
  "repository": "awslabs/agent-squad",
  "repository_info": {
    "repo": "awslabs/agent-squad",
    "stars": 6052,
    "language": "Python",
    "description": "Flexible and powerful framework for managing multiple AI agents and handling complex conversations",
    "url": "https://github.com/awslabs/agent-squad",
    "topics": [
      "agentic-ai",
      "agents",
      "ai-agents",
      "ai-agents-framework",
      "anthropic",
      "anthropic-claude",
      "aws",
      "aws-bedrock",
      "aws-cdk",
      "aws-lambda",
      "chatbot",
      "framework",
      "generative-ai",
      "machine-learning",
      "openai",
      "openaiapi",
      "orchestrator",
      "python",
      "serverless",
      "typescript"
    ],
    "created_at": "2024-07-23T12:48:30Z",
    "updated_at": "2025-06-22T02:01:44Z",
    "search_query": "openai anthropic language:python stars:>2",
    "total_issues_estimate": 72,
    "labeled_issues_estimate": 72,
    "labeling_rate": 100.0,
    "sample_labeled": 27,
    "sample_total": 27,
    "has_issues": true,
    "repo_id": 832647441,
    "default_branch": "main",
    "size": 66673
  },
  "extraction_date": "2025-06-22T00:37:32.338428",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 132,
  "issues": [
    {
      "issue_number": 355,
      "title": "Bug: AgentResponse.output.content returns empty list causing IndexError in response processing",
      "body": "### Expected Behaviour\n\nWhen `orchestrator.route_request()` returns an AgentResponse, the `response.output.content` should contain at least one item with a 'text' key that can be accessed via `response.output.content[0]['text']`.\n\n### Current Behaviour\n\nIn some cases, `response.output.content` returns an empty list `[]`, causing an **IndexError: list index out of range** when trying to access `response.output.content[0]['text']`. This happens intermittently but repeatedly for certain agent configurations.\n\nThe bug appears to be related to the ConversationMessage object structure where the content field should be a list of dictionaries with 'text' keys, but sometimes returns as an empty list despite successful agent processing. This suggests an issue in how the framework constructs the response object after agent execution completes.\n\nLOGS:\n```\n** AGENT PROCESSING FLOW **\n==>>>>> Supervisor sending Task Followup Specialist: Liste todas as tarefas ativas\n\n[INFO] [Follow-Up - Tool:list_tasks] Retrieved 10 tasks from local ...[truncated]\n\n<<<<<===Supervisor received from Task Followup Specialist:\nTasks found: 10 tarefas organizadas por categoria:\n\n- Compra de bandeja de morango no Oba (Aguardando informações - Data de entrega, marca preferida e dia da semana)\n- Impressão de pô...[truncated]\n\n** EXECUTION TIMES **\n> Classifying user intent: 2.3545236587524414s\n> Agent Task Followup Leader| Processing request: 24.730260372161865s\n\n** FRAMEWORK RESPONSE **\nResponse from orchestrator: AgentResponse(\n    metadata=AgentProcessingResult(\n        user_input='xxx xxxx xxxx', \n        agent_id=xxxxx-xxx-xx', \n        agent_name='XXX XXX', \n        user_id='xxx', \n        session_id='xxx', \n        additional_params={}\n    ), \n    output=<agent_squad.types.types.ConversationMessage object at 0x7f97d0177e00>, \n    streaming=False\n)\n\n** ERROR OCCURS **\n[ERROR] No agent error: list index out of range\nTraceback (most recent call last):\n  File \"/var/task/main.py\", line 557, in ask_orchestrator\n    answer = response.output.content[0]['text']\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^\nIndexError: list index out of range\n\n```\n\n### Code snippet\n\n```python\ntry:\n    response = await orchestrator.route_request(\n        message_input,\n        account_id,\n        session_id\n    )\nexcept Exception as e:\n    logger.error(f\"Error during routing request: {str(e)}\")\n    return None\n\nlogger.info(f\"Response from orchestrator: {response}\")\n\ntry:\n    answer = response.output.content[0]['text']  # ← IndexError occurs here\n    logger.info(f\"Orchestrator Answer: {answer}\")\n    agent_id = response.metadata.agent_id\n    agent_name = response.metadata.agent_name\n    user_input = response.metadata.user_input\n    \nexcept Exception as e:\n    # Fallback handling\n    answer = response.output if isinstance(response.output, str) else \"Default message\"\n    agent_id = \"no_agent_selected\"\n    agent_name = \"No Agent\"\n    user_input = message_input\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n1. Set up a hierarchical multi-agent system with supervisor agents coordinating specialist agents\n2. Configure agents with tool execution and long processing times (20+ seconds)\n3. Send requests that trigger supervisor → specialist agent routing\n4. The bug occurs intermittently when the specialist agent completes processing but the ConversationMessage.content list is empty",
      "state": "open",
      "author": "felipebpl",
      "author_type": "User",
      "created_at": "2025-06-12T03:55:13Z",
      "updated_at": "2025-06-12T03:57:05Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/355/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/355",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/355",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:01.819596",
      "comments": []
    },
    {
      "issue_number": 354,
      "title": "Bug: Typo in TypeScript classifier prompt",
      "body": "### Expected Behaviour\n\nTypo in TypeScript classifier prompt\n\n### Current Behaviour\n\nShould say 'If you are unable to select an agent put \"unknown\"' instead of 'If you are unable to select an agent put \"unkwnown\"'.\n\n### Code snippet\n\n```python\nhttps://github.com/awslabs/agent-squad/blob/main/typescript/src/classifiers/classifier.ts#L99\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nhttps://github.com/awslabs/agent-squad/blob/main/typescript/src/classifiers/classifier.ts#L99",
      "state": "open",
      "author": "tracy-french",
      "author_type": "User",
      "created_at": "2025-06-11T13:07:49Z",
      "updated_at": "2025-06-11T13:08:21Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/354/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/354",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/354",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:01.819625",
      "comments": []
    },
    {
      "issue_number": 238,
      "title": "Bug: Custom aoss-index operation failed: resource_already_exists_exception when running cdk deploy --all",
      "body": "### Expected Behaviour\n\nI am trying to deploy the chat-demo-app but when running cdk deploy --all I get an error and the cloudformation stack gets rolled back\n\n### Current Behaviour\n\nUpon running cdl deploy --all I get this error message:\n\nFailed resources:\nChatDemoStack | 3:44:17 PM | CREATE_FAILED        | AWS::CloudFormation::CustomResource       | MutiAgentOrchestratorDocKb/AOSSCollectionForKB/OpenSearchIndex/Default (MutiAgentOrchestratorDocKbAOSSCollectionForKBOpenSearchIndexDDA97914) Received response status [FAILED] from custom resource. Message returned: Custom aoss-index operation failed: {\"error\":{\"root_cause\":[{\"type\":\"resource_already_exists_exception\",\"reason\":\"OpenSearch exception [type=resource_already_exists_exception, reason=index [agent-blueprints-kb-default-index/72Q0BpUBAQjhsqugaO1t] already exists]- server : [envoy]\"}],\"type\":\"resource_already_exists_exception\",\"reason\":\"OpenSearch exception [type=resource_already_exists_exception, reason=index [agent-blueprints-kb-default-index/72Q0BpUBAQjhsqugaO1t] already exists]- server : [envoy]\"},\"status\":400}\n\nLogs: /aws/lambda/ChatDemoStack-MutiAgentOrchestratorDocKbAOSSCollec-Mwptug2aUEi0\n\n    at Runtime.onEvent [as handler] (/var/task/index.js:901546:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) (RequestId: 3547bf73-3c69-4fa6-ad59-8f9c4fc9a90b)\n❌  ChatDemoStack failed: _ToolkitError: The stack named ChatDemoStack failed creation, it may need to be manually deleted from the AWS console: ROLLBACK_COMPLETE: Received response status [FAILED] from custom resource. Message returned: Custom aoss-index operation failed: {\"error\":{\"root_cause\":[{\"type\":\"resource_already_exists_exception\",\"reason\":\"OpenSearch exception [type=resource_already_exists_exception, reason=index [agent-blueprints-kb-default-index/72Q0BpUBAQjhsqugaO1t] already exists]- server : [envoy]\"}],\"type\":\"resource_already_exists_exception\",\"reason\":\"OpenSearch exception [type=resource_already_exists_exception, reason=index [agent-blueprints-kb-default-index/72Q0BpUBAQjhsqugaO1t] already exists]- server : [envoy]\"},\"status\":400}\n\nLogs: /aws/lambda/ChatDemoStack-MutiAgentOrchestratorDocKbAOSSCollec-Mwptug2aUEi0\n\n    at Runtime.onEvent [as handler] (/var/task/index.js:901546:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) (RequestId: 3547bf73-3c69-4fa6-ad59-8f9c4fc9a90b)\n\n\n### Code snippet\n\n```python\ngit clone https://github.com/awslabs/multi-agent-orchestrator.git                                                         \ncd mulmulti-agent-orchestrator\ncd .\\multi-agent-orchestrator\\examples\\chat-demo-app\\\nnpm install\ncdk bootstrap\ncdk deploy --all\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nRun cdk deploy --all",
      "state": "open",
      "author": "pbarone",
      "author_type": "User",
      "created_at": "2025-02-14T20:55:35Z",
      "updated_at": "2025-06-10T14:40:06Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/238/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/238",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/238",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:01.819632",
      "comments": [
        {
          "author": "PankajMankotia",
          "body": "This issue is still existing. I tried trouble shooting. in OpensearchServerlessHelpers.ts file, line # 10 assigns the index name. As per the logs this resource is already existing but couldn't find it on my dashboard.",
          "created_at": "2025-06-10T14:40:06Z"
        }
      ]
    },
    {
      "issue_number": 352,
      "title": "Does the agent-squad support the task planning",
      "body": null,
      "state": "open",
      "author": "SingJumpRapp",
      "author_type": "User",
      "created_at": "2025-06-06T09:38:14Z",
      "updated_at": "2025-06-07T07:42:41Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/352/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/352",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/352",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:02.045457",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Please explain what you want",
          "created_at": "2025-06-07T07:42:40Z"
        }
      ]
    },
    {
      "issue_number": 109,
      "title": "Request for invocation token and response token for cost tracking and audit",
      "body": "### Use case\n\nIt would be great if the default agent also supports adding or emitting a custom callback which gives the number of tokens used for the query. This would help in effective cost tracking on the users query.\r\n\r\nAlso, if this can auto capture in the storage backend, it would be super helpful.\r\n\r\nCurrently I can probably write a custom agent but have to figure out on how to get it integrated with custom storage.\n\n### Solution/User Experience\n\nSolution probably to have the metadata capture at the end of response and store it's token count details to the corresponding chat history item record/row.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "blanketspy99",
      "author_type": "User",
      "created_at": "2024-11-26T18:34:30Z",
      "updated_at": "2025-06-03T10:00:27Z",
      "closed_at": "2025-06-03T10:00:25Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/109/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/109",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/109",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:02.283198",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "New feature in progress that will allows to add more metadata https://github.com/awslabs/multi-agent-orchestrator/pull/193",
          "created_at": "2025-01-09T21:08:31Z"
        },
        {
          "author": "brnaba-aws",
          "body": "this can be tracked with #278 \nSee example here: https://awslabs.github.io/agent-squad/cookbook/monitoring/observability/#langfuse-integration-demo",
          "created_at": "2025-06-03T10:00:25Z"
        }
      ]
    },
    {
      "issue_number": 152,
      "title": "Feature request: Send Traces to Observability Frameworks",
      "body": "### Use case\r\n\r\nFor production use-cases, we need some way to send traces of the orchestrator and agents to an Observability Framework like Langfuse, so they can be visualized there nicely and combined with user feedback. \r\n\r\nRight now, it is unclear to me how this is possible. Only getting text from logs is not sufficient for debugging when a lot of users utilize the system.\r\n\r\n### Solution/User Experience\r\n\r\nNeed some kind of mechanism to write traces to external SDKs like the one from Langfuse (https://langfuse.com/docs/integrations/amazon-bedrock).\r\n\r\n### Alternative solutions\r\n\r\n_No response_",
      "state": "closed",
      "author": "maxritter",
      "author_type": "User",
      "created_at": "2024-12-12T11:00:12Z",
      "updated_at": "2025-06-03T09:59:06Z",
      "closed_at": "2025-06-03T09:59:05Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 13,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/152/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/152",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/152",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:02.569608",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @maxritter actually you can create a custom logger (or use your own) that can send the logs where you need.\r\nHave a look here https://awslabs.github.io/multi-agent-orchestrator/cookbook/monitoring/logging/\r\n\r\n",
          "created_at": "2024-12-12T14:54:35Z"
        },
        {
          "author": "maxritter",
          "body": "@cornelcroi Thanks a lot for the hint!. With that I could at least use https://github.com/kislyuk/watchtower to push those logs to Cloudwatch and then search for them with the trace information that I record via the Python SDK before / after a model invication in LangFuse (https://langfuse.com/docs/",
          "created_at": "2024-12-12T15:49:21Z"
        },
        {
          "author": "brnaba-aws",
          "body": "For observability with Bedrock Agents, we could also forward the trace to the Logger.",
          "created_at": "2024-12-12T15:51:07Z"
        },
        {
          "author": "maxritter",
          "body": "@brnaba-aws  Thanks for your help. I will try to implement this to send the input, output and reasoning steps to LangFuse like in this example from AWS (https://aws.amazon.com/de/blogs/machine-learning/accelerate-analysis-and-discovery-of-cancer-biomarkers-with-amazon-bedrock-agents/):\r\n\r\n<img width",
          "created_at": "2024-12-14T14:35:26Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Hi @maxritter \r\nPlease let us know how it goes, we might provide this as an example in our repo for others.",
          "created_at": "2024-12-18T13:17:33Z"
        }
      ]
    },
    {
      "issue_number": 291,
      "title": "Feature request: Add support for Ruff linter in Python",
      "body": "### Use case\n\n[Ruff](https://github.com/astral-sh/ruff) is an extremely fast Python linter and code formatter designed to replace multiple traditional tools like Flake8, isort, pydocstyle, and others. It's written in Rust, providing exceptional performance and comprehensive code analysis.\n\n### Why install Ruff? \n\nRuff offers some benefits:\n- Blazing fast code analysis (10-100x faster than traditional tools)\n- Automatic detection and removal of unused imports\n- Consistent code styling\n- Comprehensive static code analysis\n- Easy configuration and rule management\n- Minimal performance overhead\n\n### Initial Repository Analysis\n\nIn preliminary testing, Ruff identified **over 2,500 potential code quality issues** in this repository. This highlights significant opportunities for code improvement and standardization.\n\n\n### Solution/User Experience\n\n### Integration Approach\n1. Initial Ruff configuration\n2. Gradual error correction\n3. Incremental code quality improvements\n\n#### 1. Does this issue resonate with the project's goals? \n\nI believe Ruff can significantly improve the code quality and development workflow. What are your thoughts?\n\n#### 2. Milestone and Incremental Improvements\n\nWould you be interested in creating a milestone with multiple smaller issues to systematically address the identified problems? This approach would:\n\n- Break down complex refactoring\n- Make review processes more manageable\n- Track progress incrementally\n- Reduce cognitive load to contribute\n- Easy the adoption\n\nPlease let me know what you think\n\n### Work In Progress\n\n- [x] #302\n- [x] #304",
      "state": "closed",
      "author": "leandrodamascena",
      "author_type": "User",
      "created_at": "2025-03-31T12:56:53Z",
      "updated_at": "2025-06-03T09:57:44Z",
      "closed_at": "2025-06-03T09:57:43Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/291/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/291",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/291",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:02.862509",
      "comments": [
        {
          "author": "leandrodamascena",
          "body": "Hey @brnaba-aws! Please let me know if you agree with this PR and things that I mentioned.",
          "created_at": "2025-03-31T15:31:08Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Yes :) ",
          "created_at": "2025-03-31T15:33:12Z"
        },
        {
          "author": "leandrodamascena",
          "body": "I'll use this issue to document other issues to enable rules and format code. I'll close this when we finish the work.\n\nThe reason I'm splitting this into several issues is because some PRs will have a lot of reformatting due to imports and things like that, so, we avoid a big PR that will be hard t",
          "created_at": "2025-04-06T20:58:22Z"
        },
        {
          "author": "brnaba-aws",
          "body": "fixed",
          "created_at": "2025-06-03T09:57:43Z"
        }
      ]
    },
    {
      "issue_number": 304,
      "title": "Enable rules A & B in Ruff",
      "body": "This PR enables first rules using Ruff and refactor the code:\n\n\"A\",   # flake8-builtins - https://docs.astral.sh/ruff/rules/#flake8-builtins-a\n\"B\",   # flake8-bugbear-b - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b",
      "state": "closed",
      "author": "leandrodamascena",
      "author_type": "User",
      "created_at": "2025-04-08T10:58:31Z",
      "updated_at": "2025-06-03T09:55:39Z",
      "closed_at": "2025-06-03T09:55:38Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/304/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/304",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/304",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:03.100131",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Merged",
          "created_at": "2025-06-03T09:55:38Z"
        }
      ]
    },
    {
      "issue_number": 253,
      "title": "Bug: Cannot find module '@libsql/linux-x64-gnu'",
      "body": "### Expected Behaviour\n\nInstantiate the orchestrator in a CDK project using 0.1.5 version.\n\n### Current Behaviour\n\nCan't instantiate the orchestrator in a CDK project using 0.1.5 version. Throws a runtime exception.\n\n```\n{\n    \"errorType\": \"Runtime.ImportModuleError\",\n    \"errorMessage\": \"Error: Cannot find module '@libsql/linux-x64-gnu'\\nRequire stack:\\n- /var/task/index.js\\n- /var/runtime/index.mjs\",\n    \"stack\": [\n        \"Runtime.ImportModuleError: Error: Cannot find module '@libsql/linux-x64-gnu'\",\n        \"Require stack:\",\n        \"- /var/task/index.js\",\n        \"- /var/runtime/index.mjs\",\n        \"    at _loadUserApp (file:///var/runtime/index.mjs:1087:17)\",\n        \"    at async UserFunction.js.module.exports.load (file:///var/runtime/index.mjs:1119:21)\",\n        \"    at async start (file:///var/runtime/index.mjs:1282:23)\",\n        \"    at async file:///var/runtime/index.mjs:1288:1\"\n    ]\n}\n```\n\n### Code snippet\n\n```python\nimport { assert } from 'console';\nimport { AGENT_2_PROMPT } from '../prompts/agent2';\nimport {\n  OpenAIAgent,\n  BedrockLLMAgent,\n  MultiAgentOrchestrator,\n  DynamoDbChatStorage,\n  SupervisorAgent\n} from 'multi-agent-orchestrator';\nimport { toolDescription, toolHandler } from './my-tool';\nimport { AGENT_PROMPT } from '../prompts/agent';\n\nconst DEFAULT_OPENAI_SUMMARY_MODEL = 'gpt-4o-mini';\nconst DEFAULT_OPENAI_API_KEY = process.env.OPENAI_API_KEY!;\n\nconst TABLE_NAME = process.env.MULTI_AGENT_TABLE_NAME!;\nconst AWS_REGION = process.env.AWS_REGION!;\n\nassert(DEFAULT_OPENAI_API_KEY, 'DEFAULT_OPENAI_API_KEY is undefined');\nassert(TABLE_NAME, 'TABLE_NAME is undefined');\nassert(AWS_REGION, 'AWS_REGION is undefined');\n\nconst dynamoDbStorage = new DynamoDbChatStorage(TABLE_NAME, AWS_REGION);\n\nexport const orchestrator = new MultiAgentOrchestrator({\n  storage: dynamoDbStorage,\n  config: {\n    LOG_AGENT_CHAT: true,\n    LOG_CLASSIFIER_CHAT: true,\n    LOG_CLASSIFIER_RAW_OUTPUT: false,\n    LOG_CLASSIFIER_OUTPUT: true,\n    LOG_EXECUTION_TIMES: true\n  }\n});\n\nconst agent = new BedrockLLMAgent({\n  name: 'Agent',\n  description:\n    'Agent Description',\n  streaming: false,\n  logger: console,\n  toolConfig: {\n    useToolHandler: toolHandler,\n    tool: toolDescription,\n    toolMaxRecursions: 5\n  },\n  LOG_AGENT_DEBUG_TRACE: true\n});\nagent.setSystemPrompt(AGENT_PROMPT);\n\nconst agent2 = new OpenAIAgent({\n  name: 'Agent 2',\n  description: `Agent 2 Description`,\n  streaming: true,\n  logger: console,\n  apiKey: DEFAULT_OPENAI_API_KEY,\n  model: DEFAULT_OPENAI_SUMMARY_MODEL,\n  inferenceConfig: {\n    maxTokens: 4096\n  }\n});\nagent2.setSystemPrompt(AGENT_2_PROMPT);\n\nconst leadAgent = new BedrockLLMAgent({\n  name: 'Lead Agent',\n  description: 'Lead Agent Description.',\n  modelId: 'anthropic.claude-3-sonnet-20240229-v1:0'\n});\n\nconst supervisorAgent = new SupervisorAgent({\n  name: 'Supervisor Agent',\n  description:'Supervisor Agent Description',\n  leadAgent: leadAgent,\n  team: [agent, agent2],\n  storage: dynamoDbStorage,\n  trace: true\n});\n\n// Add supervisor agent to orchestrator\norchestrator.addAgent(supervisorAgent);\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n1. Create a CDK project using Typescript.\n2. Install the multi-agent-orchestrator, using `npm install multi-agent-orchestrator`\n3. Deploy the Lambda in AWS.\n4. Run it.",
      "state": "closed",
      "author": "joaspacce",
      "author_type": "User",
      "created_at": "2025-02-25T15:15:59Z",
      "updated_at": "2025-06-03T09:55:09Z",
      "closed_at": "2025-06-03T09:55:08Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/253/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/253",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/253",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:03.317850",
      "comments": [
        {
          "author": "joaspacce",
          "body": "Seems related to this https://github.com/tursodatabase/libsql-client-ts/issues/112",
          "created_at": "2025-02-25T20:22:48Z"
        },
        {
          "author": "fabio-vitali-docebo",
          "body": "I've downgraded to multi-agent-orchestrator `0.1.2` to temporary solve the issue",
          "created_at": "2025-04-06T14:22:23Z"
        },
        {
          "author": "ankit-joinwal-gp",
          "body": "+1",
          "created_at": "2025-04-28T09:19:11Z"
        },
        {
          "author": "IanMExtend",
          "body": "+1",
          "created_at": "2025-05-02T03:51:51Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Fixed in release 1.0.1",
          "created_at": "2025-06-03T09:55:08Z"
        }
      ]
    },
    {
      "issue_number": 350,
      "title": "Bug: SupervisorAgent not storing into DynamoDb",
      "body": "### Expected Behaviour\n\nChat Conversations between Agents team must be stored into the DynamoDB. The Team of Agents are behaving as expected but the chat conversation is not getting stored into DynamoDB\n\n### Current Behaviour\n\nThe Chat Conversation is not getting stored into DynamoDB Table\n\n### Code snippet\n\n```python\ndynamodb_storage = DynamoDbChatStorage(table_name=\"table-agentic-supervisor\", region=\"us-east-1\", ttl_key='ttl', ttl_duration=8600)\nsupervisor_agent = SupervisorAgent(SupervisorAgentOptions(\n    name= \"SupervisorAgent\",\n    description= \"You are a supervisor agent that manages the team of agents for support purposes\",\n    lead_agent=supervisor,\n    team=[first_agent, second_agent],\n    storage=dynamodb_storage,\n    trace=True,\n    save_chat=True,\n    extra_tools=custom_tools,\n    LOG_AGENT_DEBUG_TRACE=True, \n    ))\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nExecute the code and there are no entries recorded in the DynamoDb table",
      "state": "closed",
      "author": "Chandra-Ananthapatnayakuni",
      "author_type": "User",
      "created_at": "2025-05-28T17:23:05Z",
      "updated_at": "2025-05-28T17:58:54Z",
      "closed_at": "2025-05-28T17:58:54Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/350/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/350",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/350",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:03.563700",
      "comments": []
    },
    {
      "issue_number": 341,
      "title": ".lycheeignore",
      "body": "Exclude Anthropic API key URL from lychee link check (403 error fix)",
      "state": "closed",
      "author": "vittoriohalfon",
      "author_type": "User",
      "created_at": "2025-05-15T14:35:45Z",
      "updated_at": "2025-05-28T14:05:32Z",
      "closed_at": "2025-05-28T14:05:32Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/341/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/341",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/341",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:03.563721",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @vittoriohalfon \n\nCan you explain this issue. I had a look but I don't see what was the problem.\nThanks.",
          "created_at": "2025-05-20T07:55:33Z"
        }
      ]
    },
    {
      "issue_number": 344,
      "title": "Some broken links in faq doc",
      "body": "Hello,\n\nI've identified a few broken links in the documentation while exploring the Agent Squad repo. After investigating the issues, I believe I've found a solution and plan to create a PR with the necessary fixes.\n\nThe broken links I found are:\n\nAWS Lambda Integration\nCreating a Weather Agent with Custom Tools\nBuilding a Math Agent using Tools\nLogging documentation\n\nI'm looking forward to submitting my PR and helping to resolve these issues.",
      "state": "open",
      "author": "SeanGallen",
      "author_type": "User",
      "created_at": "2025-05-23T04:22:43Z",
      "updated_at": "2025-05-25T17:45:53Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/344/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/344",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/344",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:03.790349",
      "comments": [
        {
          "author": "SeanGallen",
          "body": "I found a few more while reading, so I added them to the original PR.\n\nUse the framework's agent overlap analysis\nAnthropicClassifier\nCheck out the logging section",
          "created_at": "2025-05-25T17:45:52Z"
        }
      ]
    },
    {
      "issue_number": 348,
      "title": "Bug: Documentation Issues",
      "body": "### Expected Behaviour\n\nDocumentation should be thorough and complete.\n\n### Current Behaviour\n\nPath issue\n\n### Code snippet\n\n```python\nLook at the source\n```\n\n### Possible Solution\n\nFix the path\n\n### Steps to Reproduce\n\nCross-check the documentation as per the instructions.",
      "state": "closed",
      "author": "sirrupesh",
      "author_type": "User",
      "created_at": "2025-05-25T09:49:39Z",
      "updated_at": "2025-05-25T10:22:07Z",
      "closed_at": "2025-05-25T10:22:07Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/348/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/348",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/348",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.036557",
      "comments": []
    },
    {
      "issue_number": 342,
      "title": "Minor Typos in the documentation",
      "body": "Hello,\n\nThank you for the great work on this project. While reading through the documentation, I noticed a few minor typos and a small inconsistency that I’d like to help correct.\n\nA few instances of incorrect articles (e.g., \"a\" instead of \"an\")\n\nA typo in the word \"handler\" (written as \"hanlder\")\n\nA section that mentions three classes for AgentTools, but only two are currently listed\n\nI'm creating this issue to track the changes and to open a PR with the suggested corrections. Please let me know if you'd prefer a different approach.\n\nThanks!",
      "state": "closed",
      "author": "SeanGallen",
      "author_type": "User",
      "created_at": "2025-05-18T20:42:52Z",
      "updated_at": "2025-05-22T13:38:08Z",
      "closed_at": "2025-05-20T07:55:42Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/342/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/342",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/342",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.036579",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @SeanGallen \nThis is the right process, thanks for spotting the errors and for fixing them.",
          "created_at": "2025-05-20T07:51:13Z"
        },
        {
          "author": "SeanGallen",
          "body": "Great. Thank you, @cornelcroi ",
          "created_at": "2025-05-22T13:38:06Z"
        }
      ]
    },
    {
      "issue_number": 339,
      "title": "Feature request: Add \"think\" tool capability for Anthropic and Bedrock",
      "body": "### Use case\n\nImplement Anthropic's \"think\" tool functionality to provide a dedicated space for structured thinking during complex tasks. The tool allows for better policy compliance, sequential decision making, and analysis of tool outputs.\n\nRelated #320 \n\n### Solution/User Experience\n\nBedrock Implementation\n\n```python\n# Configure reasoning parameters with a 2000 token budget\nreasoning_config = {\n    \"thinking\": {\n        \"type\": \"enabled\",\n        \"budget_tokens\": 2000\n    }\n}\n```\n\n```python\nresponse = client.converse(\n    modelId=model_id,\n    messages=conversation,\n    additionalModelRequestFields=reasoning_config\n)\n```\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "rjesh-git",
      "author_type": "User",
      "created_at": "2025-05-15T03:03:13Z",
      "updated_at": "2025-05-20T07:56:23Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/339/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 2,
        "eyes": 0
      },
      "assignees": [
        "rjesh-git"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/339",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/339",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.432844",
      "comments": []
    },
    {
      "issue_number": 299,
      "title": "Feature request: MCP Servers and Tools",
      "body": "### Use case\n\nHello, is support of MCP in your roadmap? Can you share some thoughts on this?\n\n### Solution/User Experience\n\nMany Agentic frameworks started supporting MCP\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "rmadabusi-info",
      "author_type": "User",
      "created_at": "2025-04-03T13:36:59Z",
      "updated_at": "2025-05-17T15:48:12Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/299/reactions",
        "total_count": 6,
        "+1": 5,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/299",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/299",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.432864",
      "comments": [
        {
          "author": "briananderson1222",
          "body": "I'm curious about the correlation of this blog post and the samples posted to aws-samples and this repository. It'd be cool to get this into the official repo here as this is hot off the press functionality that is going to be game changing\n\nFor reference:\n- https://aws.amazon.com/blogs/machine-lear",
          "created_at": "2025-04-12T15:53:40Z"
        },
        {
          "author": "alexbaileyxplor",
          "body": "I'm also interested in this. We are looking to break down multi-agent orchestration implementation using MCP so that our engineering teams can focus on creating the tools in the MCP server which our applications can consume through the MCP clients. Essentially separating the responsibility between t",
          "created_at": "2025-04-16T07:05:10Z"
        },
        {
          "author": "hy714335634",
          "body": "Looking forward to support MCP",
          "created_at": "2025-04-16T07:55:52Z"
        },
        {
          "author": "cornelcroi",
          "body": "We'll bring MCP support to Agent Squad soon. ",
          "created_at": "2025-05-15T09:17:47Z"
        },
        {
          "author": "cookabc",
          "body": "> We'll bring MCP support to Agent Squad soon.\n\nlooking forward",
          "created_at": "2025-05-17T15:48:11Z"
        }
      ]
    },
    {
      "issue_number": 119,
      "title": "Feature request: Agent overlap analysis script for Python",
      "body": "### Use case\n\nmulti-agent-orchestrator framework should have an agent overlap analysis script for python version.\n\n### Solution/User Experience\n\nImplement python version of [typescript agent overlap analyzer](https://github.com/awslabs/multi-agent-orchestrator/blob/main/typescript/src/agentOverlapAnalyzer.ts)\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "yortuc",
      "author_type": "User",
      "created_at": "2024-11-28T21:52:32Z",
      "updated_at": "2025-05-15T19:40:26Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "python"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/119/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/119",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/119",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.643934",
      "comments": [
        {
          "author": "RanaElwaseef21",
          "body": "Working on it",
          "created_at": "2024-12-26T14:12:54Z"
        },
        {
          "author": "cornelcroi",
          "body": "@RanaElwaseef21 any updates on this?",
          "created_at": "2025-02-04T21:22:32Z"
        },
        {
          "author": "RanaElwaseef21",
          "body": "@cornelcroi will raise PR end of this week ",
          "created_at": "2025-02-05T14:13:54Z"
        },
        {
          "author": "suraj143rosy",
          "body": "Is this completed?\n",
          "created_at": "2025-04-09T08:18:08Z"
        },
        {
          "author": "pierrehanne",
          "body": "I added the pull request to implement in python the agent overlap analysis @cornelcroi can you review it ?",
          "created_at": "2025-05-15T19:40:25Z"
        }
      ]
    },
    {
      "issue_number": 308,
      "title": "Feature request: Support 'files' type response in amazon_bedrock_agent",
      "body": "### Use case\n\n- Add capability to process and handle 'files' type responses\n- This would allow the orchestrator to work with agents that generate or manipulate files\n- Would expand the functionality of the integration with Amazon Bedrock agents\n\n\n### Solution/User Experience\n\n- Create Type definition with filename, content_type and data\n- Check 'files' in event response from Amazon Bedrock agent\n- Provide the list of files with above type defintion\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "rjesh-git",
      "author_type": "User",
      "created_at": "2025-04-16T22:55:04Z",
      "updated_at": "2025-05-13T16:11:05Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/308/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/308",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/308",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.873056",
      "comments": []
    },
    {
      "issue_number": 319,
      "title": "Feature request: Multimodal Agents",
      "body": "### Use case\n\nA vision agent for instance, to analyze files such as pdfs, as we have in the ConverseCommand using Bedrock Client direclty:\n```typescript\nnew ConverseCommand({\n      modelId: process.env.BEDROCK_MODEL_ID || 'us.anthropic.claude-3-7-sonnet-20250219-v1:0',\n      messages: [\n        {\n          role: 'user',\n          content: [\n            {\n              text: `\n                analyze this lab report document and extract the information following the format:\n                ${organizerFormat}\n\n                - Return raw JSON only without any formatting, explanation or wrapper.\n                - Do not use triple backticks, markdown code blocks, or any text before or after the JSON.\n                - if you do not have the information, return null for that field.\n                - if you have any doubts, return null for that field.\n              `,\n            },\n            {\n              document: {\n                format: DocumentFormat.PDF,\n                name: objectKey,\n                source: {\n                  bytes: object,\n                },\n              },\n            },\n          ],\n        },\n      ],\n      system: [\n        {\n          text: 'You are a document parsing assistant. You return only raw JSON without any markdown formatting, explanation, or code block syntax. Never use backticks in your response.',\n        },\n      ],\n    } as ConverseCommandInput)\n```\n\n### Solution/User Experience\n\nI would like to request the ability for the multimodal agent to integrate with external data sources, such as Amazon S3 buckets. \nThis would allow direct processing of content (images, text, audio, etc.) stored in S3, expanding the agent's applications.\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "wakeupmh",
      "author_type": "User",
      "created_at": "2025-05-06T00:37:09Z",
      "updated_at": "2025-05-13T16:10:55Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/319/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/319",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/319",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.873074",
      "comments": []
    },
    {
      "issue_number": 328,
      "title": "Feature request: Enhance Documentation Add Documentation on Agentic Pattern",
      "body": "### Use case\n\nAdd a section to the documentation explaining what the Agentic Pattern is.\nReference relevant use cases or scenarios where it can be applied.\nAdd sample of code leverage agent-squad by patterns, this would help users of the system gain a deeper understanding of the relevant patterns that could be applied when designing or analyzing agent-based systems.\n\n### Solution/User Experience\n\nAdd documentation section with Agentic Pattern name and example with agent-squad.\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2025-05-08T13:21:03Z",
      "updated_at": "2025-05-13T16:10:41Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/328/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/328",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/328",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.873081",
      "comments": []
    },
    {
      "issue_number": 335,
      "title": "Feature request: Extend agent-squad to support ollama agent",
      "body": "### Use case\n\nAdding native support for OllamaAgent and OllamaClassifier would significantly enhance the project's capabilities, enabling the development of powerful, locally hosted GenAI use cases.\n\n### Solution/User Experience\n\nExtend the agent-squad module to automatically implement the OllamaAgent and OllamaClassifier classes whenever Ollama functionality is required, ensuring seamless integration and reducing boilerplate for common GenAI tasks. Add new package agent-squad[ollama]\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2025-05-09T19:44:09Z",
      "updated_at": "2025-05-13T16:10:27Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/335/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/335",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/335",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.873085",
      "comments": []
    },
    {
      "issue_number": 268,
      "title": "Bug: Error in send_message: 'dict' object has no attribute 'content'\" From Supervisor Agent",
      "body": "### Expected Behaviour\n\nSupervisor agent successfully sends message to agent on team.\n\n### Current Behaviour\n\nAn error is generated when Supervisor Agent attempts to send message to an agent on the team when the user message is a follow-up to a previous message.\n\nScenario:\n\nUser sends message: \"hello\"\nSupervisor sends message to agent on team\nAgent on team responds with request for more info\nUser sends follow-up message with required info\nError is generated when supervisor agent attempts to send follow-up message back to agent on team\n\nLogs:\n```\n===>>>>> Supervisor sending Get Database Schema Agent: Please retrieve the schema for the identity database.\u001b[0m\"}\n{\n    \"time\": \"2025-03-12T19:23:38.323460+0000\",\n    \"application_name\": \"my_app\",\n    \"trace_id\": \"cb11e10a697c4b23a99866c6ee9599ec\",\n    \"level\": \"ERROR\",\n    \"name\": \"multi_agent_orchestrator.utils.logger\",\n    \"function\": \"error\",\n    \"line\": \"48\",\n    \"message\": \"Error in send_message: 'dict' object has no attribute 'content'\"\n}\n{\n    \"time\": \"2025-03-12T19:23:38.324014+0000\",\n    \"application_name\": \"my_app\",\n    \"trace_id\": \"cb11e10a697c4b23a99866c6ee9599ec\",\n    \"level\": \"ERROR\",\n    \"name\": \"multi_agent_orchestrator.utils.logger\",\n    \"function\": \"error\",\n    \"line\": \"48\",\n    \"message\": \"Error in send_messages: 'dict' object has no attribute 'content'\"\n}\n{\n    \"time\": \"2025-03-12T19:23:38.324193+0000\",\n    \"application_name\": \"my_app\",\n    \"trace_id\": \"cb11e10a697c4b23a99866c6ee9599ec\",\n    \"level\": \"ERROR\",\n    \"name\": \"multi_agent_orchestrator.utils.logger\",\n    \"function\": \"error\",\n    \"line\": \"48\",\n    \"message\": \"Error in process_request: 'dict' object has no attribute 'content'\"\n}\n{\n    \"time\": \"2025-03-12T19:23:38.324354+0000\",\n    \"application_name\": \"my_app\",\n    \"trace_id\": \"cb11e10a697c4b23a99866c6ee9599ec\",\n    \"level\": \"ERROR\",\n    \"name\": \"multi_agent_orchestrator.utils.logger\",\n    \"function\": \"error\",\n    \"line\": \"48\",\n    \"message\": \"Error during agent processing: 'dict' object has no attribute 'content'\"\n}\n```\n\nThe error seems to be coming from this area of the code: https://github.com/awslabs/multi-agent-orchestrator/blob/4902426dbcf45e97c90e896e01465d4a36ba9489/python/src/multi_agent_orchestrator/agents/supervisor_agent.py#L202\n\n### Code snippet\n\n```python\nAgent config:\n\n\nfrom multi_agent_orchestrator.orchestrator import (\n    MultiAgentOrchestrator,\n    OrchestratorConfig,\n)\nfrom multi_agent_orchestrator.agents import (\n    SupervisorAgent,\n    SupervisorAgentOptions,\n    BedrockLLMAgent,\n    BedrockLLMAgentOptions,\n)\nfrom multi_agent_orchestrator.utils import AgentTool, AgentTools\nfrom multi_agent_orchestrator.storage import InMemoryChatStorage\nfrom app.agents.tools import get_tenant_region_tool, fetch_database_schema_tool\nfrom loguru import logger\nimport boto3\n\nboto3_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")\n\norchestrator = MultiAgentOrchestrator(\n    OrchestratorConfig(\n        LOG_AGENT_CHAT=True,\n        LOG_CLASSIFIER_CHAT=True,\n    ),\n    storage=InMemoryChatStorage(),\n    logger=logger,\n)\n\nfind_tenant_region_tool = AgentTool(\n    name=\"find_tenant_region_tool\",\n    description=\"Get the AWS region where the tenant is hosted (e.g. us-east-1) using the tenant's hostname\",\n    properties={\n        \"host_name\": {\n            \"type\": \"string\",\n            \"description\": \"the hostname of the tenant\",\n        }\n    },\n    required=[\"host_name\"],\n    func=get_tenant_region_tool,\n)\n\nget_database_schema_tool = AgentTool(\n    name=\"get_database_schema_tool\",\n    description=\"Retrieves the schema for the specified database.\",\n    properties={\n        \"database_name\": {\n            \"type\": \"string\",\n            \"description\": \"the name of the database. Valid database names are analytics, content-management, identity, and content-distribution.\",\n        }\n    },\n    required=[\"database_name\"],\n    func=fetch_database_schema_tool,\n)\n\nget_tenant_region_agent = BedrockLLMAgent(\n    BedrockLLMAgentOptions(\n        name=\"Get Tenant Region Agent\",\n        description=\"Determines the AWS region where the tenant is hosted (e.g. us-east-1). Used when the user provides a tenant host name but not the region.\",\n        client=boto3_client,\n        model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        tool_config={\n            \"tool\": AgentTools([find_tenant_region_tool]),\n            \"toolMaxRecursions\": 1,\n        },\n    )\n)\n\norchestrator.add_agent(get_tenant_region_agent)\n\nget_database_schema_agent = BedrockLLMAgent(\n    BedrockLLMAgentOptions(\n        name=\"Get Database Schema Agent\",\n        description=\"Retrieves the schema for the desired database.\",\n        client=boto3_client,\n        model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        tool_config={\n            \"tool\": AgentTools([get_database_schema_tool]),\n            \"toolMaxRecursions\": 1,\n        },\n    )\n)\n\ndatabase_team_lead = BedrockLLMAgent(\n    BedrockLLMAgentOptions(\n        name=\"Database Team Lead\",\n        description=\"Coordinates a team of agents to retrieve data from various relational databases (e.g. MySQL, PostgreSQL) and answer user questions about the databases.\",\n        client=boto3_client,\n        model_id=\"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        inference_config={\n            \"temperature\": 0.7,\n            \"topP\": 0.9,\n        },\n    )\n)\n\nsupervisor_agent = SupervisorAgent(\n    SupervisorAgentOptions(\n        name=\"SupervisorAgent\",\n        description=\"You are a supervisor agent that manages the team of agents to answer user questions and/or execute user-provided database queries.\",\n        lead_agent=database_team_lead,\n        team=[get_database_schema_agent],\n        trace=True,\n        # storage=InMemoryChatStorage(),\n    )\n)\n\norchestrator.add_agent(supervisor_agent)\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nCreate orchestrator, supervisor agent, with a team lead agent and one additional agent on the team.\n\n```\nsupervisor_agent = SupervisorAgent(\n    SupervisorAgentOptions(\n        name=\"SupervisorAgent\",\n        description=\"You are a supervisor agent that manages the team of agents to answer user questions and/or execute user-provided database queries.\",\n        lead_agent=database_team_lead,\n        team=[get_database_schema_agent],\n        trace=True,\n        # storage=InMemoryChatStorage(),\n    )\n)\n\norchestrator.add_agent(supervisor_agent)\n```\n\nSend initial message:\n```\nawait orchestrator.route_request(slack_event[\"text\"], user_id, \"1234\"\n```\n\nMessage is processed, sent to agent on team, and returned:\n```\n===>>>>> Supervisor sending Get Database Schema Agent: Please retrieve the database schema so I can identify tables that might contain document information.\n\n\n<<<<<===Supervisor received from Get Database Schema Agent:\nI'd be happy to help you retrieve a database schema to identify tables that might contain document information. To do this, I need to know which specific database you're interested in. \nI can retrieve the schema for any of the following databases:\n- analytics\n- content-management\n- identity\n- content-distribution\nBased on your interest in document information, the \"content-management\" database might be most relevant, but I can retrieve any of these schemas for you. Which database would you lik...\u001b[0m\"}\n```\n\nUser sends follow-up message \"content-management\"\n\nError is generated. ",
      "state": "open",
      "author": "drobbins-ancile",
      "author_type": "User",
      "created_at": "2025-03-12T19:41:53Z",
      "updated_at": "2025-05-12T07:47:33Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/268/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/268",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/268",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:04.873092",
      "comments": [
        {
          "author": "d0oo0b",
          "body": "If the agent is initialized with streaming=False, there is no error. \nSo, does it mean that the supervisor agent does not support streaming?",
          "created_at": "2025-05-06T13:58:22Z"
        },
        {
          "author": "galoisgroupcn",
          "body": "@d0oo0b @drobbins-ancile @ksachdeva @ctd @lucamezzalira Here's the fix - see pull requests https://github.com/awslabs/agent-squad/pull/333. Let me know if it helps. We can iterate the code if it does not pass all the tests.",
          "created_at": "2025-05-09T08:33:59Z"
        },
        {
          "author": "brnaba-aws",
          "body": "This issue is related to the response being an async iterator and not a full response in case of streaming.\nThis has been fixed in #284 and will be released soon.",
          "created_at": "2025-05-12T07:47:31Z"
        }
      ]
    },
    {
      "issue_number": 284,
      "title": "Feature request: Add support for observability",
      "body": "### Use case\n\nProvide a mechanism to track token usage\n\n### Solution/User Experience\n\nProvide callbacks to keep track of LLM and more broader to Agent processing\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2025-03-27T14:36:41Z",
      "updated_at": "2025-05-12T07:44:40Z",
      "closed_at": "2025-05-12T07:44:40Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/284/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/284",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/284",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.183009",
      "comments": []
    },
    {
      "issue_number": 252,
      "title": "Bug: Handling Streaming with SupervisorAgent and TeamMember",
      "body": "### Expected Behaviour\n\nI have created an AWS Lambda function using Node.js to enable native streaming responses. The Lambda function leverages an AgentSupervisor composed of multiple BedrockLLMAgent instances.\n\n- The AgentSupervisor is built using BedrockLLMAgent (Claude 3.5 Sonnet).\n- It manages a team of BedrockLLMAgents (Claude 3 Haiku).\n- Streaming is explicitly set to true for all agents.\n\nThe SupervisorAgent should return a streaming response as its underlying agents are all configured for streaming.\n\n### Current Behaviour\n\nDespite enabling streaming for all agents, I expect the SupervisorAgent to return a streaming response, but it does not appear to work as expected.\n\n\"error\": \"Error getting stream from Bedrock model: this.toolConfig.useToolHandler is not a function\",\n\"stack\": \"Error: Error getting stream from Bedrock model: this.toolConfig.useToolHandler is not a function\\n    at MultiAgentOrchestrator.processStreamInBackground (/opt/nodejs/node_modules/multi-agent-orchestrator/dist/orchestrator.js:222:46)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\"\n\n### Code snippet\n\n```python\n// Create orchestrator\nconst orchestrator = new MultiAgentOrchestrator();\n\n// Create supervisor (lead agent)\nconst supervisor = new BedrockLLMAgent({\n  name: \"Team Lead\",\n  description: \"Coordinates specialized team members\",\n  modelId: \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n  streaming: true\n});\n\n// Create team members\nconst techAgent = new BedrockLLMAgent({\n  name: \"Tech Support\",\n  description: \"Handles technical issues\",\n  modelId: \"anthropic.claude-3-haiku-20240307-v1:0\",\n  streaming: true\n});\n\nconst billingAgent = new BedrockLLMAgent({\n  name: \"Billing Expert\",\n  description: \"Handles billing and payment queries\",\n  modelId: \"anthropic.claude-3-haiku-20240307-v1:0\",\n  streaming: true\n});\n\n// Create SupervisorAgent\nconst supervisorAgent = new SupervisorAgent({\n  leadAgent: supervisor,\n  team: [techAgent, billingAgent],\n});\n\n// Add supervisor agent to orchestrator\norchestrator.addAgent(supervisorAgent);\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n1. Create an AWS Lambda function using Node.js.\n2. Implement an AgentSupervisor composed of BedrockLLMAgent agents.\n3. Set the streaming configuration to true for all agents.\n4. Invoke the SupervisorAgent and observe the response behavior.",
      "state": "open",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2025-02-25T14:03:49Z",
      "updated_at": "2025-05-09T20:38:26Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/252/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/252",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/252",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.183031",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Thanks for your issue. This is going to be fixed in #278 ",
          "created_at": "2025-04-03T12:28:16Z"
        },
        {
          "author": "SaqibInTech",
          "body": "Any update on this?  i am still getting the same error in Typescript package\n\n![Image](https://github.com/user-attachments/assets/7b524312-3bc2-4441-8efc-169b9c93f095)",
          "created_at": "2025-05-09T20:33:57Z"
        }
      ]
    },
    {
      "issue_number": 329,
      "title": "Documentation for supervisorAgent.processRequest is missing the mandatory chatHistory argument, leading to errors.",
      "body": "### Expected Behaviour\n\nThe documentation for supervisorAgent.processRequest should accurately reflect the method's required parameters. The example code provided in the documentation should be runnable and not cause errors when used as described. Specifically, all mandatory arguments should be present in the example.\n\n### Current Behaviour\n\nThe current documentation for the supervisorAgent.processRequest method, found [here](https://awslabs.github.io/agent-squad/agents/built-in/supervisor-agent/#:~:text=const%20response%20%3D%20await%20supervisorAgent.processRequest), shows the following example:\n\n```\nconst response = await supervisorAgent.processRequest(\n  \"I need to modify my flight and check my refund status\",\n  \"user123\",\n  \"session456\"\n);\n```\n\nThis example is missing the fourth mandatory argument, chatHistory. When attempting to use the method as documented, it results in the following error:\n\n```\nError processing request: chatHistory is not iterable\nError in processRequest: Error processing request: chatHistory is not iterable\nError processing request: Error processing request: chatHistory is not iterable\n\n```\nThis is because the actual implementation of processRequest in the package is:\n\n```\nasync processRequest(inputText, userId, sessionId, chatHistory, additionalParams) {\n    // ... implementation details\n}\n\n```\nAs seen, `chatHistory` is a distinct parameter.\n\n### Code snippet\n\n```python\nconst response = await supervisorAgent.processRequest(\n   \"I need to modify my flight and check my refund status\",\n   \"user123\",\n   \"session456\"\n);\n```\n\n### Possible Solution\n\nUpdate the documentation to include the `chatHistory` argument in the method signature for `supervisorAgent.processRequest`.\n\nModify the example code in the documentation to include the `chatHistory` argument. For instance, if an empty array is a valid default or starting point for `chatHistory`, the example could be:\n\n```\nconst response = await supervisorAgent.processRequest(\n  \"I need to modify my flight and check my refund status\",\n  \"user123\",\n  \"session456\",\n  [] //  an empty array as chatHistory\n);\n```\n\nOr, provide guidance on what `chatHistory` should typically contain or how it should be initialized.\n\n### Steps to Reproduce\n\n1. Go to the official documentation page for the Supervisor Agent: https://awslabs.github.io/agent-squad/agents/built-in/supervisor-agent/\n2. Locate the example code for supervisorAgent.processRequest.\n3. Implement and run this example code in a project where the agent-squad package is installed and the supervisorAgent is initialized.\n4. Observe that the code throws an \"Error processing request: chatHistory is not iterable\" because the chatHistory argument is not provided in the example, but is expected by the method.\n5. Compare the documented example with the method signature in the actual source code of agent-squad/src/agents/supervisor-agent.ts (or the compiled JavaScript equivalent).",
      "state": "open",
      "author": "PPraneesh",
      "author_type": "User",
      "created_at": "2025-05-08T14:25:05Z",
      "updated_at": "2025-05-09T11:10:38Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/329/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/329",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/329",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.496148",
      "comments": []
    },
    {
      "issue_number": 207,
      "title": "Bug: Additional Parameters are not being passed on to agent handler method",
      "body": "### Expected Behaviour\n\nOrchestrator routeRequest() method has four parameters:` _userInput: string, userId: string, sessionId: string, additionalParams?: Record<string, string>_`\n\nBut in the toolHandler method invoked by inbuilt agents, only two arguments are being passed: The below snippet is from Anthropic agent.\n\nProcess request method of the agent signature:\n` _async processRequest(inputText, userId, sessionId, chatHistory, _additionalParams) {_`\n\nAnd tool invocation is being done as given below:\n\n_`const toolResponse = await this.toolConfig.useToolHandler(response, messages);`_\n\nAdditionalParams passed on to processRequest method is not being passed on to the toolHandler. This should be passedon, to allow additional logic to be executed in the handler\n\n### Current Behaviour\n\nAdditionalParams are not being passed on the tool handler by the agent. \n\n### Code snippet\n\n```python\nawait orchestrator.routeRequest(request.query, request.user, request.user ,request);\nCreate new Anthropic Agent:\nexport const MasterAgent = new AnthropicAgent({...,\ntoolConfig: {\n        useToolHandler: createAgentHandler,\n        tool: createAgentToolDescription,\n        toolMaxRecursions: 5\n    },})\n\nAnd handler method:\nasync function createAgentlHandler(response, conversation){}\nFourth param passed on to routerequest method got dropped in between\n```\n\n### Possible Solution\n\nPass the additionalParams as well, as extra parameter to the tool handler method\n\n_`const toolResponse = await this.toolConfig.useToolHandler(response, messages,_additionalParams );`_\n\n### Steps to Reproduce\n\n1. create a new anthropic agent\n2. add new handler method to the agent\n3. route request with orchestrator and pass four params, with fourth one being the additional params\n4. Expected the additional params to be available in the tool handler method",
      "state": "open",
      "author": "shabin5785",
      "author_type": "User",
      "created_at": "2025-01-21T08:15:32Z",
      "updated_at": "2025-05-09T08:51:38Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/207/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/207",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/207",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.496165",
      "comments": [
        {
          "author": "galoisgroupcn",
          "body": "@shabin5785 @ksachdeva @ctd @lucamezzalira @jveldboom Here's my fix - let me know if it helps. Thanks! If it does not pass all the test, we can iterate the code till it passes all tests. https://github.com/galoisgroupcn/agent-squad/pull/2",
          "created_at": "2025-05-09T08:51:37Z"
        }
      ]
    },
    {
      "issue_number": 331,
      "title": "Tutanota",
      "body": null,
      "state": "closed",
      "author": "Sancho869",
      "author_type": "User",
      "created_at": "2025-05-09T04:36:16Z",
      "updated_at": "2025-05-09T06:38:41Z",
      "closed_at": "2025-05-09T06:38:41Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/331/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 1,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/331",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/331",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.779331",
      "comments": []
    },
    {
      "issue_number": 254,
      "title": "Bug: Supervisor Agent Name/Desc",
      "body": "### Expected Behaviour\n\nSupervisor agent shouldnt expect a name and description\n\n### Current Behaviour\n\nSupervisor takes name and description, but overwrites them with the lead agents.\n\n### Code snippet\n\n```python\ndef __init__(self, options: SupervisorAgentOptions):\n        options.validate()\n        options.name = options.lead_agent.name\n        options.description = options.lead_agent.description\n```\n\n### Possible Solution\n\nMake name/desc optional.\n\n### Steps to Reproduce\n\nSupply supervisor with agent name and desc and see it replaced with lead agents.",
      "state": "open",
      "author": "brianantonelli",
      "author_type": "User",
      "created_at": "2025-02-25T17:17:10Z",
      "updated_at": "2025-05-08T14:59:01Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/254/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/254",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/254",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:05.779352",
      "comments": [
        {
          "author": "Vinay-Khanagavi",
          "body": "Make name and description optional in SupervisorAgentOptions\nDo not overwrite name/description in SupervisorAgent if provided; only default to lead_agent’s values if not set.\nAllows custom naming/description for supervisor agent without being replaced by lead agent’s values.\nResolves issue where sup",
          "created_at": "2025-05-08T14:59:00Z"
        }
      ]
    },
    {
      "issue_number": 322,
      "title": "Feature request: Integration with the evaluation frameworks",
      "body": "### Use case\n\nHey Guys,\n\nI would like to evaluate an agent. I didn't find the documentation for this, however I believe you have already some preferred approaches for this. I would like to adapt the solution to the AWS suggested and more important supported approach.\n\n### Solution/User Experience\n\nWhat is the preferred approach do you suggest to evaluate the agents?\n\nDo you have plans to integrate some evaluation framework like deepeval, ragas or lagfuse (additional tracing)?\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "closed",
      "author": "ystarikovich",
      "author_type": "User",
      "created_at": "2025-05-06T11:45:10Z",
      "updated_at": "2025-05-07T20:29:01Z",
      "closed_at": "2025-05-07T20:29:00Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/322/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/322",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/322",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.041811",
      "comments": [
        {
          "author": "ystarikovich",
          "body": "Closing the issue. Found the respective thread with the exactly langfuse discussion - https://github.com/awslabs/agent-squad/issues/152",
          "created_at": "2025-05-07T20:29:00Z"
        }
      ]
    },
    {
      "issue_number": 311,
      "title": "Agent Tools and Agent Tool is Missing from the exported functions of \"multi-agent-orchestrator\"",
      "body": "### Expected Behaviour\n\nThe import of AgentTool and AgentTools should be happening via \n\nimport { SupervisorAgent, BedrockLLMAgent, AgentTool, AgentTools } from \"multi-agent-orchestrator\" -- refer the complete example over the [repo website](https://awslabs.github.io/multi-agent-orchestrator/agents/built-in/supervisor-agent/#complete-example). \n\n### Current Behaviour\n\nNow it says: \n\nModule '\"multi-agent-orchestrator\"' has no exported member 'AgentTool'.ts(2305)\nModule '\"multi-agent-orchestrator\"' has no exported member 'AgentTools'.ts(2305)\n\n\n\n\n### Code snippet\n\n```python\nimport { SupervisorAgent, BedrockLLMAgent, AgentTool, AgentTools } from \"multi-agent-orchestrator\"\n\n\n// use it in \"ts\"\n```\n\n### Possible Solution\n\n`export {AgentTool, AgentTools} from \"./utils/tool\"`\n\n\n// inside dist/index\n\n### Steps to Reproduce\n\n// Just add the into the import\n\nimport { SupervisorAgent, BedrockLLMAgent, AgentTool, AgentTools } from \"multi-agent-orchestrator\"\n\n",
      "state": "closed",
      "author": "Sreenivas1323",
      "author_type": "User",
      "created_at": "2025-05-03T18:17:13Z",
      "updated_at": "2025-05-07T13:55:44Z",
      "closed_at": "2025-05-07T13:55:44Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/311/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/311",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/311",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.273381",
      "comments": []
    },
    {
      "issue_number": 323,
      "title": "Feature request: Add Chroma Retrieval",
      "body": "### Use case\n\nChroma is the most popular retrieval solution that runs anywhere easily! \n\nWould love to help get this out to better serve the community \n\n### Solution/User Experience\n\nImplement across python and JS\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "jeffchuber",
      "author_type": "User",
      "created_at": "2025-05-06T18:50:47Z",
      "updated_at": "2025-05-07T02:59:58Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/323/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/323",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/323",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.273404",
      "comments": [
        {
          "author": "ailunc",
          "body": "Hi! @jeffchuber \nI tried to add this function in my PR.\nI've written several test cases, and it looks working well.\nFeel free to try it out, and if any problems, comment to let me know!",
          "created_at": "2025-05-07T02:59:57Z"
        }
      ]
    },
    {
      "issue_number": 320,
      "title": "Feature request: Reasoning Tools",
      "body": "### Use case\n\nGive analyze and thinking for every model\n\n### Solution/User Experience\n\nI would like something like Agno Reasoning tools and VoltAgent thinking and analyze tools\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "wakeupmh",
      "author_type": "User",
      "created_at": "2025-05-06T01:07:12Z",
      "updated_at": "2025-05-06T01:07:23Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/320/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/320",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/320",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.482707",
      "comments": []
    },
    {
      "issue_number": 276,
      "title": "Model Id is ignored for BedrockLLMAgent",
      "body": "### Expected Behaviour\n\n    model_id is respected in the code given below.\n\nfootball_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"Football Insights Agent\",\n    description=\"Expert in football analysis, covering team strategies, player stats, match predictions, and historical comparisons.\",\n    model_id=\"apac.anthropic.claude-3-5-sonnet-20241022-v2:0\",    \n    callbacks=BedrockLLMAgentCallbacks()\n))\n\n### Current Behaviour\n\nModel id is ignored and shows the following error.\n\nERROR:multi_agent_orchestrator.utils.logger:Error processing request:An error occurred (ValidationException) when calling the Converse operation: Invocation of model ID anthropic.claude-3-5-sonnet-20240620-v1:0 with on-demand throughput isn’t supported. Retry your request with the ID or ARN of an inference profile that contains this model.\n\n### Code snippet\n\n```python\nimport uuid\nimport asyncio\nimport sys\n\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\nfrom multi_agent_orchestrator.agents import (BedrockLLMAgent,\n BedrockLLMAgentOptions,\n AgentResponse,\n AgentCallbacks)\n\norchestrator = MultiAgentOrchestrator(options=OrchestratorConfig(\n  LOG_AGENT_CHAT=True,\n  LOG_CLASSIFIER_CHAT=True,\n  LOG_CLASSIFIER_RAW_OUTPUT=True,\n  LOG_CLASSIFIER_OUTPUT=True,\n  LOG_EXECUTION_TIMES=True,\n  MAX_RETRIES=3,\n  MAX_MESSAGE_PAIRS_PER_AGENT=10,\n  USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True\n))\n\nclass BedrockLLMAgentCallbacks(AgentCallbacks):\n    def on_llm_new_token(self, token: str) -> None:\n        print(token, end='', flush=True)\n\nfootball_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"Football Insights Agent\",\n    description=\"Expert in football analysis, covering team strategies, player stats, match predictions, and historical comparisons.\",\n    model_id=\"apac.anthropic.claude-3-5-sonnet-20241022-v2:0\",    \n    callbacks=BedrockLLMAgentCallbacks()\n))\norchestrator.add_agent(football_agent)\n\nasync def handle_request(_orchestrator: MultiAgentOrchestrator, _user_input: str, _user_id: str, _session_id: str):\n    response: AgentResponse = await _orchestrator.route_request(_user_input, _user_id, _session_id)\n    \n    print(\"\\nMetadata:\")\n    print(f\"Selected Agent: {response.metadata.agent_name}\")\n    if response.streaming:\n        print('Response:', response.output.content[0]['text'])\n    else:\n        print('Response:', response.output.content[0]['text'])\n\nif __name__ == \"__main__\":\n    USER_ID = \"user123\"\n    SESSION_ID = str(uuid.uuid4())\n    print(\"Welcome to the interactive Multi-Agent system. Type 'quit' to exit.\")\n    while True:\n        # Get user input\n        user_input = input(\"\\nYou: \").strip()\n        if user_input.lower() == 'quit':\n            print(\"Exiting the program. Goodbye!\")\n            sys.exit()\n        # Run the async function        \n        asyncio.run(handle_request(orchestrator, user_input, USER_ID, SESSION_ID))\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nCan't run the above code with or without model_id specified.",
      "state": "closed",
      "author": "riponbanik",
      "author_type": "User",
      "created_at": "2025-03-24T22:13:17Z",
      "updated_at": "2025-04-30T03:24:08Z",
      "closed_at": "2025-03-25T07:55:28Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/276/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/276",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/276",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.482727",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @riponbanik \nFor this model you need to use the cross region modelid.If you go into your account under Bedrock/model access it should say this next to this model.",
          "created_at": "2025-03-25T07:55:28Z"
        },
        {
          "author": "riponbanik",
          "body": "@cornelcroi I used the cross-region model id, that is why you can it has prefix - apac\n\nmodel_id=\"apac.anthropic.claude-3-5-sonnet-20241022-v2:0\",   \n\n",
          "created_at": "2025-03-25T18:27:18Z"
        },
        {
          "author": "cornelcroi",
          "body": "The default model used is `BEDROCK_MODEL_ID_CLAUDE_3_HAIKU = \"anthropic.claude-3-haiku-20240307-v1:0\"`\nIn your case the error is on `claude-3-5-sonnet` so I would say you might be having an issue on your account.\nYou need to make sure the model is enable in your region but also in the source region.",
          "created_at": "2025-03-25T18:39:30Z"
        },
        {
          "author": "riponbanik",
          "body": "@cornelcroi I have enabled the model and tried with inference id apac.anthropic.claude-3-5-sonnet-20240620-v1:0 but still the same issue.",
          "created_at": "2025-04-30T03:24:07Z"
        }
      ]
    },
    {
      "issue_number": 302,
      "title": "Install Ruff and add a new step in the pipeline",
      "body": "Install Ruff and configure the pipeline.",
      "state": "closed",
      "author": "leandrodamascena",
      "author_type": "User",
      "created_at": "2025-04-06T20:35:44Z",
      "updated_at": "2025-04-08T10:23:45Z",
      "closed_at": "2025-04-08T10:23:45Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/302/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/302",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/302",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.732574",
      "comments": []
    },
    {
      "issue_number": 300,
      "title": "Feature request: Enhance KnowledgeBaseRetriever with RetrieveAndGenerateStream",
      "body": "### Use case\n\nLeverage streaming retriever option to ensure faster retrieval.\n\n### Solution/User Experience\n\nUsing RetrieveAndGenerateStream from https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerateStream.html\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2025-04-03T19:34:24Z",
      "updated_at": "2025-04-03T19:34:37Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/300/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/300",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/300",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.732598",
      "comments": []
    },
    {
      "issue_number": 263,
      "title": "Bug: Group action default",
      "body": "### Expected Behaviour\n\nI try to define action function for Bedrock agent, by selecting already working lambda function, all permissions set, and when it goes to business logic specification, after updating json file in console, when I close it, its back to default implementation.\n\n### Current Behaviour\n\nUnfortunately, as of this writing, the Bedrock “create_agent_action_group” API does not expose a direct way to attach a detailed \"implementation\" block (the way I try to do in the console’s JSON Editor). Instead, the API provides two higher-level ways to define your action group:\n\nfunctionSchema – A simpler approach that merely declares function names, parameters, and descriptions.\napiSchema – A more advanced approach that can reference an OpenAPI specification for your Lambda or API Gateway.\nNeither of these currently allows to pass the exact JSON snippet:\n\njson\nCopy\nEdit\n\"implementation\": {\n  \"type\": \"Lambda\",\n  \"lambdaArn\": \"...\",\n  \"input\": {\n    ...\n  }\n}\n…which I see in the Bedrock Console JSON Editor. The console is effectively doing extra steps behind the scenes when I use  function details.\n\n### Code snippet\n\n```python\n# I can provide on request\nAmazon Bedrock Console\n```\n\n### Possible Solution\n\nNo idea\n\n### Steps to Reproduce\n\nAs described above",
      "state": "closed",
      "author": "Jacck",
      "author_type": "User",
      "created_at": "2025-03-02T17:35:31Z",
      "updated_at": "2025-04-03T14:52:06Z",
      "closed_at": "2025-04-03T14:52:05Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/263/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/263",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/263",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.732605",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Closing as related to Amazon Bedrock Agent configuration which is not was we support in the framework.",
          "created_at": "2025-04-03T14:52:05Z"
        }
      ]
    },
    {
      "issue_number": 140,
      "title": "Bug: TypeScript version does not support async encoders for AWS Lambda agents",
      "body": "### Expected Behaviour\n\nI can use promises or async functions when defining a custom encoder or custom decoder for AWS Lambda Agents. For example, I can use Bedrock to constrain the user input to JSON, or make use of APIs to adjust or hydrate my input.\n\n### Current Behaviour\n\nError during agent dispatch: TypeError [ERR_INVALID_ARG_TYPE]: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received an instance of Promise\r\n    at Function.from (node:buffer:322:9)\r\n    at writeBody (/home/ec2-user/REDACTED/node_modules/@smithy/node-http-handler/dist-cjs/index.js:189:28)\r\n    at writeRequestBody (/home/ec2-user/REDACTED/node_modules/@smithy/node-http-handler/dist-cjs/index.js:170:5)\r\n    at /home/ec2-user/REDACTED/node_modules/@smithy/node-http-handler/dist-cjs/index.js:399:33\r\n    at new Promise (<anonymous>)\r\n    at _NodeHttpHandler.handle (/home/ec2-user/REDACTED/node_modules/@smithy/node-http-handler/dist-cjs/index.js:289:12)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\r\n    at async /home/ec2-user/REDACTED/node_modules/@smithy/middleware-serde/dist-cjs/index.js:33:24\r\n    at async /home/ec2-user/REDACTED/node_modules/@smithy/core/dist-cjs/index.js:168:18\r\n    at async /home/ec2-user/REDACTED/node_modules/@smithy/middleware-retry/dist-cjs/index.js:320:38 {\r\n  code: 'ERR_INVALID_ARG_TYPE',\r\n  '$metadata': { attempts: 1, totalRetryDelay: 0 }\r\n}\n\n### Code snippet\n\n```python\nimport { MultiAgentOrchestrator, BedrockLLMAgent, LambdaAgent } from \"multi-agent-orchestrator\";\r\nimport { BedrockRuntimeClient, InvokeModelCommand } from \"@aws-sdk/client-bedrock-runtime\";\r\n\r\nconst encodingPrompt = `user input needs to be returned as a JSON object in the format\r\n{\"property\":\"value\"}. RESPOND ONLY WITH JSON\r\n`;\r\n\r\nasync function encodeUserInput(userInput) {\r\n    // Initialize the Bedrock client\r\n    const bedrockClient = new BedrockRuntimeClient({\r\n        region: \"us-east-1\" // or your preferred region\r\n    });\r\n\r\n    // Construct the full prompt\r\n    const fullPrompt = encodingPrompt + userInput;\r\n\r\n    // Prepare the request body for Claude\r\n    const body = {\r\n        anthropic_version: \"bedrock-2023-05-31\",\r\n        max_tokens: 1000,\r\n        messages: [\r\n            {\r\n                role: \"user\",\r\n                content: fullPrompt\r\n            }\r\n        ]\r\n    };\r\n\r\n    try {\r\n        // Create the command\r\n        const command = new InvokeModelCommand({\r\n            modelId: \"anthropic.claude-3-sonnet-20240229-v1:0\", // Claude 3 Sonnet model ID\r\n            body: JSON.stringify(body),\r\n            contentType: \"application/json\",\r\n            accept: \"application/json\",\r\n        });\r\n\r\n        // Invoke the model\r\n        const response = await bedrockClient.send(command);\r\n\r\n        // Parse the response\r\n        const responseBody = JSON.parse(new TextDecoder().decode(response.body));\r\n        \r\n        // Extract the response content\r\n        const result = responseBody?.content[0]?.text || \"\";\r\n\r\n        // Parse the JSON response\r\n        return JSON.parse(result);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error invoking Bedrock:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst myCustomInputPayloadEncoder = async (input, chatHistory, userId, sessionId, additionalParams) => {\r\n  const encoded = await encodeUserInput(input);\r\n  return JSON.stringify({\r\n    userQuestion: input,\r\n    myCustomField: \"Hello world!\",\r\n    history: chatHistory,\r\n    user: userId,\r\n    session: sessionId,\r\n    intent:encoded.intent,\r\n    prompt: encoded.prompt,\r\n    text: encoded.text,\r\n    ...additionalParams\r\n  });\r\n};\r\n\r\nconst options = {\r\n  name: 'Custom Lambda Agent',\r\n  description: 'An agent making use of lambda functions but requiring some interpretation of user input',\r\n  functionName: 'MyLambdaFunctionName',\r\n  functionRegion: 'us-east-1',\r\n  inputPayloadEncoder: myCustomInputPayloadEncoder,\r\n  outputPayloadDecoder: myCustomOutputPayloadDecoder\r\n};\r\n\r\n\r\nconst CustomLambdaAgent = new LambdaAgent(options);\r\n\r\nconst orchestrator = new MultiAgentOrchestrator();\r\n\r\norchestrator.addAgent(CustomLambdaAgent);\r\n\r\nconst response = await orchestrator.routeRequest(\r\n  \"I want to know more about how to cook lasagna \",\r\n  'user123',\r\n  'session456'\r\n);\r\n\r\n\r\n// Handle the response (streaming or non-streaming)\r\nif (response.streaming == true) {\r\n    console.log(\"\\n** RESPONSE STREAMING ** \\n\");\r\n    // Send metadata immediately\r\n    console.log(`> Agent ID: ${response.metadata.agentId}`);\r\n    console.log(`> Agent Name: ${response.metadata.agentName}`);\r\n    console.log(`> User Input: ${response.metadata.userInput}`);\r\n    console.log(`> User ID: ${response.metadata.userId}`);\r\n    console.log(`> Session ID: ${response.metadata.sessionId}`);\r\n    console.log(\r\n      `> Additional Parameters:`,\r\n      response.metadata.additionalParams\r\n    );\r\n    console.log(`\\n> Response: `);\r\n\r\n    // Stream the content\r\n    for await (const chunk of response.output) {\r\n      if (typeof chunk === \"string\") {\r\n        process.stdout.write(chunk);\r\n      } else {\r\n        console.error(\"Received unexpected chunk type:\", typeof chunk);\r\n      }\r\n    }\r\n\r\n} else {\r\n    // Handle non-streaming response (AgentProcessingResult)\r\n    console.log(\"\\n** RESPONSE ** \\n\");\r\n    console.log(`> Agent ID: ${response.metadata.agentId}`);\r\n    console.log(`> Agent Name: ${response.metadata.agentName}`);\r\n    console.log(`> User Input: ${response.metadata.userInput}`);\r\n    console.log(`> User ID: ${response.metadata.userId}`);\r\n    console.log(`> Session ID: ${response.metadata.sessionId}`);\r\n    console.log(\r\n      `> Additional Parameters:`,\r\n      response.metadata.additionalParams\r\n    );\r\n    console.log(`\\n> Response: ${response.output}`);\r\n}\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nrunning the code above should be enough.",
      "state": "closed",
      "author": "giusedroid",
      "author_type": "User",
      "created_at": "2024-12-04T23:54:17Z",
      "updated_at": "2025-04-03T12:57:07Z",
      "closed_at": "2025-04-03T12:57:07Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/140/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/140",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/140",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:06.925735",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "@giusedroid , please have a look at #297 \nThanks :) ",
          "created_at": "2025-04-03T10:29:14Z"
        }
      ]
    },
    {
      "issue_number": 259,
      "title": "Feature request: Add support for Claude 3.7 Sonnet thinking mode configuration in BedrockLLMAgent",
      "body": "### Use case\n\nClaude 3.7 Sonnet introduces a dual-mode capability that combines standard LLM responses with an enhanced reasoning mode. In extended thinking mode, the model performs self-reflection before answering, which significantly improves its performance on complex tasks.\n\nFor the Multi-Agent Orchestrator, we want to enable this reasoning capability specifically for supervisor agents to better break down and coordinate complex tasks across multiple specialized agents. Currently, the BedrockLLMAgent class doesn't support configuring this feature through its options.\n\n### Solution/User Experience\n\n1. Extend BedrockLLMAgentOptions to include thinking mode configuration:\n```python\n@dataclass\nclass BedrockLLMAgentOptions(AgentOptions):\n    # ... existing fields ...\n    thinking_config: Optional[dict[str, Any]] = None  # New field for thinking mode\n```\n\n2. Update the process_request method to include thinking configuration in the converse command:\n```python\nasync def process_request(self, ...):\n    converse_cmd = {\n        'modelId': self.model_id,\n        'messages': conversation_to_dict(conversation),\n        'system': [{'text': system_prompt}],\n        'inferenceConfig': {\n            # ... existing inference config ...\n        }\n    }\n    \n    # Add thinking configuration if specified\n    if self.thinking_config:\n        converse_cmd[\"additionalModelRequestFields\"] = {\n            \"thinking\": self.thinking_config\n        }\n```\n\n3. Example usage:\n```python\nagent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"ReasoningAgent\",\n    description=\"An agent that shows its reasoning\",\n    thinking_config={\n        \"type\": \"enabled\",\n        \"budget_tokens\": 2000\n    }\n))\n```\n\n4. Add support in handle_single_response and handle_streaming_response to process and return thinking content when available.\n\nThis enhancement would allow developers to optionally enable and configure the thinking mode when needed, while maintaining backward compatibility with existing implementations.\n\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "astoloff19",
      "author_type": "User",
      "created_at": "2025-02-26T18:33:54Z",
      "updated_at": "2025-04-03T12:29:14Z",
      "closed_at": null,
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/259/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/259",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/259",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:07.132241",
      "comments": [
        {
          "author": "raghavgrover13",
          "body": "This is indeed a very important feature to add especially with Agentic AI systems, we are building production grade systems with this framework and if this feature can be prioritized it would be of great help. ",
          "created_at": "2025-03-09T18:05:40Z"
        },
        {
          "author": "rmadabusi-info",
          "body": "> This is indeed a very important feature to add especially with Agentic AI systems, we are building production grade systems with this framework and if this feature can be prioritized it would be of great help.\n\nHello @raghavgrover13 , I'm very curious to know more about your statement of using thi",
          "created_at": "2025-03-12T13:53:44Z"
        },
        {
          "author": "raghavgrover13",
          "body": "> > This is indeed a very important feature to add especially with Agentic AI systems, we are building production grade systems with this framework and if this feature can be prioritized it would be of great help.\n> \n> Hello [@raghavgrover13](https://github.com/raghavgrover13) , I'm very curious to ",
          "created_at": "2025-04-03T11:47:53Z"
        },
        {
          "author": "raghavgrover13",
          "body": "If anyone can work on this, it would be great. Supervisor or agent having thinking mode with 3.7 sonnet wud be amazing for some tough scenarios. ",
          "created_at": "2025-04-03T11:49:21Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Thanks for raising this, we will start working on it.",
          "created_at": "2025-04-03T12:29:13Z"
        }
      ]
    },
    {
      "issue_number": 283,
      "title": "Feature request: Create a compressive contribute guide for Python developers",
      "body": "### Use case\n\nWhen contributing to open-source projects, developers often face initial challenges. This issue aims to address common questions and provide a clear path for new contributors.\n\n**New developers often ask:**\n\n1. What dependencies are required?\n2. Which project/package manager does this project use?\n3. Are pre-commit hooks necessary?\n4. How can I format my code to meet project standards?\n\n**This issue aims to:**\n\n- Explain how to set up a suitable development environment\n- Guide contributors in making code modifications\n- Ensure things are in order before sending pull requests that meet project requirements\n\n\n### Solution/User Experience\n\nCreate a contribute guide for Python.\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "closed",
      "author": "leandrodamascena",
      "author_type": "User",
      "created_at": "2025-03-27T09:04:30Z",
      "updated_at": "2025-03-31T12:42:26Z",
      "closed_at": "2025-03-31T12:42:26Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/283/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/283",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/283",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:07.334760",
      "comments": [
        {
          "author": "leandrodamascena",
          "body": "Hey @brnaba-aws please let me know if it make sense and I'm happy to send a PR to improve this.",
          "created_at": "2025-03-27T09:05:19Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@leandrodamascena yes it does. Thanks",
          "created_at": "2025-03-27T09:26:34Z"
        }
      ]
    },
    {
      "issue_number": 285,
      "title": "Feature request: Add custom user agent in TS",
      "body": "### Use case\n\nNone\n\n### Solution/User Experience\n\nnone\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2025-03-28T12:59:46Z",
      "updated_at": "2025-03-28T13:02:12Z",
      "closed_at": "2025-03-28T13:02:11Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/285/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/285",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/285",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:07.583266",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "fixed in #286 ",
          "created_at": "2025-03-28T13:02:01Z"
        }
      ]
    },
    {
      "issue_number": 231,
      "title": "Bug: bedrockLLMAgent, streaming tool use, multiple tool_use objects can't be JSON.parse()'d",
      "body": "### Expected Behaviour\n\nIf a tool is used multiple times by a bedrockLLMAgent to answer a query, and the agent is in streaming mode, I'd expect everything to proceed well.\n\n### Current Behaviour\n\nIf a tool is used more than once in streaming mode (tried with both Nova Pro and Claude 3.5), multiple objects arrive in bedrockLLMAgent.handleStreamingResponse, like this:\n\n{\"city\":\"los angeles\",\"job_title\":\"accounting\"}{\"city\":\"los angeles\",\"building\":\"32\"}\n\nIn these cases, the line in handleStreamingResponse which parses it, always fails:\n\ntoolBlock.input = JSON.parse(inputString)\n\nThe BedrockLLMAgent should see this is happening (somehow), and break up the objects before parsing perhaps? I am not sure what the right behavior here should be, but I am reporting that it isn't working at all in these circumstances.\n\n\n### Code snippet\n\n```python\nI don't have a simple code snipper here, my apologies...\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nCreate a bedrockLLMAgent which uses either Claude 3.5 or Nova Pro. Create a tool which will search your database according to fields \"city\", \"job_title\", or \"building\" (all of which are optional).  Then ask a question such as:\n\n\"Tell me the names of employees in los angeles who are either in accounting or whose office is building 32.\"\n\nYou then get multiple tool use (which is correct), as follows:\n\n<thinking> The user wants information about their employees in Los Angeles who are in accounting or who are in building 32. I need to use the EmployeeTool to search for empoyees based on the city, job title, and building. I will perform two searches: one for employees in accounting and another for employees in building 32. </thinking>\n\nBut I don't believe these tool inputs are ever dispatched to the tool handler, because it crashed upon parsing the inputs.",
      "state": "closed",
      "author": "kimono-id",
      "author_type": "Organization",
      "created_at": "2025-02-12T23:52:41Z",
      "updated_at": "2025-03-27T07:38:40Z",
      "closed_at": "2025-03-27T07:38:39Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/231/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/231",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/231",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:07.816122",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @bryan-elliot-kimono can you share some code snippets that allows us to reproduce the error? \nIt would be easier to reproduce and to fix it.\nThanks.",
          "created_at": "2025-02-13T12:58:48Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Close as member do not exist anymore",
          "created_at": "2025-03-27T07:38:39Z"
        }
      ]
    },
    {
      "issue_number": 265,
      "title": "Bug: object str can't be used in 'await' expression",
      "body": "### Expected Behaviour\n\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/main/python/src/multi_agent_orchestrator/utils/tool.py#L207\n\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/main/python/src/multi_agent_orchestrator/utils/tool.py#L241\n\n_process_tool() function is not an async function even though its been awaited in line#207 and throws error as outlined in the current behavior\n\n### Current Behaviour\n\nINFO:multi_agent_orchestrator.utils.logger:\nERROR:multi_agent_orchestrator.utils.logger:Error in process_request: object str can't be used in 'await' expression\nERROR:multi_agent_orchestrator.utils.logger:Error during agent processing: object str can't be used in 'await' expression\nINFO:multi_agent_orchestrator.utils.logger:\n** EXECUTION TIMES **\nINFO:multi_agent_orchestrator.utils.logger:=====================\nINFO:multi_agent_orchestrator.utils.logger:> Classifying user intent: 3.0472939014434814s\nINFO:multi_agent_orchestrator.utils.logger:> Agent SupervisorAgent | Processing request: 2.040278196334839s\nINFO:multi_agent_orchestrator.utils.logger:\n\nMetadata:\nSelected Agent: No Agent\nobject str can't be used in 'await' expression\n\n### Code snippet\n\n```python\nfrom typing import Any\nimport sys, asyncio, uuid\nimport os\nfrom datetime import datetime, timezone\nfrom multi_agent_orchestrator.utils import Logger\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\nfrom multi_agent_orchestrator.agents import (\n    BedrockLLMAgent, BedrockLLMAgentOptions,\n    AgentResponse,\n    LexBotAgent, LexBotAgentOptions,\n    AmazonBedrockAgent, AmazonBedrockAgentOptions,\n    SupervisorAgent, SupervisorAgentOptions\n)\nfrom multi_agent_orchestrator.classifiers import ClassifierResult\nfrom multi_agent_orchestrator.types import ConversationMessage\nfrom multi_agent_orchestrator.storage import DynamoDbChatStorage\nfrom multi_agent_orchestrator.utils import AgentTool\nfrom multi_agent_orchestrator.agents import ChainAgent, ChainAgentOptions\n\n# try:\n#     from multi_agent_orchestrator.agents import AnthropicAgent,  AnthropicAgentOptions\n#     _ANTHROPIC_AVAILABLE = True\n# except ImportError:\n#     _ANTHROPIC_AVAILABLE = False\n\n_ANTHROPIC_AVAILABLE = False\n\nfrom weather_tool import weather_tool_description, weather_tool_handler, weather_tool_prompt\n# from dotenv import load_dotenv\n\n# load_dotenv()\n\nagent1 = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name='Agent 1',\n    description='Given a company name, get the ticker symbol',\n    model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n))\n\nagent2 = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name='Agent 2',\n    description='Given a ticker symbol, get the company details',\n    model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n    streaming=True\n))\n\noptions = ChainAgentOptions(\n    name='AdvancedChainAgent',\n    description='A sophisticated chain of agents that will help to answer about a company ticker info and details',\n    agents=[agent1, agent2],\n    default_output='The chain processing encountered an issue.',\n    save_chat=True\n)\n\nchain_agent = ChainAgent(options)\n\ntech_agent = BedrockLLMAgent(\n    options=BedrockLLMAgentOptions(\n        name=\"TechAgent\",\n        description=\"You are a tech agent. You are responsible for answering questions about tech. You are only allowed to answer questions about tech. You are not allowed to answer questions about anything else.\",\n        model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n    )\n)\n\nsales_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"SalesAgent\",\n    description=\"You are a sales agent. You are responsible for answering questions about sales. You are only allowed to answer questions about sales. You are not allowed to answer questions about anything else.\",\n    model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n))\n\n# claim_agent = AmazonBedrockAgent(AmazonBedrockAgentOptions(\n#     name=\"Claim Agent\",\n#     description=\"Specializes in handling claims and disputes.\",\n#     agent_id=os.getenv('CLAIM_AGENT_ID',None),\n#     agent_alias_id=os.getenv('CLAIM_AGENT_ALIAS_ID',None)\n# ))\n\nweather_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n        name=\"WeatherAgent\",\n        streaming=False,\n        description=\"Specialized agent for giving weather forecast condition from a city.\",\n        tool_config={\n            'tool':weather_tool_description,\n            'toolMaxRecursions': 5,\n            'useToolHandler': weather_tool_handler\n        }\n    ))\nweather_agent.set_system_prompt(weather_tool_prompt)\n\nhealth_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"HealthAgent\",\n    description=\"You are a health agent. You are responsible for answering questions about health. You are only allowed to answer questions about health. You are not allowed to answer questions about anything else.\",\n    model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n))\n\ntravel_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n    name=\"TravelAgent\",\n    description=\"You are a travel assistant agent. You are responsible for answering questions about travel, activities, sight seesing about a city and surrounding\",\n    model_id=\"anthropic.claude-3-haiku-20240307-v1:0\",\n))\n\n# airlines_agent = LexBotAgent(LexBotAgentOptions(name='AirlinesBot',\n#                                               description='Helps users book their flight. This bot works with US metric time and date.',\n#                                               locale_id='en_US',\n#                                               bot_id=os.getenv('AIRLINES_BOT_ID', None),\n#                                               bot_alias_id=os.getenv('AIRLINES_BOT_ALIAS_ID', None)))\n\nif _ANTHROPIC_AVAILABLE:\n    lead_agent = AnthropicAgent(AnthropicAgentOptions(\n        api_key=os.getenv('ANTHROPIC_API_KEY', None),\n        name=\"SupervisorAgent\",\n        description=\"You are a supervisor agent. You are responsible for managing the flow of the conversation. You are only allowed to manage the flow of the conversation. You are not allowed to answer questions about anything else.\",\n        model_id=\"claude-3-5-sonnet-latest\",\n    ))\nelse:\n    lead_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\n        name=\"SupervisorAgent\",\n        model_id=\"amazon.nova-pro-v1:0\",\n        description=\"You are a supervisor agent. You are responsible for managing the flow of the conversation. You are only allowed to manage the flow of the conversation. You are not allowed to answer questions about anything else.\",\n    ))\n\nasync def get_current_date():\n        \"\"\"\n        Get the current date in US format.\n        \"\"\"\n        Logger.info('Using Tool : get_current_date')\n        return datetime.now(timezone.utc).strftime('%m/%d/%Y')  # from datetime import datetime, timezone\n\n\nsupervisor = SupervisorAgent(\n    SupervisorAgentOptions(\n        name=\"SupervisorAgent\",\n        description=\"My Supervisor agent description\",\n        lead_agent=lead_agent,\n        # team=[airlines_agent, travel_agent, tech_agent, sales_agent, health_agent, claim_agent, weather_agent],\n        team=[travel_agent, tech_agent, sales_agent, health_agent, weather_agent, chain_agent],\n        # storage=DynamoDbChatStorage(\n        #     table_name=os.getenv('DYNAMODB_CHAT_HISTORY_TABLE_NAME', None),\n        #     region='us-east-1'\n        # ),\n        trace=True,\n        extra_tools=[AgentTool(\n            name=\"get_current_date\",\n            func=get_current_date,\n        )]\n    ))\n\nasync def handle_request(_orchestrator: MultiAgentOrchestrator, _user_input:str, _user_id:str, _session_id:str):\n    classifier_result=ClassifierResult(selected_agent=supervisor, confidence=1.0)\n\n    response:AgentResponse = await _orchestrator.agent_process_request(_user_input, _user_id, _session_id, classifier_result)\n    # response:AgentResponse = await _orchestrator.route_request(_user_input, _user_id, _session_id)\n\n    # Print metadata\n    print(\"\\nMetadata:\")\n    print(f\"Selected Agent: {response.metadata.agent_name}\")\n    if isinstance(response, AgentResponse) and response.streaming is False:\n        # Handle regular response\n        if isinstance(response.output, str):\n            print(f\"\\033[34m{response.output}\\033[0m\")\n        elif isinstance(response.output, ConversationMessage):\n                print(f\"\\033[34m{response.output.content[0].get('text')}\\033[0m\")\n\nif __name__ == \"__main__\":\n\n    # Initialize the orchestrator with some options\n    orchestrator = MultiAgentOrchestrator(options=OrchestratorConfig(\n        LOG_AGENT_CHAT=True,\n        LOG_CLASSIFIER_CHAT=True,\n        LOG_CLASSIFIER_RAW_OUTPUT=True,\n        LOG_CLASSIFIER_OUTPUT=True,\n        LOG_EXECUTION_TIMES=True,\n        MAX_RETRIES=3,\n        USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True,\n        MAX_MESSAGE_PAIRS_PER_AGENT=10,\n    ),\n    # storage=DynamoDbChatStorage(\n    #     table_name=os.getenv('DYNAMODB_CHAT_HISTORY_TABLE_NAME', None),\n    #     region='us-east-1')\n    )\n\n    orchestrator.add_agent(supervisor)\n\n\n    USER_ID = str(uuid.uuid4())\n    SESSION_ID = str(uuid.uuid4())\n\n#     print(f\"\"\"Welcome to the interactive Multi-Agent system.\\n\n# I'm here to assist you with your questions.\n# Here is the list of available agents:\n# - TechAgent: Anything related to technology\n# - SalesAgent: Weather you want to sell a boat, a car or house, I can give you advice\n# - HealthAgent: You can ask me about your health, diet, exercise, etc.\n# - AirlinesBot: I can help you book a flight\n# - WeatherAgent: I can tell you the weather in a given city\n# - TravelAgent: I can help you plan your next trip.\n# - ClaimAgent: Anything regarding the current claim you have or general information about them.\n# \"\"\")\n\n    print(f\"\"\"Welcome to the interactive Multi-Agent system.\\n\n    I'm here to assist you with your questions.\n    Here is the list of available agents:\n    - TechAgent: Anything related to technology\n    - SalesAgent: Weather you want to sell a boat, a car or house, I can give you advice\n    - HealthAgent: You can ask me about your health, diet, exercise, etc.\n    - WeatherAgent: I can tell you the weather in a given city\n    - TravelAgent: I can help you plan your next trip.\n    \"\"\")\n\n    while True:\n        # Get user input\n        user_input = input(\"\\nYou: \").strip()\n\n        if user_input.lower() == 'quit':\n            print(\"Exiting the program. Goodbye!\")\n            sys.exit()\n\n        # Run the async function\n        if user_input is not None and user_input != '':\n            asyncio.run(handle_request(orchestrator, user_input, USER_ID, SESSION_ID))\n```\n\n### Possible Solution\n\nAfter making _process_tool() function async, it seems to be working\n\nLine#241 code block is changed\n\nfrom:\n```\ndef _process_tool(self, tool_name, input_data):\n        try:\n            tool = next(tool for tool in self.tools if tool.name == tool_name)\n            return tool.func(**input_data)\n        except StopIteration:\n            return (f\"Tool '{tool_name}' not found\")\n```\n\nto:\n\n```\nasync def _process_tool(self, tool_name, input_data):\n        try:\n            tool = next(tool for tool in self.tools if tool.name == tool_name)\n            return await tool.func(**input_data)\n        except StopIteration:\n            return (f\"Tool '{tool_name}' not found\")\n```\n\n### Steps to Reproduce\n\nUsed example from https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/supervisor-mode and added a chain agent to test whether supervisor can take in chain agent as a team\n\nFirst question works fine:\n\n> I'm traveling to Austin from Detroit next week. Check the weather for today and suggest me some alergic medication as Austin has a high amount of pollen. What are the different travel options?\n\nSecond question throws errors:\n\n> provide ticker symbol of Amazon and its company information and explain about their S3 service",
      "state": "closed",
      "author": "rmadabusi-info",
      "author_type": "User",
      "created_at": "2025-03-04T12:43:28Z",
      "updated_at": "2025-03-27T07:35:53Z",
      "closed_at": "2025-03-27T07:35:37Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/265/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/265",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/265",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:08.057359",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "fixing in #194 ",
          "created_at": "2025-03-21T17:00:49Z"
        },
        {
          "author": "brnaba-aws",
          "body": "fixed in python 0.1.10",
          "created_at": "2025-03-27T07:35:38Z"
        }
      ]
    },
    {
      "issue_number": 239,
      "title": "Bug: BedrockLLMAgent callbacks on_llm_start and on_llm_end does not work",
      "body": "### Expected Behaviour\n\nAll the three callback events `on_llm_start`, `on_llm_end` and `on_llm_new_token` fires for BedrockLLMAgent while streaming response.\n\n### Current Behaviour\n\nOnly `on_llm_new_token` fires for BedrockLLMAgent while streaming response.\n\n### Code snippet\n\n```python\nRefer to https://github.com/awslabs/multi-agent-orchestrator/blob/main/examples/fast-api-streaming/main.py#L41\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/main/examples/fast-api-streaming/main.py#L41",
      "state": "closed",
      "author": "rjesh-git",
      "author_type": "User",
      "created_at": "2025-02-17T21:45:47Z",
      "updated_at": "2025-03-24T16:58:12Z",
      "closed_at": "2025-03-24T16:58:11Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/239/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/239",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/239",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:08.376402",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @rjesh-git \nThanks for reaching out.\nThis example is wrong. We actually don't have any definition apart from `on_llm_new_token`\n\nHere is where the callbacks are defined: https://github.com/awslabs/multi-agent-orchestrator/blob/58e37b592c5fceb6ebcb4806e899535f3a4d024b/python/src/multi_agent_orches",
          "created_at": "2025-02-18T08:59:37Z"
        },
        {
          "author": "cornelcroi",
          "body": "This issue is being closed as the callbacks in question have not been implemented yet.",
          "created_at": "2025-03-24T16:58:11Z"
        }
      ]
    },
    {
      "issue_number": 241,
      "title": "How to loop route multiple times",
      "body": "When does the orchestrator need to loop and save the conversation, update the agent's conversation history, and finally pass the response back to the user.",
      "state": "closed",
      "author": "wonders7796",
      "author_type": "User",
      "created_at": "2025-02-19T08:09:52Z",
      "updated_at": "2025-03-21T17:07:04Z",
      "closed_at": "2025-03-21T17:07:02Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/241/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/241",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/241",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:08.619741",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "To achieve this you could use `SupervisorAgent`, it uses a team of agents to delegate tasks and it can do back and forth with them. \nYou can have a look [here](https://awslabs.github.io/multi-agent-orchestrator/agents/built-in/supervisor-agent/)",
          "created_at": "2025-03-21T17:07:02Z"
        }
      ]
    },
    {
      "issue_number": 246,
      "title": "Bug: Documentation Issues",
      "body": "### Expected Behaviour\n\nIssues with docs\n\n### Current Behaviour\n\nBroken\n\n### Code snippet\n\n```python\nLook at the source\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nAdd line break",
      "state": "open",
      "author": "brianantonelli",
      "author_type": "User",
      "created_at": "2025-02-25T02:43:53Z",
      "updated_at": "2025-02-25T16:54:55Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/246/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/246",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/246",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:10.718514",
      "comments": []
    },
    {
      "issue_number": 250,
      "title": "Bug: Handling missing or erroring tools",
      "body": "### Expected Behaviour\n\nMissing tools should return a message that a requested tool was not found. Tools that throw exceptions should be properly caught and returned.\n\n### Current Behaviour\n\nIf a tool is not found it throws an awaitable error as the response from `_process_tool` is a string.\n\n### Code snippet\n\n```python\nNotice the typo between the name argument and the tool name in the prompt.\n\n\ndoc_tools: AgentTools = AgentTools(\n    tools=[\n        AgentTool(\n            name=\"Docuemntation_Tool\",\n            description=\"Generate documentation based on a Github repository\",\n            func=generate_docs,\n        )\n    ]\n)\n\ndoc_tool_prompt = \"\"\"\nYou are an expert software engineer that excels at documenting source code\nusing only the Documentation_Tool.\n\nTo use the tool, you strictly apply the provided tool specification.\n```\n\n### Possible Solution\n\nRaise exceptions for missing tools or tool execution errors and return them.\n\n### Steps to Reproduce\n\n1. Create an agent tool with name foo\n2. Create a prompt for the agent and typo the name.",
      "state": "open",
      "author": "brianantonelli",
      "author_type": "User",
      "created_at": "2025-02-25T05:19:58Z",
      "updated_at": "2025-02-25T05:20:12Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/250/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/250",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/250",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:10.718529",
      "comments": []
    },
    {
      "issue_number": 248,
      "title": "Bug: Chain Agent Exception Handling",
      "body": "### Expected Behaviour\n\nChain agent should log exceptions and raise if necessary.\n\n### Current Behaviour\n\n`process_request` for ChainAgent attempts to raise a string as an exception.\n\n### Code snippet\n\n```python\n`raise f\"Error processing request with agent {agent.name}:{str(error)}\"`\n```\n\n### Possible Solution\n\n`raise Exception(f\"Error processing request with agent {agent.name}:{str(error)}\") from error`\n\n### Steps to Reproduce\n\nCause an exception in the chain agent.",
      "state": "open",
      "author": "brianantonelli",
      "author_type": "User",
      "created_at": "2025-02-25T03:32:26Z",
      "updated_at": "2025-02-25T03:32:38Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/248/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/248",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/248",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:10.718534",
      "comments": []
    },
    {
      "issue_number": 236,
      "title": "Bug: Invalid tool serialization",
      "body": "### Expected Behaviour\n\nDeclaring a tool with this code:\n```python\ndef get_forecast(day, hour):\n    return \"Sunny\"\n\nweather_tool = AgentTool(\n    name=\"weather_tool\",\n    description=\"The weather information for the given day and hour.\",\n    properties = {\n        \"day\": {\n            \"type\": \"string\",\n            \"description\": f\"The day of the week.\"\n        },\n        \"hour\": {\n            \"type\": \"int\",\n            \"description\": \"The hour of the day: [0-24].\",\n        }\n    },\n    func=get_forecast\n)\n```\n\nResults in the following error-message at the first agent invocation:\n```\nThe model returned the following errors: tools.0.input_schema:\nJSON schema is invalid - please consult https://json-schema.org or our documentation at https://docs.anthropic.com/en/docs/tool-use\n```\n\nTo try debugging the problem, I printed the `converse_cmd` in the `BedrockLLMAgent.process_request` method, and this is the `toolConfig` field:\n```\n{'tools': [{'toolSpec': {'name': 'weather_tool', 'description': 'The weather information for the given day and hour.', 'inputSchema': {'json': {'type': 'object', 'properties': {'day': {'type': 'string', 'description': 'The day of the week.'}, 'hour': {'type': 'int', 'description': 'The hour of the day: [0-24].'}}, 'required': ['day', 'hour']}}}}]}\n```\n\nThe above format, looks like a valid Bedrock tool specification.\n\n\n### Current Behaviour\n\nError message:\n```\nThe model returned the following errors: tools.0.input_schema:\nJSON schema is invalid - please consult https://json-schema.org or our documentation at https://docs.anthropic.com/en/docs/tool-use\n```\n\n\n\n### Code snippet\n\n```python\ndef get_forecast(day, hour):\n    return \"Sunny\"\n\nweather_tool = AgentTool(\n    name=\"weather_tool\",\n    description=\"The weather information for the given day and hour.\",\n    properties = {\n        \"day\": {\n            \"type\": \"string\",\n            \"description\": f\"The day of the week.\"\n        },\n        \"hour\": {\n            \"type\": \"int\",\n            \"description\": \"The hour of the day: [0-24].\",\n        }\n    },\n    func=get_forecast\n)\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nDeclare a default agent with the above tool specification. Ask for a wether forecast (i.e. \"Will it rain tomorrow at 6am?\")",
      "state": "closed",
      "author": "emilmont",
      "author_type": "User",
      "created_at": "2025-02-13T14:58:50Z",
      "updated_at": "2025-02-13T15:08:17Z",
      "closed_at": "2025-02-13T15:08:15Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/236/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/236",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/236",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:10.718538",
      "comments": [
        {
          "author": "emilmont",
          "body": "Solved: Should use \"number\" instead of \"int\".",
          "created_at": "2025-02-13T15:08:15Z"
        }
      ]
    },
    {
      "issue_number": 233,
      "title": "Bug: boto3 version solving failed",
      "body": "### Expected Behaviour\n\nThe `boto3` dependency has been fixed to 1.35.0, causing dependency issues with libraries such as the latest version of `langchain-aws`.\n\n### Current Behaviour\n\n```bash\nBecause no versions of langchain-aws match >0.2.10,<0.2.11 || >0.2.11,<0.2.12 || >0.2.12,<0.3.0\n and langchain-aws (0.2.10) depends on boto3 (>=1.35.74), langchain-aws (>=0.2.10,<0.2.11 || >0.2.11,<0.2.12 || >0.2.12,<0.3.0) requires boto3 (>=1.35.74).\nAnd because langchain-aws (0.2.11) depends on boto3 (>=1.35.74)\n and langchain-aws (0.2.12) depends on boto3 (>=1.35.74), langchain-aws (>=0.2.10,<0.3.0) requires boto3 (>=1.35.74).\nSo, because {project} depends on both langchain_aws (^0.2.10) and boto3 (1.35.0), version solving failed.\n```\n\n### Code snippet\n\n```python\n[options.extras_require]\naws =\n    boto3==1.35.0\n...\n```\n\n### Possible Solution\n\n```\n[options.extras_require]\naws =\n    boto3>=1.35.0\n...\n\n### Steps to Reproduce\n\n```bash\npoetry add langchain langchain-aws\npoetry add \"multi-agent-orchestrator[aws]\"\n```",
      "state": "closed",
      "author": "ghwany",
      "author_type": "User",
      "created_at": "2025-02-13T02:46:18Z",
      "updated_at": "2025-02-13T12:56:06Z",
      "closed_at": "2025-02-13T12:56:05Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/233/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/233",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/233",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:11.138847",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @ghwany the issue has been fixed in `0.1.9`",
          "created_at": "2025-02-13T12:56:05Z"
        }
      ]
    },
    {
      "issue_number": 232,
      "title": "Bug: boto3 version solving failed",
      "body": "### Expected Behaviour\n\nThe `boto3` dependency has been fixed to 1.35.0, causing dependency issues with libraries such as the latest version of `langchain-aws`.\n\n### Current Behaviour\n\n```bash\nBecause no versions of langchain-aws match >0.2.10,<0.2.11 || >0.2.11,<0.2.12 || >0.2.12,<0.3.0\n and langchain-aws (0.2.10) depends on boto3 (>=1.35.74), langchain-aws (>=0.2.10,<0.2.11 || >0.2.11,<0.2.12 || >0.2.12,<0.3.0) requires boto3 (>=1.35.74).\nAnd because langchain-aws (0.2.11) depends on boto3 (>=1.35.74)\n and langchain-aws (0.2.12) depends on boto3 (>=1.35.74), langchain-aws (>=0.2.10,<0.3.0) requires boto3 (>=1.35.74).\nSo, because {project} depends on both langchain_aws (^0.2.10) and boto3 (1.35.0), version solving failed.\n```\n\n### Code snippet\n\n```python\n[options.extras_require]\naws =\n    boto3==1.35.0\n...\n```\n\n### Possible Solution\n\n```\n[options.extras_require]\naws =\n    boto3>=1.35.0\n...\n```\n\n### Steps to Reproduce\n\n```bash\npoetry add langchain langchain-aws\npoetry add \"multi-agent-orchestrator[aws]\"\n```\n",
      "state": "closed",
      "author": "jwany-zz-kp",
      "author_type": "User",
      "created_at": "2025-02-13T02:44:03Z",
      "updated_at": "2025-02-13T02:45:44Z",
      "closed_at": "2025-02-13T02:45:44Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/232/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/232",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/232",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:11.430346",
      "comments": []
    },
    {
      "issue_number": 222,
      "title": "Feature request: Python script for Agent Overlap Analysis",
      "body": "### Use case\n\nI write code on a Windows machine using Python.  I noticed the sample code for running the \"Agent Overlap Analysis\" is not compatible in Python.\n\n### Solution/User Experience\n\nWould love to run the Agent Overlap Analysis in my Windows Python development environment.\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "closed",
      "author": "chrissandico",
      "author_type": "User",
      "created_at": "2025-02-04T15:41:37Z",
      "updated_at": "2025-02-11T12:17:50Z",
      "closed_at": "2025-02-11T12:17:48Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/222/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/222",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/222",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:11.430368",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Work in progress, see https://github.com/awslabs/multi-agent-orchestrator/issues/119",
          "created_at": "2025-02-11T10:52:45Z"
        },
        {
          "author": "cornelcroi",
          "body": "This issue is being closed since it's already addressed in another ticket.",
          "created_at": "2025-02-11T12:17:48Z"
        }
      ]
    },
    {
      "issue_number": 221,
      "title": "Bug: Link is broken",
      "body": "### Expected Behaviour\n\nOn the [Quickstart ](https://awslabs.github.io/multi-agent-orchestrator/general/quickstart/)page, the link to the Agent Overlap Analysis is broken.\n\nUse this link instead: \nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/monitoring/agent-overlap/\n\n### Current Behaviour\n\nUpon clicking the \"Agent Overlap Analysis\" link in the Quick Start page, I get a 404.\n\nNext Steps >> \"Explore the [Agent Overlap Analysis](https://awslabs.github.io/multi-agent-orchestrator/advanced-features/agent-overlap) feature to optimize your agent configurations.\"\n\n### Code snippet\n\n```python\nNone\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nClick on the link in Quick Start.",
      "state": "closed",
      "author": "chrissandico",
      "author_type": "User",
      "created_at": "2025-02-04T15:39:09Z",
      "updated_at": "2025-02-11T10:51:31Z",
      "closed_at": "2025-02-11T10:51:29Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/221/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/221",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/221",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:11.654484",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Fixed the broken link. Thanks for reporting this, @chrissandico. ",
          "created_at": "2025-02-11T10:51:29Z"
        }
      ]
    },
    {
      "issue_number": 93,
      "title": "fastapi-streaming-example - perhaps creating a new thread can be avoided & instead use create_task",
      "body": "### Expected Behaviour\n\nminimize or eliminate thread creation if the entire stack is async\n\n### Current Behaviour\n\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/da9563fe9e87343fcda8abe6303b1e1d4f36c943/examples/fast-api-streaming/main.py#L119\r\n\r\nAbove line will spawn a new thread for every request. \n\n### Code snippet\n\n```python\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/da9563fe9e87343fcda8abe6303b1e1d4f36c943/examples/fast-api-streaming/main.py#L119\n```\n\n\n### Possible Solution\n\nWhat would be an issue if you do the following -\r\n\r\nasyncio.create_task(start_generation(query, user_id, session_id, streamer_queue))\r\n\r\ninstead of spawning a new thread\n\n### Steps to Reproduce\n\nSee - https://github.com/awslabs/multi-agent-orchestrator/blob/da9563fe9e87343fcda8abe6303b1e1d4f36c943/examples/fast-api-streaming/main.py#L119",
      "state": "closed",
      "author": "ksachdeva",
      "author_type": "User",
      "created_at": "2024-11-20T18:21:52Z",
      "updated_at": "2025-02-10T13:05:07Z",
      "closed_at": "2024-12-20T16:54:34Z",
      "labels": [
        "enhancement",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/93/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/93",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/93",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:11.909085",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @ksachdeva \r\nThanks for you contribution.\r\nThis is a code example, just to show dev how they might use it. People are free to take the code and modify it the way they want.\r\n\r\nThanks,\r\nAnthony",
          "created_at": "2024-11-21T07:59:03Z"
        },
        {
          "author": "ksachdeva",
          "body": "I understand that it is an example code however you should consider following perspectives -\n\nAn experienced programmer - \nSince you have used thread they will make an assumption that the underlying framework/library is not truly asynchronous and has blocking calls. Based on my reading of your libra",
          "created_at": "2024-11-22T14:05:03Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing the issue as no actionable next steps have been identified.",
          "created_at": "2024-12-20T16:54:34Z"
        },
        {
          "author": "ziudeso",
          "body": "@ksachdeva did you manage to get it working with `asyncio.create_task(start_generation(query, user_id, session_id, streamer_queue))`? doesn't seem to work",
          "created_at": "2025-02-10T13:01:27Z"
        }
      ]
    },
    {
      "issue_number": 220,
      "title": "Bug: Update examples for direct usage",
      "body": "### Expected Behaviour\n\nUpdate code examples in the documentation for agent direct usage \n\n### Current Behaviour\n\nThe code snippets are wrong.\n\n### Code snippet\n\n```python\nThe code snippets are wrong.\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nThe code snippets are wrong.",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2025-02-04T14:04:59Z",
      "updated_at": "2025-02-04T14:05:26Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/220/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/220",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/220",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:12.163988",
      "comments": []
    },
    {
      "issue_number": 218,
      "title": "Bug: report \"LibsqlError: SQLITE_BUSY: database is locked\" when use local storage",
      "body": "### Expected Behaviour\n\ni am using typescript sdk in electron main process. expect local storage work.\n\n### Current Behaviour\n\nreport error:\nError saving message: LibsqlError: SQLITE_BUSY: database is locked\n    at mapSqliteError (/Users/sammax/code/js/mindfloweditor/node_modules/@libsql/client/lib-cjs/sqlite3.js:396:16)\n    at executeStmt (/Users/sammax/code/js/mindfloweditor/node_modules/@libsql/client/lib-cjs/sqlite3.js:301:15)\n    at Sqlite3Client.transaction (/Users/sammax/code/js/mindfloweditor/node_modules/@libsql/client/lib-cjs/sqlite3.js:147:9)\n    ... 3 lines matching cause stack trace ...\n    at async MultiAgentOrchestrator.processStreamInBackground (/Users/sammax/code/js/mindfloweditor/node_modules/multi-agent-orchestrator/dist/orchestrator.js:208:21) {\n  code: 'SQLITE_BUSY',\n  rawCode: 5,\n  [cause]: SqliteError: database is locked\n      at convertError (/Users/sammax/code/js/mindfloweditor/node_modules/libsql/index.js:51:12)\n      at Statement.run (/Users/sammax/code/js/mindfloweditor/node_modules/libsql/index.js:301:13)\n      at executeStmt (/Users/sammax/code/js/mindfloweditor/node_modules/@libsql/client/lib-cjs/sqlite3.js:294:34)\n      at Sqlite3Client.transaction (/Users/sammax/code/js/mindfloweditor/node_modules/@libsql/client/lib-cjs/sqlite3.js:147:9)\n      at SqlChatStorage.saveChatMessage (/Users/sammax/code/js/mindfloweditor/node_modules/multi-agent-orchestrator/dist/storage/sqlChatStorage.js:52:31)\n      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n      at async saveConversationExchange (/Users/sammax/code/js/mindfloweditor/node_modules/multi-agent-orchestrator/dist/utils/chatUtils.js:15:5)\n      at async MultiAgentOrchestrator.processStreamInBackground (/Users/sammax/code/js/mindfloweditor/node_modules/multi-agent-orchestrator/dist/orchestrator.js:208:21) \n\n### Code snippet\n\n```python\nconst dbPath = path.join(userDataPath, 'database', 'local.db');\n            console.log(\"chat dbPath:\", dbPath)\n            const dbUrl = `file:${dbPath}`;\n            const localStorage = new SqlChatStorage(dbUrl);\n            await localStorage.waitForInitialization();\n\n            const writerClassifier = new KeywordClassifier({ \"aaa\": \"test\" });\n            this.orchestrator = new MultiAgentOrchestrator({\n                classifier: writerClassifier,\n                storage:localStorage\n            });\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n1. create a electron project\n2. write code in main progress and ipc handler\n3. call routeRequest method\n4. get error message",
      "state": "open",
      "author": "longyiwu",
      "author_type": "User",
      "created_at": "2025-02-01T11:38:43Z",
      "updated_at": "2025-02-04T08:52:35Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/218/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/218",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/218",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:12.164007",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "@Rajaniraiyn Can you have a look at this?",
          "created_at": "2025-02-04T08:52:34Z"
        }
      ]
    },
    {
      "issue_number": 213,
      "title": "Bug: Unexpected token '<', \"<!DOCTYPE \"... is not valid JSON",
      "body": "### Expected Behaviour\n\nExpected Behaviour after chatting the chatbot:\nThe system should process the API response and return valid JSON data for further processing. Specifically:\nThe response from the server should be in a valid JSON format.\nErrors should be properly logged and handled, with meaningful error messages.\n\n### Current Behaviour\n\nCurrent Behaviour\nCurrently, the application throws the following error:\n\nSyntaxError: Unexpected token '<', \"<!DOCTYPE \"... is not valid JSON\n\nThis occurs because the response from the API endpoint is an HTML document (likely an error page) rather than JSON, causing the application to fail.\n\n\n\n### Code snippet\n\n```python\nDeployed as per instructions, but faced with the above error.\n```\n\n### Possible Solution\n\nAdd Content-Type Validation: Before parsing the response as JSON, check the Content-Type header to ensure it's application/json.\n\n### Steps to Reproduce\n\nDeployed as per instructions, but faced with the above error. ",
      "state": "closed",
      "author": "jiasheng-ctc",
      "author_type": "User",
      "created_at": "2025-01-25T15:02:59Z",
      "updated_at": "2025-02-03T20:05:20Z",
      "closed_at": "2025-02-03T20:05:19Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/213/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/213",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/213",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:12.422722",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @jiasheng-ctc \nCan you give me some details about how you get these errors?\nFor now, I don't have any context.\nCode examples also could be useful for me to understand what exactly you are trying to do.\nThanks.",
          "created_at": "2025-01-26T15:57:27Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing due to no activity",
          "created_at": "2025-02-03T20:05:19Z"
        }
      ]
    },
    {
      "issue_number": 210,
      "title": "Bug: AttributeError: 'ComprehendFilterAgentOptions' object has no attribute 'region'",
      "body": "### Expected Behaviour\n\n  File \"/home/ubuntu/workspace/multi-agent-collaborator-test/03.sequential_agent.py\", line 114, in <module>\n    filter_agent = ComprehendFilterAgent(ComprehendFilterAgentOptions(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ubuntu/workspace/llm_model_hub/miniconda3/envs/py312/lib/python3.12/site-packages/multi_agent_orchestrator/agents/comprehend_filter_agent.py\", line 34, in __init__\n    config = Config(region_name=options.region) if options.region else None\n                                                   ^^^^^^^^^^^^^^\n\n### Current Behaviour\n\n 'ComprehendFilterAgentOptions' object has no attribute 'region'\n\n### Code snippet\n\n```python\nfilter_agent = ComprehendFilterAgent(ComprehendFilterAgentOptions(\n    name='ContentModerator',\n    description='Analyzes and filters content using Amazon Comprehend',\n    enable_sentiment_check=True,\n    enable_pii_check=True,\n    enable_toxicity_check=True,\n    sentiment_threshold=0.8,\n    toxicity_threshold=0.6,\n    allow_pii=False,\n    language_code='en'\n))\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\njust init a new ComprehendFilterAgent you will encounter the error\nfilter_agent = ComprehendFilterAgent(ComprehendFilterAgentOptions(\n    name='ContentModerator',\n    description='Analyzes and filters content using Amazon Comprehend',\n    enable_sentiment_check=True,\n    enable_pii_check=True,\n    enable_toxicity_check=True,\n    sentiment_threshold=0.8,\n    toxicity_threshold=0.6,\n    allow_pii=False,\n    language_code='en'\n))",
      "state": "closed",
      "author": "xiehust",
      "author_type": "User",
      "created_at": "2025-01-24T10:37:48Z",
      "updated_at": "2025-01-28T13:19:57Z",
      "closed_at": "2025-01-28T13:19:56Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/210/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/210",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/210",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:12.772842",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thanks @xiehust.\nThe bug is fixed in the latest release.",
          "created_at": "2025-01-28T13:19:56Z"
        }
      ]
    },
    {
      "issue_number": 211,
      "title": "Bug: AttributeError: 'BedrockInlineAgentOptions' object has no attribute 'region'",
      "body": "### Expected Behaviour\n\nno error\n\n### Current Behaviour\n\nTraceback (most recent call last):\n  File \"/home/ubuntu/workspace/multi-agent-collaborator-test/04.bedrock_inline_agent.py\", line 52, in <module>\n    bedrock_inline_agent = BedrockInlineAgent(BedrockInlineAgentOptions(\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ubuntu/workspace/llm_model_hub/miniconda3/envs/py312/lib/python3.12/site-packages/multi_agent_orchestrator/agents/bedrock_inline_agent.py\", line 66, in __init__\n    if options.region:\n       ^^^^^^^^^^^^^^\nAttributeError: 'BedrockInlineAgentOptions' object has no attribute 'region'\n\n### Code snippet\n\n```python\nbedrock_inline_agent = BedrockInlineAgent(BedrockInlineAgentOptions(\n    name=\"Inline Agent Creator for Agents for Amazon Bedrock\",\n    description=\"Specalized in creating Agent to solve customer request dynamically. You are provided with a list of Action groups and Knowledge bases which can help you in answering customer request\",\n    # action_groups_list=action_groups_list,\n    knowledge_bases=knowledge_bases,\n))\n```\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\njust inint a BedrockInlineAgent",
      "state": "closed",
      "author": "xiehust",
      "author_type": "User",
      "created_at": "2025-01-24T10:49:32Z",
      "updated_at": "2025-01-28T13:19:40Z",
      "closed_at": "2025-01-28T13:19:38Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/211/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/211",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/211",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:12.993761",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thanks @xiehust.\nThe bug is fixed in the latest release.",
          "created_at": "2025-01-28T13:19:38Z"
        }
      ]
    },
    {
      "issue_number": 208,
      "title": "Feature request: Orchestrator and Classifiers Auditing",
      "body": "### Use case\n\nRelated to #152 but slightly different. This issue is focused to auditing capabilities for Classifiers, in particular on the input, output, and execution context of [Classifier::process_request()](https://github.com/awslabs/multi-agent-orchestrator/blob/main/python/src/multi_agent_orchestrator/classifiers/classifier.py#L156).  \n\nIn highly regulated environments, customers are required to inspect punctually all the interactions among agents, but most improtantly at the interface between human users and the orchestrator.\nClassification and dispatching of intents are critical for the correct operation and evolution of an agentic system, especially if this is to be integrated with existing legacy systems (CRMs, CMSs, Payment...).\n\nOur main challenge with MAO's current implementation is the lack of access to session_id and user_id at the [classifier scope](https://github.com/awslabs/multi-agent-orchestrator/blob/main/python/src/multi_agent_orchestrator/classifiers/bedrock_classifier.py#L71). Ideally we'd like to be able to log input, output and some contextual information related to the invocation of the LLM (prompt version id, classification confidence label, inference parameters, link to chat history and messages used in the inference context window, input and outputs of encoders/decoders). We'd like to index this information based on session_id and user_id.\n\n\nIn #152 an approach is proposed to audit agent behaviour, but this won't provide the same capabilites for classifiers.\n\nIdeally these two trace streams (agents and user/encoders/decoders/classifiers) would then be combined to produce a full audit trace of every interaction with the system.\n\n### Solution/User Experience\n\n## Proposed Solution\n1. provide user_id and session_id in the scope of downstream components of the Orchestrator, like a classifier\n2. wrappers/decorators or global static logging channel for auditing purposes\n\n## User Experience\n```pyhton\ncustom_auditor = AuditStreamProvider(storage=DynamoDBAuditStorage)\norchestrator = MultiAgentOrchestrator(classifier=custom_bedrock_classifier, audit_stream=custom_auditor)\n```\n\nin the implementation of a classifier\n\n```python\n@mao.auditable(user_id, session_id)\ndef process_request(self,input_text: str, chat_history: List[ConversationMessage]) -> ClassifierResult:\n    # method implementation\n```\n\nso that whenever this method is executed relevant information is stored in the auditing channel of choice (in this example, a DynamoDB table, similar to what's done for Chat History)\n\nalternatively\n\n```python\ndef process_request(self,input_text: str, chat_history: List[ConversationMessage], user_id, session_id) -> ClassifierResult:\n   AuditStreamProvider.log(user_id, session_id, ClassifierResult, ClassifierInput) # this could also be a logger, but we'd still require access to user_id and session_id\n```\n\n### Alternative solutions\n\n```markdown\n\n```",
      "state": "open",
      "author": "giusedroid",
      "author_type": "User",
      "created_at": "2025-01-21T15:19:45Z",
      "updated_at": "2025-01-21T15:52:25Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/208/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/208",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/208",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:13.204549",
      "comments": []
    },
    {
      "issue_number": 74,
      "title": "Feature request: Improve documentation for Classifier",
      "body": "### Use case\n\nImprove the documentation for supported models for BedrockClassifier\n\n### Solution/User Experience\n\nAdd a link and a mention about the models that are supported on converse api with tool use\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-11-06T09:51:26Z",
      "updated_at": "2025-01-18T16:24:54Z",
      "closed_at": "2025-01-18T16:24:53Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/74/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/74",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/74",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:13.204570",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done.",
          "created_at": "2025-01-18T16:24:53Z"
        }
      ]
    },
    {
      "issue_number": 166,
      "title": "Bug: Error while deploying the chatdemo app ",
      "body": "### Expected Behaviour\n\nHi Team,\r\n\r\n  I am trying to deploy the chat-demo-app from my windows laptop, when i am running the below command it shows the below, please help me how to deploy the application.\r\n\r\n09:32:57 ▶ src/pages/index.astro\r\n09:32:57   └─ /index.html (+30ms)\r\n09:32:57 ✓ Completed in 2.21s.\r\n\r\n09:32:57 [build] 1 page(s) built in 18.86s\r\n09:32:57 [build] Complete!\r\nSince this app includes more than a single stack, specify which stacks to use (wildcards are supported) or specify `--all`\r\nStacks: ChatDemoStack · UserInterfaceStack\r\n\r\nPlease help me how to run cdk deploy from windows laptop to make the deployment successful for testing the chat demo app.\r\n\r\n\n\n### Current Behaviour\n\n09:32:57 ▶ src/pages/index.astro\r\n09:32:57   └─ /index.html (+30ms)\r\n09:32:57 ✓ Completed in 2.21s.\r\n\r\n09:32:57 [build] 1 page(s) built in 18.86s\r\n09:32:57 [build] Complete!\r\nSince this app includes more than a single stack, specify which stacks to use (wildcards are supported) or specify `--all`\r\nStacks: ChatDemoStack · UserInterfaceStack\n\n### Code snippet\n\n```python\nused the main branch \r\n\r\nhttps://github.com/awslabs/multi-agent-orchestrator\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nfollowed the steps from this article on my windows laptop at the step 6 am getting the above issue.\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/#-deployment-steps\r\n\r\n",
      "state": "open",
      "author": "sreedharguda",
      "author_type": "User",
      "created_at": "2024-12-23T04:06:05Z",
      "updated_at": "2025-01-18T16:05:04Z",
      "closed_at": null,
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/166/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/166",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/166",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:13.437200",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @sreedharguda ,\r\nThanks for using the multi-agent-orchestrator. We have updated our docs. \r\nWhen deploying cdk, you need to append `--all`. \r\n\r\n```bash\r\ncdk deploy --all\r\n```\r\n\r\nUpdated link to the doc is here: https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/#-d",
          "created_at": "2024-12-23T08:36:41Z"
        },
        {
          "author": "sreedharguda",
          "body": "> Hi @sreedharguda , Thanks for using the multi-agent-orchestrator. We have updated our docs. When deploying cdk, you need to append `--all`.\r\n> \r\n> ```shell\r\n> cdk deploy --all\r\n> ```\r\n> \r\n> Updated link to the doc is here: https://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-d",
          "created_at": "2024-12-23T15:53:55Z"
        },
        {
          "author": "cornelcroi",
          "body": "@sreedharguda can we close this?",
          "created_at": "2025-01-18T16:05:03Z"
        }
      ]
    },
    {
      "issue_number": 126,
      "title": "Bug: Significant Cold Start Initialization Delay in Orchestration Framework",
      "body": "### Expected Behaviour\n\nThe orchestration framework should initialize with minimal delay during cold starts, ensuring consistent performance across all Lambda invocations, including the first execution.\n\n### Current Behaviour\n\nWhen a new Lambda instance is created, the orchestration framework incurs a significant initialization delay of 5-7 seconds. This delay occurs before any classification or other processing steps, resulting in a total latency of 7-9 seconds for the first invocation.\r\n\r\nHowever, subsequent invocations on the same Lambda instance execute within 1-2 seconds, indicating the issue is specific to cold start initialization. This behavior impacts the overall performance and user experience during the first execution.\r\n\r\nNote: Testing with provisioned concurrency (set to 5) does keep 5 instances of the Lambda function warm; however, the issue persists when execution shifts to a new Lambda instance outside of these provisioned instances. The orchestration framework initialization itself takes 5-7 seconds, which adversely impacts performance and user experience during the first execution.\r\n\n\n### Code snippet\n\n```python\nLogs for the initial invocation:\r\n\r\nINIT_START Runtime Version: python:3.12.v38\tRuntime Version ARN: arn:aws:lambda:us-east-1::runtime:7515e00d6763496e7a147ffa395ef5b0f0c1ffd6064130abb5ecde5a6d630e86\r\nSTART RequestId: 29a54971-892b-4748-affc-2e4e9a6139db Version: 96\r\n[INFO]\t2024-12-02T16:55:56.989Z\t29a54971-892b-4748-affc-2e4e9a6139db\tReceived event in Lambda\r\n[INFO]\t2024-12-02T16:55:56.990Z\t29a54971-892b-4748-affc-2e4e9a6139db\tLLM Classification\r\n[INFO]\t2024-12-02T16:55:**57**.513Z\t29a54971-892b-4748-affc-2e4e9a6139db\tFound credentials in environment variables.\r\n[INFO]\t2024-12-02T16:56:**04**.180Z\t29a54971-892b-4748-affc-2e4e9a6139db\t\r\n** CLASSIFIED INTENT **\r\n\r\n\r\nLogs for the other invocations in same lambda instance:\r\n\r\n[INFO]\t2024-12-02T16:57:00.674Z\tb6b59439-3a0c-48b5-b763-1e0a2c30ca51\tReceived event: \r\n[INFO]\t2024-12-02T16:57:**00**.674Z\tb6b59439-3a0c-48b5-b763-1e0a2c30ca51\tLLM Classification\r\n[INFO]\t2024-12-02T16:57:**01**.311Z\tb6b59439-3a0c-48b5-b763-1e0a2c30ca51\t\r\n** CLASSIFIED INTENT **\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n1. Deploy the orchestration framework on AWS Lambda.\r\n2. Trigger a request that leads to the creation of a new Lambda instance.\r\n3. Measure the total latency for the first invocation (observe 7-9 seconds).\r\n4. Measure latency for subsequent invocations on the same instance (observe 1-2 seconds).\r\n5. Test with provisioned concurrency and observe behavior when execution moves to new instances.\r\n",
      "state": "closed",
      "author": "karanakatle",
      "author_type": "User",
      "created_at": "2024-12-03T03:21:40Z",
      "updated_at": "2025-01-18T15:54:19Z",
      "closed_at": "2025-01-18T15:54:18Z",
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/126/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/126",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/126",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:13.668019",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @karanakatle ,\r\nthanks for submitting this issue.\r\nThere are a couple of things we need to understand before:\r\n\r\n- Can you share the code you used for this lambda?\r\n- Have you seen that now, you can install the multi-agent-orchestrator with only the minimum required dependency. For instance, if y",
          "created_at": "2024-12-03T15:26:17Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@karanakatle any updates on this?",
          "created_at": "2024-12-09T08:36:00Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@karanakatle , I'm about to close this since I didn't hear anything from you. Let me know if you need further assistance.",
          "created_at": "2024-12-12T17:00:11Z"
        },
        {
          "author": "karanashokraokatle",
          "body": "Hello @brnaba-aws \r\nSorry for delay response, I tried enabling snapstart and installing the required dependencies only but the issue persists.\r\nOn detail analysis, this is what I have found.\r\n\r\n1. Every time the library import takes 2 seconds.\r\n2. We have used a custom classifier - where we are usin",
          "created_at": "2024-12-13T09:52:26Z"
        },
        {
          "author": "brnaba-aws",
          "body": "For:\r\n1. can you provide a log for more than a single invocation? To see if this time is always there or only on the very first invocation.\r\n3. You can't really improve that. Unless you don't use a default agent by setting:  USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=False,\r\nOr use another model for the d",
          "created_at": "2024-12-13T10:17:56Z"
        }
      ]
    },
    {
      "issue_number": 104,
      "title": "Feature request: Add Couchbase as a Storage Backend",
      "body": "### Use case\n\n[Couchbase](https://couchbase.com) is a leading multi-dimensional database available on both cloud and on prem. Having more chat solutions will help in easily integrating this multi-agent-orchestrator with different projects.\n\n### Solution/User Experience\n\nWe from Couchbase would like to add and support Couchbase as a storage backend in both Python and Typescript versions. \n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "lokesh-couchbase",
      "author_type": "User",
      "created_at": "2024-11-23T09:11:26Z",
      "updated_at": "2025-01-18T15:53:04Z",
      "closed_at": "2025-01-18T15:53:03Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/104/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/104",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/104",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:13.972163",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thanks @lokesh-couchbase for the feature request! \r\nWe'd be happy to add Couchbase as a storage backend option.\r\n\r\nFor the implementation, we'd need to follow a few guidelines:\r\n\r\n1. For Python, this should be an optional package (like we did for Anthropic and OpenAI) to keep the installation modula",
          "created_at": "2024-12-26T09:08:58Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing this issue due to inactivity",
          "created_at": "2025-01-18T15:53:03Z"
        }
      ]
    },
    {
      "issue_number": 105,
      "title": "Feature request: Support for LiteLLM",
      "body": "### Use case\n\nWould be great if the solution can integrate with LiteLLM to enable better tracking of model requests and costs.\n\n### Solution/User Experience\n\nSee above\n\n### Alternative solutions\n\n```markdown\nN/A\n```\n",
      "state": "closed",
      "author": "kirankc",
      "author_type": "User",
      "created_at": "2024-11-24T01:16:31Z",
      "updated_at": "2025-01-18T15:52:50Z",
      "closed_at": "2025-01-18T15:52:49Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/105/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/105",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/105",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:14.194937",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thanks @kirankc for the feature request! \r\nRather than adding direct support for LiteLLM in the core library, we think this would be better suited as an example in our documentation's Cookbook/Examples section (similar to our [Ollama agent example](https://awslabs.github.io/multi-agent-orchestrator/",
          "created_at": "2024-12-26T08:35:30Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing this issue due to inactivity",
          "created_at": "2025-01-18T15:52:49Z"
        }
      ]
    },
    {
      "issue_number": 202,
      "title": "Bug: discrepancy between [Tool, Tools] and [AgentTool, AgentTools] ",
      "body": "### Expected Behaviour\n\n### As pointed out in all the examples the below code should work\r\n\r\n`from multi_agent_orchestrator.utils import AgentTools, AgentTool,`\r\n\n\n### Current Behaviour\n\n### But when I go to the utils folder and see below is the code. \r\n\r\n`\"\"\"Module for importing helper functions and Logger.\"\"\"\r\nfrom .helpers import is_tool_input, conversation_to_dict\r\nfrom .logger import Logger\r\nfrom .tool import Tool, Tools\r\n\r\n__all__ = [\r\n    'is_tool_input',\r\n    'conversation_to_dict',\r\n    'Logger',\r\n    'Tool',\r\n    'Tools',\r\n]\r\n`\r\n\r\nI am running on `multi_agent_orchestrator 0.1.4`. \r\n\r\nI checked out the main branch and found below code in utils\r\n\r\n\n\n### Code snippet\n\n```python\nfrom multi_agent_orchestrator.utils import AgentTools, AgentTool\r\n\r\ncreate_appointment_tool = AgentTool(\r\n    name=\"blaaabla\",\r\n    description=\"bla bla bla\",\r\n    properties = {\r\n        \"bl\": {\r\n            \"type\" : \"string\",\r\n            \"description\" : \"blabla\"\r\n        },\r\n        \"appointment_details\": {\r\n            \"type\" : CreateAppointment,\r\n            \"description\": \"blabla [ bl]\"\r\n        }\r\n    },\r\n    func=blalllll,\r\n    # Note: add output formatter \r\n    # enum_values = [{}]\r\n    \r\n)\n```\n\n\n### Possible Solution\n\nDon't do this please please please. \n\n### Steps to Reproduce\n\nit runs on the main branch but not on your last python release. ",
      "state": "closed",
      "author": "j-beniwal",
      "author_type": "User",
      "created_at": "2025-01-11T09:21:16Z",
      "updated_at": "2025-01-17T12:03:26Z",
      "closed_at": "2025-01-17T12:00:12Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/202/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/202",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/202",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:14.444357",
      "comments": [
        {
          "author": "j-beniwal",
          "body": "<img width=\"923\" alt=\"Screenshot 2025-01-11 at 2 47 50 PM\" src=\"https://github.com/user-attachments/assets/248d6036-6b31-44a0-a605-ee8d5ccac12c\" />\r\n[Anthony Bernabeu] Please",
          "created_at": "2025-01-11T09:23:42Z"
        },
        {
          "author": "cornelcroi",
          "body": "Hi, \r\nI think you may use a version where this feature was not released yet.\r\nThe current version is v0.1.6.\r\nAlso, the code in tools utils folder is (which is correct)\r\n\r\n```python\r\n\"\"\"Module for importing helper functions and Logger.\"\"\"\r\nfrom .helpers import is_tool_input, conversation_to_dict\r\nfr",
          "created_at": "2025-01-11T09:56:31Z"
        },
        {
          "author": "j-beniwal",
          "body": "<img width=\"1290\" alt=\"Screenshot 2025-01-12 at 9 27 05 AM\" src=\"https://github.com/user-attachments/assets/787f692a-dc4f-4f42-a9d7-2ed026afc1a9\" />\r\n\r\nI see Yesterday there was a release made for python v0.1.6\r\n\r\nLet me try with the new release.  ",
          "created_at": "2025-01-12T04:00:14Z"
        },
        {
          "author": "j-beniwal",
          "body": "Closing this as this got resolved after the version upgrade v0.1.6\n\nBut I see a lot of discrepancies  in the examples and documentation. \n\nPlease, its fine to release slow but don't release buggy things. Its really painful. 😣 ",
          "created_at": "2025-01-17T12:00:12Z"
        },
        {
          "author": "cornelcroi",
          "body": "Can you tell us about those discrepancies to fix them ?\nAlso what bugs have you found?",
          "created_at": "2025-01-17T12:02:53Z"
        }
      ]
    },
    {
      "issue_number": 102,
      "title": "ChatStorage:is_consecutive_message - Either the name of the function is incorrect or the check is!",
      "body": "### Expected Behaviour\n\n`consecutive` - it means things organized sequentially\r\n\r\nIn the context of chat messages, the following is consecutive -\r\nassistant-user-assistant-user\r\nand the following is not consecutive\r\nassistant-assistant or user-user\r\n\r\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/9abefed4a85185a7235f627156de4555c977240b/python/src/multi_agent_orchestrator/storage/chat_storage.py#L23\r\n\r\nThe check at the above line will return `true` if the pattern is assistant-assistant or user-user\r\n\r\nIf someone looks at the name of the function (without considering how it is used and where it is used) they would consider the above check to be incorrect\r\n\r\nI looked at the usage of your API in \r\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/9abefed4a85185a7235f627156de4555c977240b/python/src/multi_agent_orchestrator/storage/dynamodb_chat_storage.py#L32\r\n\r\nHow it is used will not result in a functional problem/bug however the way you have named the API and used it isn't very clear and confusing. \r\n \n\n### Current Behaviour\n\nEither the API name is incorrect or the check & usage is incorrect\n\n### Code snippet\n\n```python\nSee above\n```\n\n\n### Possible Solution\n\n- Change the check in is_consecutive function to `return conversation[-1].role != new_message.role`\r\n- use the API as `not is_consecutive` in the ChatStorage implementation classes\n\n### Steps to Reproduce\n\nSee above",
      "state": "closed",
      "author": "ksachdeva",
      "author_type": "User",
      "created_at": "2024-11-22T15:27:45Z",
      "updated_at": "2025-01-10T09:35:49Z",
      "closed_at": "2025-01-10T09:35:49Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/102/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/102",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/102",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:14.727505",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "https://github.com/awslabs/multi-agent-orchestrator/pull/200",
          "created_at": "2025-01-09T20:06:41Z"
        }
      ]
    },
    {
      "issue_number": 187,
      "title": "Bug: orchestrator.set_classifier() doesn't updates classifier's agents",
      "body": "### Expected Behaviour\n\nWhen adding agents to an orchestrator and then setting a classifier via the api: `orchestrator.set_classifier()`\r\nThe list of agents is not updated in the new selected classifier.\r\nSee set_classifier:\r\n```python\r\ndef set_classifier(self, intent_classifier: Classifier):\r\n        self.classifier = intent_classifier\r\n```\r\n\n\n### Current Behaviour\n\ncall `orchestrator.set_classifier()` once all the agents have been added and see that the classifier is not able to find an agent.\n\n### Code snippet\n\n```python\norchestrator.add_agent(weather_agent)\r\norchestrator.add_agent(tech_agent)\r\norchestrator.set_classifier(\r\n        intent_classifier=AnthropicClassifier(\r\n            AnthropicClassifierOptions(\r\n                api_key=\"key\")\r\n        )\r\n    )\n```\n\n\n### Possible Solution\n\nSet the classifier before adding agents.\n\n### Steps to Reproduce\n\n```python\r\norchestrator.add_agent(weather_agent)\r\norchestrator.add_agent(tech_agent)\r\norchestrator.set_classifier(\r\n        intent_classifier=AnthropicClassifier(\r\n            AnthropicClassifierOptions(\r\n                api_key=\"key\")\r\n        )\r\n    )\r\n```",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-12-27T14:08:34Z",
      "updated_at": "2025-01-10T09:35:27Z",
      "closed_at": "2025-01-10T09:35:27Z",
      "labels": [
        "bug",
        "triage",
        "python",
        "priority-medium"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/187/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/187",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/187",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.006807",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "https://github.com/awslabs/multi-agent-orchestrator/pull/199",
          "created_at": "2025-01-09T20:00:21Z"
        }
      ]
    },
    {
      "issue_number": 184,
      "title": "Feature request: Remove modelId from Agent class (ty and py)",
      "body": "### Use case\n\nThe `modelId`from the Agent class does not make any sense because an agent is not necessarily an LLM based agent.\n\n### Solution/User Experience\n\nRemove the field.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-26T18:27:01Z",
      "updated_at": "2025-01-10T08:02:23Z",
      "closed_at": "2025-01-10T08:02:23Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/184/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/184",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/184",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.303490",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Also remove region",
          "created_at": "2024-12-27T16:26:08Z"
        },
        {
          "author": "cornelcroi",
          "body": "https://github.com/awslabs/multi-agent-orchestrator/pull/198",
          "created_at": "2025-01-09T19:41:16Z"
        },
        {
          "author": "brnaba-aws",
          "body": "See #198 ",
          "created_at": "2025-01-10T08:02:23Z"
        }
      ]
    },
    {
      "issue_number": 131,
      "title": "Feature request: DynamoDbChatStorage option to replace sensitive content by placeholder",
      "body": "### Use case\r\n\r\nUsing Amazon Bedrock with DynamoDB for a production use case. A highly valuable feature would be the ability to detect and replace sensitive content with placeholders (e.g., replacing 'company-name' with '#PLACEHOLDER#') before storing it in DynamoDB Chat Storage.\r\n\r\nAdditionally, when the agent reviews the DynamoDB chat history to answer a query, the system should replace '#PLACEHOLDER#' with the original content. This ensures the agent responds accurately, using the original content rather than the placeholder.\r\n\r\n### Solution/User Experience\r\n\r\nEnhance user experience by eliminating the need for custom storage implementation, making it an optional feature directly available within DynamoDB Chat Storage.\r\n\r\n### Alternative solutions\r\n\r\n```markdown\r\nMaintain the implementation of a custom storage solution for DynamoDB instead of using DynamoDbChatStorage.\r\n```",
      "state": "open",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2024-12-03T20:28:16Z",
      "updated_at": "2025-01-09T21:07:14Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/131/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/131",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/131",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.574550",
      "comments": [
        {
          "author": "tica3467",
          "body": "Really sorry but am back now ",
          "created_at": "2024-12-24T17:02:03Z"
        },
        {
          "author": "tica3467",
          "body": "Really sorry but am back now ",
          "created_at": "2024-12-24T17:02:08Z"
        }
      ]
    },
    {
      "issue_number": 172,
      "title": "Feature request: Email simulator demo in streamlit demo",
      "body": "### Use case\n\nMigrate email simulator cdk stack to streamlit global demo\n\n### Solution/User Experience\n\nThe email simulator demo part of global demo\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:21:13Z",
      "updated_at": "2025-01-09T21:06:46Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/172/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/172",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/172",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.887352",
      "comments": []
    },
    {
      "issue_number": 173,
      "title": "Feature request: Chat demo in streamlit",
      "body": "### Use case\n\nMigrate chatdemo to streamlit global demo\n\n### Solution/User Experience\n\nMigrate chatdemo to streamlit global demo\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:21:42Z",
      "updated_at": "2025-01-09T21:06:33Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/173/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/173",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/173",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.887376",
      "comments": []
    },
    {
      "issue_number": 154,
      "title": "Feature request: Add support for Multi-Agent Collaboration with Amazon Bedrock Agents",
      "body": "### Use case\n\nIt would be great if the library supports creation of supervisor / collaborator agents as announced during Re:Invent 2024: https://docs.aws.amazon.com/bedrock/latest/userguide/agents-multi-agent-collaboration.html\r\n\r\n\n\n### Solution/User Experience\n\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-agent/client/create_agent.html has the \"agentCollaboration\" parameter and there are other methods like https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-agent/client/associate_agent_collaborator.html to associate a collaborator to a supervisor\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "maxritter",
      "author_type": "User",
      "created_at": "2024-12-14T14:38:26Z",
      "updated_at": "2025-01-09T20:55:40Z",
      "closed_at": "2024-12-17T08:31:27Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/154/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/154",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/154",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:15.887383",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @maxritter ,\r\nThanks for using the Multi agent orchestrator.\r\nI just want to clarify that we are not linked to the Bedrock Agent Collaboration.\r\nOur framework doesn't create any resources. You create resources and you can bring them into the orchestrator.\r\nAs per Multi agent collaboration, the ag",
          "created_at": "2024-12-17T08:19:22Z"
        },
        {
          "author": "maxritter",
          "body": "Hey @brnaba-aws,\r\nthanks a lot for the clarification, now I understand it!\r\nBest,\r\nMax",
          "created_at": "2024-12-17T08:31:27Z"
        },
        {
          "author": "cornelcroi",
          "body": "Hi,\n\nWe just released this new built in Agent: Supervisor Agent \nhttps://awslabs.github.io/multi-agent-orchestrator/agents/built-in/supervisor-agent/\n",
          "created_at": "2025-01-09T20:55:39Z"
        }
      ]
    },
    {
      "issue_number": 176,
      "title": "Feature request: Supervisor agent - typescript",
      "body": "### Use case\n\nCreate a new built in agent - supervisor\r\ncode & doc\n\n### Solution/User Experience\n\nCreate a new built in agent - supervisor\r\ncode & doc\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:29:35Z",
      "updated_at": "2025-01-09T15:23:25Z",
      "closed_at": "2025-01-09T15:23:25Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/176/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/176",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/176",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:16.162460",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done https://github.com/awslabs/multi-agent-orchestrator/pull/196",
          "created_at": "2025-01-09T15:23:25Z"
        }
      ]
    },
    {
      "issue_number": 175,
      "title": "Feature request: Supervisor Agent - python",
      "body": "### Use case\n\nImplement a new built in agent : supervisor agent \r\ncode and doc\n\n### Solution/User Experience\n\nImplement a new built in agent : supervisor agent \r\ncode and doc\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:28:56Z",
      "updated_at": "2025-01-09T15:23:15Z",
      "closed_at": "2025-01-09T15:23:15Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/175/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/175",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/175",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:16.386882",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done https://github.com/awslabs/multi-agent-orchestrator/pull/196",
          "created_at": "2025-01-09T15:23:15Z"
        }
      ]
    },
    {
      "issue_number": 149,
      "title": "Feature request:  Add Asynchronous Message Queue Support with Rate Limiting ",
      "body": "### Use case\n\nRegular enterprise use cases require support for spiky workloads without violating rate limits from LLM Providers. The Multi Agent Orchestrator should be able to: \r\n1. Store the incoming messages in a queue\r\n2. Check the classifier to identify top LLMs for the request\r\n3. Check the rate limits and current consumption \r\n4. Request the appropriate LLM endpoint\r\n5. Receive the response and send it back to the requestor via Websockets\r\n\r\n\n\n### Solution/User Experience\n\nThe Multi Agent Orchestrator should be able to: \r\n1. Store the incoming messages in a queue\r\n2. Check the classifier to identify top LLMs for the request\r\n3. Check the rate limits and current consumption \r\n4. Request the appropriate LLM endpoint\r\n5. Receive the response and send it back to the requestor via Websockets\n\n### Alternative solutions\n\n```markdown\nFrameworks such as LLamaIndex supports async mode - but that targeted towards async IO non blocking http calls only. For a comprehensive enterprise grade Multi Agent Orchestrator solution, we need a custom solution\n```\n",
      "state": "closed",
      "author": "kaustavbecs",
      "author_type": "User",
      "created_at": "2024-12-11T16:15:02Z",
      "updated_at": "2025-01-09T10:11:40Z",
      "closed_at": "2025-01-09T10:11:40Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/149/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/149",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/149",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:16.622440",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @kaustavbecs, thank you for the proposition.\r\n\r\nTo have a async behaviour I think the best way is to handle this per agent (not at orchestrator level), because each agent is not necessary an LLM and because each agent could have different limits.\r\nTo implement this you could create a [custom agen",
          "created_at": "2024-12-12T18:02:42Z"
        },
        {
          "author": "cornelcroi",
          "body": "We're closing this issue due to inactivity. If this is still relevant, please feel free to reopen with updated information or create a new issue with additional context.",
          "created_at": "2025-01-09T10:11:40Z"
        }
      ]
    },
    {
      "issue_number": 192,
      "title": "Bug: Knowledge base citations/attribution stripped from agent response when invoked through orchestrator",
      "body": "### Expected Behaviour\n\n- Agents invoked through multiagent orchestrator retain the attributions (IE citing their sources) when used with a knowledge base. This is configured through the following built in prompt.\r\n\r\n`If you reference information from a search result within your answer, you must include a citation to source where the information was found. Each result has a corresponding source ID that you should reference.\\nNote that <sources> may contain multiple <source> if you include information from multiple results in your answer.\\nDo NOT directly quote the <search_results> in your answer. Your job is to answer the user's question as concisely as possible.\\nYou must output your answer in the following format. Pay attention and follow the formatting and spacing exactly:\\n<answer>\\n<answer_part>\\n<text>\\nfirst answer text\\n</text>\\n<sources>\\n<source>source ID</source>\\n</sources>\\n</answer_part>\\n<answer_part>\\n<text>\\nsecond answer text\\n</text>\\n<sources>\\n<source>source ID</source>\\n</sources>\\n</answer_part>\\n</answer>\"`\n\n### Current Behaviour\n\n- I can see in the response from bedrock in modelinvocation logs in cloudwatch that the agent is indeed getting the response in that format with citations included, however the final Agent Response text content is stripped of all that information and contains the agent response without the citations.\n\n### Code snippet\n\n```python\n# Route the query to the orchestrator\r\n    response = await orchestrator.route_request(\r\n        user_query,\r\n        user_id=str(user_id),\r\n        session_id=str(topic_id)\r\n    )\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\n- invoke either a BedrockLLMAgent or AmazonBedrockAgent through multi-agent-orchestrator route_request\r\n- either enable trace or watch model invocation logs in cloudwatch\r\n- trace/logs will show agent response with source citations\r\n- final response from orchestrator will be the raw text WITHOUT source citations.",
      "state": "open",
      "author": "CaelanAlonge",
      "author_type": "User",
      "created_at": "2025-01-03T20:04:16Z",
      "updated_at": "2025-01-06T15:45:45Z",
      "closed_at": null,
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/192/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/192",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/192",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:16.890941",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "See #193 ",
          "created_at": "2025-01-06T15:45:44Z"
        }
      ]
    },
    {
      "issue_number": 183,
      "title": "A collection of feedbacks on code quality and extensibility ",
      "body": "### Expected Behaviour\n\nWhile these enhancements may not impact the runtime they are important for the maintainability of the project and overall code quality\n\n### Current Behaviour\n\n###  Enhancements related to Typing\r\n\r\n* Since you require python version >= 3.11, you do not have use the `List, Dict, Union, Optional` etc from `typing`. Simply use the modern language features i.e. `list, dict` etc\r\n\r\n* For `Optional` you can do \r\n```python\r\ndef some_func(an_arg: int | None = None):\r\n```\r\n\r\n* For `Union` you can do \r\n```python\r\ndef some_func(an_arg: int | None = None) -> str | SomeType:\r\n```\r\n\r\n### Enhancements related to Storage\r\n\r\n* The notion of storage should not include trimming of the conversation. This would be useful if you want to keep all the messages in the persistent storage. For example, the user may want to look at the old conversations. In your current architecture, only non-persistent sessions would make sense. \r\n\r\n* Assuming you only will support non-persistent sessions and storage is supposed to be evaporated after the session. Even in this case it would be a good idea to pass the function to trim as an argument instead of hardcoding it in the abstract class. This gives the user the flexibility to chose various trimming strategies. \r\n\r\n\r\n### Enhancements related to  Agents related API (classifier, other agents and orchestrator)\r\n\r\n***`modelId` as an optional parameter***\r\n\r\nThe `modelId` is an optional parameter in your Agent construction API and set to default. \r\n\r\nThis is an important parameter and very easy for the user to forget setting it and end up using the default model. Explicit is better than implicit most of the time for things that are very important/key.  Yes, the framework should provide default implementations but too much magic especially related to important choices (e.g. modelId) should not be made optional. \r\n\r\n***Possible issue when re-using the agents & orchestrator***\r\n\r\nAt various places your code updates various instance variables. For example \r\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/67a294457dec986ce2b670dcd9d9a979c2e5d8d6/python/src/multi_agent_orchestrator/agents/bedrock_llm_agent.py#L112\r\n\r\nThe `process_request` or `route_request` types API, require `user_id`, `session_id` etc.  Given this, your apis seem to imply that an application could create **one** instance of `classifier`, `agents` etc and reuse it for all users and sessions. However, it conflicts with you updating the instance variables from within these functions. \r\n\r\nWorkaround/Guidance:\r\nIf a developer is aware of all this they should make sure that for every connection they create a new orchestrator, classifier, and agent instance.  Giving this guidance means that the framework is inconsistent. \r\n\r\nYour examples  use `lambda` functions where the instances are created globally. This works out because of the way lambdas behave in the first place. \r\n\r\n- At minimum, you should not modify the instance variables from within the API. This would keep things thread-safe etc as well (just in case developer creates multiple threads). A significant number of developers do not know what they are doing!! They would follow your examples which may not work in other setups. \r\n\r\nIf your intention indeed is that the developer will create a new instance of these for every user connection then you should pass the `boto3` client as a constructor argument\r\n\r\n***Lot of template/code repetition***\r\n\r\nA significant portion of agents could share code. As such if you had used langchain or llamaindex some of the manual creation of prompts, tool schema, support for different LLM providers  etc would have been done for you. \r\n\r\nOverall the APIs are confusing & can easily create bugs difficult to debug in production environment. \r\n \r\n \r\n \n\n### Code snippet\n\n```python\nPlease see the current behavior section\n```\n\n\n### Possible Solution\n\nPlease see the current behavior section\n\n### Steps to Reproduce\n\nPlease see the current behavior section",
      "state": "closed",
      "author": "ksachdeva",
      "author_type": "User",
      "created_at": "2024-12-26T17:01:55Z",
      "updated_at": "2024-12-26T20:40:00Z",
      "closed_at": "2024-12-26T20:40:00Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/183/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/183",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/183",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:17.129569",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @ksachdeva,\r\n\r\nCould you put this in a [Discussion](https://github.com/awslabs/multi-agent-orchestrator/discussions)?\r\nWe would like to debate these points and it would make more sense to do this in a discussion. ",
          "created_at": "2024-12-26T19:53:28Z"
        },
        {
          "author": "ksachdeva",
          "body": "moved to discussions",
          "created_at": "2024-12-26T20:40:00Z"
        }
      ]
    },
    {
      "issue_number": 92,
      "title": "Feature request: Update Custom Storage documentation",
      "body": "### Use case\n\nUpdate the Custom storage documentation to explain that the `fetchAllChats` function must concatenate the `agent-id` with the assistant response.\r\n\n\n### Solution/User Experience\n\nAs above\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-11-20T16:02:02Z",
      "updated_at": "2024-12-26T14:11:24Z",
      "closed_at": "2024-12-26T14:11:24Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/92/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/92",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/92",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:17.349284",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Released.",
          "created_at": "2024-12-26T14:11:24Z"
        }
      ]
    },
    {
      "issue_number": 80,
      "title": "Bug: generating ID for agent removes digits as well",
      "body": "### Expected Behaviour\n\nif an agent name includes digits e.g. 'Image2You' a generated agent id should be 'image-2-you' or 'image2you'\n\n### Current Behaviour\n\ncurrently the regex in 'generate_key_from_name' method in 'agents.py' https://github.com/awslabs/multi-agent-orchestrator/blob/main/python/src/multi_agent_orchestrator/agents/agent.py#L52 removes digits as well leaving agent id without digits\r\n\r\nagent name 'Image2You' becomes image-text\r\n\r\nthis can result in incorrect identification of agents because you can have e.g. 'image2you' and 'image4you' agents and they would become image-you and image-you hence orchestrator would say that agent with the same id already exists\n\n### Code snippet\n\n```python\nagent = BedrockLLMAgent(BedrockLLMAgentOptions(\r\n    name='Image2You',\r\n    description='Some description'\r\n))\r\n\r\norchestrator.add_agent(agent)\r\n\r\nall_agents = orchestrator.get_all_agents()\r\n\r\nfor agent_id, details in all_agents.items():\r\n\tagent_name = details['name']\r\n\tprint(f\"Agent ID: {agent_id}, Agent Name: {agent_name}\")\n```\n\n\n### Possible Solution\n\nchange regex pattern to '[^a-zA-Z0-9\\s-]' to include digits in generated agent id\n\n### Steps to Reproduce\n\nagent1 = BedrockLLMAgent(BedrockLLMAgentOptions(\r\n    name='Image2You',\r\n    description='Some description'\r\n))\r\n\r\nagent2 = BedrockLLMAgent(BedrockLLMAgentOptions(\r\n    name='Image4You',\r\n    description='Some description'\r\n))\r\n\r\norchestrator.add_agent(agent1)\r\norchestrator.add_agent(agent2)",
      "state": "closed",
      "author": "mivanick",
      "author_type": "User",
      "created_at": "2024-11-15T09:12:05Z",
      "updated_at": "2024-12-26T13:44:29Z",
      "closed_at": "2024-12-26T13:44:29Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/80/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/80",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/80",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:17.586969",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi @mivanick,\r\nThanks for pointing this out.\r\nThe bug is now fixed https://github.com/awslabs/multi-agent-orchestrator/pull/165\r\nIt will be part of the next release.",
          "created_at": "2024-12-26T13:44:29Z"
        }
      ]
    },
    {
      "issue_number": 75,
      "title": "Feature request: Cleanup existing examples",
      "body": "### Use case\n\nAdd/Update a readme page for each example in examples folder\n\n### Solution/User Experience\n\nEach example must have a readme page that explains what that examples does and how to use it.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-11-06T09:52:45Z",
      "updated_at": "2024-12-26T10:50:54Z",
      "closed_at": "2024-12-26T10:50:54Z",
      "labels": [
        "code-sample"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/75/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/75",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/75",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:17.795596",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done.",
          "created_at": "2024-12-26T10:50:54Z"
        }
      ]
    },
    {
      "issue_number": 110,
      "title": "Feature request: Built-In SQL Storage Support",
      "body": "### Use case\r\n\r\nEnable support for SQL-based databases as built-in conversation storage to provide scalability, flexibility, and ease of integration with existing systems. This will cater to users managing large-scale conversations that require efficient querying, indexing, and handling of structured data.\r\n\r\n### Solution/User Experience\r\n\r\nAllow users to configure any SQL-based database (e.g., MySQL, PostgreSQL, SQLite) as the conversation storage backend.\r\n\r\n### Alternative solutions\r\n\r\n```markdown\r\nCustom Storage can be implemented\r\n```",
      "state": "closed",
      "author": "Rajaniraiyn",
      "author_type": "User",
      "created_at": "2024-11-26T18:55:44Z",
      "updated_at": "2024-12-26T10:48:08Z",
      "closed_at": "2024-12-26T10:48:07Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/110/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/110",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/110",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:18.051639",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done.",
          "created_at": "2024-12-26T10:48:08Z"
        }
      ]
    },
    {
      "issue_number": 171,
      "title": "Feature request: Refactoring examples",
      "body": "### Use case\n\nOptimize the examples \n\n### Solution/User Experience\n\nCrete these folders:\r\n```\r\nexamples/python\r\n\t- root - streamlit\r\n\t\t- demo1\r\n\t\t- demo2\r\n\t\t- demo3\r\nexamples/typescript\r\n\t\t- code ts  - virer les cdk -> gitlab interne\r\ncode_snippets\r\n\t\ttypescript\r\n\t\t\t- demo1\r\n\t\t\t- demo2\r\n\t\tpython\r\n\t\t\t- demo1\r\n```\t\t\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:20:08Z",
      "updated_at": "2024-12-26T10:47:46Z",
      "closed_at": "2024-12-26T10:47:45Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/171/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/171",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/171",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:18.272016",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done.",
          "created_at": "2024-12-26T10:47:45Z"
        }
      ]
    },
    {
      "issue_number": 179,
      "title": "Dead Link to API reference section",
      "body": "https://github.com/awslabs/multi-agent-orchestrator/blame/b2037fad796579a5eaf3c5f131778866a8a2b50e/docs/src/content/docs/orchestrator/overview.mdx#L216",
      "state": "closed",
      "author": "wwwmaster1",
      "author_type": "User",
      "created_at": "2024-12-24T22:04:24Z",
      "updated_at": "2024-12-25T08:15:24Z",
      "closed_at": "2024-12-25T08:15:24Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/179/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/179",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/179",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:18.480873",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "I appreciate you bringing this to our attention, @wwwmaster1 . \r\nWe've now fixed the page by removing the broken link and adding code snippets.",
          "created_at": "2024-12-25T08:15:24Z"
        }
      ]
    },
    {
      "issue_number": 153,
      "title": "Feature request: Add support for return Control in Bedrock Agents",
      "body": "### Use case\n\nRather than sending the information that your agent has elicited from the user to a Lambda function for fulfillment, you can instead choose to return control to the agent developer by sending the information in the [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) response. You can configure return of control to the agent developer when creating or updating an action group. Through the API, you specify RETURN_CONTROL as the customControl value in the actionGroupExecutor object in a [CreateAgentActionGroup](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html) or [UpdateAgentActionGroup](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html) request. For more information, see [Add an action group to your agent in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-action-add.html).\n\n### Solution/User Experience\n\nAdding a callback in case of return control so the developer can mock them up/make a call and return the data to Bedrock Agents.\n\n### Alternative solutions\n\n```markdown\nNone\n```\n",
      "state": "open",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-12-12T15:53:16Z",
      "updated_at": "2024-12-24T17:00:18Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "python",
        "typescript",
        "priority-medium"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/153/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/153",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/153",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:18.740205",
      "comments": [
        {
          "author": "tica3467",
          "body": "Grate to hear from you ",
          "created_at": "2024-12-24T17:00:17Z"
        }
      ]
    },
    {
      "issue_number": 141,
      "title": "Bug: Same error in response for all queries in the example demos.",
      "body": "### Expected Behaviour\n\nI followed the documentation and  deployed both the **Multi agent orchestrator demo** and **AI-Powered E-commerce Support Simulator** apps.\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/ecommerce-support-simulator/\r\n\r\n\r\nFor any query I should have got a response other than an error.\n\n### Current Behaviour\n\nI am getting the error:\r\n\r\n**I'm sorry, an error occurred while processing your request. Please try again later.**\r\n\r\nfor both the apps.\r\n\r\n![image](https://github.com/user-attachments/assets/24c7c4a2-d358-4ce0-819e-d43d22b6f93f)\r\n\r\n![image](https://github.com/user-attachments/assets/d676624a-6275-40b3-8489-8b58831f9d3e)\r\n\n\n### Code snippet\n\n```python\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/#-deployment-steps\r\n\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/ecommerce-support-simulator/#-deployment-guide\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nFollow the deployment steps for both example demos:\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/chat-demo-app/#-deployment-steps\r\n\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/examples/ecommerce-support-simulator/#-deployment-guide\r\n\r\n\r\nThen enter the sample queries suggested in the docs in both cases.",
      "state": "open",
      "author": "sauravesr",
      "author_type": "User",
      "created_at": "2024-12-05T04:56:55Z",
      "updated_at": "2024-12-24T16:25:40Z",
      "closed_at": null,
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/141/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/141",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/141",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:19.080788",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi,\r\n\r\n1 - Have you checked if the LLM models are available in your account? Make sure you activate them following the procedure https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html\r\n\r\nThis demo uses 2 models `anthropic.claude-3-sonnet-20240229-v1:0`and `anthropic.claude-3-haiku-20",
          "created_at": "2024-12-05T09:40:47Z"
        },
        {
          "author": "sauravesr",
          "body": "Hi @cornelcroi \r\n\r\nI have enabled the models and the chat demo app is working now:\r\n\r\n![image](https://github.com/user-attachments/assets/1ee424ce-236b-412f-9a83-7a09a9665440)\r\n\r\n\r\nHowever the AI ecommerce support simulator still shows the same response:\r\n\r\n![image](https://github.com/user-attachmen",
          "created_at": "2024-12-13T04:58:37Z"
        },
        {
          "author": "cornelcroi",
          "body": "Hi,\r\n\r\nWe are in the middle of refactoring many examples (this one included).\r\nWe will do a global demo app that will include many demos in a single UI, so it will be much easier to see the demo.\r\nI'll post a message here when this app will be part of it.",
          "created_at": "2024-12-24T09:48:40Z"
        }
      ]
    },
    {
      "issue_number": 174,
      "title": "Feature request: Migrate text-2-structured-output to global demo",
      "body": "### Use case\n\nMigrate text-2-structured-output to global demo\n\n### Solution/User Experience\n\nMigrate text-2-structured-output to global demo\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-12-24T09:22:24Z",
      "updated_at": "2024-12-24T16:23:53Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/174/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/174",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/174",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:19.391336",
      "comments": []
    },
    {
      "issue_number": 167,
      "title": "Bug: Error while deploying the chat-chainlit-app",
      "body": "### Expected Behaviour\n\nWhile running the chat-chainlit-app getting the below error message. I am using the python version 3.12.6 and chainlit 1.3.2 \r\n\r\n>python app.py\r\nTraceback (most recent call last):\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\app.py\", line 2, in <module>\r\n    import chainlit as cl\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\__init__.py\", line 18, in <module>\r\n    from chainlit.action import Action\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\action.py\", line 5, in <module>\r\n    from chainlit.telemetry import trace_event\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\telemetry.py\", line 12, in <module>\r\n    from chainlit.config import config\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\config.py\", line 538, in <module>\r\n    config = load_config()\r\n             ^^^^^^^^^^^^^\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\config.py\", line 507, in load_config\r\n    settings = load_settings()\r\n               ^^^^^^^^^^^^^^^\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\chainlit\\config.py\", line 479, in load_settings\r\n    code_settings = CodeSettings(action_callbacks={})\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\pydantic\\_internal\\_dataclasses.py\", line 121, in __init__\r\n    s.__pydantic_validator__.validate_python(ArgsKwargs(args, kwargs), self_instance=s)\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:xxxxxxxxxxxxxxxxxxxx\\multi-agent-orchestrator\\examples\\chat-chainlit-app\\venv\\Lib\\site-packages\\pydantic\\_internal\\_mock_val_ser.py\", line 100, in __getattr__\r\n    raise PydanticUserError(self._error_message, code=self._code)\r\npydantic.errors.PydanticUserError: `CodeSettings` is not fully defined; you should define `Action`, then call `pydantic.dataclasses.rebuild_dataclass(CodeSettings)`.\n\n### Current Behaviour\n\nGetting the error.\n\n### Code snippet\n\n```python\nUsed the code from this repo https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-chainlit-app and followed the steps as well.\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nhttps://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/chat-chainlit-app",
      "state": "closed",
      "author": "sreedharguda",
      "author_type": "User",
      "created_at": "2024-12-23T04:58:36Z",
      "updated_at": "2024-12-23T16:42:09Z",
      "closed_at": "2024-12-23T16:42:09Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/167/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/167",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/167",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:19.391360",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @sreedharguda ,\r\nThanks for using the multi-agent orchestrator. It seems like this issue is related to pydantic version not aligned with chainlit.\r\n\r\nWe have updated our requirements.txt which should fix the issue and let you use the chainlit app.\r\nLet us know how it goes and if we can close the ",
          "created_at": "2024-12-23T08:43:00Z"
        },
        {
          "author": "sreedharguda",
          "body": "Hi @brnaba-aws , Thank you for your help, now am able to run the code and its working as expected. Please close the issue. ",
          "created_at": "2024-12-23T16:41:51Z"
        },
        {
          "author": "sreedharguda",
          "body": "Hi @brnaba-aws , Thank you for your help, now am able to run the code and its working as expected. Please close the issue.",
          "created_at": "2024-12-23T16:42:09Z"
        }
      ]
    },
    {
      "issue_number": 121,
      "title": "Bug: open AI agents and the docs are off sync",
      "body": "### Expected Behaviour\n\nsystemPrompt property is part of OpenAIAgentOptions\n\n### Current Behaviour\n\nsystemPrompot is not part of OpenAIAgentOptions\r\n\r\nNeither does it have agent.setSystemPrompt(...)\n\n### Code snippet\n\n```python\nimport { OpenAIAgent, OpenAIClassifier } from \"multi-agent-orchestrator\";\r\nimport { MultiAgentOrchestrator } from \"multi-agent-orchestrator\";\r\n\r\nconst agent = new OpenAIAgent({\r\n  name: 'OpenAI Assistant',\r\n  description: 'A versatile AI assistant powered by OpenAI models',\r\n  apiKey: 'your-openai-api-key',\r\n  model: 'gpt-4o',\r\n  streaming: true,\r\n  inferenceConfig: {\r\n    maxTokens: 500,\r\n    temperature: 0.7,\r\n    topP: 0.9,\r\n    stopSequences: ['Human:', 'AI:']\r\n  },\r\n  systemPrompt: 'You are a helpful AI assistant specialized in answering questions about technology.'\r\n});\n```\n\n\n### Possible Solution\n\nUpdate your docs\n\n### Steps to Reproduce\n\n1. npm install multi-agent-orchestrator\r\n2.  Add your own Open AI code\r\n```typescript\r\nimport { OpenAIAgent} from \"multi-agent-orchestrator\";\r\n\r\nconst agent = new OpenAIAgent({\r\n  name: 'OpenAI Assistant',\r\n  description: 'A versatile AI assistant powered by OpenAI models',\r\n  apiKey: 'your-openai-api-key',\r\n  model: 'gpt-4o',\r\n  streaming: true,\r\n  inferenceConfig: {\r\n    maxTokens: 500,\r\n    temperature: 0.7,\r\n    topP: 0.9,\r\n    stopSequences: ['Human:', 'AI:']\r\n  },\r\n  systemPrompt: 'You are a helpful AI assistant specialized in answering questions about technology.'\r\n});\r\n```\r\n\r\n3. Observe TS errors about systemPrompt. Examine your own TS and note it is indeed not there \r\nhttps://github.com/awslabs/multi-agent-orchestrator/blob/97b5e909a5037c6a03931fe58c8862a1c0a251ed/typescript/src/agents/openAIAgent.ts#L6",
      "state": "closed",
      "author": "dm-8thblock",
      "author_type": "User",
      "created_at": "2024-11-29T23:49:37Z",
      "updated_at": "2024-12-23T16:06:28Z",
      "closed_at": "2024-12-23T16:06:27Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/121/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/121",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/121",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:19.658421",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thank you, @dm-hadron for bringing up this issue! \r\nWe've updated the documentation to include more examples for the OpenAiAgent and have also added a Python version of the OpenAiAgent.",
          "created_at": "2024-12-23T16:06:28Z"
        }
      ]
    },
    {
      "issue_number": 142,
      "title": "Feature request: Add API call Actions/Action Group to retreivers",
      "body": "### Use case\n\nTo build RAG applications, a user should also have the option to specify a set of actions an agent can perform to deliver desired results to end users as an alternative to a knowledge base.\n\n### Solution/User Experience\n\nThese Actions/Action Groups can be a set of API call in a schema definition. With this, an agent can perform operations like to quickly retrieve available data via an API endpoint.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "baldcodr",
      "author_type": "User",
      "created_at": "2024-12-06T23:40:36Z",
      "updated_at": "2024-12-20T16:53:09Z",
      "closed_at": "2024-12-20T16:53:09Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/142/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/142",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/142",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:21.826354",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @baldcodr,\r\nThanks for your interest in the multi-agent-orchestrator. \r\nYou can implement your own [Retriever](https://awslabs.github.io/multi-agent-orchestrator/retrievers/overview/) if you like.\r\nIn the documentation we provided an example using Amazon Open Search. You can leverage this code an",
          "created_at": "2024-12-09T08:35:26Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@baldcodr \r\nDoes it answer your question? I'll close this issue if we don't hear anything back from you.\r\nThanks",
          "created_at": "2024-12-17T08:14:55Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing the issue due to inactivity from the owner.",
          "created_at": "2024-12-20T16:53:09Z"
        }
      ]
    },
    {
      "issue_number": 127,
      "title": "Feature request (roadman): RAG",
      "body": "RAG infra support similar to Assistants API tools.\r\n\r\nWe've used LangChain before, now using Assistants API tools, but are very keen to try multi-agent-orchestrator. But the key for us is RAG infra. Are there any plans/roadmap to have it as part of the lib?\r\n\r\nsorry for adding `bug` label ",
      "state": "closed",
      "author": "maxkoretskyi",
      "author_type": "User",
      "created_at": "2024-12-03T09:32:20Z",
      "updated_at": "2024-12-20T16:51:50Z",
      "closed_at": "2024-12-20T16:51:50Z",
      "labels": [
        "enhancement",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/127/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/127",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/127",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:22.042529",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Could you explain what you mean by 'RAG infra support' specifically?\r\nFor example [BedrockLLMAgent](https://awslabs.github.io/multi-agent-orchestrator/agents/built-in/bedrock-llm-agent/) does support RAG by using retriever parameter.\r\nDetails about retrievers https://awslabs.github.io/multi-agent-or",
          "created_at": "2024-12-04T13:10:39Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing the issue due to inactivity from the owner.",
          "created_at": "2024-12-20T16:51:50Z"
        }
      ]
    },
    {
      "issue_number": 163,
      "title": "Bug: Unexpected enableTrace Parameter Injection in BedrockFlowsAgent Calls",
      "body": "### Expected Behaviour\n\nWhen invoking the BedrockFlowsAgent in a Lambda environment, setting enableTrace=False (or not specifying it at all) should result in no enableTrace parameter being sent to Bedrock. If enableTrace=True is supported as per documentation, it should also not cause the request to fail due to unknown parameters.\n\n### Current Behaviour\n\nIn AWS Lambda, requests to Bedrock Flows fail with the following error, whether enableTrace is not specified or explicitly set to True:\r\n\r\n`Parameter validation failed:\r\nUnknown parameter in input: \"enableTrace\", must be one of: flowAliasIdentifier, flowIdentifier, inputs\r\n`\r\n\r\nThis issue does not occur when running the same code locally. It appears that enableTrace is being injected internally or not recognized by Bedrock, causing the Bedrock API to reject the payload.\n\n### Code snippet\n\n```python\nfrom multi_agent_orchestrator.agents import BedrockFlowsAgent, BedrockFlowsAgentOptions\r\n\r\ndef my_flow_input_encoder(agent, input, **kwargs):\r\n    # Minimal input encoder\r\n    return {\"inputs\": {\"file_key\": input[\"inputs\"][\"file_key\"]}}\r\n\r\n# Tried both with and without enableTrace:\r\n# - Without enableTrace parameter\r\n# - With enableTrace=True as per documentation\r\n\r\nsentiment_agent = BedrockFlowsAgent(BedrockFlowsAgentOptions(\r\n    name=\"sentiment-agent\",\r\n    description=\"Agent for sentiment analysis\",\r\n    flowIdentifier=\"yy\",\r\n    flowAliasIdentifier=\"yy\",\r\n    flow_input_encoder=my_flow_input_encoder,\r\n    # enableTrace=True or omitted entirely still causes the error\r\n))\n```\n\n\n### Possible Solution\n\nInvestigate if a specific library version or global configuration variable injects enableTrace unexpectedly.\n\n### Steps to Reproduce\n\n1. Deploy the above code to an AWS Lambda function with the multi_agent_orchestrator library.\r\n2. Attempt to invoke the function:\r\n\r\n  - With enableTrace omitted.\r\n  - With enableTrace=True included in BedrockFlowsAgentOptions.\r\n\r\n3. Observe the error indicating enableTrace is an unknown parameter, despite the local environment running the same code without issues.",
      "state": "open",
      "author": "guisartori88",
      "author_type": "User",
      "created_at": "2024-12-19T14:14:12Z",
      "updated_at": "2024-12-20T16:50:50Z",
      "closed_at": null,
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/163/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/163",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/163",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:22.262409",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @guisartori88 ,\r\n\r\ncan you please tell us the version of boto3 you have locally vs the one in lambda?\r\n\r\nIt might be a boto3 parameter validation issue.",
          "created_at": "2024-12-19T14:42:55Z"
        },
        {
          "author": "guisartori88",
          "body": "Thank you so much for your response! After adjusting the boto3 version to 1.35.0, as required by the multi-agent-orchestrator==0.1.2, the issue was resolved. \r\n\r\n\r\nLocal Environment:\r\n`Version: 1.35.84\r\nSummary: The AWS SDK for Python`\r\n\r\n\r\nLambda Environment:\r\n`\"body\": \"Boto3 version: 1.34.145, Bot",
          "created_at": "2024-12-19T15:29:12Z"
        },
        {
          "author": "brnaba-aws",
          "body": "This is still strange because boto3 doesn't make any mention of enableTrace: https://boto3.amazonaws.com/v1/documentation/api/1.35.0/reference/services/bedrock-agent-runtime/client/invoke_flow.html\r\n\r\nwhile the API does: https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Invok",
          "created_at": "2024-12-19T15:35:40Z"
        },
        {
          "author": "guisartori88",
          "body": "Exactly! That’s why I was having a hard time. Honestly, it was more luck than following the documentation hahaha\r\n\r\nThank you again for looking into this",
          "created_at": "2024-12-19T15:52:52Z"
        }
      ]
    },
    {
      "issue_number": 158,
      "title": "Bug: BedrockInlineAgent and BedrockInlineAgentOptions not in index.d.ts",
      "body": "### Expected Behaviour\n\nI should be able to import BedrockInlineAgent and BedrockInlineAgentOptions using the following:\r\n```ts\r\nimport { BedrockInlineAgent, type BedrockInlineAgentOptions } from 'multi-agent-orchestrator';\r\n```\n\n### Current Behaviour\n\nThis is not working as both BedrockInlineAgent and BedrockInlineAgentOptions are not exxported inside the index.d.ts.\n\n### Code snippet\n\n```python\nimport { BedrockInlineAgent, type BedrockInlineAgentOptions } from 'multi-agent-orchestrator';\n```\n\n\n### Possible Solution\n\nAdding the following to the index.d.ts is solving the issue:\r\n```ts\r\nexport { BedrockInlineAgent, BedrockInlineAgentOptions } from './agents/bedrockInlineAgent';\r\n```\n\n### Steps to Reproduce\n\n- Try to import in a ts file like this:\r\n```ts\r\nexport { BedrockInlineAgent, BedrockInlineAgentOptions } from './agents/bedrockInlineAgent';\r\n```",
      "state": "closed",
      "author": "Flolight",
      "author_type": "User",
      "created_at": "2024-12-17T13:22:06Z",
      "updated_at": "2024-12-20T13:19:54Z",
      "closed_at": "2024-12-20T13:19:54Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/158/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/158",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/158",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:22.487741",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "fixed in #159 \r\nit will be release soon",
          "created_at": "2024-12-17T13:45:09Z"
        }
      ]
    },
    {
      "issue_number": 143,
      "title": "Feature request: Classifier with Amazon Nova Pro",
      "body": "### Use case\n\nI'm trying to apply [amazon nova pro model ](amazon.nova-pro-v1:0) for classifier but facing the problem\r\n```shell\r\nValidationException: This model doesn't support the toolConfig.toolChoice.tool field. Remove toolConfig.toolChoice.tool and try again.\r\n```\n\n### Solution/User Experience\n\nadd one classifier for amazon nova pro to suppport \n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "quangchuamz",
      "author_type": "User",
      "created_at": "2024-12-07T14:52:13Z",
      "updated_at": "2024-12-20T13:19:51Z",
      "closed_at": "2024-12-20T13:19:51Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/143/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/143",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/143",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:22.731518",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @quangchuamz ,\r\nThanks for reporting this. We have already added support for models that don't actually support toolChoice (not only Amazon Nova models). This is already [fixed in the current repo](https://github.com/awslabs/multi-agent-orchestrator/blob/36c193a8e446005bb6ecdbf80237774d36ee559d/p",
          "created_at": "2024-12-09T08:32:20Z"
        }
      ]
    },
    {
      "issue_number": 118,
      "title": "Feature request: Add Streaming for Agents for Bedrock",
      "body": "### Use case\n\nAgents for Bedrock now supports streaming for their final response\n\n### Solution/User Experience\n\nsupporting streaming will enhance the end user experience.\n\n### Alternative solutions\n\n```markdown\nnone\n```\n",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-11-28T11:33:33Z",
      "updated_at": "2024-12-17T08:14:02Z",
      "closed_at": "2024-12-17T08:14:02Z",
      "labels": [
        "enhancement",
        "python",
        "typescript",
        "priority-high"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/118/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/118",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/118",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:22.936676",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Fixed in #130 ",
          "created_at": "2024-12-17T08:13:45Z"
        }
      ]
    },
    {
      "issue_number": 150,
      "title": "Feature request: Add support for Bedrock Prompt Manangement",
      "body": "### Use case\n\nReusing Prompt management into a BedrockLLMAgent would simplify the agent's declaration.\r\nToday, a prompt defined in Prompt management needs to be manually ported to a BedrockLLMAgent.\n\n### Solution/User Experience\n\nPassing a Prompt Management Id and version so the BedrockLLMAgent can automatically reuse them.\n\n### Alternative solutions\n\n```markdown\nNone\n```\n",
      "state": "open",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-12-11T16:34:28Z",
      "updated_at": "2024-12-13T08:58:57Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "triage",
        "python",
        "typescript",
        "priority-low"
      ],
      "label_count": 5,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/150/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/150",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/150",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.157179",
      "comments": []
    },
    {
      "issue_number": 151,
      "title": "AWS SSO credentials not working",
      "body": "### Expected Behaviour\r\n\r\nI am following the quickstart guide in https://awslabs.github.io/multi-agent-orchestrator/general/quickstart/ . I have set my environment with the AWS CLI, and it seems to work ok. When I run the `aws sts get-caller-identity` I get the proper response. I have also tried login in again just in case. \r\n\r\nWhen running `npx ts-node main.ts` (I have renamed the .ts file) then I expect it to run the example agent. However, it does not seem to work\r\n\r\n### Current Behaviour\r\n\r\nI get an error :\r\n\r\n```\r\nError processing request: TypeError: Cannot read properties of undefined (reading 'sso_region')\r\n```\r\n\r\nand the stacktrace:\r\n```\r\nError processing request: TypeError: Cannot read properties of undefined (reading 'sso_region')\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js:201:36\r\n    at resolveProfileData (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js:245:12)\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:97:27\r\n    at coalesceProvider (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:124:18)\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:142:18\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/core/dist-cjs/index.js:86:17\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js:34:22\r\n    at BedrockClassifier.processRequest (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/classifiers/bedrockClassifier.ts:151:24)\r\n    at BedrockClassifier.classify (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/classifiers/classifier.ts:178:14)\r\n    at MultiAgentOrchestrator.classifyRequest (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/orchestrator.ts:343:32)\r\nError during intent classification: TypeError: Cannot read properties of undefined (reading 'sso_region')\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js:201:36\r\n    at resolveProfileData (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js:245:12)\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:97:27\r\n    at coalesceProvider (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:124:18)\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/property-provider/dist-cjs/index.js:142:18\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@smithy/core/dist-cjs/index.js:86:17\r\n    at /Users/angelgarcia/playtomic/others/bedrock-test/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js:34:22\r\n    at BedrockClassifier.processRequest (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/classifiers/bedrockClassifier.ts:151:24)\r\n    at BedrockClassifier.classify (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/classifiers/classifier.ts:178:14)\r\n    at MultiAgentOrchestrator.classifyRequest (/Users/angelgarcia/playtomic/others/bedrock-test/node_modules/multi-agent-orchestrator/src/orchestrator.ts:343:32)\r\n```\r\n\r\n### Code snippet\r\n\r\nThe code is the one from the guide\r\n\r\nWhen running a debugger, in the `ssoSessions` inside `credential-provider-sso/dist-cjs/index.js:186` are empty\r\n\r\nI have tried several changes to my .aws/config file, and now it looks like:\r\n\r\n```\r\n[profile default]\r\nsso_session = Syltek admin\r\nsso_account_id = 118590098072\r\nsso_role_name = AdministratorAccess\r\nregion = eu-central-1\r\noutput = json\r\n\r\n[profile syltek-admin-profile]\r\nsso_session = Syltek admin\r\nsso_account_id = 118590098072\r\nsso_role_name = AdministratorAccess\r\nregion = eu-central-1\r\noutput = json\r\n\r\n[sso-session 'Syltek admin']\r\nsso_start_url = https://d-99671edaa6.awsapps.com/start/#\r\nsso_region = eu-central-1\r\nsso_registration_scopes = sso:account:access\r\n```\r\n\r\n### Possible Solution\r\n\r\nI have tried setting my env variables `AWS_DEFAULT_REGION` and `AWS_PROFILE`, but it does not seem to work either. \r\n\r\n### Steps to Reproduce\r\n\r\nJust run the quickstart code.",
      "state": "closed",
      "author": "angelolloqui",
      "author_type": "User",
      "created_at": "2024-12-11T18:08:32Z",
      "updated_at": "2024-12-11T20:54:51Z",
      "closed_at": "2024-12-11T20:53:32Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/151",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/151",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.157199",
      "comments": [
        {
          "author": "angelolloqui",
          "body": "I was missing a config for the `default`. Replacing:\r\n```\r\n[profile default]\r\n```\r\nby:\r\n```\r\n[default]\r\n```\r\n\r\nand then, the name of the sso session with spaces was making it fail. I just replaced the name by something else and worked",
          "created_at": "2024-12-11T20:54:50Z"
        }
      ]
    },
    {
      "issue_number": 146,
      "title": "Feature request: Add support for saving more than one message at a time",
      "body": "### Use case\n\nto optimize writes into a storage, it should be possible to save more than 1 message at a time. Currently it is only possible to save one message which is not optimal\n\n### Solution/User Experience\n\nThis will reduce the number of writes in the storage.\n\n### Alternative solutions\n\n```markdown\nNone\n```\n",
      "state": "open",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-12-11T08:26:00Z",
      "updated_at": "2024-12-11T08:26:15Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "enhancement",
        "triage",
        "python",
        "typescript",
        "priority-medium"
      ],
      "label_count": 6,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/146/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/146",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/146",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.464669",
      "comments": []
    },
    {
      "issue_number": 144,
      "title": "Bug:I keep getting error when trying to call the route_request ",
      "body": "### Expected Behaviour\n\nI expect current date as output from the agent.\n\n### Current Behaviour\n\ncurrently it fails giving this error \r\n[2024-12-07 21:54:07,067: INFO/MainProcess] Task test_task[1b7e4950-7c2a-4ec1-9d13-629eff8822fb] received\r\n[2024-12-07 21:54:14,063: INFO/ForkPoolWorker-1] \r\n** CLASSIFIED INTENT **\r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] =======================\r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] > Text: What is the current date?\r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] > Selected Agent: Date Operation Agent\r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] > Confidence: 0.90\r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] \r\n[2024-12-07 21:54:14,064: INFO/ForkPoolWorker-1] \r\n** AGENT DATE-OPERATION-AGENT CHAT HISTORY **\r\n[2024-12-07 21:54:14,065: INFO/ForkPoolWorker-1] =============================================\r\n[2024-12-07 21:54:14,065: INFO/ForkPoolWorker-1] > - None -\r\n[2024-12-07 21:54:14,065: INFO/ForkPoolWorker-1] \r\n[2024-12-07 21:54:15,342: ERROR/ForkPoolWorker-1] Error during agent processing: object ConversationMessage can't be used in 'await' expression\r\n[2024-12-07 21:54:15,342: INFO/ForkPoolWorker-1] \r\n** EXECUTION TIMES **\r\n[2024-12-07 21:54:15,342: INFO/ForkPoolWorker-1] =====================\r\n[2024-12-07 21:54:15,342: INFO/ForkPoolWorker-1] > Classifying user intent: 6.776050567626953s\r\n[2024-12-07 21:54:15,342: INFO/ForkPoolWorker-1] > Agent Date Operation Agent | Processing request: 1.277111291885376s\r\n[2024-12-07 21:54:15,342: INFO/ForkPoolWorker-1] \r\n[2024-12-07 21:54:15,349: INFO/ForkPoolWorker-1] Task test_task[1b7e4950-7c2a-4ec1-9d13-629eff8822fb] succeeded in 8.280865754000843s: 'An error occurred while processing your request. Please try again later.'\n\n### Code snippet\n\n```python\noptions=OrchestratorConfig(\r\n    LOG_AGENT_CHAT=True,\r\n    LOG_CLASSIFIER_CHAT=True,\r\n    LOG_CLASSIFIER_RAW_OUTPUT=True,\r\n    LOG_CLASSIFIER_OUTPUT=True,\r\n    LOG_EXECUTION_TIMES=True,\r\n    MAX_RETRIES=3,\r\n    MAX_MESSAGE_PAIRS_PER_AGENT=50,\r\n    USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True,\r\n    CLASSIFICATION_ERROR_MESSAGE=\"Oops! We couldn't process your request. Please try again.\",\r\n    NO_SELECTED_AGENT_MESSAGE=\"I'm sorry, I couldn't determine how to handle your request. Could you please rephrase it?\",\r\n    GENERAL_ROUTING_ERROR_MSG_MESSAGE=\"An error occurred while processing your request. Please try again later.\",\r\n)\r\n\r\n\r\nclass OrchestratorService:\r\n    def __init__(self):\r\n        self.orchestrator = MultiAgentOrchestrator(\r\n            options=options,\r\n            classifier=bedrock_classifier,\r\n            default_agent=chit_chat_agent,\r\n        )\r\n    def add_agent(self, agent):\r\n        return self.orchestrator.add_agent(agent)\r\n    \r\n    def route_request(self,user_input: str, user_id: str, session_id: str, additional_params: Dict[str, str] = {}):\r\n        return self.orchestrator.route_request(user_input, user_id, session_id, additional_params)\r\n    \r\n    def set_default_agent(self, agent):\r\n        return self.orchestrator.set_default_agent(agent)\r\n\r\n\r\n\r\n\r\n\r\n@shared_task(bind=True, name=\"test_task\", queue=high_fifo_queue, max_retries=3)\r\ndef test_task(self):\r\n    log(level=INFO, function=\"test_task\", message=\"Test task executed\")\r\n    from services.multi_agent_orchestrator.orchestrator.orchestrator_service import OrchestratorService\r\n    from services.multi_agent_orchestrator.agents.arithmetic_agent import arithmetic_operation_agent\r\n    from services.multi_agent_orchestrator.agents.date_operation_agent import date_operation_agent\r\n\r\n\r\n    orchestrator = OrchestratorService()\r\n    orchestrator.add_agent(arithmetic_operation_agent)\r\n    orchestrator.add_agent(date_operation_agent)\r\n\r\n    user_input = \"What is the current date?\"\r\n    user_id = \"123456789\"\r\n    session_id = \"987654321\"\r\n\r\n    response = asyncio.run(orchestrator.route_request(user_input, user_id, session_id))\r\n    return response.output\r\n\r\n\r\noptions = BedrockLLMAgentOptions(\r\n    client=BedrockClientSingleton(),\r\n    region='ap-south-1',\r\n    name='Arithmetic Agent',\r\n    description='An AI agent that can perform arithmetic operations.',\r\n    model_id='anthropic.claude-3-sonnet-20240229-v1:0',\r\n    streaming=False,\r\n    inference_config={\r\n        'maxTokens': 1000,\r\n        'temperature': 0.7,\r\n        'topP': 0.9,\r\n        'stopSequences': ['Human:', 'AI:']\r\n    },\r\n    tool_config={\r\n        'tool': arithmetic_tool,\r\n        'toolMaxRecursions': 5,\r\n        'useToolHandler': arithmetic_tool_handler.handle\r\n    },\r\n    custom_system_prompt={\r\n        \"template\": aritmetic_agent_prompt,\r\n        \"variables\": {}\r\n    }\r\n)\r\n\r\narithmetic_operation_agent = BedrockLLMAgent(options)\r\n\r\n\r\noptions = BedrockLLMAgentOptions(\r\n    client=BedrockClientSingleton(),\r\n    region='ap-south-1',\r\n    name='Date Operation Agent',\r\n    description='An AI agent that can perform date operations.',\r\n    model_id='anthropic.claude-3-sonnet-20240229-v1:0',\r\n    streaming=False,\r\n    inference_config={\r\n        'maxTokens': 1000,\r\n        'temperature': 0.7,\r\n        'topP': 0.9,\r\n        'stopSequences': ['Human:', 'AI:']\r\n    },\r\n    tool_config={\r\n        'tool': date_operation_tool,\r\n        'toolMaxRecursions': 5,\r\n        'useToolHandler': arithmetic_tool_handler.handle\r\n    },\r\n    custom_system_prompt={\r\n        \"template\": date_operation_agent_prompt,\r\n        \"variables\": {}\r\n    }\r\n)\r\n\r\ndate_operation_agent = BedrockLLMAgent(options)\r\n\r\n\r\n\r\noptions = BedrockLLMAgentOptions(\r\n    client=BedrockClientSingleton(),\r\n    region='ap-south-1',\r\n    name='Chat Agent',\r\n    description='An AI agent that can chat with humans and understands context',\r\n    model_id='anthropic.claude-3-sonnet-20240229-v1:0',\r\n    streaming=False,\r\n    inference_config={\r\n        'maxTokens': 1000,\r\n        'temperature': 0.7,\r\n        'topP': 0.9,\r\n        'stopSequences': ['Human:', 'AI:']\r\n    },\r\n    guardrail_config={\r\n        'guardrailIdentifier': 'my-guardrail',\r\n        'guardrailVersion': '1.0'\r\n    },\r\n    custom_system_prompt={\r\n        \"template\": \"\"\"You are a specialized AI assistant with multiple capabilities.\r\n\r\nYour expertise areas:\r\n{{AREAS}}\r\n\r\nWhen responding:\r\n{{GUIDELINES}}\r\n\r\nAlways maintain: {{TONE}}\"\"\",\r\n        \"variables\": {\r\n            \"AREAS\": [\r\n                \"- Performing arithmetic operations\",\r\n                \"- Performing date operations\",\r\n                \"- Conversational AI\",\r\n                \"- Data interpretation\",\r\n                \"- Natural language processing\"\r\n            ],\r\n            \"GUIDELINES\": [\r\n                \"- Provide detailed explanations\",\r\n                \"- Use relevant examples\",\r\n                \"- Consider user context\"\r\n            ],\r\n            \"TONE\": \"professional and helpful demeanor\"\r\n        }\r\n    }\r\n)\r\n\r\nchit_chat_agent = BedrockLLMAgent(options)\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\ndefine the agents . call the OrchestratorService and it just breaks.\r\n\r\ni am using \r\nboto3==1.35.0\r\nmulti-agent-orchestrator==0.1.2\r\nDjango==4.2.16\r\n",
      "state": "closed",
      "author": "roushanDevops",
      "author_type": "User",
      "created_at": "2024-12-07T22:05:58Z",
      "updated_at": "2024-12-08T07:29:09Z",
      "closed_at": "2024-12-08T07:29:09Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/144/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/144",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/144",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.464690",
      "comments": []
    },
    {
      "issue_number": 135,
      "title": "Bug: ERROR WHILE DEPLOYING THE CHAT DEMO APP USING AWS CDK",
      "body": "### Expected Behaviour\n\nThe example chat demo app should be deployed by using the aws cdk.\n\n### Current Behaviour\n\ncdk bootstrap command is giving the following error:\r\n\r\n`Error: Stack \"edge-lambda-stack-c857392ef2fe634217fd187925a80bc5b43ea2d9da\" cannot reference {ChatDemoStack/MultiAgentLambda/FunctionUrl/Resource[FunctionArn]} in stack \"ChatDemoStack\". Cross stack references are only supported for stacks deployed to the same environment or between nested stacks and their parent stack. Set crossRegionReferences=true to enable cross region references\r\n    at resolveValue (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/private/refs.js:1:2612)\r\n    at resolveReferences (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/private/refs.js:1:1414)\r\n    at prepareApp (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/private/prepare-app.js:1:802)\r\n    at synthesize (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/private/synthesis.js:1:1530)\r\n    at App.synth (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/stage.js:1:2263)\r\n    at process.<anonymous> (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/aws-cdk-lib/core/lib/app.js:1:1745)\r\n    at Object.onceWrapper (node:events:633:26)\r\n    at process.emit (node:events:518:28)\r\n    at process.emit (node:domain:489:12)\r\n    at process.emit.sharedData.processEmitHook.installedValue [as emit] (/home/saurav/multi-agent-orchestrator/examples/chat-demo-app/node_modules/@cspotcode/source-map-support/source-map-support.js:745:40)\r\nSubprocess exited with error 1`\n\n### Code snippet\n\n```python\ncd multi-agent-orchestrator/examples/chat-demo-app\r\nnpm install\r\ncdk bootstrap\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\ncd multi-agent-orchestrator/examples/chat-demo-app\r\nnpm install\r\ncdk bootstrap",
      "state": "closed",
      "author": "sauravesr",
      "author_type": "User",
      "created_at": "2024-12-04T04:18:19Z",
      "updated_at": "2024-12-05T04:06:50Z",
      "closed_at": "2024-12-05T04:06:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/135/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/135",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/135",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.464697",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi @sauravesr \r\nThanks for your interest in the multi-agent orchestrator!\r\n\r\nWe have updated our doc since we haven't mentioned the whole cdk bootstrap command.\r\nYou should run:\r\n`cdk bootstrap aws://123456789012/us-east-1`\r\n\r\nin addition, you need to set the AWS_DEFAULT_REGION=your-region\r\n\r\nfor ex",
          "created_at": "2024-12-04T09:09:34Z"
        },
        {
          "author": "sauravesr",
          "body": "Hi @brnaba-aws, \r\nThanks for responding, I followed the steps in the updated doc and set my default region:\r\n`export AWS_DEFAULT_REGION=us-west-2`\r\n\r\nThen tried the cdk bootstrap command but I am getting the same issue:\r\n\r\nsaurav@saurav-Aspire-A715-71G:~/multi-agent-orchestrator/examples/chat-demo-a",
          "created_at": "2024-12-04T10:36:56Z"
        },
        {
          "author": "brnaba-aws",
          "body": "thanks @sauravesr \r\nI can reproduce, we will fix that. ",
          "created_at": "2024-12-04T11:25:37Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@sauravesr , this should be fixed now. Please pull the repo again, delete your current stack and deploy again. \r\nLet us know how it goes.",
          "created_at": "2024-12-04T13:58:28Z"
        },
        {
          "author": "sauravesr",
          "body": "@brnaba-aws \r\n\r\ncdk bootstrap aws://328178554247/us-west-2 is working now but\r\n\r\ncdk deploy --all is giving the following error:\r\n\r\nsaurav@saurav-Aspire-A715-71G:~/multi-agent-orchestrator/examples/chat-demo-app$ cdk deploy --all\r\nBundling asset ChatDemoStack/MutiAgentOrchestratorDocKb/AOSSCollectio",
          "created_at": "2024-12-04T14:10:14Z"
        }
      ]
    },
    {
      "issue_number": 132,
      "title": "Feature request: Add a Python Example Demonstrating Multi-Agent Orchestrator for NL2SQL",
      "body": "### Use case\r\n\r\nImplement a Python-based example project showcasing how to leverage the capabilities of a multi-agent orchestrator for natural language to SQL (NL2SQL) tasks.\r\n\r\n### Solution/User Experience\r\n\r\nEnhance the cookbook with an additional use case to complement existing implementations.\r\n- Load an open public dataset into a database (e.g., Amazon RDS PostgreSQL, Amazon Redshift, ...).\r\n- Demonstrate the use of an agent equipped with tools to perform Text2SQL conversions, showcasing how user prompts can be transformed into actionable SQL queries.\r\n\r\nThis example will provide a practical illustration of the agent's capabilities in processing natural language inputs to interact with databases effectively.\r\n\r\n### Alternative solutions\r\n\r\n_No response_",
      "state": "closed",
      "author": "pierrehanne",
      "author_type": "User",
      "created_at": "2024-12-03T21:01:29Z",
      "updated_at": "2024-12-04T13:06:14Z",
      "closed_at": "2024-12-04T13:06:14Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/132/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/132",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/132",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.689899",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "You can have a look at this [sample code](https://github.com/awslabs/multi-agent-orchestrator/tree/main/examples/text-2-structured-output\r\n\r\nIt does not do text to sql but text to structured output (json).\r\nYou can use the same approach to generate SQL.",
          "created_at": "2024-12-04T13:06:14Z"
        }
      ]
    },
    {
      "issue_number": 123,
      "title": "Feature request: Add support for Bedrock Flows",
      "body": "### Use case\n\nAWS Bedrock has a new feature: Bedrock Flows: https://aws.amazon.com/bedrock/flows/\n\n### Solution/User Experience\n\nThere is no solution to orchestrate Bedrock Flows. MAO should support Bedrock Flows as one of their Agent to orchestrate them.\n\n### Alternative solutions\n\n```markdown\nNone\n```\n",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-12-02T07:59:25Z",
      "updated_at": "2024-12-02T20:03:00Z",
      "closed_at": "2024-12-02T20:03:00Z",
      "labels": [
        "triage",
        "python",
        "typescript"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/123/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/123",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/123",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:23.941159",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Done https://github.com/awslabs/multi-agent-orchestrator/pull/125",
          "created_at": "2024-12-02T20:02:57Z"
        }
      ]
    },
    {
      "issue_number": 122,
      "title": "Feature request: Add support for GoLang",
      "body": "### Use case\n\nAbility to create an agent in Golang and add it to the orchestrator\n\n### Solution/User Experience\n\nSupport for GoLang\n\n### Alternative solutions\n\n```markdown\nnone\n```\n",
      "state": "closed",
      "author": "D-sense",
      "author_type": "User",
      "created_at": "2024-12-01T16:38:40Z",
      "updated_at": "2024-12-02T09:21:23Z",
      "closed_at": "2024-12-02T09:21:23Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/122/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/122",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/122",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:24.184893",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thank you for your suggestion regarding additional language support. At present, we are focusing our resources on maintaining and improving support for TypeScript and Python, as these are the most commonly used languages in LLM applications. While we appreciate your proposal, we currently don't have",
          "created_at": "2024-12-02T09:21:23Z"
        }
      ]
    },
    {
      "issue_number": 117,
      "title": "Agent Overlap Analyser library not available ",
      "body": "Where can I find the Libraries for Agent Overlap analyser here. Please help.",
      "state": "closed",
      "author": "karanakatle",
      "author_type": "User",
      "created_at": "2024-11-28T07:54:03Z",
      "updated_at": "2024-11-28T21:49:55Z",
      "closed_at": "2024-11-28T19:24:03Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/117/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/117",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/117",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:24.393880",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "The code is available here https://github.com/awslabs/multi-agent-orchestrator/blob/main/typescript/src/agentOverlapAnalyzer.ts\r\nThe documentation about the feature https://awslabs.github.io/multi-agent-orchestrator/cookbook/monitoring/agent-overlap/\r\n",
          "created_at": "2024-11-28T09:52:23Z"
        },
        {
          "author": "yortuc",
          "body": "Hi, do we have an overlap analyzer for Python too?",
          "created_at": "2024-11-28T21:41:06Z"
        },
        {
          "author": "cornelcroi",
          "body": "Hi, currently not, but you can create an issue for the python version.",
          "created_at": "2024-11-28T21:44:35Z"
        }
      ]
    },
    {
      "issue_number": 88,
      "title": "Feature request: Add python example for tools usage",
      "body": "### Use case\n\nI would like to get the documentation example for tools usage (https://awslabs.github.io/multi-agent-orchestrator/cookbook/tools/weather-api/) in python\n\n### Solution/User Experience\n\nAdd use case in python in a similar way as the one done in the rest of the documentation.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "FrancoisChastel",
      "author_type": "User",
      "created_at": "2024-11-19T21:58:06Z",
      "updated_at": "2024-11-28T19:26:02Z",
      "closed_at": "2024-11-28T19:26:02Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/88/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/88",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/88",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:24.664723",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hello @FrancoisChastel ,\r\nThanks for your interest in the MAO.\r\n\r\nWe have updated the doc with example of tool for weather api in python:\r\nhttps://awslabs.github.io/multi-agent-orchestrator/cookbook/tools/weather-api/\r\n\r\nPlease let us know if that satisfy your need, if yes, we can close this issue.\r",
          "created_at": "2024-11-20T10:51:37Z"
        }
      ]
    },
    {
      "issue_number": 115,
      "title": " Integrate LettaAgent with Letta Runtime Client",
      "body": "### Use case\n\nCurrently, the system lacks integration with the Letta runtime. This integration will enable persistent agent memory, state management, and enhanced conversational capabilities.\n\n### Solution/User Experience\n\nImplement a new LettaAgent class that extends the base Agent class. \n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "2mmanu",
      "author_type": "User",
      "created_at": "2024-11-27T18:49:02Z",
      "updated_at": "2024-11-27T18:53:04Z",
      "closed_at": "2024-11-27T18:53:03Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/115/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/115",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/115",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:24.923510",
      "comments": [
        {
          "author": "2mmanu",
          "body": "Proposed in [#116](../pull/116)",
          "created_at": "2024-11-27T18:53:03Z"
        }
      ]
    },
    {
      "issue_number": 107,
      "title": "Bug:  Unable to set custom prompt for BedrockLLMAgent",
      "body": "### Expected Behaviour\n\nThe agent should accept and use the custom prompt\n\n### Current Behaviour\n\n  \r\n    options.custom_system_prompt.get('template'),\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAttributeError: 'str' object has no attribute 'get'\n\n### Code snippet\n\n```python\nws_agent = BedrockLLMAgent(\r\n    BedrockLLMAgentOptions(\r\n        name=\"<AGENT_NAME>\",\r\n        description=\"<AGENT_DESCRIPTION>\",\r\n        streaming=True,\r\n        inference_config={\r\n            \"temperature\": 0.5,\r\n        },\r\n        retriever=AmazonKnowledgeBasesRetriever(\r\n            AmazonKnowledgeBasesRetrieverOptions(\r\n                knowledge_base_id=KNOWLEDGE_BASE_ID,\r\n                retrievalConfiguration={\r\n                    \"vectorSearchConfiguration\": {\r\n                        \"numberOfResults\": 12,\r\n                        \"overrideSearchType\": \"HYBRID\",\r\n                    },\r\n                },\r\n            )\r\n        ),\r\n        model_id=TEXT_LLM ,\r\n        custom_system_prompt=\"<CUSTOM_PROMPT_HERE> \"\r\n    )\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nProvide a custom system prompt while creating the agent",
      "state": "closed",
      "author": "subhaviv",
      "author_type": "User",
      "created_at": "2024-11-25T17:06:12Z",
      "updated_at": "2024-11-27T18:17:25Z",
      "closed_at": "2024-11-27T18:17:25Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/107/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/107",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/107",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:25.140490",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi,\r\n\r\nThe custom prompt should be set using either `custom_system_prompt` during initialization or `set_system_prompt` after initialization. \r\n\r\nHere are working examples for all cases:\r\n```\r\n# 1. At initialization WITHOUT variables:\r\nws_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\r\n    name=\"<A",
          "created_at": "2024-11-26T13:50:17Z"
        }
      ]
    },
    {
      "issue_number": 85,
      "title": "Feature request: OpenAI Classifier",
      "body": "### Use case\n\nEnable the use of an inbuilt OpenAI classifier without the need to create a custom one.\n\n### Solution/User Experience\n\nHaving an inbuilt OpenAI classifier would eliminate the need to write a custom classifier. This feature would enable seamless integration of OpenAI’s capabilities as a built-in classifier within the system, rather than requiring users to develop custom implementations.\n\n### Alternative solutions\n\n```markdown\nWe can currently create custom classifiers using the OpenAI SDK, but having it pre-integrated would improve usability and reduce overhead.\n```\n",
      "state": "closed",
      "author": "Rajaniraiyn",
      "author_type": "User",
      "created_at": "2024-11-19T12:13:34Z",
      "updated_at": "2024-11-27T14:27:25Z",
      "closed_at": "2024-11-27T14:27:25Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/85/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/85",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/85",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:25.358871",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "@Rajaniraiyn Can you also implement the python version of the classifier? ",
          "created_at": "2024-11-22T10:27:45Z"
        }
      ]
    },
    {
      "issue_number": 106,
      "title": "Bug: AnthropicClassifier requires AWS settings?",
      "body": "### Expected Behaviour\r\n\r\nAnthropicClassifier only requires Anthropic API key, does not require any AWS settings like credentials or regions.\r\n\r\n### Current Behaviour\r\n\r\nAnthropicClassifier requires AWS region settings even if I don't want to use Bedrock.\r\n\r\n### Code snippet\r\n\r\n```shell\r\n!pip install multi-agent-orchestrator\r\n```\r\n\r\n```python\r\nimport getpass\r\nimport os\r\n\r\nos.environ[\"ANTHROPIC_API_KEY\"] = getpass.getpass('ANTHROPIC_API_KEY')\r\n```\r\n\r\n```python\r\nfrom multi_agent_orchestrator.classifiers import AnthropicClassifier, AnthropicClassifierOptions\r\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator\r\n\r\nanthropic_classifier = AnthropicClassifier(AnthropicClassifierOptions(\r\n    api_key=os.environ[\"ANTHROPIC_API_KEY\"]\r\n))\r\n```\r\n\r\nresulted in NoRegionError.\r\n\r\n```text\r\n---------------------------------------------------------------------------\r\nNoRegionError                             Traceback (most recent call last)\r\nCell In[5], line 4\r\n      1 from multi_agent_orchestrator.classifiers import AnthropicClassifier, AnthropicClassifierOptions\r\n      2 from multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator\r\n----> 4 anthropic_classifier = AnthropicClassifier(AnthropicClassifierOptions(\r\n      5     api_key=os.environ[\"ANTHROPIC_API_KEY\"]\r\n      6 ))\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/multi_agent_orchestrator/classifiers/anthropic_classifier.py:23, in AnthropicClassifier.__init__(self, options)\r\n     22 def __init__(self, options: AnthropicClassifierOptions):\r\n---> 23     super().__init__()\r\n     25     if not options.api_key:\r\n     26         raise ValueError(\"Anthropic API key is required\")\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/multi_agent_orchestrator/classifiers/classifier.py:16, in Classifier.__init__(self)\r\n     15 def __init__(self):\r\n---> 16     self.default_agent = BedrockLLMAgent(\r\n     17         options=BedrockLLMAgentOptions(\r\n     18         name=AgentTypes.DEFAULT.value,\r\n     19         streaming=True,\r\n     20         description=\"A knowledgeable generalist capable of addressing a wide range of topics.\\\r\n     21         This agent should be selected if no other specialized agent is a better fit.\"\r\n     22     ))\r\n     24     self.agent_descriptions = \"\"\r\n     25     self.history = \"\"\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/multi_agent_orchestrator/agents/bedrock_llm_agent.py:39, in BedrockLLMAgent.__init__(self, options)\r\n     34         self.client = boto3.client(\r\n     35             'bedrock-runtime',\r\n     36             region_name=options.region or os.environ.get('AWS_REGION')\r\n     37         )\r\n     38     else:\r\n---> 39         self.client = boto3.client('bedrock-runtime')\r\n     41 self.model_id: str = options.model_id or BEDROCK_MODEL_ID_CLAUDE_3_HAIKU\r\n     42 self.streaming: bool = options.streaming\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/boto3/__init__.py:92, in client(*args, **kwargs)\r\n     86 def client(*args, **kwargs):\r\n     87     \"\"\"\r\n     88     Create a low-level service client by name using the default session.\r\n     89 \r\n     90     See :py:meth:`boto3.session.Session.client`.\r\n     91     \"\"\"\r\n---> 92     return _get_default_session().client(*args, **kwargs)\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/boto3/session.py:297, in Session.client(self, service_name, region_name, api_version, use_ssl, verify, endpoint_url, aws_access_key_id, aws_secret_access_key, aws_session_token, config)\r\n    215 def client(\r\n    216     self,\r\n    217     service_name,\r\n   (...)\r\n    226     config=None,\r\n    227 ):\r\n    228     \"\"\"\r\n    229     Create a low-level service client by name.\r\n    230 \r\n   (...)\r\n    295 \r\n    296     \"\"\"\r\n--> 297     return self._session.create_client(\r\n    298         service_name,\r\n    299         region_name=region_name,\r\n    300         api_version=api_version,\r\n    301         use_ssl=use_ssl,\r\n    302         verify=verify,\r\n    303         endpoint_url=endpoint_url,\r\n    304         aws_access_key_id=aws_access_key_id,\r\n    305         aws_secret_access_key=aws_secret_access_key,\r\n    306         aws_session_token=aws_session_token,\r\n    307         config=config,\r\n    308     )\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/session.py:997, in Session.create_client(self, service_name, region_name, api_version, use_ssl, verify, endpoint_url, aws_access_key_id, aws_secret_access_key, aws_session_token, config)\r\n    980 self._add_configured_endpoint_provider(\r\n    981     client_name=service_name,\r\n    982     config_store=config_store,\r\n    983 )\r\n    985 client_creator = botocore.client.ClientCreator(\r\n    986     loader,\r\n    987     endpoint_resolver,\r\n   (...)\r\n    995     user_agent_creator=user_agent_creator,\r\n    996 )\r\n--> 997 client = client_creator.create_client(\r\n    998     service_name=service_name,\r\n    999     region_name=region_name,\r\n   1000     is_secure=use_ssl,\r\n   1001     endpoint_url=endpoint_url,\r\n   1002     verify=verify,\r\n   1003     credentials=credentials,\r\n   1004     scoped_config=self.get_scoped_config(),\r\n   1005     client_config=config,\r\n   1006     api_version=api_version,\r\n   1007     auth_token=auth_token,\r\n   1008 )\r\n   1009 monitor = self._get_internal_component('monitor')\r\n   1010 if monitor is not None:\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/client.py:161, in ClientCreator.create_client(self, service_name, region_name, is_secure, endpoint_url, verify, credentials, scoped_config, api_version, client_config, auth_token)\r\n    148 region_name, client_config = self._normalize_fips_region(\r\n    149     region_name, client_config\r\n    150 )\r\n    151 endpoint_bridge = ClientEndpointBridge(\r\n    152     self._endpoint_resolver,\r\n    153     scoped_config,\r\n   (...)\r\n    159     ),\r\n    160 )\r\n--> 161 client_args = self._get_client_args(\r\n    162     service_model,\r\n    163     region_name,\r\n    164     is_secure,\r\n    165     endpoint_url,\r\n    166     verify,\r\n    167     credentials,\r\n    168     scoped_config,\r\n    169     client_config,\r\n    170     endpoint_bridge,\r\n    171     auth_token,\r\n    172     endpoints_ruleset_data,\r\n    173     partition_data,\r\n    174 )\r\n    175 service_client = cls(**client_args)\r\n    176 self._register_retries(service_client)\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/client.py:520, in ClientCreator._get_client_args(self, service_model, region_name, is_secure, endpoint_url, verify, credentials, scoped_config, client_config, endpoint_bridge, auth_token, endpoints_ruleset_data, partition_data)\r\n    496 def _get_client_args(\r\n    497     self,\r\n    498     service_model,\r\n   (...)\r\n    509     partition_data,\r\n    510 ):\r\n    511     args_creator = ClientArgsCreator(\r\n    512         self._event_emitter,\r\n    513         self._user_agent,\r\n   (...)\r\n    518         user_agent_creator=self._user_agent_creator,\r\n    519     )\r\n--> 520     return args_creator.get_client_args(\r\n    521         service_model,\r\n    522         region_name,\r\n    523         is_secure,\r\n    524         endpoint_url,\r\n    525         verify,\r\n    526         credentials,\r\n    527         scoped_config,\r\n    528         client_config,\r\n    529         endpoint_bridge,\r\n    530         auth_token,\r\n    531         endpoints_ruleset_data,\r\n    532         partition_data,\r\n    533     )\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/args.py:101, in ClientArgsCreator.get_client_args(self, service_model, region_name, is_secure, endpoint_url, verify, credentials, scoped_config, client_config, endpoint_bridge, auth_token, endpoints_ruleset_data, partition_data)\r\n     86 def get_client_args(\r\n     87     self,\r\n     88     service_model,\r\n   (...)\r\n     99     partition_data=None,\r\n    100 ):\r\n--> 101     final_args = self.compute_client_args(\r\n    102         service_model,\r\n    103         client_config,\r\n    104         endpoint_bridge,\r\n    105         region_name,\r\n    106         endpoint_url,\r\n    107         is_secure,\r\n    108         scoped_config,\r\n    109     )\r\n    111     service_name = final_args['service_name']  # noqa\r\n    112     parameter_validation = final_args['parameter_validation']\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/args.py:220, in ClientArgsCreator.compute_client_args(self, service_model, client_config, endpoint_bridge, region_name, endpoint_url, is_secure, scoped_config)\r\n    213 s3_config = self.compute_s3_config(client_config)\r\n    215 configured_endpoint_url = self._compute_configured_endpoint_url(\r\n    216     client_config=client_config,\r\n    217     endpoint_url=endpoint_url,\r\n    218 )\r\n--> 220 endpoint_config = self._compute_endpoint_config(\r\n    221     service_name=service_name,\r\n    222     region_name=region_name,\r\n    223     endpoint_url=configured_endpoint_url,\r\n    224     is_secure=is_secure,\r\n    225     endpoint_bridge=endpoint_bridge,\r\n    226     s3_config=s3_config,\r\n    227 )\r\n    228 endpoint_variant_tags = endpoint_config['metadata'].get('tags', [])\r\n    230 # Some third-party libraries expect the final user-agent string in\r\n    231 # ``client.meta.config.user_agent``. To maintain backwards\r\n    232 # compatibility, the preliminary user-agent string (before any Config\r\n    233 # object modifications and without request-specific user-agent\r\n    234 # components) is stored in the new Config object's ``user_agent``\r\n    235 # property but not used by Botocore itself.\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/args.py:370, in ClientArgsCreator._compute_endpoint_config(self, service_name, region_name, endpoint_url, is_secure, endpoint_bridge, s3_config)\r\n    368 if service_name == 'sts':\r\n    369     return self._compute_sts_endpoint_config(**resolve_endpoint_kwargs)\r\n--> 370 return self._resolve_endpoint(**resolve_endpoint_kwargs)\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/args.py:475, in ClientArgsCreator._resolve_endpoint(self, service_name, region_name, endpoint_url, is_secure, endpoint_bridge)\r\n    467 def _resolve_endpoint(\r\n    468     self,\r\n    469     service_name,\r\n   (...)\r\n    473     endpoint_bridge,\r\n    474 ):\r\n--> 475     return endpoint_bridge.resolve(\r\n    476         service_name, region_name, endpoint_url, is_secure\r\n    477     )\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/client.py:625, in ClientEndpointBridge.resolve(self, service_name, region_name, endpoint_url, is_secure)\r\n    619 use_dualstack_endpoint = self._resolve_use_dualstack_endpoint(\r\n    620     service_name\r\n    621 )\r\n    622 use_fips_endpoint = self._resolve_endpoint_variant_config_var(\r\n    623     'use_fips_endpoint'\r\n    624 )\r\n--> 625 resolved = self.endpoint_resolver.construct_endpoint(\r\n    626     service_name,\r\n    627     region_name,\r\n    628     use_dualstack_endpoint=use_dualstack_endpoint,\r\n    629     use_fips_endpoint=use_fips_endpoint,\r\n    630 )\r\n    632 # If we can't resolve the region, we'll attempt to get a global\r\n    633 # endpoint for non-regionalized services (iam, route53, etc)\r\n    634 if not resolved:\r\n    635     # TODO: fallback partition_name should be configurable in the\r\n    636     # future for users to define as needed.\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/regions.py:230, in EndpointResolver.construct_endpoint(self, service_name, region_name, partition_name, use_dualstack_endpoint, use_fips_endpoint)\r\n    225 if use_dualstack_endpoint and (\r\n    226     partition['partition']\r\n    227     in self._UNSUPPORTED_DUALSTACK_PARTITIONS\r\n    228 ):\r\n    229     continue\r\n--> 230 result = self._endpoint_for_partition(\r\n    231     partition,\r\n    232     service_name,\r\n    233     region_name,\r\n    234     use_dualstack_endpoint,\r\n    235     use_fips_endpoint,\r\n    236 )\r\n    237 if result:\r\n    238     return result\r\n\r\nFile /opt/conda/lib/python3.12/site-packages/botocore/regions.py:278, in EndpointResolver._endpoint_for_partition(self, partition, service_name, region_name, use_dualstack_endpoint, use_fips_endpoint, force_partition)\r\n    276         region_name = service_data['partitionEndpoint']\r\n    277     else:\r\n--> 278         raise NoRegionError()\r\n    280 resolve_kwargs = {\r\n    281     'partition': partition,\r\n    282     'service_name': service_name,\r\n   (...)\r\n    286     'use_fips_endpoint': use_fips_endpoint,\r\n    287 }\r\n    289 # Attempt to resolve the exact region for this partition.\r\n\r\nNoRegionError: You must specify a region.\r\n```\r\n\r\n### Possible Solution\r\n\r\nAs my understanding, AnthropicClassifier does not use not Bedrock's API, but native Anthropic API. This error should not happen.\r\n\r\n### Steps to Reproduce\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/classifiers/built-in/anthropic-classifier/",
      "state": "closed",
      "author": "kun432",
      "author_type": "User",
      "created_at": "2024-11-25T09:11:55Z",
      "updated_at": "2024-11-27T02:26:02Z",
      "closed_at": "2024-11-27T02:26:02Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/106/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/106",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/106",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:25.562831",
      "comments": [
        {
          "author": "mike-adonis",
          "body": "I was going to raise this bug today, glad you did.",
          "created_at": "2024-11-25T10:06:53Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Thanks for reporting the issue. From what I can see this is due to the default agent we have in the classifier in case no agent was found. We might remove this and let the dev provide its own default agent which would remove the need to have AWS credentials.",
          "created_at": "2024-11-26T09:11:42Z"
        },
        {
          "author": "brnaba-aws",
          "body": "See #108 ",
          "created_at": "2024-11-26T15:17:53Z"
        },
        {
          "author": "kun432",
          "body": "@brnaba-aws \r\n\r\nAt this time, still v0.0.21 is the latest in PyPI, so I installed from the repo and confirmed it works with no error. \r\n\r\n```\r\n!pip install \"multi-agent-orchestrator[all] @ git+https://github.com/awslabs/multi-agent-orchestrator.git@main#subdirectory=python\"\r\n```\r\n\r\nThanks!!!",
          "created_at": "2024-11-27T02:26:02Z"
        }
      ]
    },
    {
      "issue_number": 81,
      "title": "Feature request: Support for Bedrock Agent sessionAttributes and promptSessionAttributes ",
      "body": "### Use case\n\nIn the invoke_agent method, the sessionAttributes parameter allows us to pass contextual information such as user IDs, JWT etc.. This feature enables the subsequent transmission of these attributes to Lambda functions within the agent's action group. By using sessionAttributes in this manner, we can use the provided data as credentials to interact with customer business APIs. \n\n### Solution/User Experience\n\nThe user provides user ID and JWT data in AmazonBedrockAgentOptions. Subsequently, this data is passed to the Bedrock agent invocation and then to the action group Lambda functions.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "yhou-uk",
      "author_type": "User",
      "created_at": "2024-11-15T15:59:13Z",
      "updated_at": "2024-11-25T10:32:24Z",
      "closed_at": "2024-11-25T10:32:24Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/81/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/81",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/81",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.339348",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "@yhou-uk I guess we can close this?",
          "created_at": "2024-11-22T20:57:47Z"
        },
        {
          "author": "yhou-uk",
          "body": "Happy to close this issue.  Thank you @brnaba-aws !",
          "created_at": "2024-11-25T10:32:24Z"
        }
      ]
    },
    {
      "issue_number": 97,
      "title": "Feature request: BedrockLLM Converse API Supported models",
      "body": "### Use case\n\nThe documentation must explain that Converse API is used by BedrockLLMAgent and add a link to the supported models.\n\n### Solution/User Experience\n\nSee above.\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-11-21T19:12:57Z",
      "updated_at": "2024-11-21T19:17:12Z",
      "closed_at": null,
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/97/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/97",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/97",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.576948",
      "comments": []
    },
    {
      "issue_number": 76,
      "title": "Feature request: Script to test the classifier",
      "body": "### Use case\n\nit would be good to have a script to be used to test the classifier with some agents.\r\n\n\n### Solution/User Experience\n\nThe script could be used by the customers to see how the agent is selected for a list of user inputs (read from a file).\r\nAlso the script would give latency, number of tokens, confidence, etc.\n\n### Alternative solutions\n\n_No response_",
      "state": "open",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-11-06T13:05:07Z",
      "updated_at": "2024-11-20T16:07:02Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/76/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/76",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/76",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.576968",
      "comments": []
    },
    {
      "issue_number": 90,
      "title": "Bug: Agent Id not ingested into History placeholder for In memory storage",
      "body": "### Expected Behaviour\n\nThe agent id that answer a specific request should be added into the history section of the prompt for in memory storage.\n\n### Current Behaviour\n\nThe agent id is not added\n\n### Code snippet\n\n```python\nnone\n```\n\n\n### Possible Solution\n\nnone\n\n### Steps to Reproduce\n\nsetup a classifier with in memory storage and ask 2 questions. The prompt doesn't contain any agent id information that answer the previous question.",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-11-20T13:49:18Z",
      "updated_at": "2024-11-20T16:03:22Z",
      "closed_at": "2024-11-20T16:03:22Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/90/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/90",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/90",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.576975",
      "comments": []
    },
    {
      "issue_number": 77,
      "title": "Feature request: Reduce minimal python version from 3.12 to 3.11",
      "body": "### Use case\n\nset the minimal version to 3.11\n\n### Solution/User Experience\n\nset the minimal version to 3.11\n\n### Alternative solutions\n\n```markdown\nset the minimal version to 3.11\n```\n",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-11-13T08:18:46Z",
      "updated_at": "2024-11-20T10:52:14Z",
      "closed_at": "2024-11-20T10:52:14Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/77/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/77",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/77",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.576982",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "fixed in #88 ",
          "created_at": "2024-11-20T10:52:14Z"
        }
      ]
    },
    {
      "issue_number": 84,
      "title": "Add example for fine tuned Classifier",
      "body": "### Use case\n\nToday in the classifier the model being used by default is using Claude Sonnet 3.5 on Amazon Bedrock.\r\nWe need another demo with a fine tuned LLM to showcase the implementation details.\n\n### Solution/User Experience\n\nWith a fine tuned LLM, the prompt can be reduced (hence number of tokens) and would have an impact on cost and latency.\r\nThis demo will also showcase how to build a custom classifier with a model that is fine tuned on specific domain.\n\n### Alternative solutions\n\n```markdown\nNo alternative solution for now.\n```\n",
      "state": "open",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-11-18T15:22:12Z",
      "updated_at": "2024-11-18T15:22:31Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/84/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/84",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/84",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.809977",
      "comments": []
    },
    {
      "issue_number": 71,
      "title": "Feature request: Option to manually route to specific agent from list of agents available in orchestrator",
      "body": "### Use case\n\nHaving something like targetAgent will help routing to a specific agent. \r\n\r\n\r\n    const agentResponse = await this.multiAgentOrchestrator.routeRequest(\r\n      JSON.stringify(query),\r\n      this.userId || \"system\",\r\n      this.sessionId || \"system\",\r\n      { targetAgent: agentName }\r\n    );\n\n### Solution/User Experience\n\nThis will be handy when the routing is conditional and we know which agent to be routed to, instead of relying on orchestrator all the time. \n\n### Alternative solutions\n\n```markdown\nThe lambda has to be invoked seperately.\n```\n",
      "state": "closed",
      "author": "Arun4you",
      "author_type": "User",
      "created_at": "2024-10-22T06:48:38Z",
      "updated_at": "2024-11-15T18:32:10Z",
      "closed_at": "2024-11-15T18:32:10Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/71/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/71",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/71",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:26.809996",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi,\r\n\r\nI'd like to better understand, are you looking to:\r\n\r\n1. Create a direct routing system that handles all requests without using an LLM?\r\n2. Set up targeted routing where specific userIds and sessionIds get directed to particular Agents?\r\n\r\nThanks.",
          "created_at": "2024-10-22T15:00:35Z"
        },
        {
          "author": "cornelcroi",
          "body": "Closing this PR due to inactivity. Feel free to reopen if needed. Thanks!",
          "created_at": "2024-11-15T18:32:10Z"
        }
      ]
    },
    {
      "issue_number": 78,
      "title": "Feature request: Lambda Serverless context reduce Cold Start",
      "body": "### Use case\n\nHi,\r\n\r\nI'm experiencing performance issues with cold starts after deploying the project to AWS Lambda using the Python 3.12 runtime on ARM architecture. After investigating, it appears the issue lies in importing modules, which cannot be easily minimized.\r\n\r\nI understand that this project needs to be versatile, but it would be beneficial if we could load only the modules required for each specific context.\r\n\r\nFor example, I only use Bedrock and don’t need to load the entire Anthropic module due to the presence of the Anthropic Classifier. For reference, the Anthropic module takes around 0.7 seconds to load, which significantly impacts the initialization phase during cold starts.\r\n\r\nHave you experienced the same thing?\n\n### Solution/User Experience\n\nPerhaps into \"__init__.py\" on classifiers folder test if module \"anthropic\" is installed or not and then load or not Anthropic Classifier.\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "hghandri",
      "author_type": "User",
      "created_at": "2024-11-13T13:09:42Z",
      "updated_at": "2024-11-13T13:37:24Z",
      "closed_at": "2024-11-13T13:37:24Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/78/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/78",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/78",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.085797",
      "comments": []
    },
    {
      "issue_number": 73,
      "title": "Feature request: pass additionalParams, userId and sessionId to the classifier",
      "body": "### Use case\n\nadditionalParams, userId and sessionId are not passed to the classifier. \r\nThose parameters could include special logic in the classifier to select a specific agent.\n\n### Solution/User Experience\n\npassing those parameters would allow to classify differently.\n\n### Alternative solutions\n\n```markdown\nNo alternatives exist.\n```\n",
      "state": "closed",
      "author": "brnaba-aws",
      "author_type": "User",
      "created_at": "2024-10-24T07:44:32Z",
      "updated_at": "2024-10-24T07:45:14Z",
      "closed_at": "2024-10-24T07:45:14Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/73/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/73",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/73",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.085815",
      "comments": []
    },
    {
      "issue_number": 70,
      "title": "Bug: TypeError: (0 , MGt.setCredentialFeature) is not a function",
      "body": "### Expected Behaviour\r\n\r\nhttps://awslabs.github.io/multi-agent-orchestrator/agents/built-in/lambda-agent/\r\n\r\nFollowing instruction from this link should work.\r\n\r\n### Current Behaviour\r\n\r\nimport { MultiAgentOrchestrator } from \"multi-agent-orchestrator\";\r\nconst orchestrator = new MultiAgentOrchestrator();\r\norchestrator.addAgent(agent);\r\nconst response = await orchestrator.routeRequest(\r\n  \"I need help with my order\",\r\n  \"user123\",\r\n  \"session456\"\r\n);\r\n\r\nprocessing request: TypeError: (0 , MGt.setCredentialFeature) is not a function\r\n    at /var/task/index.js:12:34655\r\n    at e (/var/task/index.js:35:243)\r\n    at /var/task/index.js:1:38819\r\n    at coalesceProvider (/var/task/index.js:1:38997)\r\n    at /var/task/index.js:1:39199\r\n    at /var/task/node_modules/@smithy/core/dist-cjs/index.js:82:23\r\n    at async /var/task/index.js:1:7657\r\n    at async Oee.processRequest (/var/task/index.js:158:4342)\r\n    at async Oee.classify (/var/task/index.js:157:76)\r\n    at async o1e.routeRequest (/var/task/index.js:249:5168)\r\n\r\n### Code snippet\r\n\r\n```python\r\nimport {\r\n  MultiAgentOrchestrator,\r\n  LambdaAgent,\r\n} from \"multi-agent-orchestrator\";\r\nthis.multiAgentOrchestrator = new MultiAgentOrchestrator();\r\n   const lambdaAgents = [ {\r\n        name: \"system-generator\",\r\n        description: `\r\n        An AI System Generator Agent to analyze business requirements and generate high-level system blueprints, breaking down complex processes into interconnected workflows.\r\n        `,\r\n        functionName: \"system-generator\",\r\n        functionRegion: \"ap-south-1\",\r\n      },\r\n      {\r\n        name: \"workflow-generator\",\r\n        description: `\r\n        An AI workflow Generator Agent to generate comprehensive, well-structured workflows based on given business cases or requirements.\r\n       \r\n        functionName: \"ai-workflow-generator\",\r\n        functionRegion: \"ap-south-1\",\r\n      },\r\n    ];\r\n\r\n    lambdaAgents.forEach((agentConfig) => {\r\n      const agent = new LambdaAgent(agentConfig);\r\n      this.multiAgentOrchestrator.addAgent(agent);\r\n    });\r\n\r\n  async processRequest(request: OrchestratorRequest): Promise<any> {\r\n    const { input, userId, sessionId } = request;\r\n    console.log('processRequest input, userId, sessionId:', input, userId, sessionId);\r\n\r\n    try {\r\n      const agentResponse = await this.multiAgentOrchestrator.routeRequest(\r\n        \"HR team manage their organization’s recruitment process\",\r\n        \"user123\",\r\n        \"session456\"\r\n      );\r\n      console.log(\"agentResponse in AI Orchestrator:\", agentResponse);\r\n\r\n      return {\r\n        result: \"Request processed successfully\",\r\n        agentResponse,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error in AI Orchestrator:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\nCDK code:\r\nconst aiOrchestrator = (\r\n  scope: Construct,\r\n  context: CDKContext,\r\n  layers: lambda.ILayerVersion[]\r\n) => {\r\n  const handlerName = context.lambda.aiOrchestrator.name;\r\n  const entryPath = join(\r\n    __dirname,\r\n    `/../../src/lambda/${handlerName}/src/index.js`\r\n  );\r\n  return createNodeJsFunction(\r\n    scope,\r\n    handlerName,\r\n    context,\r\n    entryPath,\r\n    {\r\n      layers: [...layers],\r\n      memorySize: 512,\r\n      environment: {\r\n        ACCOUNT_NUMBER: context.accountNumber,\r\n        REGION: context.region,\r\n      },\r\n      timeout: Duration.minutes(3),\r\n    },\r\n    {\r\n      externalModulesArray: [\r\n        // \"@aws-lambda-powertools/logger\",\r\n        // \"@aws-lambda-powertools/parameters\",\r\n      ],\r\n      nodeModulesArray: [\r\n        \"@aws-sdk/client-cognito-identity-provider\",\r\n        \"@aws-sdk/client-sso\",\r\n        \"@aws-sdk/client-sts\",\r\n        \"@smithy/core\",\r\n        \"@aws-sdk/core\",\r\n      ],\r\n    }\r\n  );\r\n};\r\n\r\nexport const createNodeJsFunction = (\r\n  scope: Construct,\r\n  handlerName: string,\r\n  context: CDKContext,\r\n  entry: string,\r\n  props: NodejsFunctionProps | undefined,\r\n  dependencies: Dependencies\r\n): NodejsFunction => {\r\n  console.log(\r\n    \"lambda path: \",\r\n    __dirname,\r\n    join(__dirname, `/../../src/lambda/${handlerName}/index.ts`)\r\n  );\r\n  return new NodejsFunction(scope, handlerName, {\r\n    entry: join(entry),\r\n    handler: \"handler\",\r\n    // functionName: `${handlerName}-${context.appName}-${context.environment}`,\r\n    functionName: `${handlerName}-${context.appName}`,\r\n    runtime: Runtime.NODEJS_16_X,\r\n    timeout: Duration.minutes(3),\r\n    bundling: {\r\n      externalModules: [...dependencies.externalModulesArray],\r\n      nodeModules: [...dependencies.nodeModulesArray], // Bundle AWS SDK v3 modules\r\n      minify: true, // Optional: Minimizes code\r\n      // target: \"node18\", // Set target as Node.js 18\r\n      // externalModules: [...externalModulesArray]\r\n    },\r\n    ...props,\r\n  });\r\n};\r\n\r\nBedrock Permission:\r\n  const bedrockPolicy = new iam.PolicyStatement({\r\n    actions: [\"bedrock:InvokeModel\", \"bedrock:InvokeModelWithResponseStream\"], // Allow invocation of Bedrock models\r\n    //arn:aws:bedrock:ap-south-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0\r\n    resources: [`arn:aws:bedrock:${context.region}::foundation-model/*`], // Adjust the region, account ID, and model as needed\r\n    // resources: [`arn:aws:bedrock:${context.region}:${context.accountNumber}:model/*`], // Adjust the region, account ID, and model as needed\r\n  });\r\n\r\n\r\nPackage.json:\r\n{\r\n  \"name\": \"ai-orchestration-making\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"AI orchestration Lambda\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-sdk/client-cognito-identity-provider\": \"^3.675.0\",\r\n    \"@aws-sdk/client-sso\": \"^3.675.0\",\r\n    \"@aws-sdk/client-sts\": \"^3.675.0\",\r\n    \"@aws-sdk/core\": \"^3.666.0\",\r\n    \"@smithy/core\": \"^2.4.8\",\r\n    \"aws-lambda\": \"^1.0.7\",\r\n    \"multi-agent-orchestrator\": \"0.0.17\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/aws-lambda\": \"8.10.145\",\r\n    \"@types/jest\": \"^29.5.12\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"ts-jest\": \"^29.1.2\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n### Possible Solution\r\n\r\n_No response_\r\n\r\n### Steps to Reproduce\r\n\r\ntry to run the code in a lambda runtime. \r\nTried in both node16 and 18. Both have same issues.",
      "state": "closed",
      "author": "Arun4you",
      "author_type": "User",
      "created_at": "2024-10-20T12:17:04Z",
      "updated_at": "2024-10-21T12:23:21Z",
      "closed_at": "2024-10-21T12:23:21Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/70/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/70",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/70",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.085822",
      "comments": [
        {
          "author": "Arun4you",
          "body": "    \"@aws-sdk/core\": \"3.666.0\",\r\n    \"@aws-sdk/client-ssm\": \"3.675.0\",\r\n    \"esbuild\": \"^0.24.0\"\r\n    \r\n    Adding these libraries to CDK package.json fixed the issue.",
          "created_at": "2024-10-21T12:22:35Z"
        }
      ]
    },
    {
      "issue_number": 68,
      "title": "Bug: Multiple instances of the orchestrator with default classifier",
      "body": "### Expected Behaviour\n\nTo have a new instance of the orchestrator when used with default value for classifier\n\n### Current Behaviour\n\nThe orchestrator becomes static\n\n### Code snippet\n\n```python\norchestrator = MultiAgentOrchestrator(options=OrchestratorConfig(\r\n        LOG_AGENT_CHAT=True,\r\n        LOG_CLASSIFIER_CHAT=True,\r\n        LOG_CLASSIFIER_RAW_OUTPUT=True,\r\n        LOG_CLASSIFIER_OUTPUT=True,\r\n        LOG_EXECUTION_TIMES=True,\r\n        MAX_RETRIES=3,\r\n        USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True,\r\n\r\n        MAX_MESSAGE_PAIRS_PER_AGENT=10       \r\n    ))\n```\n\n\n### Possible Solution\n\nBetter handle the default values initialization in the `init` of the orchestrator\n\n### Steps to Reproduce\n\nInstantiate the orchestrator several times. Issue easy to test with FastAPI.",
      "state": "closed",
      "author": "cornelcroi",
      "author_type": "User",
      "created_at": "2024-10-15T16:14:23Z",
      "updated_at": "2024-10-17T13:07:44Z",
      "closed_at": "2024-10-17T13:07:44Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/68/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/68",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/68",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.302486",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Fixed in python 0.0.18",
          "created_at": "2024-10-17T13:07:44Z"
        }
      ]
    },
    {
      "issue_number": 63,
      "title": "Bug: TITLE Lambda Implementation instructions",
      "body": "### Expected Behaviour\n\nPlease provide detailed lambda implementation instructions. \n\n### Current Behaviour\n\ncurrent documentation is not enough\n\n### Code snippet\n\n```python\nPlease provide detailed lambda implementation instructions.\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nTricky to follow",
      "state": "closed",
      "author": "davep76",
      "author_type": "User",
      "created_at": "2024-10-10T17:05:59Z",
      "updated_at": "2024-10-16T16:06:50Z",
      "closed_at": "2024-10-16T16:06:49Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/63/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/63",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/63",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.522280",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "The lambda documentation has been updated https://awslabs.github.io/multi-agent-orchestrator/deployment/aws-lambda-py/",
          "created_at": "2024-10-16T16:06:50Z"
        }
      ]
    },
    {
      "issue_number": 46,
      "title": "Bug: Read Time Out",
      "body": "### Expected Behaviour\n\nIt should not timeout\n\n### Current Behaviour\n\nERROR:multi_agent_orchestrator.utils.logger:Error during agent dispatch or processing:AWSHTTPSConnectionPool(host='[bedrock-agent-runtime.us-east-1.amazonaws.com](http://bedrock-agent-runtime.us-east-1.amazonaws.com/)', port=443): Read timed out.\n\n### Code snippet\n\n```python\nI am using BR agent with 5 AG\n```\n\n\n### Possible Solution\n\nIncrease the timeout limit\n\n### Steps to Reproduce\n\nCreate a BR Agent with 5-6 AGs",
      "state": "closed",
      "author": "davep76",
      "author_type": "User",
      "created_at": "2024-09-20T19:22:40Z",
      "updated_at": "2024-10-09T19:30:51Z",
      "closed_at": "2024-10-09T19:30:51Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/46/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/46",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/46",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.756172",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "We will look into this.",
          "created_at": "2024-09-23T08:17:06Z"
        },
        {
          "author": "brnaba-aws",
          "body": "@davep76 we have released the 0.0.14 version, can you `pip install multi-agent-orchestrator==0.0.14`\r\n\r\nand then when creating your bedrock agent, you can pass a client.\r\n```python\r\nmy_agent = AmazonBedrockAgent(\r\n        AmazonBedrockAgentOptions(\r\n            name=\"my-agent\",\r\n            descript",
          "created_at": "2024-09-25T21:16:11Z"
        }
      ]
    },
    {
      "issue_number": 41,
      "title": "Feature request: Support Using AWS Profile Name For Bedrock Classifier",
      "body": "### Use case\n\nI would like the ability to configure an AWS CLI Profile name on the BedrockClassifier. This is an established pattern in other frameworks and is better UX than the current method of configuring AWS auth. This will also allow for using an AWS profile with MFA enabled when developing locally.\n\n### Solution/User Experience\n\nA good solution would be updating the BedrockClassifierOptions class to support an optional `aws_profile_name` attribute and using that to create a session for the BedrockClassifier's bedrock-runtime client.\r\n\r\nThe BedrockClassifier `aws_profile_name` attribute should support the new BedrockClassifierOptions attribute and the [standard environment variable](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-using-profiles).\r\n\r\n```\r\nclass BedrockClassifierOptions:\r\n    def __init__(\r\n        self,\r\n        model_id: Optional[str] = None,\r\n        region: Optional[str] = None,\r\n        inference_config: Optional[Dict] = None\r\n\t\taws_profile_name: Optional[Str] = None\r\n    ):\r\n        self.model_id = model_id\r\n        self.region = region\r\n        self.inference_config = inference_config if inference_config is not None else {}\r\n\t\tself.aws_profile_name = aws_profile_name\r\n\r\nclass BedrockClassifier(Classifier):\r\n    def __init__(self, options: BedrockClassifierOptions):\r\n        super().__init__()\r\n        self.region = options.region or os.environ.get('REGION')\r\n        self.model_id = options.model_id or BEDROCK_MODEL_ID_CLAUDE_3_5_SONNET\r\n\t\tself.aws_profile_name = options.aws_profile_name or os.environ.get(\"AWS_PROFILE\")\r\n\t\tboto3_session = boto3.Session(profile_name=self.aws_profile_name)\r\n\t\tself.client = boto3_session.client('bedrock-runtime', region_name=self.region)\r\n\t\t...\r\n```\r\n\r\nThe user experience would be updated to:\r\n\r\n```\r\ncustom_bedrock_classifier = BedrockClassifier(BedrockClassifierOptions(\r\n    model_id='anthropic.claude-v2',\r\n    inference_config={\r\n        'maxTokens': 500,\r\n        'temperature': 0.7,\r\n        'topP': 0.9\r\n    },\r\n\taws_profile_name=\"dev\"\r\n))\r\n\r\norchestrator = MultiAgentOrchestrator(classifier=custom_bedrock_classifier)\r\n```\n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "drobbins-ancile",
      "author_type": "User",
      "created_at": "2024-09-13T16:27:00Z",
      "updated_at": "2024-09-27T15:33:32Z",
      "closed_at": "2024-09-27T15:33:32Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/41/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/41",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/41",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:27.965426",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "@drobbins-ancile , we just released the 0.0.15 version in python.\r\nNow the classifier takes a client as a parameter which allows you to use a profile.\r\n```python\r\n\r\n\r\nboto3_session = boto3.Session(profile_name=os.environ.get(\"AWS_PROFILE\"))\r\nmy_custom_client = boto3_session.client('bedrock-runtime',",
          "created_at": "2024-09-25T21:42:55Z"
        },
        {
          "author": "drobbins-ancile",
          "body": "> @drobbins-ancile , we just released the 0.0.15 version in python. Now the classifier takes a client as a parameter which allows you to use a profile.\r\n> \r\n> ```python\r\n> boto3_session = boto3.Session(profile_name=os.environ.get(\"AWS_PROFILE\"))\r\n> my_custom_client = boto3_session.client('bedrock-ru",
          "created_at": "2024-09-27T13:02:39Z"
        }
      ]
    },
    {
      "issue_number": 30,
      "title": "Bug:  Cannot find module 'sylvester' after updating to multi-agent-orchestrator ^0.0.13",
      "body": "### Expected Behaviour\r\n\r\nThe code should work with the updated version of multi-agent-orchestrator (^0.0.13) just as it did with version ^0.0.12, without errors related to missing modules.\r\n\r\n### Current Behaviour\r\n\r\nAfter updating to multi-agent-orchestrator version ^0.0.13, the Lambda function throws an error indicating that the module 'sylvester' cannot be found. The error trace shows that this issue originates from the multi-agent-orchestrator package's dependencies.\r\n\r\n\r\n\r\n`Response\r\n{\r\n  \"errorType\": \"Runtime.ImportModuleError\",\r\n  \"errorMessage\": \"Error: Cannot find module 'sylvester'\\nRequire stack:\\n- /opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\\n- /opt/node_modules/apparatus/lib/apparatus/index.js\\n- /opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\\n- /opt/node_modules/natural/lib/natural/classifiers/index.js\\n- /opt/node_modules/natural/lib/natural/index.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/index.js\",\r\n  \"trace\": [\r\n    **\"Runtime.ImportModuleError: Error: Cannot find module 'sylvester'\",**\r\n    \"Require stack:\",\r\n    \"- /opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\",\r\n    \"- /opt/node_modules/apparatus/lib/apparatus/index.js\",\r\n    \"- /opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\",\r\n    \"- /opt/node_modules/natural/lib/natural/classifiers/index.js\",\r\n    \"- /opt/node_modules/natural/lib/natural/index.js\",\r\n    \"- /opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\",\r\n    \"- /opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\",\r\n    \"- /opt/node_modules/multi-agent-orchestrator/dist/index.js\",\r\n    \"    at _loadUserApp (file:///var/runtime/index.mjs:1087:17)\",\r\n    \"    at async UserFunction.js.module.exports.load (file:///var/runtime/index.mjs:1119:21)\",\r\n    \"    at async start (file:///var/runtime/index.mjs:1282:23)\",\r\n    \"    at async file:///var/runtime/index.mjs:1288:1\"\r\n  ]\r\n}\r\n\r\nFunction Logs\r\nator/dist/index.js\",\"reason\":{\"errorType\":\"Error\",\"errorMessage\":\"Cannot find module 'sylvester'\\nRequire stack:\\n- /opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\\n- /opt/node_modules/apparatus/lib/apparatus/index.js\\n- /opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\\n- /opt/node_modules/natural/lib/natural/classifiers/index.js\\n- /opt/node_modules/natural/lib/natural/index.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\\n- /opt/node_modules/multi-agent-orchestrator/dist/index.js\",\"code\":\"MODULE_NOT_FOUND\",\"requireStack\":[\"/opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\",\"/opt/node_modules/apparatus/lib/apparatus/index.js\",\"/opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\",\"/opt/node_modules/natural/lib/natural/classifiers/index.js\",\"/opt/node_modules/natural/lib/natural/index.js\",\"/opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\",\"/opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\",\"/opt/node_modules/multi-agent-orchestrator/dist/index.js\"],\"stack\":[\"Error: Cannot find module 'sylvester'\",\"Require stack:\",\"- /opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\",\"- /opt/node_modules/apparatus/lib/apparatus/index.js\",\"- /opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\",\"- /opt/node_modules/natural/lib/natural/classifiers/index.js\",\"- /opt/node_modules/natural/lib/natural/index.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/index.js\",\"    at Module._resolveFilename (node:internal/modules/cjs/loader:1145:15)\",\"    at Module._load (node:internal/modules/cjs/loader:986:27)\",\"    at Module.require (node:internal/modules/cjs/loader:1233:19)\",\"    at require (node:internal/modules/helpers:179:18)\",\"    at Object.<anonymous> (/opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js:26:17)\",\"    at Module._compile (node:internal/modules/cjs/loader:1358:14)\",\"    at Module._extensions..js (node:internal/modules/cjs/loader:1416:10)\",\"    at Module.load (node:internal/modules/cjs/loader:1208:32)\",\"    at Module._load (node:internal/modules/cjs/loader:1024:12)\",\"    at Module.require (node:internal/modules/cjs/loader:1233:19)\"]},\"promise\":{},\"stack\":[\"Runtime.UnhandledPromiseRejection: Error: Cannot find module 'sylvester'\",\"Require stack:\",\"- /opt/node_modules/apparatus/lib/apparatus/classifier/logistic_regression_classifier.js\",\"- /opt/node_modules/apparatus/lib/apparatus/index.js\",\"- /opt/node_modules/natural/lib/natural/classifiers/bayes_classifier.js\",\"- /opt/node_modules/natural/lib/natural/classifiers/index.js\",\"- /opt/node_modules/natural/lib/natural/index.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/agentOverlapAnalyzer.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/orchestrator.js\",\"- /opt/node_modules/multi-agent-orchestrator/dist/index.js\",\"    at process.<anonymous> (file:///var/runtime/index.mjs:1276:17)\",\"    at process.emit (node:events:519:28)\",\"    at emitUnhandledRejection (node:internal/process/promises:250:13)\",\"    at throwUnhandledRejectionsMode (node:internal/process/promises:385:19)\",\"    at processPromiseRejections (node:internal/process/promises:470:17)\",\"    at process.processTicksAndRejections (node:internal/process/task_queues:96:32)\"]}\r\nINIT_REPORT Init Duration: 12992.17 ms\tPhase: invoke\tStatus: error\tError Type: Runtime.ImportModuleError\r\nSTART RequestId: d0e67262-8d11-48f2-85d3-bf0abe329c74 Version: $LATEST\r\nEND RequestId: d0e67262-8d11-48f2-85d3-bf0abe329c74\r\nREPORT RequestId: d0e67262-8d11-48f2-85d3-bf0abe329c74\tDuration: 13040.25 ms\tBilled Duration: 13041 ms\tMemory Size: 128 MB\tMax Memory Used: 115 MB\tStatus: error\tError Type: Runtime.ImportModuleError\r\n`\r\n\r\n### Code snippet\r\n\r\n```python\r\n// Use ES module syntax to import modules\r\nimport { MultiAgentOrchestrator, BedrockLLMAgent, BedrockClassifier, DynamoDbChatStorage } from 'multi-agent-orchestrator';\r\n\r\nconst customBedrockClassifier = new BedrockClassifier({\r\n  modelId: 'anthropic.claude-3-5-sonnet-20240620-v1:0',\r\n  inferenceConfig: {\r\n    maxTokens: 100,\r\n    temperature: 0.7,\r\n    topP: 0.9\r\n  }\r\n});\r\n\r\nconst tableName = 'chat_history_multi_agent_orchestrator';\r\nconst region = 'us-east-1';\r\nconst TTL_DURATION = 3600; // in seconds\r\nconst dynamoDbStorage = new DynamoDbChatStorage(tableName, region, 'chat_history_multi_agent_orchestrator_ttl', TTL_DURATION);\r\n\r\nconst orchestrator = new MultiAgentOrchestrator({ \r\n    classifier: customBedrockClassifier,  \r\n    storage: dynamoDbStorage\r\n});\r\n\r\n// Initialize the Tech Agent\r\norchestrator.addAgent(\r\n  new BedrockLLMAgent({\r\n    name: \"Tech Agent\",\r\n    description:\r\n      \"Specializes in technology areas including software development, hardware, AI, cybersecurity, blockchain, cloud computing, emerging tech innovations, and pricing/costs related to technology products and services.\",\r\n    streaming: true\r\n  })\r\n);\r\n\r\n// Initialize the Insurance Agent (general inquiries)\r\norchestrator.addAgent(\r\n  new BedrockLLMAgent({\r\n    name: \"Insurance Agent\",\r\n    description:\r\n      \"Specializes in insurance areas including health insurance, auto insurance, life insurance, home insurance, policy comparisons, claims processing, and risk management.\",\r\n    streaming: true\r\n  })\r\n);\r\n\r\n// Initialize the Natural Disaster Agent\r\norchestrator.addAgent(\r\n  new BedrockLLMAgent({\r\n    name: \"Natural Disaster Agent\",\r\n    description:\r\n      \"Specializes to provide Natural Disaster information. So, Reply 'I am the Natural Disaster Agent' and nothing else\",\r\n    streaming: true\r\n  })\r\n);\r\n\r\n// Lambda handler function\r\nexport const handler = async (event) => {\r\n  // Extract request parameters from the event\r\n  const { query, userId, sessionId } = event;\r\n\r\n  try {\r\n    // Route the request using the orchestrator\r\n    const response = await orchestrator.routeRequest(\r\n      query, userId, sessionId\r\n    );\r\n\r\n    // Handle the response (streaming or non-streaming)\r\n    if (response.streaming == true) {\r\n        console.log(\"\\n** RESPONSE STREAMING ** \\n\");\r\n        // Send metadata immediately\r\n        console.log(`> Agent ID: ${response.metadata.agentId}`);\r\n        console.log(`> Agent Name: ${response.metadata.agentName}`);\r\n        console.log(`> User Input: ${response.metadata.userInput}`);\r\n        console.log(`> User ID: ${response.metadata.userId}`);\r\n        console.log(`> Session ID: ${response.metadata.sessionId}`);\r\n        console.log(\r\n          `> Additional Parameters:`,\r\n          response.metadata.additionalParams\r\n        );\r\n        console.log(`\\n> Response: `);\r\n    \r\n        // Stream the content\r\n        for await (const chunk of response.output) {\r\n          if (typeof chunk === \"string\") {\r\n            process.stdout.write(chunk);\r\n          } else {\r\n            console.error(\"Received unexpected chunk type:\", typeof chunk);\r\n          }\r\n        }\r\n    \r\n    } else {\r\n        // Handle non-streaming response (AgentProcessingResult)\r\n        console.log(\"\\n** RESPONSE ** \\n\");\r\n        console.log(`> Agent ID: ${response.metadata.agentId}`);\r\n        console.log(`> Agent Name: ${response.metadata.agentName}`);\r\n        console.log(`> User Input: ${response.metadata.userInput}`);\r\n        console.log(`> User ID: ${response.metadata.userId}`);\r\n        console.log(`> Session ID: ${response.metadata.sessionId}`);\r\n        console.log(\r\n          `> Additional Parameters:`,\r\n          response.metadata.additionalParams\r\n        );\r\n        console.log(`\\n> Response: ${response.output}`);\r\n        return {\r\n          statusCode: 200,\r\n          body: JSON.stringify({\r\n            message: response.output\r\n          }),\r\n        };\r\n    }\r\n  } catch (error) {\r\n    console.error('Error processing request:', error);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        message: 'Internal Server Error',\r\n        error: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n```\r\n\r\n\r\n### Possible Solution\r\n\r\nThe error seems to indicate a missing dependency ('sylvester'). The package multi-agent-orchestrator or one of its dependencies might have been updated in a way that introduces a missing dependency.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Update multi-agent-orchestrator to version ^0.0.13.\r\n\r\n`In AWS CloudShell : npm install multi-agent-orchestrator@latest && zip -r multi-agent-orchestrator-layer.zip node_modules && aws lambda publish-layer-version --layer-name multi-agent-orchestrator --zip-file fileb://multi-agent-orchestrator-layer.zip`\r\n\r\n2. Deploy the Lambda function with the updated package.\r\n3. Invoke the Lambda function to trigger the error.",
      "state": "closed",
      "author": "valentin-dirken",
      "author_type": "User",
      "created_at": "2024-08-29T09:37:14Z",
      "updated_at": "2024-09-26T20:33:52Z",
      "closed_at": "2024-09-26T20:33:52Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/30/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/30",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/30",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:28.198046",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "\r\nIn the code above I see you have a handler function. I don't follow what you are trying to do by looking at the code snippet.\r\nThe code seems to be for a lambda function but you are trying to push the same zip for the lambda function but also for a layer ?",
          "created_at": "2024-08-29T15:00:35Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Can we close this?",
          "created_at": "2024-09-25T20:18:40Z"
        },
        {
          "author": "cornelcroi",
          "body": "This issue is being closed due to inactivity from the original requester.\r\n",
          "created_at": "2024-09-26T20:33:52Z"
        }
      ]
    },
    {
      "issue_number": 49,
      "title": "Agent with toolConfig does not works with Streaming",
      "body": "### Expected Behaviour\n\nHi,\r\n\r\nI've followed the documentation for Streaming activation on Agent.\r\nIt seems the streaming mode works with Agent does not have tool_config. Once we set tool_config all LLM request are made without streaming mode\n\n### Current Behaviour\n\nWhen we use tool_config, we could not see the message sent by assistant but only tooUse execution.\r\nSometime when the LLM ask for more detail to achieve a task, we could not see the message\n\n### Code snippet\n\n```python\nFile: agent/bedrock_llm_agent.py:L120\r\n\r\n\r\nif self.tool_config:\r\n\r\n\r\n   continue_with_tools = True\r\n   final_message: ConversationMessage = {'role': ParticipantRole.USER.value, 'content': []}\r\n   max_recursions = self.tool_config.get('toolMaxRecursions', self.default_max_recursions)\r\n\r\n   while continue_with_tools and max_recursions > 0:\r\n                \r\n      bedrock_response = await self.handle_single_response(converse_cmd)\n```\n\n\n### Possible Solution\n\nI will push PR\n\n### Steps to Reproduce\n\nJust configure function calling with agent and Streaming mode = True",
      "state": "closed",
      "author": "hghandri",
      "author_type": "User",
      "created_at": "2024-09-24T15:18:54Z",
      "updated_at": "2024-09-25T21:14:05Z",
      "closed_at": "2024-09-25T21:14:05Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/49/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/49",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/49",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:28.443617",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "fixed by #50 ",
          "created_at": "2024-09-25T21:14:02Z"
        }
      ]
    },
    {
      "issue_number": 47,
      "title": "Bug: Throttle",
      "body": "### Expected Behaviour\n\nThrottling should not occur \n\n### Current Behaviour\n\nERROR:multi_agent_orchestrator.utils.logger:Error processing request:An error occurred (ThrottlingException) when calling the Converse operation (reached max retries: 4): Too many requests, please wait before trying again. You have sent too many requests. Wait before trying again.\r\nERROR:multi_agent_orchestrator.utils.logger:Error during intent classification: An error occurred (ThrottlingException) when calling the Converse operation (reached max retries: 4): Too many requests, please wait before trying again. You have sent too many requests. Wait before trying again.\n\n### Code snippet\n\n```python\nERROR:multi_agent_orchestrator.utils.logger:Error processing request:An error occurred (ThrottlingException) when calling the Converse operation (reached max retries: 4): Too many requests, please wait before trying again. You have sent too many requests. Wait before trying again.\r\nERROR:multi_agent_orchestrator.utils.logger:Error during intent classification: An error occurred (ThrottlingException) when calling the Converse operation (reached max retries: 4): Too many requests, please wait before trying again. You have sent too many requests. Wait before trying again.\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nI created 2 BR agents which are invoked based on the intent. ",
      "state": "closed",
      "author": "davep76",
      "author_type": "User",
      "created_at": "2024-09-20T19:43:43Z",
      "updated_at": "2024-09-25T20:18:17Z",
      "closed_at": "2024-09-25T20:18:17Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/47/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/47",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/47",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:28.705306",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Hi, thanks for the issue.\r\nI'm not sure I understand the reason for this issue. You are throttled by Amazon Bedrock. There is nothing we can do. We won't retry indefinitely. \r\nPlease check your quota and adjust it (increase) if needed based on your use case.",
          "created_at": "2024-09-23T08:16:44Z"
        }
      ]
    },
    {
      "issue_number": 42,
      "title": "Bug: Issue Template References Incorrect Project Name",
      "body": "### Expected Behaviour\n\nThe feature request issue template references the `multi-agent-orchestrator` project instead of the `CloudFront Hosting Toolkit`.\n\n### Current Behaviour\n\nThe template references the `CloudFront Hosting Tookit`.\n\n### Code snippet\n\n```python\nN/A\n```\n\n\n### Possible Solution\n\nUpdate all occurrences of \"CloudFront Hosting Toolkit\" to \"multi-agent-orchestrator\" in the feature request issue template.\n\n### Steps to Reproduce\n\nStart the issue creation workflow and choose \"feature request\".",
      "state": "closed",
      "author": "drobbins-ancile",
      "author_type": "User",
      "created_at": "2024-09-13T16:31:36Z",
      "updated_at": "2024-09-14T08:29:35Z",
      "closed_at": "2024-09-14T08:29:35Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/42/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/42",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/42",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:28.968529",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thank you.\r\nPR Merged.",
          "created_at": "2024-09-14T08:29:35Z"
        }
      ]
    },
    {
      "issue_number": 38,
      "title": "Bug: Quickstart.py error: you must specify a region",
      "body": "### Expected Behaviour\n\nRunning Quickstart.py example https://awslabs.github.io/multi-agent-orchestrator/general/quickstart/\n\n### Current Behaviour\n\nTraceback (most recent call last):\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/quickstart.py\", line 6, in <module>\r\n    from multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/multi_agent_orchestrator/orchestrator.py\", line 20, in <module>\r\n    class MultiAgentOrchestrator:\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/multi_agent_orchestrator/orchestrator.py\", line 24, in MultiAgentOrchestrator\r\n    classifer: Classifier = BedrockClassifier(options=BedrockClassifierOptions()),\r\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/multi_agent_orchestrator/classifiers/bedrock_classifier.py\", line 25, in __init__\r\n    super().__init__()\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/multi_agent_orchestrator/classifiers/classifier.py\", line 16, in __init__\r\n    self.default_agent = BedrockLLMAgent(\r\n                         ^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/multi_agent_orchestrator/agents/bedrock_llm_agent.py\", line 30, in __init__\r\n    self.client = boto3.client('bedrock-runtime')\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/boto3/__init__.py\", line 92, in client\r\n    return _get_default_session().client(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/boto3/session.py\", line 297, in client\r\n    return self._session.create_client(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/session.py\", line 997, in create_client\r\n    client = client_creator.create_client(\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/client.py\", line 161, in create_client\r\n    client_args = self._get_client_args(\r\n                  ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/client.py\", line 520, in _get_client_args\r\n    return args_creator.get_client_args(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/args.py\", line 101, in get_client_args\r\n    final_args = self.compute_client_args(\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/args.py\", line 220, in compute_client_args\r\n    endpoint_config = self._compute_endpoint_config(\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/args.py\", line 370, in _compute_endpoint_config\r\n    return self._resolve_endpoint(**resolve_endpoint_kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/args.py\", line 475, in _resolve_endpoint\r\n    return endpoint_bridge.resolve(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/client.py\", line 625, in resolve\r\n    resolved = self.endpoint_resolver.construct_endpoint(\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/regions.py\", line 230, in construct_endpoint\r\n    result = self._endpoint_for_partition(\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Volumes/workplace/Test/Agents/multi-agent-orchestrator/env/lib/python3.12/site-packages/botocore/regions.py\", line 278, in _endpoint_for_partition\r\n    raise NoRegionError()\r\nbotocore.exceptions.NoRegionError: You must specify a region.\n\n### Code snippet\n\n```python\nhttps://awslabs.github.io/multi-agent-orchestrator/general/quickstart/\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nhttps://awslabs.github.io/multi-agent-orchestrator/general/quickstart/",
      "state": "closed",
      "author": "ab94amz",
      "author_type": "User",
      "created_at": "2024-09-06T13:55:13Z",
      "updated_at": "2024-09-06T14:03:56Z",
      "closed_at": "2024-09-06T14:00:39Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/38/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/38",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/38",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:29.217930",
      "comments": [
        {
          "author": "ab94amz",
          "body": "solved with export AWS_DEFAULT_REGION=us-east-1",
          "created_at": "2024-09-06T14:00:36Z"
        },
        {
          "author": "brnaba-aws",
          "body": "Thanks for picking this up, we will update the documentation with that line.",
          "created_at": "2024-09-06T14:03:55Z"
        }
      ]
    },
    {
      "issue_number": 36,
      "title": "Bug when using tools function with Python version",
      "body": "### Expected Behaviour\n\nCalling API bedrock with history of messages on dict format\n\n### Current Behaviour\n\nI found out there missing conversion a list of ConversationMessage to a dict list and that raise an exception validation from bedrock API.\r\n\r\nExample of debug with payload used for bedrock API :\r\n\r\n {'modelId': 'anthropic.claude-3-5-sonnet-20240620-v1:0', 'messages': [<multi_agent_orchestrator.types.types.ConversationMessage object at 0x107d8f4d0>, <multi_agent_orchestrator.types.types.ConversationMessage object at 0x107d8ec90>, <multi_agent_orchestrator.types.types.ConversationMessage object at 0x107d8ec60>, <multi_agent_orchestrator.types.types.ConversationMessage object at 0x107520fb0>, <multi_agent_orchestrator.types.types.ConversationMessage object at 0x107315d60>],\r\n........\n\n### Code snippet\n\n```python\n.\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\ntry to use tools with Python language.",
      "state": "closed",
      "author": "hghandri",
      "author_type": "User",
      "created_at": "2024-09-04T09:08:55Z",
      "updated_at": "2024-09-04T14:14:04Z",
      "closed_at": "2024-09-04T12:37:23Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/36/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/36",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/36",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:31.002294",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "Thanks, while looking at #34 , I also fixed the issue with tools. I've also added an example with weather api in the python-demo folder.",
          "created_at": "2024-09-04T12:35:01Z"
        },
        {
          "author": "brnaba-aws",
          "body": "The commit [d6e369c](https://github.com/awslabs/multi-agent-orchestrator/commit/d6e369c6901f80ee4d84fda5e4f4182598989aa4) fixed the issue",
          "created_at": "2024-09-04T12:37:23Z"
        },
        {
          "author": "hghandri",
          "body": "Thanks.",
          "created_at": "2024-09-04T14:14:03Z"
        }
      ]
    },
    {
      "issue_number": 34,
      "title": "Update error on documentation with toolSpec usage example",
      "body": "### Expected Behaviour\n\nUpdate the documentation because I found a writing error.\n\n### Current Behaviour\n\nWe've got an error :  \r\n\r\nI found out an error on toolSpec, we must have a class dict type with \"tools\" key and after that an class list with each toolSpec\r\n\r\nThis cause a validation error from Bedrock API : \r\n\r\nInvalid type for parameter toolConfig, value: [{'toolSpec': {'name': 'xxxx', 'description': \"xxxx\", 'inputSchema': {'json': {'type': 'object', 'properties': {'field1': {'type': 'string', 'description': 'xxxx'}}, 'required': ['field1']}}}}], type: <class 'list'>, valid types: <class 'dict'>\n\n### Code snippet\n\n```python\nnothing just see a change on documentation\n```\n\n\n### Possible Solution\n\n_No response_\n\n### Steps to Reproduce\n\nConfigure Bedrock LLM Agent with tools with Python",
      "state": "closed",
      "author": "hghandri",
      "author_type": "User",
      "created_at": "2024-09-04T05:01:14Z",
      "updated_at": "2024-09-04T12:38:07Z",
      "closed_at": "2024-09-04T12:38:06Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/34/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "brnaba-aws"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/34",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/34",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:31.251055",
      "comments": [
        {
          "author": "brnaba-aws",
          "body": "After some investigation, we found out that there is an implementation mismatch between python and TS.\r\nThe documentation is fine, but we had to change the code to align with the TS version.",
          "created_at": "2024-09-04T12:34:14Z"
        },
        {
          "author": "brnaba-aws",
          "body": "The commit [d6e369c](https://github.com/awslabs/multi-agent-orchestrator/commit/d6e369c6901f80ee4d84fda5e4f4182598989aa4) fixed the issue",
          "created_at": "2024-09-04T12:38:06Z"
        }
      ]
    },
    {
      "issue_number": 27,
      "title": "Feature request:  AWS Lambda-Compatible Python Version of Multi-Agent Orchestrator",
      "body": "### Use case\n\nI am working on integrating the Multi-Agent Orchestrator into a serverless architecture using AWS Lambda. My goal is to leverage AWS Lambda's scalability and cost-efficiency while utilizing the orchestrator's powerful multi-agent capabilities. However, deploying and managing the orchestrator within the AWS Lambda environment presents challenges, particularly with handling asynchronous operations and adapting to Lambda’s execution model.\n\n### Solution/User Experience\n\nI would like to request a version of the orchestrator which can be deployed as a Lambda function. \n\n### Alternative solutions\n\n_No response_",
      "state": "closed",
      "author": "valentin-dirken",
      "author_type": "User",
      "created_at": "2024-08-28T12:05:05Z",
      "updated_at": "2024-08-29T18:19:41Z",
      "closed_at": "2024-08-29T18:19:41Z",
      "labels": [
        "triage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/27/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/27",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/27",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:31.480804",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Hi,\r\n\r\nYou can use the framework anywhere, in a Lambda Function included.\r\nThere is a demo app included in the repository where the framework is used in a Lambda function.\r\nHave a look at the code here `https://github.com/awslabs/multi-agent-orchestrator/blob/main/examples/chat-demo-app/lambda/multi",
          "created_at": "2024-08-28T16:23:39Z"
        },
        {
          "author": "cornelcroi",
          "body": "I just made some changes to the documentation and now there is a section on how to use it inside a Lambda Function in python\r\nhttps://awslabs.github.io/multi-agent-orchestrator/deployment/aws-lambda-py/\r\n\r\nCheck it out and let me know if it helps.",
          "created_at": "2024-08-28T19:37:07Z"
        },
        {
          "author": "valentin-dirken",
          "body": "Hi, \r\nThank you ! I'm checking the code.\r\n\r\n- Runtime: Python 3.12\r\n- Handler : lambda_function.lambda_handler\r\n- Architecture: x86_64\r\n\r\n- Event JSON : \r\n`{\r\n  \"query\": \"What is Artificial Intelligence ?\",\r\n  \"userId\": \"user123\",\r\n  \"sessionId\": \"23987987\"\r\n}`\r\n\r\nI have an error : \r\n```\r\n{\r\n  \"erro",
          "created_at": "2024-08-29T08:27:31Z"
        },
        {
          "author": "cornelcroi",
          "body": "Thank you for letting me know. \r\nThe documentation about using the framework inside a lambda function is mainly to show how the framework can be imported and used. Regarding the errors on the Lambda function itself you should check the official documentation.\r\nI've updated the documentation to highl",
          "created_at": "2024-08-29T09:21:42Z"
        }
      ]
    },
    {
      "issue_number": 29,
      "title": "Bug: Incorrect Module Import in TypeScript Example for DynamoDB Storage Setup",
      "body": "### Expected Behaviour\n\nThe documentation needs to include correct code examples for importing and utilizing modules from the multi-agent-orchestrator package. Specifically, it should demonstrate the use of DynamoDbChatStorage instead of DynamoDbStorage in the TypeScript version when setting up the storage configuration.\n\n### Current Behaviour\n\nThe current documentation incorrectly suggests importing DynamoDbStorage instead of DynamoDbChatStorage in the TypeScript example for configuring the MultiAgentOrchestrator with DynamoDB. This leads to a potential error when developers follow the documentation, as DynamoDbStorage is not defined in the context of the multi-agent-orchestrator package.\n\n### Code snippet\n\n```python\nimport { DynamoDbStorage, MultiAgentOrchestrator } from 'multi-agent-orchestrator';\r\n\r\nconst tableName = 'YourDynamoDBTableName';\r\nconst region = 'your-aws-region';\r\nconst TTL_DURATION = 3600; // in seconds\r\nconst dynamoDbStorage = new DynamoDbChatStorage(tableName, region, 'your-ttl-key-name', TTL_DURATION);\r\nconst orchestrator = new MultiAgentOrchestrator({\r\n  storage: dynamoDbStorage\r\n});\n```\n\n\n### Possible Solution\n\n```\r\nimport { DynamoDbChatStorage, MultiAgentOrchestrator } from 'multi-agent-orchestrator';\r\n\r\nconst tableName = 'YourDynamoDBTableName';\r\nconst region = 'your-aws-region';\r\nconst TTL_DURATION = 3600; // in seconds\r\nconst dynamoDbStorage = new DynamoDbChatStorage(tableName, region, 'your-ttl-key-name', TTL_DURATION);\r\nconst orchestrator = new MultiAgentOrchestrator({\r\n  storage: dynamoDbStorage\r\n});\r\n\r\n```\r\n\r\nUpdate the documentation to correctly use DynamoDbChatStorage in the import statement and throughout the example.\n\n### Steps to Reproduce\n\n- Visit the documentation at: https://awslabs.github.io/multi-agent-orchestrator/storage/dynamodb/\r\n- Look at the provided code example for integrating DynamoDB storage with the MultiAgentOrchestrator. (TypeScript Version)\r\n- Notice that the import statement and usage incorrectly reference DynamoDbStorage instead of DynamoDbChatStorage.",
      "state": "closed",
      "author": "valentin-dirken",
      "author_type": "User",
      "created_at": "2024-08-29T07:37:07Z",
      "updated_at": "2024-08-29T08:04:02Z",
      "closed_at": "2024-08-29T08:04:02Z",
      "labels": [
        "bug",
        "triage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/29/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/29",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/29",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:31.735274",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thank you Valentin for pointing this out.\r\nFix it!",
          "created_at": "2024-08-29T08:04:02Z"
        }
      ]
    },
    {
      "issue_number": 1,
      "title": "OrchestratorConfig definition does not match in docs/src/content/docs/general/quickstart.md  OrchestratorConfig in src/types/index.ts",
      "body": "### Expected Behaviour\n\n`npx ts-node quickstart.ts` runs without error\n\n### Current Behaviour\n\n```\r\n$ npx ts-node quickstart.ts\r\n/home/cloudshell-user/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:859\r\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\r\n           ^\r\nTSError: ⨯ Unable to compile TypeScript:\r\nquickstart.ts:5:10 - error TS2304: Cannot find name 'logAgentConversation'.\r\n```\n\n### Code snippet\n\n```python\nnpx ts-node quickstart.ts\n```\n\n\n### Possible Solution\n\nMatch names.\n\n### Steps to Reproduce\n\n`npx ts-node quickstart.ts`",
      "state": "closed",
      "author": "sammpath",
      "author_type": "User",
      "created_at": "2024-07-25T03:38:25Z",
      "updated_at": "2024-07-25T10:36:51Z",
      "closed_at": "2024-07-25T10:36:51Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/awslabs/agent-squad/issues/1/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cornelcroi"
      ],
      "milestone": null,
      "html_url": "https://github.com/awslabs/agent-squad/issues/1",
      "api_url": "https://api.github.com/repos/awslabs/agent-squad/issues/1",
      "repository": "awslabs/agent-squad",
      "extraction_date": "2025-06-22T00:37:32.024725",
      "comments": [
        {
          "author": "cornelcroi",
          "body": "Thank you for reporting this issue. \r\n\r\nThe problem was the outdated `Quickstart` documentation section.\r\n\r\nWe've identified the problem and updated the quickstart documentation with the correct code. \r\n\r\nPlease revisit the quickstart documentation and use the updated code sample and let us know.\r\nT",
          "created_at": "2024-07-25T08:50:57Z"
        },
        {
          "author": "sammpath",
          "body": "Fixed.",
          "created_at": "2024-07-25T10:36:51Z"
        }
      ]
    }
  ]
}