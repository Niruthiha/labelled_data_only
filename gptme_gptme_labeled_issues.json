{
  "repository": "gptme/gptme",
  "repository_info": {
    "repo": "gptme/gptme",
    "stars": 3868,
    "language": "Python",
    "description": "Your agent in your terminal, equipped with local tools: writes code, uses the terminal, browses the web, vision.",
    "url": "https://github.com/gptme/gptme",
    "topics": [
      "ai-agents",
      "ai-assistant",
      "anthropic",
      "chatbot",
      "chatgpt",
      "cli",
      "code-generation",
      "llamacpp",
      "llm",
      "llm-agent",
      "llm-apps",
      "openai",
      "openrouter",
      "rag"
    ],
    "created_at": "2023-03-24T16:25:01Z",
    "updated_at": "2025-06-21T05:22:42Z",
    "search_query": "openai anthropic language:python stars:>2",
    "total_issues_estimate": 64,
    "labeled_issues_estimate": 40,
    "labeling_rate": 63.2,
    "sample_labeled": 12,
    "sample_total": 19,
    "has_issues": true,
    "repo_id": 618514446,
    "default_branch": "master",
    "size": 15580
  },
  "extraction_date": "2025-06-22T00:42:10.685046",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 116,
  "issues": [
    {
      "issue_number": 560,
      "title": "Support `multiple=True` CLI options in Click again (for tools etc.)",
      "body": "> @ErikBjare\n> Not with multiple=True, since it then always returns an empty list and never None, even if the default is None.\n>\n>> @dodslaser\n>>\n>> Yes it can. click.Context provides a [get_parameter_source](\nhttps://click.palletsprojects.com/en/stable/api/#click.Context.get_parameter_source) method that should help with that.\n\nLearned from guy on HN: https://news.ycombinator.com/item?id=44297622\n\nUsing this should add back support for multiple `-t` params for instance, by reading the actual source of the parameter (which should let us correctly read the default of None). ",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-06-19T20:08:46Z",
      "updated_at": "2025-06-19T20:10:50Z",
      "closed_at": null,
      "labels": [
        "refactor"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/560/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/560",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/560",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:44.674780",
      "comments": []
    },
    {
      "issue_number": 557,
      "title": "bug: nested gptme process using shell tool hangs in foreground but works in background",
      "body": "## Summary\n`gptme --non-interactive` consistently hangs when run in foreground mode using the shell tool, but works perfectly when run as a background process. This indicates a terminal/TTY handling issue.\n\n## Environment\n- gptme version: v0.27.0+fdbc4e5d.dirty\n- OS: Arch Linux rolling\n- Python: 3.13 (Poetry virtualenv)\n\n## Reproduction Steps\n\n### Foreground Mode (Hangs)\ngptme --non-interactive \"hi\"\nHangs after: [WARNING] Skipping all confirmation prompts.\nNever reaches initialization, requires Ctrl+C or timeout to exit\n\n### Background Mode (Works)  \ngptme --non-interactive \"hi\" &\nCompletes successfully with proper response\nFull initialization, API calls, response generation\n\n## Root Cause Hypothesis\nTerminal/TTY detection code that behaves differently when stdin/stdout are attached to a real terminal vs detached in background mode.\n\n## Impact\n- Non-interactive mode is completely unusable in foreground\n- Affects automation scripts and CI/CD pipelines\n- Workaround: run as background process, but this is unintuitive\n\n## Next Steps\n1. Investigate terminal detection code in CLI initialization\n2. Check for stdin reading that should be skipped in non-interactive mode  \n3. Review tool initialization for TTY dependencies\n",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-06-16T17:01:47Z",
      "updated_at": "2025-06-16T17:18:38Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/557/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/557",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/557",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:44.674799",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "This is actually quite a high-value way to work on #554, we should be able to treat gptme subagents like any other shell tool that we can run in shell or tmux.",
          "created_at": "2025-06-16T17:18:38Z"
        }
      ]
    },
    {
      "issue_number": 554,
      "title": "Better subagents",
      "body": "I've noticed Claude Code works with tasks/subagents quite a bit, and I think it would make sense for gptme in many circumstances too (such as when it `cd`s into a directory with a new workspace config file, the agent should start a task in that workspace to make sure it gets the right context.\n\nWe already have the subagent tool, but it's not refined and prompted enough to be useful (I think). Might need a better return structure? Some way to return/pause to ask for clarification?\n\nWe should review how Claude Code works with subagents (\"Tasks\") exactly, and adopt something similar.\n\nBasically continuing on https://github.com/gptme/gptme/issues/61 (might be a duplicate)",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-06-15T11:42:27Z",
      "updated_at": "2025-06-15T11:43:04Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/554/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/554",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/554",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:44.864842",
      "comments": []
    },
    {
      "issue_number": 15,
      "title": "Auto-name conversations",
      "body": "We can already give conversations a name automatically with `/rename auto` but this should be improved:\n\n - [x] Name conversation automatically with `/rename auto`\n - [ ] Don't include date in conversation name, fetch from file/message timestamps.\n    - Filesystem metadata not very reliable for this type of thing, but message timestamps are now stored, so should use them. \n - [ ] Run automatically on save? (if name not already set)\n    - https://github.com/ErikBjare/gptme/pull/449\n      - This will probably not work for gptme-server, the webui wouldn't get notice of the rename. \n         - Needs special logic, maybe set an \"auto\" name when we first create a conversation name? Or detect/redirect renames?\n      - A different approach would be to not rename the conversation folder names at all, instead keep them as unique IDs and add a (auto-)settable \"name\" field in the conversation metadata.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-10-27T13:48:26Z",
      "updated_at": "2025-06-12T15:01:54Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/15/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/15",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/15",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:44.864863",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I wrote this script which automatically names all past conversations still using a default randomized name: https://github.com/ErikBjare/gptme/blob/master/scripts/auto_rename_logs.py",
          "created_at": "2025-02-23T10:39:10Z"
        },
        {
          "author": "ErikBjare",
          "body": "We now support setting a conversation name in the chat config: https://github.com/gptme/gptme/pull/549\n\nThis also means conversations now have separate \"id\" (name of log folder) and \"name\" (display-name stored in chat config). The `/rename` command was modified to edit the display-name. \n\nSupport in",
          "created_at": "2025-06-12T15:01:17Z"
        }
      ]
    },
    {
      "issue_number": 150,
      "title": "Managing mutable files",
      "body": "Right now files are stored by path in the conversation log, this makes the content mutable and incorrectly modifies past messages when changes to the files have been made.\r\n\r\n - [ ] Attached files are mutable and their conversation state not preserved: If a file is referenced, we can only read the most recent version.\r\n     - Could be solved by storing referenced files in log dir, perhaps named f\"{name}-{hash or version}.{ext}\" (something content/version-addressed)\r\n\r\nRelated:\r\n - https://github.com/ErikBjare/gptme/issues/262\r\n - https://github.com/ErikBjare/gptme/pull/281",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-05T09:37:53Z",
      "updated_at": "2025-06-12T13:15:45Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/150/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/150",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/150",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.090968",
      "comments": []
    },
    {
      "issue_number": 546,
      "title": "Add `/compact` command",
      "body": "@Miyou reminded me of Claude Code's `/compact` command which does context summarization (somehow) to compact the context.\n\nI've thought about adding it to gptme by reusing our existing summarization logic (that auto-triggers near the context limit) or by creating a new prompt from the conversation (including relevant files etc, more of a \"restart\" or \"continue in new conversation\" than a \"compact\"), but should look into how Claude Code does it exactly.\n\nOld notes I had:\n\n>  - I think the `/compact` command in Claude Code or whatever might be popular/useful in agent contexts for [[gptme]], especially for long-running tasks (or tasks with failed steps), that carries a lot of context.\n>     - Feels like we have something like this in gptme for summarization/reduction, but summarization breaks caching since it's not deterministic as it re-runs on every request. \n>         - Better to support explicit compacting steps (possibly callable by agent itself) with auto-compacting option that runs when context passes a threshold (say 50% of the context window)\n>    - In gptme, compacting would fork the branch using a reduced message set\n\nRelated: https://github.com/gptme/gptme/issues/61",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-06-12T08:01:12Z",
      "updated_at": "2025-06-12T08:03:01Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/546/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/546",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/546",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.090985",
      "comments": []
    },
    {
      "issue_number": 514,
      "title": "FR: Requesty as provider",
      "body": "Would you please consider adding [Requesty](https://www.requesty.ai/) as an alternative to Openrouter?\n\n",
      "state": "open",
      "author": "materemias",
      "author_type": "User",
      "created_at": "2025-04-29T08:28:41Z",
      "updated_at": "2025-06-09T13:57:37Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "provider"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/514/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/514",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/514",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.090991",
      "comments": []
    },
    {
      "issue_number": 427,
      "title": "Show working directory before saving files",
      "body": "I had an agent running and told it to make some edits in another folder. It used cd, then I told it to write some files to its own workspace but both it and I forgot that it had cd'd away from its workspace. Perhaps showing the current working directory on each file save prompt could be useful?",
      "state": "closed",
      "author": "Miyou",
      "author_type": "User",
      "created_at": "2025-01-29T14:29:55Z",
      "updated_at": "2025-06-04T12:34:27Z",
      "closed_at": "2025-06-04T12:33:22Z",
      "labels": [
        "context"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/427/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/427",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/427",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.091001",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Anthropic has suggested that the solution to this is to [always use absolute paths](https://www.anthropic.com/research/building-effective-agents)...\n\n> While building our agent for [SWE-bench](https://www.anthropic.com/research/swe-bench-sonnet), we actually spent more time optimizing our tools than",
          "created_at": "2025-01-29T17:55:42Z"
        },
        {
          "author": "ErikBjare",
          "body": "I now mention a preference for absolute paths it in the system prompt: https://github.com/ErikBjare/gptme/commit/ba11552a7d6febd36223a4e35e438e777646b226\n\nSome tools should probably be updated to return absolute paths instead of relative ones.\n\nMaybe also inject the current working directory in a ep",
          "created_at": "2025-02-07T11:32:29Z"
        },
        {
          "author": "ErikBjare",
          "body": "The shell tool now outputs a line about any working directory change after running a command: https://github.com/gptme/gptme/pull/534\n\nThis significantly improved things. I suppose it's wasn't prompted well enough about the statefulness of path changes (might think its a subshell, for example), this",
          "created_at": "2025-06-04T12:33:19Z"
        }
      ]
    },
    {
      "issue_number": 531,
      "title": "Met IsADirectoryError when workspace == \"@log\" in the gptme.cli.py",
      "body": "Hi,\n\nin the gptme.cli.py file, when workspace == \"@log\":\nhttps://github.com/gptme/gptme/blob/350d8532bea3b6d5989316a1dd3c8ebf84832232/gptme/cli.py#L243-L248\nI met the IsADirectoryError when the chat_config should be saved:\nhttps://github.com/gptme/gptme/blob/350d8532bea3b6d5989316a1dd3c8ebf84832232/gptme/cli.py#L261-L271\nThe error might come from these lines:\nhttps://github.com/gptme/gptme/blob/350d8532bea3b6d5989316a1dd3c8ebf84832232/gptme/config.py#L327-L329",
      "state": "closed",
      "author": "leonhard-yu-zhang",
      "author_type": "User",
      "created_at": "2025-05-19T13:34:15Z",
      "updated_at": "2025-06-04T11:31:41Z",
      "closed_at": "2025-06-04T11:31:12Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/531/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/531",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/531",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.287812",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Just fixed in #537, thanks for reporting!",
          "created_at": "2025-06-04T11:31:39Z"
        }
      ]
    },
    {
      "issue_number": 216,
      "title": "Complete \"computer use\" support",
      "body": "Since Anthropic just announced their computer use stuff (see https://github.com/ErikBjare/gptme/issues/50#issuecomment-2430373560 and [anthropic.com/news/3-5-models-and-computer-use](https://www.anthropic.com/news/3-5-models-and-computer-use)), we should just finish ours as we already have the screenshots.\n\nWe can take screenshots, we just need to enable acting on them by clicking or making input.\n\nTo not burn tons of tokens we should probably put it in a loop where it doesn't stack tons view/interact steps, maybe use a looping subagent or some kind of context-efficient tool-use loop until goal is achieved (we might need some stuff like this generally for automation goals). Should study how they do it.\n\nThey run it in a Docker container and stream it in a webapp using VNC. We should make it possible to do it this way with gptme, but I think gptme should be able to control the local system first, and a Docker system second.\n\n\n## Milestones\n\n - Can it Tweet?\n - Can it play Factorio? (prob joke tweet: https://x.com/aphysicist/status/1848802806729228782)\n - Can it play Doom? (latency if we don't want to suck)\n - https://manifold.markets/singer/will-ai-automate-guis-by-end-of-202",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-22T21:48:08Z",
      "updated_at": "2025-06-04T11:30:23Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/216/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/216",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/216",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.491236",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Remaining tasks after merging #225 \r\n\r\n - [ ] figure out what is causing the delays\r\n    - I seem to have fixed some of the delay by removing a speed limit argument that I accidentally added? Maybe?\r\n    - Still delays when starting new terminal windows\r\n    - I don't remember seeing these delays on",
          "created_at": "2024-11-01T13:12:29Z"
        }
      ]
    },
    {
      "issue_number": 532,
      "title": "Evaluate gptme on tbench",
      "body": "https://www.tbench.ai/\n\nOne of the creators suggested I join their Discord to get it running with gptme. I should take them up on that sooner rather than later.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-05-22T18:53:13Z",
      "updated_at": "2025-05-22T18:53:22Z",
      "closed_at": null,
      "labels": [
        "evals"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/532/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/532",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/532",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.670542",
      "comments": []
    },
    {
      "issue_number": 520,
      "title": "Placeholder-aware save tool",
      "body": "The save tool often causes the LLM to do stuff like:\n\n````\n```save file.py\nNew first line\n\n# ... rest of the content is the same ...\n```\n````\n\n~~Which more or less wipes the file.~~ (not anymore after #522)\n\nI noticed once that Lovable seems to handle placeholders when they are saving files, I guess checking for a regex like `(#|//)\\s[...].*[...]` and trying to place it into the file somehow. Might be worth setting up a proper test for this, especially to support the output format LLMs (in particular Claude) tend to use.\n\nWe are doing some related placeholder handling in the patch tool:\n\nhttps://github.com/gptme/gptme/blob/4fb3561b7711a373f10bf9144d1282e5d6f8c01d/gptme/tools/patch.py#L174-L181",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-05-06T12:38:35Z",
      "updated_at": "2025-05-10T16:04:36Z",
      "closed_at": null,
      "labels": [
        "tool",
        "reliability"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/520/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/520",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/520",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.670565",
      "comments": []
    },
    {
      "issue_number": 492,
      "title": "Search is broken",
      "body": "Google show Error \"No Search Results Found\"\n![Image](https://github.com/user-attachments/assets/67191960-becd-4be2-9d0f-cc0c701a1ec8)\n\nDuckduckgo shows Error \"Unable to find selector `.react-results--main` in results\"\n\n![Image](https://github.com/user-attachments/assets/2c65ed2c-a1eb-4395-a4fc-9218fc77cab7)\n\nThis is recent. It worked on 31st March. Google at least not sure about DuckDuckGo",
      "state": "open",
      "author": "0xbrayo",
      "author_type": "User",
      "created_at": "2025-04-02T15:15:44Z",
      "updated_at": "2025-05-09T07:30:05Z",
      "closed_at": null,
      "labels": [
        "bug",
        "enhancement",
        "provider"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/492/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/492",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/492",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.670575",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I think both have been broken for a while. Google broke first, but DDG soon after. \n\nI disabled the tests for them for this reason.\n\nI've started using my [perplexity](https://github.com/gptme/gptme-contrib/blob/master/scripts/perplexity.py) script instead, which works better than both ime.\n\nWould b",
          "created_at": "2025-04-03T15:03:02Z"
        },
        {
          "author": "0xbrayo",
          "body": "I'll try to get them working again. Perplexity and MCP server are also really good options. Perplexity does require extra config for api keys. I'll look into all three and see what's the most practicallly and maintainable.",
          "created_at": "2025-04-03T15:22:12Z"
        },
        {
          "author": "ErikBjare",
          "body": "Anthropic announced web search straight in the API today.\n\n[OpenAI](https://platform.openai.com/docs/guides/tools-web-search?api-mode=responses) has this too, as does [OpenRouter](https://openrouter.ai/docs/features/web-search) (backed by Exa).\n\nThis seems a worthwhile provider feature to support, a",
          "created_at": "2025-05-08T10:48:09Z"
        }
      ]
    },
    {
      "issue_number": 468,
      "title": "Open URLs to GitHub issues/PRs/repos using `gh` tool instead of browser",
      "body": "The `gh` tool supports `gh issue view --comments <URL>`, so should be easy and a decent improvement.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-03-11T15:45:23Z",
      "updated_at": "2025-05-07T12:40:49Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/468/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/468",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/468",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:45.925244",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I noticed that `gh` doesn't support listing of pr review comments. \n\nSo I wrote a script which includes it in 3e0dd23d (based on https://github.com/cli/cli/issues/5788#issuecomment-1704351943). Something similar should be done for this issue (excluding outdated/resolved comments).",
          "created_at": "2025-03-11T16:34:22Z"
        },
        {
          "author": "ErikBjare",
          "body": "I fixed the limitations of `gh pr view --comment` with this script: https://github.com/gptme/gptme/pull/483",
          "created_at": "2025-03-25T13:43:13Z"
        }
      ]
    },
    {
      "issue_number": 523,
      "title": "Backtrack conversation on errors and mistakes",
      "body": "When the agent makes an attempt and fails, we include the content in the conversation. This is often costly for the context, and back-tracking with corrective feedback would help keep the conversation on track instead of including the entire mistake.\n\nCould do it simply by checking for the system messages for failed actions, undoing the conversation to the last good point (probably just one \"step\" back, for now), adding a user message about the failed attempt (maybe), and run it again. Or by simply removing the failed attempts from the conversation history (or replacing them with short messages), this should be done rarely to not affect token caching too badly. Something similar to https://github.com/gptme/gptme/blob/master/scripts/treeofthoughts.py\n\nWould help address issues like failed patches, failed saves (https://github.com/gptme/gptme/issues/520).\n\nIdeally we'd want to be able to test this on a benchmark or something.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-05-07T12:36:39Z",
      "updated_at": "2025-05-07T12:40:26Z",
      "closed_at": null,
      "labels": [
        "reliability"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/523/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/523",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/523",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.143320",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I guess this is a duplicate of https://github.com/gptme/gptme/issues/495",
          "created_at": "2025-05-07T12:40:24Z"
        }
      ]
    },
    {
      "issue_number": 513,
      "title": "bug: MCP tools and their config not working in server",
      "body": "Originally reported by @miyou: MCP tools don't work properly in gptme-webui.\n\n## Current behavior\n\n1. All step-requests fail when tools attempt to initialize\n2. Error message: 'Tool 'memory_create_entities' not found'\n3. Additionally, when memory MCP tools do initialize, they don't persist anything\n4. Interestingly, the sqlite MCP tool works correctly, suggesting the issue might be specific to the memory MCP implementation\n\n## Steps to reproduce\n\n1. Have MCP servers configured in config.toml\n2. Verify MCP tools work in CLI\n3. Open web UI (gptme-webui)\n4. Create new conversation\n5. Configure MCP in the conversation config\n6. Try to use any MCP tool\n7. Error: Tool initialization fails\n\n## Expected behavior\n\nMCP tools should work in web UI just as they do in CLI.\n\n## Technical notes\n\n- Tool initialization fails in the server when processing step requests\n- Memory MCP tool has additional issue of not persisting state\n- SQLite MCP tool works correctly, which might help narrow down the issue\n- Need to investigate the tool initialization flow in server context (the memory persistence issue can wait)",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-04-28T11:26:36Z",
      "updated_at": "2025-05-05T13:24:07Z",
      "closed_at": "2025-05-05T13:24:00Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/513/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/513",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/513",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.324904",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I later tried changing the exception thrown to a warning, giving: \n\n```\nINFO Executing tool: sqlite_describe_table\nWARN Tool 'sqlite_describe_table' is not available for execution.\n```\n\n(which @miyou had seen too)\n\nSeems we are doing something strange in tool/mcp initialization for new threads.",
          "created_at": "2025-04-28T12:14:40Z"
        },
        {
          "author": "ErikBjare",
          "body": "I think @Miyou fixed all this in #515 ",
          "created_at": "2025-05-05T13:24:01Z"
        }
      ]
    },
    {
      "issue_number": 498,
      "title": "Tool confirmation prompt doesn't show and clears page when too long",
      "body": "Annoying bug.\n\nHappens a lot for me with gptme.vim, since it's often squeezed together in a vertical pane.\n\nAlso happens when gptme uses long absolute paths, or MCP servers with long names.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-04-11T13:37:41Z",
      "updated_at": "2025-04-27T09:43:22Z",
      "closed_at": "2025-04-27T09:43:22Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/498/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/498",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/498",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.528755",
      "comments": []
    },
    {
      "issue_number": 143,
      "title": "Making gptme work while you sleep",
      "body": "What I and many seem to want is a way to truly put LLMs to work, ways to outsource higher volumes of work without explicit instruction/live oversight.\r\n\r\nI think this is a fascinating problem, and in many ways how I hope to use gptme, but not really there yet.\r\n\r\nIdeas:\r\n\r\n - ask it to try implementing feature/fix/refactor x, then typechecking/testing/linting it, then make a PR *if successful*\r\n    - if unsuccessful, attempt up to n retry strategies, possibly in a branching manner where we try to detect the best branch, since any step could go wrong and put it in an unusable state.\r\n      - started working on this in https://github.com/ErikBjare/gptme/pull/199\r\n    - Similar goals to SWE-Bench stuff: https://github.com/ErikBjare/gptme/pull/142\r\n - various automation workflows, putting it in a cron job, etc.\r\n - return to the gptme roots and give it your documents/data/activitywatch to inspect and review, condensing it into a daily report or similar\r\n - browsing the web for content, giving the user recommendations\r\n - write docs for how to do all these things, give the docs to gptme so you can ask it to write scripts doing it\r\n    - [x] Minimal docs added to https://gptme.org/docs/automation.html in https://github.com/ErikBjare/gptme/pull/144\r\n - more subagent examples/evals\r\n - feedback loops, like `make edit to page -> view web page -> make edit`\r\n    - Used it for generating https://github.com/ErikBjare/gptme/blob/master/site/style.css with much success\r\n\r\nWhat we should focus on:\r\n - Making gptme work on gptme while I sleep\r\n\r\nWhat we'd need:\r\n\r\n - Tool customization\r\n    - It is likely that performance would improve by limiting each step to a restricted set of tools (would at least save on tokens)\r\n       - [x] Implemented `--tools` option in https://github.com/ErikBjare/gptme/commit/48d559b487682a22d7614948270442c529596375\r\n - Reliable message passing between gptme runs/agents\r\n    - The current subagent mechanism of asking it to output JSON isn't the most reliable. \r\n       - [x] Maybe making it a prompt chain would fix it? (done in 0dd6583)\r\n\r\nIssues:\r\n - How to avoid burning lots of non-value generating tokens while I sleep?\r\n    - Make reliable, do intelligent tree-search of branches, limit retries",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-02T08:39:36Z",
      "updated_at": "2025-03-30T07:51:20Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "help wanted",
        "ideas",
        "capabilities"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/143/reactions",
        "total_count": 3,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 3
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/143",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/143",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.528780",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "A fair bit of progress towards this with Bob (#249).",
          "created_at": "2024-11-15T17:18:58Z"
        },
        {
          "author": "jakenuts",
          "body": "Somehow it feels like a timer that executes a prompt and a tool that can spawn/control another instance is enough to pull off everything. \n\nBetter would be a generic trigger that could be a timer or an event fired from an agent as then error handling and task iteration could be continuous rather tha",
          "created_at": "2024-12-22T18:04:29Z"
        },
        {
          "author": "AReid987",
          "body": "Perhaps it would be beneficial if the workflow were something like:\n- Give docs to Agent at Cron start\n- Instruct Agent to write tests covering each feature\n- Write the code after tests are written and successfully run\n- Run the code, observe for passing tests\n- rewrite code until tests pass 100% \n\n",
          "created_at": "2025-03-30T07:51:19Z"
        }
      ]
    },
    {
      "issue_number": 286,
      "title": "MCP support",
      "body": "https://github.com/modelcontextprotocol\r\n\r\nhttps://modelcontextprotocol.io/llms-full.txt",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-26T07:59:09Z",
      "updated_at": "2025-03-29T16:29:57Z",
      "closed_at": "2025-03-29T16:29:56Z",
      "labels": [
        "enhancement",
        "help wanted",
        "context",
        "capabilities",
        "tool",
        "bounty"
      ],
      "label_count": 6,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/286/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "RickardCarlsson4"
      ],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/286",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/286",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.725556",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "gptme as MCP client (support using MCP servers as tools): https://github.com/ErikBjare/gptme/pull/431\n\ngptme as MCP server: https://github.com/ErikBjare/gptme/pull/287",
          "created_at": "2025-03-07T10:19:41Z"
        },
        {
          "author": "ErikBjare",
          "body": "I'm offering a $100 bounty (paid via GitHub Sponsors) to whoever gets \"gptme as MCP server\" ready to merge.",
          "created_at": "2025-03-07T10:24:37Z"
        },
        {
          "author": "ErikBjare",
          "body": "@RickardCarlsson4 is on the case",
          "created_at": "2025-03-13T15:23:18Z"
        },
        {
          "author": "delorenj",
          "body": "How strange is it how lock-step everthing is progressing. Use gptme many many times a day. Today, I thought \"damn, i'd really like to get MCP working. Bounty is up. Rickard is cranking away. Count me in.",
          "created_at": "2025-03-13T23:37:26Z"
        },
        {
          "author": "RickardCarlsson4",
          "body": "I am on this! ",
          "created_at": "2025-03-21T14:00:27Z"
        }
      ]
    },
    {
      "issue_number": 478,
      "title": "Improve GitHub bot",
      "body": "The bot should be a lot more capable to make code changes with Claude Sonnet 3.5, and now 3.7.\n\nI should polish it and throw a few issues at it and see how it does.\n\nInspired by https://x.com/granawkins/status/1900917075708936594\n\nShould also update the docs to make them [less confusing](https://x.com/ErikBjare/status/1901304685262242085): https://gptme.org/docs/bot.html\n\nMaybe do https://github.com/gptme/gptme/issues/305\n",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-03-16T16:40:50Z",
      "updated_at": "2025-03-16T18:09:45Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/478/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/478",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/478",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:46.968774",
      "comments": []
    },
    {
      "issue_number": 458,
      "title": "Anthropic prompt is too long",
      "body": "After running a pretty long chat I got this error\n\n```\nTraceback (most recent call last):\n  File \"/Users/rickardcarlsson/.local/bin/gptme\", line 8, in <module>\n    sys.exit(main())\n             ~~~~^^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/click/core.py\", line 1161, in __call__\n    return self.main(*args, **kwargs)\n           ~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/click/core.py\", line 1082, in main\n    rv = self.invoke(ctx)\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/click/core.py\", line 1443, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/click/core.py\", line 788, in invoke\n    return __callback(*args, **kwargs)\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/cli.py\", line 278, in main\n    chat(\n    ~~~~^\n        prompt_msgs,\n        ^^^^^^^^^^^^\n    ...<9 lines>...\n        selected_tool_format,\n        ^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/chat.py\", line 194, in chat\n    for msg in step(\n               ~~~~^\n        manager.log,\n        ^^^^^^^^^^^^\n    ...<3 lines>...\n        workspace=workspace,\n        ^^^^^^^^^^^^^^^^^^^^\n    ):  # pragma: no cover\n    ^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/chat.py\", line 247, in step\n    msg_response = reply(msgs, get_model().model, stream, tools)\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/llm/__init__.py\", line 57, in reply\n    return _reply_stream(messages, model, tools)\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/llm/__init__.py\", line 102, in _reply_stream\n    for char in (\n                ^\n        char for chunk in _stream(messages, model, tools) for char in chunk\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ):\n    ^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/llm/__init__.py\", line 103, in <genexpr>\n    char for chunk in _stream(messages, model, tools) for char in chunk\n                      ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/llm/llm_anthropic.py\", line 68, in wrapper\n    yield from func(*args, **kwargs)\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/gptme/llm/llm_anthropic.py\", line 148, in stream\n    with _anthropic.messages.stream(\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        model=model,\n        ^^^^^^^^^^^^\n    ...<5 lines>...\n        tools=tools_dict if tools_dict else NOT_GIVEN,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ) as stream:\n    ^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/anthropic/lib/streaming/_messages.py\", line 153, in __enter__\n    raw_stream = self.__api_request()\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/anthropic/_base_client.py\", line 1279, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/anthropic/_base_client.py\", line 956, in request\n    return self._request(\n           ~~~~~~~~~~~~~^\n        cast_to=cast_to,\n        ^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        retries_taken=retries_taken,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/Users/rickardcarlsson/.local/pipx/venvs/gptme/lib/python3.13/site-packages/anthropic/_base_client.py\", line 1060, in _request\n    raise self._make_status_error_from_response(err.response) from None\nanthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'prompt is too long: 200297 tokens > 200000 maximum'}}\n```",
      "state": "open",
      "author": "RickardCarlsson4",
      "author_type": "User",
      "created_at": "2025-03-07T13:34:38Z",
      "updated_at": "2025-03-07T15:54:06Z",
      "closed_at": null,
      "labels": [
        "bug",
        "context"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/458/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/458",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/458",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:48.712886",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Huh, there should be [strategies](https://github.com/ErikBjare/gptme/blob/bb1c3f3f521786d85858c03641d9a5e0d68e6eed/gptme/util/reduce.py#L17) in place to reduce the context once it approaches the context window limit (with log messages indicating so). Did you see these \"reducing\" messages? I thought ",
          "created_at": "2025-03-07T15:00:47Z"
        }
      ]
    },
    {
      "issue_number": 59,
      "title": "Add RAG for code, personal files, and conversations",
      "body": "Source files could be:\r\n - your projects folder (with code)\r\n - your notes (in plaintext)\r\n - past conversations\r\n - previously web-retrieved documents\r\n\r\nAdding this feature would return gptme to its roots: an agent which has context about you and your projects, to intelligently and effectively assist in your work.\r\n\r\n## Needs\r\n\r\n - [ ] Configure where to look for source files\r\n   - probably in config\r\n   - could index the current working directory\r\n      - would be problematic for large files, limit to git repos?\r\n - [ ] Exclude functionality\r\n   - exclude binary files\r\n   - respect git-ignores\r\n - [ ] Retrieval method\r\n - [ ] indexing?\r\n\r\n## Prompting\r\n\r\nThe model should be aware of its RAG abilities in the prompt (possibly listing source folder config), and provided a tool for using it.\r\n\r\n## Inspiration\r\n\r\n- Aider's code map\r\n- PrivateGPT\r\n- LocalGPT\r\n- https://www.anthropic.com/news/contextual-retrieval\r\n   - https://github.com/anthropics/anthropic-cookbook/blob/main/skills/contextual-embeddings/guide.ipynb",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-20T11:38:59Z",
      "updated_at": "2025-03-05T16:23:47Z",
      "closed_at": null,
      "labels": [
        "context",
        "capabilities",
        "tool"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/59/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/59",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/59",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:48.948651",
      "comments": [
        {
          "author": "robingenz",
          "body": "Thank you so much for this great project! I'm really looking forward to this feature. If you want you can start a pool funding (e.g. with [Polar](https://docs.polar.sh/issue-funding)). I would be happy to contribute.",
          "created_at": "2024-10-31T20:21:41Z"
        },
        {
          "author": "ErikBjare",
          "body": "Lots of work on this in https://github.com/ErikBjare/gptme-rag",
          "created_at": "2025-02-03T14:00:35Z"
        },
        {
          "author": "freddyholms",
          "body": "Could gptme be integrated with [RAGflow](https://github.com/infiniflow/ragflow)? It seems to be the best RAG solution out there and integration could just be a matter of installing it and using a tool",
          "created_at": "2025-03-05T16:23:45Z"
        }
      ]
    },
    {
      "issue_number": 446,
      "title": "Contents of mentioned files should not be included in `/shell` commands",
      "body": "Running `/shell mypy test.py` expands to the shell command:\n\n~~~\nmypy test.py\n\n```test.py\n...\n```\n~~~\n\nWhich is obviously not right.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-02-17T22:33:13Z",
      "updated_at": "2025-02-28T09:44:55Z",
      "closed_at": "2025-02-28T09:44:55Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/446/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/446",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/446",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.157602",
      "comments": []
    },
    {
      "issue_number": 444,
      "title": "Add support for ephemeral messages",
      "body": "\"Ephemeral messages\" are messages which are intended to be dropped after a while, like after a few messages.\n\nTo ensure effective prompt caching, we should make sure we request a cache point before the first ephemeral message (since the conversation should be stable up until that point).\n\nExamples could be:\n - `<thinking>` contents\n - Full file contents on failed patches\n - Screenshot outputs in computer use (since screenshots are taken so often)\n - RAG results",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-02-17T22:18:00Z",
      "updated_at": "2025-02-17T22:33:46Z",
      "closed_at": null,
      "labels": [
        "context"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/444/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/444",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/444",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.157623",
      "comments": []
    },
    {
      "issue_number": 443,
      "title": "Browser tool crashes and deadlocks on subsequent request",
      "body": "```\nUser: https://gptme.org/docs/evals.html\n[22:37:50] ERROR    Error in browser thread                                                                                               _browser_thread.py:76\n                    Traceback (most recent call last):\n                      File \"/home/erb/Programming/gptme/gptme/tools/_browser_thread.py\", line 72, in _run\n                        result = cmd.func(browser, *cmd.args, **cmd.kwargs)\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                      File \"/home/erb/Programming/gptme/gptme/tools/_browser_playwright.py\", line 30, in _load_page\n                        context = browser.new_context(\n                                  ^^^^^^^^^^^^^^^^^^^^\n                      File\n                    \"/home/erb/.cache/pypoetry/virtualenvs/gptme--mVb8r6G-py3.12/lib/python3.12/site-packages/playwright/sync_api/_genera\n                    ted.py\", line 13928, in new_context\n                        self._sync(\n                      File\n                    \"/home/erb/.cache/pypoetry/virtualenvs/gptme--mVb8r6G-py3.12/lib/python3.12/site-packages/playwright/_impl/_sync_base\n                    .py\", line 115, in _sync\n                        return task.result()\n                               ^^^^^^^^^^^^^\n                      File\n                    \"/home/erb/.cache/pypoetry/virtualenvs/gptme--mVb8r6G-py3.12/lib/python3.12/site-packages/playwright/_impl/_browser.p\n                    y\", line 129, in new_context\n                        channel = await self._channel.send(\"newContext\", params)\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                      File\n                    \"/home/erb/.cache/pypoetry/virtualenvs/gptme--mVb8r6G-py3.12/lib/python3.12/site-packages/playwright/_impl/_connectio\n                    n.py\", line 61, in send\n                        return await self._connection.wrap_api_call(\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                      File\n                    \"/home/erb/.cache/pypoetry/virtualenvs/gptme--mVb8r6G-py3.12/lib/python3.12/site-packages/playwright/_impl/_connectio\n                    n.py\", line 528, in wrap_api_call\n                        raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\n                    Exception: Browser.new_context: Connection closed while reading from the driver\n           WARNING  Failed to read URL https://gptme.org/docs/evals.html: Browser.new_context: Connection closed while reading from the driver      chat.py:491\n```\n\nAfter trying it a second time it seemed to stall/deadlock, but I eventually got\n\n\n```\n[22:38:36] WARNING  Failed to read URL https://gptme.org/docs/evals.html: Browser operation timed out after 30s\n```\n\nShould probably fix the issue and emit some more logging messages to not confuse users during unusually long operation.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-02-17T21:38:44Z",
      "updated_at": "2025-02-17T22:33:33Z",
      "closed_at": null,
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/443/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/443",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/443",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.157629",
      "comments": []
    },
    {
      "issue_number": 246,
      "title": "Document all non-python dependencies",
      "body": "`playwright` `lynx` `wl-clipboard` `pdftotext` `github-cli` `tmux` are all optional dependencies that users should know about when installing gptme.",
      "state": "open",
      "author": "0xbrayo",
      "author_type": "User",
      "created_at": "2024-11-04T14:32:25Z",
      "updated_at": "2025-02-15T06:55:57Z",
      "closed_at": null,
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/246/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/246",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/246",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.157635",
      "comments": [
        {
          "author": "0xbrayo",
          "body": "Not having lynx installed means the user cannot use web tool. But it doesn't explicitly tell the user they need to install lynx for this.",
          "created_at": "2024-11-26T16:34:59Z"
        }
      ]
    },
    {
      "issue_number": 262,
      "title": "Crashes on `cd` after attaching images to message",
      "body": "Paths should either be stored as absolute paths, or be resolved relative to the workspace root (which should probably be stored in the logfile folder) and not the current directory.\r\n\r\n```\r\nFile /fast/erb/Programming/gptme/gptme/message.py:113, in Message._content_files_list(self, provider)\r\n    105 content.append(\r\n    106     {\r\n    107         \"type\": \"text\",\r\n    108         \"text\": f\"![{f.name}]({f.name}):\",\r\n    109     }\r\n    110 )\r\n    112 # read file\r\n--> 113 data_bytes = f.read_bytes()\r\n    114 data = base64.b64encode(data_bytes).decode(\"utf-8\")\r\n    116 # check that the file is not too large\r\n    117 # anthropic limit is 5MB, seems to measure the base64-encoded size instead of raw bytes\r\n    118 # TODO: use compression to reduce file size\r\n    119 # print(f\"{len(data)=}\")\r\n\r\nFile /usr/lib/python3.11/pathlib.py:1050, in Path.read_bytes(self)\r\n   1046 def read_bytes(self):\r\n   1047     \"\"\"\r\n   1048     Open the file in bytes mode, read it, and close the file.\r\n   1049     \"\"\"\r\n-> 1050     with self.open(mode='rb') as f:\r\n   1051         return f.read()\r\n\r\nFile /usr/lib/python3.11/pathlib.py:1044, in Path.open(self, mode, buffering, encoding, errors, newline)\r\n   1042 if \"b\" not in mode:\r\n   1043     encoding = io.text_encoding(encoding)\r\n-> 1044 return io.open(self, mode, buffering, encoding, errors, newline)\r\n\r\nFileNotFoundError: [Errno 2] No such file or directory: 'media/profile-pic-draft1.jpg'\r\n```",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-20T10:54:12Z",
      "updated_at": "2025-02-07T11:35:15Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/262/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/262",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/262",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.355376",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Maybe absolute paths are the better way here... We could always \"compile\" such conversations into self-contained folders by using a script to change the paths and move the files into a dir relative to the workspace.",
          "created_at": "2025-02-07T11:35:15Z"
        }
      ]
    },
    {
      "issue_number": 47,
      "title": "Add streaming responses to web UI",
      "body": "This might require significant rewrite of how tokens are output, turning the request into a generator that emits tokens instead of a full message. The tokens can then be collected until an end of message token, returned over the API, while being consummated into a message at the end.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-22T15:13:59Z",
      "updated_at": "2025-02-03T13:50:16Z",
      "closed_at": "2025-02-03T13:50:14Z",
      "labels": [
        "enhancement",
        "webui"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/47/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/47",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/47",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.535882",
      "comments": [
        {
          "author": "nslieske",
          "body": "In my opinion, the web interface should be a lower priority.  The tool works very well on the command line, so to divert your efforts towards a web UI is not efficient.  If someone else wants to step up, then it makes sense.  What's the motivation for the web interface at all?\r\n\r\n",
          "created_at": "2023-11-22T19:46:41Z"
        },
        {
          "author": "ErikBjare",
          "body": "It is a lower priority :)\r\n\r\nIt's not that much of a distraction, the changes required would improve the code overall anyway.\r\n\r\nThe web UI is nice for browsing past conversations, and in theory it'd be nice if it could act like a Jupyter-notebook style thing with inline plots and such. But you're r",
          "created_at": "2023-11-23T09:39:05Z"
        },
        {
          "author": "ErikBjare",
          "body": "It kinda works now, but some remaining issues that are discussed in https://github.com/ErikBjare/gptme-webui/issues",
          "created_at": "2025-02-03T13:50:14Z"
        }
      ]
    },
    {
      "issue_number": 307,
      "title": "Allow manual edit of save/patch/command before run",
      "body": "@Miyou suggested that it might be useful to let the user edit a suggested command instead of abort and re-prompt.\r\n\r\nWould be easy to add using existing `useredit` utils.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-12-05T10:57:21Z",
      "updated_at": "2025-02-03T13:49:39Z",
      "closed_at": "2025-02-03T13:49:38Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/307/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/307",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/307",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.762850",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "This was added in https://github.com/ErikBjare/gptme/pull/308, at least for `save` and `patch`. Seems to work for `shell` too.",
          "created_at": "2025-02-03T13:49:38Z"
        }
      ]
    },
    {
      "issue_number": 75,
      "title": "Improve planning for complex tasks",
      "body": "After the Cognition Labs announcement of Devin yesterday (https://twitter.com/cognition_labs/status/1767548763134964000), which was very reminiscent of gptme, I noticed that they have this \"Planner\" module which has a `Current focus: ...` and a list of steps/checkboxes in markdown.\r\n\r\nWould be interesting in working to improve planning in gptme, potentially with the help of https://github.com/ErikBjare/gptme/issues/61.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-03-13T10:16:13Z",
      "updated_at": "2025-02-03T13:46:29Z",
      "closed_at": "2025-02-03T13:46:27Z",
      "labels": [
        "capabilities"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/75/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/75",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/75",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:49.962539",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Closing this in favor of #61 and things like #416 + reasoner models generally",
          "created_at": "2025-02-03T13:46:27Z"
        }
      ]
    },
    {
      "issue_number": 107,
      "title": "XML-style prompting",
      "body": "Markdown has some pretty rough limitations that become especially apparent once you need to nest it.\r\n\r\nA large class of bugs and workarounds could be eliminated if we switched to XML-style prompting, but on the other hand I've invested so much work into getting the markdown stuff to work that I'm pretty happy with where it is at.\r\n\r\nRelevant issues:\r\n - #67 (making tool calls explicit XML/JSON messages, instead of ambiguous might-be-an-example codeblocks, would fix this)",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-06T14:53:52Z",
      "updated_at": "2025-02-03T13:44:54Z",
      "closed_at": "2025-02-03T13:44:52Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/107/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/107",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/107",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:50.179361",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Some preparatory work done in https://github.com/ErikBjare/gptme/pull/113",
          "created_at": "2024-09-09T20:26:25Z"
        },
        {
          "author": "ErikBjare",
          "body": "It can be enabled in the code, and works great for Anthropic, but disabled by default still, until we make it toggleable/configurable.",
          "created_at": "2024-09-17T15:51:29Z"
        },
        {
          "author": "ErikBjare",
          "body": "It can be enabled with `--tool-format xml`",
          "created_at": "2025-02-03T13:44:52Z"
        }
      ]
    },
    {
      "issue_number": 304,
      "title": "Add success/fail emojis to status messages for easier glancing of output",
      "body": "Might be nice to add some color to the output depending on if things go well or not",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-12-03T12:29:12Z",
      "updated_at": "2025-02-03T13:43:53Z",
      "closed_at": "2025-02-03T13:43:51Z",
      "labels": [
        "ideas"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/304/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/304",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/304",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:50.403642",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Done by @0xbrayo in #429  🥳 ",
          "created_at": "2025-02-03T13:43:51Z"
        }
      ]
    },
    {
      "issue_number": 77,
      "title": "Multi-line input",
      "body": "Aider has this:\r\n\r\n> Use Meta-ENTER (Esc+ENTER in some environments) to enter multiline chat messages. Or enter { alone on the first line to start a multiline message and } alone on the last line to end it.\r\n\r\nWould be pretty nice, the `{` idea is pretty good, and would lend itself to pasting JSON.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-03-18T17:31:10Z",
      "updated_at": "2025-01-27T18:20:07Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/77/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/77",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/77",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:50.573795",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "With the prompt_toolkit migration in #244, we now support pasting multiline content, but no way to write a multiline input without pasting afaik",
          "created_at": "2025-01-10T20:45:28Z"
        },
        {
          "author": "ErikBjare",
          "body": "Just closed #326, considering closing this one too as it works well enough for me.",
          "created_at": "2025-01-27T18:20:05Z"
        }
      ]
    },
    {
      "issue_number": 381,
      "title": "An assistant message with 'tool_calls' must be followed by tool messages responding to each 'tool_call_id'",
      "body": "I sometimes get \r\n\r\n```\r\nError: Error code: 400 - {'error': {'message': \"An assistant message with 'tool_calls' must be followed by tool messages responding to each 'tool_call_id'. The following tool_call_ids did not have response messages: \", 'type': 'invalid_request_error', 'param': 'messages.[5].role', 'code': None}}\r\n```\r\n\r\nWhen running evals with the `tool` format in #380 \r\n\r\nSeems to be a bit random though.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-01-05T11:09:47Z",
      "updated_at": "2025-01-26T18:42:54Z",
      "closed_at": "2025-01-20T13:30:56Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/381/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/381",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/381",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:50.823992",
      "comments": [
        {
          "author": "jrmi",
          "body": "FYI that's what I tried to fix with the MR #371 is it still happening?",
          "created_at": "2025-01-10T20:01:07Z"
        },
        {
          "author": "ErikBjare",
          "body": "Seems this was before #371 was merged, hopefully it's fixed! Will try evals soon again and verify.",
          "created_at": "2025-01-10T20:13:18Z"
        },
        {
          "author": "ErikBjare",
          "body": "Yes it seems to still appear in certain situations:\r\n\r\n```bash\r\n$ make build-docker && ./gptme-eval-docker.sh basic -m openai/gpt-4o-mini@tool\r\n=== Running evals ===\r\n2025-01-14 13:34:18,379 - INFO - gptme.eval.run - Running \"hello-patch\" for openai/gpt-4o-mini\r\n2025-01-14 13:34:18,379 - INFO - gptm",
          "created_at": "2025-01-14T13:37:39Z"
        },
        {
          "author": "jrmi",
          "body": "Thanks! Reproduced, on my way to fix it.\n\nFYI I couldn't find the script ./gptme-eval-docker.sh is it missing in the repo somehow?",
          "created_at": "2025-01-18T16:49:58Z"
        },
        {
          "author": "jrmi",
          "body": "I think I found the problem:\n\nWhen we execute the `hello` eval the output is:\n\n```sh\nUser: write a script hello.py which prints \"Hello, world!\"\nAssistant:                                                                                                                                                  ",
          "created_at": "2025-01-19T10:52:21Z"
        }
      ]
    },
    {
      "issue_number": 263,
      "title": "Speech-to-Text Transcription",
      "body": "Add ability to transcribe speech for terminal input.\r\n\r\nCould be cool to setup a conversational dynamic: https://github.com/ErikBjare/gptme/issues/60#issue-2092022244",
      "state": "open",
      "author": "manunamz",
      "author_type": "User",
      "created_at": "2024-11-22T04:24:00Z",
      "updated_at": "2025-01-24T16:57:26Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/263/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/263",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/263",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.053374",
      "comments": [
        {
          "author": "manunamz",
          "body": "'enhancement'",
          "created_at": "2024-11-22T04:24:43Z"
        },
        {
          "author": "0xbrayo",
          "body": "implemented in #401 ",
          "created_at": "2025-01-24T16:05:45Z"
        },
        {
          "author": "ErikBjare",
          "body": "No, that was text to speech.",
          "created_at": "2025-01-24T16:54:41Z"
        },
        {
          "author": "ErikBjare",
          "body": "On a related note, today I discovered Wispr Flow (available on macOS) which offers really good transcription capabilities and UX which I found super useful together with gptme, and gets quite magical together with the TTS! (which I also improved today: https://github.com/ErikBjare/gptme/pull/418 htt",
          "created_at": "2025-01-24T16:55:27Z"
        }
      ]
    },
    {
      "issue_number": 419,
      "title": "Evals incorrectly using markdown format when xml format specified",
      "body": "I noticed this suspicious eval output with exact same number of tokens for markdown and xml formats:\n<img width=\"1015\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fd4f9d41-0278-423b-9cde-5ffc9fa0b3a3\" />\n\nInspected the logs and noticed it wasn't using the xml format in the xml run!",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-01-24T11:39:20Z",
      "updated_at": "2025-01-24T11:40:01Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/419/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/419",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/419",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.247522",
      "comments": []
    },
    {
      "issue_number": 327,
      "title": "gptme often tries to use python instead of ipython to execute python code",
      "body": "I feel like this could be solved by adding some extra prompting around this",
      "state": "open",
      "author": "Miyou",
      "author_type": "User",
      "created_at": "2024-12-12T14:49:53Z",
      "updated_at": "2025-01-14T18:06:59Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 11,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/327/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/327",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/327",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.247547",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "We used to just use \\`\\`\\`python and \\`\\`\\`bash for python and shell tool, but had to change it since it kept trying/asking to run non-runnable code snippets/examples it showed using the same markup. I later changed it to just ipython/shell respectively, and it works much better, but it sometimes me",
          "created_at": "2024-12-12T19:17:01Z"
        },
        {
          "author": "Miyou",
          "body": "> We used to just use ```python and ```bash for python and shell tool, but had to change it since it kept trying/asking to run non-runnable code snippets/examples it showed using the same markup. I later changed it to just ipython/shell respectively, and it works much better, but it sometimes messes",
          "created_at": "2024-12-13T09:58:11Z"
        },
        {
          "author": "ErikBjare",
          "body": "@Miyou you can try that with the `--tool-format xml` parameter",
          "created_at": "2024-12-13T10:49:57Z"
        },
        {
          "author": "bjsi",
          "body": "Maybe changing the name of the tool from python -> ipython?",
          "created_at": "2024-12-17T08:14:52Z"
        },
        {
          "author": "ErikBjare",
          "body": "@bjsi Yeah I think that might help, could eval some small model which struggles and see if it helps.",
          "created_at": "2024-12-18T15:32:37Z"
        }
      ]
    },
    {
      "issue_number": 403,
      "title": "Lots of \"tool already loaded\" warnings in evals",
      "body": "Getting output like this when running a suite of 4 evals:\r\n\r\n```\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'append' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'browser' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'chats' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'patch' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'read' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'save' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'screenshot' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'shell' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'tmux' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'vision' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'ipython' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'append' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'browser' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'chats' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'patch' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'read' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'save' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'screenshot' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'shell' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'tmux' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'vision' already loaded\r\n2025-01-14 13:34:18,583 - WARNING - gptme.tools - Tool 'ipython' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'append' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'browser' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'chats' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'patch' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'read' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'save' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'screenshot' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'shell' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'tmux' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'vision' already loaded\r\n2025-01-14 13:34:18,584 - WARNING - gptme.tools - Tool 'ipython' already loaded\r\n2025-01-14 13:34:18,585 - WARNING - gptme.tools - Tool 'append' already loaded\r\n2025-01-14 13:34:18,585 - WARNING - gptme.tools - Tool 'browser' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'chats' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'patch' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'read' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'save' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'screenshot' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'shell' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'tmux' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'vision' already loaded\r\n2025-01-14 13:34:18,586 - WARNING - gptme.tools - Tool 'ipython' already loaded\r\n```\r\n\r\nCould be a nasty source of issues. We should do something about it.\r\n\r\nI've thought about passing around a `toolchain` with the loaded tools for a particular session instead of relying on globals, but not sure how much of a mess it would create.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-01-14T13:36:47Z",
      "updated_at": "2025-01-14T13:36:52Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/403/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/403",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/403",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.434291",
      "comments": []
    },
    {
      "issue_number": 386,
      "title": "gptme-wut - start a gptme session including the active tmux/screen contents",
      "body": "I often find myself wanting gptme to help with some output I got in the terminal, being able to quickly `gptme-wut` which grabs the tmux pane contents would be neat.\r\n\r\nhttps://x.com/tom_doerr/status/1876386814400868738",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2025-01-06T22:10:03Z",
      "updated_at": "2025-01-14T13:20:58Z",
      "closed_at": "2025-01-14T13:20:58Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/386/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/386",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/386",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.434312",
      "comments": []
    },
    {
      "issue_number": 60,
      "title": "Add speech synthesis",
      "body": "Having the agent speak to you could be useful so you can drop your attention from the terminal.\r\n\r\nWould probably work well to have it not speak the `<thinking>` out loud, and replace tool use like save/patch with \"changed the asdasd.py file\".\r\n\r\nHighly synergistic with voice input (#263).",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-20T11:39:21Z",
      "updated_at": "2025-01-14T12:38:54Z",
      "closed_at": "2025-01-14T12:38:54Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/60/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/60",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/60",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:51.434320",
      "comments": []
    },
    {
      "issue_number": 387,
      "title": "Auto-name conversation",
      "body": "Instead of date-verb-adjective-creature for conversations(or whatever the pattern is) can we just have the llm give them a short, say three to five word, description of the conversation(along with date)? while the date, time since, and message length do help it would be easier to find the specific conversation with a short description... i did try the /chats tool and that works although it's more time and token intensive than a simple desc would be. Open-webui has it implemented quite well and you could take a look.  Love the program btw, much simpler than some alternatives and yet it can still do a lot.",
      "state": "closed",
      "author": "cory2005",
      "author_type": "User",
      "created_at": "2025-01-07T01:57:01Z",
      "updated_at": "2025-01-10T20:55:29Z",
      "closed_at": "2025-01-10T20:55:24Z",
      "labels": [
        "duplicate",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/387/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/387",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/387",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:53.200154",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "You can auto-name conversations using the `/rename auto` command.\r\n\r\nI've been procrastinating auto-triggering since I'm unsure how it should work exactly, but I'll consider upping the priority.",
          "created_at": "2025-01-07T02:00:55Z"
        },
        {
          "author": "ErikBjare",
          "body": "Actually a duplicate of https://github.com/ErikBjare/gptme/issues/15",
          "created_at": "2025-01-10T20:55:24Z"
        }
      ]
    },
    {
      "issue_number": 72,
      "title": "Standardize tool interface",
      "body": "Tools currently need to be registered in `gptme/tools/__init__.py`.\r\n\r\n - [x] It'd be nice if we didn't have to enumerate them in `__init__.py` and instead auto-discover them, or something.\r\n   - Perhaps even allow users to easily specify their own tools folder/files.\r\n   - Done in #336\r\n - [x] enable/disable them in config or with a CLI param (done in https://github.com/ErikBjare/gptme/commit/48d559b487682a22d7614948270442c529596375)",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-02-04T17:35:48Z",
      "updated_at": "2025-01-10T20:15:15Z",
      "closed_at": "2025-01-10T20:14:53Z",
      "labels": [
        "enhancement",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/72/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/72",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/72",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:53.439102",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Most of the work done in https://github.com/ErikBjare/gptme/pull/86",
          "created_at": "2024-08-15T09:42:58Z"
        },
        {
          "author": "ErikBjare",
          "body": "This is pretty clean now.",
          "created_at": "2024-10-02T17:42:36Z"
        },
        {
          "author": "ErikBjare",
          "body": "Should maybe make a `@tool` decorator that takes a callable or ToolSpec and registers it/makes it loadable, then explicitly specify which tools to load during init.\r\n\r\nMainly so we can get rid of the stuff in tools/__init__.py where all the stuff gets imported (although we would still have to import",
          "created_at": "2024-10-22T16:04:36Z"
        },
        {
          "author": "jrmi",
          "body": "Solved by #336?",
          "created_at": "2025-01-10T20:10:45Z"
        },
        {
          "author": "ErikBjare",
          "body": "Yes! 🥳 ",
          "created_at": "2025-01-10T20:14:54Z"
        }
      ]
    },
    {
      "issue_number": 375,
      "title": "groq API: I have openai.BadRequestError: Error code: 400",
      "body": "Hi @ErikBjare ,\r\nafter I run the program, I have\r\n\r\n```\r\n[09:34:23] Browser tool available (using playwright)\r\n[09:34:26] Using model: groq/llama-3.1-8b-instant\r\n[09:34:27] INFO     Using fallback metadata for unknown model llama-3.1-8b-instant from groq                                 models.py:185\r\n[09:34:27] Using logdir ~/.local/share/gptme/logs/2025-01-04-sprinting-angry-monster\r\n           Using workspace at ~/git/progetti/tasks\r\n```\r\n\r\nThen, if I write `compute fib 10` I have\r\n\r\n```\r\nopenai.BadRequestError: Error code: 400 - {'error': {'message': \"'messages.0' : for 'role:system' the following must be satisfied[('messages.0.content' : value must be a string)]\", 'type': 'invalid_request_error'}}\r\n```\r\n\r\nWhat am I doing wrong?\r\n\r\nThank you\r\n\r\n![image](https://github.com/user-attachments/assets/842c4819-2662-43b3-acd4-6a138c75f284)\r\n\r\n",
      "state": "open",
      "author": "aborruso",
      "author_type": "User",
      "created_at": "2025-01-04T08:37:19Z",
      "updated_at": "2025-01-04T17:49:47Z",
      "closed_at": null,
      "labels": [
        "bug",
        "provider"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/375/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/375",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/375",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:53.620306",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Looks like we've accidentally broken Groq support during refactor, I will investigate.",
          "created_at": "2025-01-04T17:49:27Z"
        }
      ]
    },
    {
      "issue_number": 233,
      "title": "Investigate simplemind",
      "body": "@kennethreitz new project: https://pypi.org/project/simplemind/",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-29T12:46:37Z",
      "updated_at": "2024-12-29T10:13:23Z",
      "closed_at": "2024-12-29T10:13:23Z",
      "labels": [
        "ideas"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/233/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/233",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/233",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:53.825924",
      "comments": [
        {
          "author": "0xbrayo",
          "body": "@ErikBjare I want to try this out. Should I make a draft PR replacing the `langchain` with `simplemind`?. ",
          "created_at": "2024-11-01T16:29:02Z"
        },
        {
          "author": "ErikBjare",
          "body": "We don't have any langchain (thankfully), but feel free to experiment.\r\n\r\nI don't think we'll merge something like it anytime soon though, too big a refactor and I don't see an obvious benefit, yet.",
          "created_at": "2024-11-01T17:19:57Z"
        },
        {
          "author": "0xbrayo",
          "body": "I thought I saw langchain here... Must have been somewhere else",
          "created_at": "2024-11-01T18:27:52Z"
        },
        {
          "author": "0xbrayo",
          "body": "It's in a scripts folder. my bad",
          "created_at": "2024-11-01T18:28:54Z"
        }
      ]
    },
    {
      "issue_number": 314,
      "title": "Groq provider broken",
      "body": "```\r\nopenai.BadRequestError: Error code: 400 - {'error': {'message': \"'messages.0' : for 'role:system' the following must be satisfied[('messages.0.content' : value must be a string)]\", 'type': 'invalid_request_error'}}\r\n```",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-12-10T15:42:41Z",
      "updated_at": "2024-12-22T21:58:59Z",
      "closed_at": "2024-12-11T02:14:00Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/314/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/314",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/314",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.028487",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Fixed in https://github.com/ErikBjare/gptme/commit/84c83166368505d2969fc79dd9951074d2d7228f",
          "created_at": "2024-12-11T02:14:00Z"
        },
        {
          "author": "DrDavidL",
          "body": "Still seeing same issue after installation: \r\n\r\n```gptme --model groq/llama-3.3-70b-versatile\r\n[15:54:35] Browser tool available (using lynx)                                                                                                            \r\n[15:54:39] Using model: groq/llama-3.3-70b-versat",
          "created_at": "2024-12-22T21:58:59Z"
        }
      ]
    },
    {
      "issue_number": 127,
      "title": "Investigate ell",
      "body": "Looks really nice: https://docs.ell.so/core_concepts/ell_complex.html\r\n\r\nNot sure if a good fit for gptme though, but looks very similar in approach.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-18T23:09:29Z",
      "updated_at": "2024-12-19T15:41:55Z",
      "closed_at": "2024-12-19T15:41:55Z",
      "labels": [
        "ideas"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/127/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/127",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/127",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.236978",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "More intrigued by simplemind: https://github.com/ErikBjare/gptme/issues/233",
          "created_at": "2024-10-29T13:47:30Z"
        },
        {
          "author": "lingster",
          "body": "For what it's worth, I quite like ell, as it stores version history of your prompts so you can later review and replay them. Can help with prompt optimisation. Is multi modal too. ",
          "created_at": "2024-12-18T06:12:43Z"
        },
        {
          "author": "ErikBjare",
          "body": "Might try it later, but no point keeping this open.\r\n\r\n@lingster Thanks for sharing your experience with it :)",
          "created_at": "2024-12-19T15:41:55Z"
        }
      ]
    },
    {
      "issue_number": 202,
      "title": "Cannot pipe context into `gptme -r`",
      "body": "https://github.com/ErikBjare/gptme/blob/30e3f01e7fa547dc94dd11328e3b74d2ff6e6a6b/gptme/cli.py#L181\r\n\r\nShould add a test for it.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-17T17:00:29Z",
      "updated_at": "2024-12-18T15:44:57Z",
      "closed_at": "2024-12-18T15:44:57Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/202/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/202",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/202",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.414631",
      "comments": []
    },
    {
      "issue_number": 348,
      "title": "Add a way for agents to monitor and optionally interrupt long-running commands",
      "body": "- Some github issues involve debugging commands that hang. When writing code to reproduce and fix these kinds of issues, an autonomous agent needs a way to monitor and optionally interrupt the command if necessary.\r\n- After running a particular shell command, every 10 seconds or so it should add a message to the conversation log giving some context about what the command is doing, whether it is still running etc and asking whether it wants to kill it.",
      "state": "open",
      "author": "bjsi",
      "author_type": "User",
      "created_at": "2024-12-18T07:47:31Z",
      "updated_at": "2024-12-18T15:31:49Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/348/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/348",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/348",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.414651",
      "comments": [
        {
          "author": "bjsi",
          "body": "From Jake:\r\n\r\n## Current Understanding\r\n\r\n- Issue 348 requests a way for agents to monitor and optionally interrupt long-running commands.\r\n- The `execute_shell` function in `gptme/tools/shell.py` is the main entry point for executing shell commands.\r\n  - It uses `get_shell_command` to construct the",
          "created_at": "2024-12-18T14:22:44Z"
        },
        {
          "author": "ErikBjare",
          "body": "You can sort of do this by forcing/instructing the agent to use the tmux tool instead and then \"undo\" when it's not ready (as in the https://github.com/ErikBjare/gptme/blob/master/scripts/treeofthoughts.py script) since otherwise it'll eat tokens like crazy.",
          "created_at": "2024-12-18T15:29:38Z"
        },
        {
          "author": "ErikBjare",
          "body": "@gptme read some relevant source files and tell us what you think",
          "created_at": "2024-12-18T15:29:58Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "Based on the analysis of the `gptme/tools/shell.py` and `gptme/tools/tmux.py` files, I recommend using the tmux tool as the primary approach for implementing monitoring and optional interruption of long-running commands. Here's a summary of the proposed solution:\n\n1. Leverage the existing tmux tool ",
          "created_at": "2024-12-18T15:31:07Z"
        }
      ]
    },
    {
      "issue_number": 349,
      "title": "Tool type hints not showing for generic types that take arguments",
      "body": "`def read(fp: str, line_range: Optional[list[int]] = None, query: Optional[str] = None, names: Optional[list[str]] = None):`\r\n\r\nGets turned into this inside the prompt sent to the LLM.\r\n\r\n`read(fp: str, line_range: Optional, query: Optional, names: Optional):`\r\n\r\nIdeally it would include the full type information.",
      "state": "open",
      "author": "bjsi",
      "author_type": "User",
      "created_at": "2024-12-18T08:08:53Z",
      "updated_at": "2024-12-18T15:31:42Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/349/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/349",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/349",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.618099",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Oof, should be an easy fix though. \r\n\r\nBut why not `list[int] | None`? I guess it has similar issues?",
          "created_at": "2024-12-18T15:31:34Z"
        }
      ]
    },
    {
      "issue_number": 305,
      "title": "Refactor GitHub Bot action into Docker container",
      "body": "The entire chain is too fragile to test and develop as a workflow, better to make it a shell script or something and throw it in a Docker container so we can test it locally without having to spam issues and do GitHub Actions-driven debugging (just set a `GITHUB_TOKEN` etc).",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-12-03T19:17:20Z",
      "updated_at": "2024-12-18T10:05:18Z",
      "closed_at": null,
      "labels": [
        "ci",
        "ideas"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/305/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/305",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/305",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.784274",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "@gptme What do you think about this?",
          "created_at": "2024-12-18T10:04:20Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "I think refactoring the GitHub Bot action into a Docker container is an excellent idea. Here's my detailed opinion:\n\n1. Improved Development Experience: This change would significantly improve the development and testing process for the GitHub Bot. By containerizing the bot, developers can easily ru",
          "created_at": "2024-12-18T10:05:17Z"
        }
      ]
    },
    {
      "issue_number": 334,
      "title": "Confirmation prompt sometimes disappears",
      "body": "Very confusing to users. I've gotten used to it so I just try pressing \"enter\" when I suspect so.\r\n\r\n#244 would probably fix it.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-12-15T10:03:20Z",
      "updated_at": "2024-12-15T19:39:59Z",
      "closed_at": "2024-12-15T19:39:59Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/334/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/334",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/334",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:54.983329",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Fixed in #244",
          "created_at": "2024-12-15T19:39:59Z"
        }
      ]
    },
    {
      "issue_number": 108,
      "title": "shell tool doesn't support heredoc syntax, stalls",
      "body": "For example:\r\n\r\n```\r\ncat << EOF | sudo tee /etc/pacman.d/hooks/90-update-efi.hook\r\n[Trigger]\r\nType = Package\r\nOperation = Install\r\nOperation = Upgrade\r\nTarget = linux*\r\nTarget = linux-lts\r\n\r\n[Action]\r\nDescription = Copying kernel to EFI directory...\r\nWhen = PostTransaction\r\nExec = /usr/bin/sh -c 'cp /boot/vmlinuz-linux-lts /efi/EFI/arch/ && cp /boot/initramfs-linux-lts.img /efi/EFI/arch/'\r\nEOF\r\n```",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-07T09:12:50Z",
      "updated_at": "2024-12-15T19:28:36Z",
      "closed_at": "2024-12-15T19:28:36Z",
      "labels": [
        "bug",
        "help wanted",
        "good first issue",
        "tool"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/108/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/108",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/108",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:55.173557",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "This is really starting to annoy me, as it persists in trying to use heredoc every now and then despite prompted not to.\r\n\r\nShould just figure out support tbh",
          "created_at": "2024-11-29T11:54:55Z"
        }
      ]
    },
    {
      "issue_number": 29,
      "title": "Fix so python tool runs in activated venv instead of venv where gptme is installed",
      "body": "Right now it sometimes tries to install Python packages, but fails since it doesn't install them in the Python environment it is running in (I assume).\n\nCould probably set some env variables for this, like `PYTHONHOME` or `PYTHONPATH`. ",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-06T11:41:31Z",
      "updated_at": "2024-12-12T14:48:28Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/29/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/29",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/29",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:55.401442",
      "comments": [
        {
          "author": "darwinssy",
          "body": "bash: PYTHONPATH: command not found help me sir",
          "created_at": "2023-11-28T02:39:12Z"
        },
        {
          "author": "ErikBjare",
          "body": "Although this might mess up the gptme installation. \n\nWe could add a method to use either, since it could be useful to self-update and install extras.\n\nMight be important to look over which Python is used by the REPL and shell, and ensure it is the same. And write some tests for it. \n\n@Leonardo2801 ",
          "created_at": "2023-11-29T14:14:33Z"
        },
        {
          "author": "ErikBjare",
          "body": "Added a comment mentioning this limitation/TODO in https://github.com/ErikBjare/gptme/commit/0d8eb85f0a13765b64f4c71bfb48ba765dbd805c\r\n\r\nIt is very easy for me to forget, as I so often use gptme while the gptme-venv is activated anyway, such that the issue doesn't present itself (but also pollutes t",
          "created_at": "2024-09-06T14:38:28Z"
        },
        {
          "author": "ErikBjare",
          "body": "The correct thing here would probably be to install an ipython kernel into the venv, start it, and connect to it.",
          "created_at": "2024-09-16T17:19:41Z"
        },
        {
          "author": "Miyou",
          "body": "> Tricky edgecase: gptme might try to activate a venv with the shell tool and expect the python to \"just work\" (maybe?), but it prob wouldn't unless reinitialized.\r\n\r\nI think I'm running into this. I asked gptme to make some new tools for itself and it had issues installing dependencies, so suggeste",
          "created_at": "2024-12-12T14:48:27Z"
        }
      ]
    },
    {
      "issue_number": 112,
      "title": "Make a feature comparison table with alternatives",
      "body": "> [!TIP]\r\n> I would love to hear people's experiences about how they think gptme compares to other tools\r\n\r\nIt would be great to have a feature comparison table like we have in the [ActivityWatch README](https://github.com/ActivityWatch/activitywatch). Helps prospective users understand the differences between alternatives.\r\n\r\nMight mean I have to use the alternatives for a bit so I can give it a fair eval.\r\n\r\n## Alternatives\r\n\r\n - ChatGPT Code Interpreter\r\n - Cursor (has \"copilot\", \"composer\", and \"agent\" modes)\r\n - Aider\r\n - Open Interpreter\r\n - Claude Projects: https://x.com/alexalbert__/status/1865073820882886971\r\n - Claude Desktop\r\n - Lovable.dev / Bolt.new / etc.\r\n\r\n## Dimensions\r\n\r\n - Intended use\r\n    - General purpose\r\n    - IDEs and dev tools\r\n    - No/low-code using codegen\r\n - Hosting\r\n    - Local (bring your own provider/API key)\r\n    - SaaS\r\n - Cost / License\r\n - Funding\r\n    - VC?\r\n\r\n## Comparison\r\n\r\nDifferences to Aider:\r\n - gptme is less git-commit focused\r\n - gptme is more general-purpose?\r\n - gptme has wider array of tools?\r\n\r\nDifferences to Cursor:\r\n - gptme is in-terminal instead of in-vscode-fork\r\n - gptme is extensible with tools, more general-purpose\r\n\r\nDifferences to Open Interpreter:\r\n - Idk?",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-08T08:24:46Z",
      "updated_at": "2024-12-07T10:34:01Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "help wanted",
        "good first issue"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/112/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/112",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/112",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:55.643706",
      "comments": [
        {
          "author": "cbruyndoncx",
          "body": "Gptme is linux focused\n\nAgent zero is windows and mac, no Linux uses open Interpreter\n\nSelf improving, autocorrecting \n\nFrom just reading up, looks similar to fabric in cli piping approach\n\nCan do offline fully local \n\nI think the main difference is ai coding tool (create application) or general aut",
          "created_at": "2024-10-08T16:51:53Z"
        },
        {
          "author": "ErikBjare",
          "body": "Started writing a docs page yesterday, feedback welcome: https://github.com/ErikBjare/gptme/pull/220",
          "created_at": "2024-10-23T16:49:52Z"
        },
        {
          "author": "ErikBjare",
          "body": "Since I created this issue, Claude Desktop has become kind of an alternative with their MCP protocol enabling local-running tools.\r\n\r\nIt has also become apparent to me that Claude Projects is sort-of a lightweight version of running gptme in a folder (especially when there's a `gptme.toml` file): ht",
          "created_at": "2024-12-07T09:45:09Z"
        },
        {
          "author": "ErikBjare",
          "body": "I merged it and it's live at https://gptme.org/docs/alternatives.html\r\n\r\nBut I will keep this issue open since it's not really \"done\".",
          "created_at": "2024-12-07T10:34:00Z"
        }
      ]
    },
    {
      "issue_number": 249,
      "title": "Print token costs after each message",
      "body": "eg aider prints after each answer:\r\n\r\n```\r\nTokens: 4.0k sent, 264 received.\r\nCost: $0.02 message, $0.05 session. \r\n```\r\n\r\nsomething like this would be beneficial for gptme as well",
      "state": "closed",
      "author": "materemias",
      "author_type": "User",
      "created_at": "2024-11-06T09:00:14Z",
      "updated_at": "2024-12-02T10:11:46Z",
      "closed_at": "2024-12-02T10:11:45Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/249/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/249",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/249",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:57.675030",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "We have the `/tokens` command which prints the input costs for the session.\r\n\r\nWill consider adding a feature to include the output cost too.",
          "created_at": "2024-11-06T13:35:43Z"
        },
        {
          "author": "Kamalesh-Seervi",
          "body": "can I work on this\r\n",
          "created_at": "2024-11-09T14:36:18Z"
        },
        {
          "author": "ErikBjare",
          "body": "@Kamalesh-Seervi Sure, give it a shot! :)",
          "created_at": "2024-11-09T14:46:48Z"
        },
        {
          "author": "Kamalesh-Seervi",
          "body": "<img width=\"572\" alt=\"image\" src=\"https://github.com/user-attachments/assets/79c2f894-a448-40ad-a8b4-b19303914a17\">\r\n<img width=\"570\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fb4b5a28-5f35-4eb6-842b-f5fe71bd96c8\">\r\n<img width=\"567\" alt=\"image\" src=\"https://github.com/user-attachme",
          "created_at": "2024-11-09T16:49:31Z"
        },
        {
          "author": "Kamalesh-Seervi",
          "body": "```(venv) kamaleshseervi@Kamaleshs-MacBook-Pro gptme % poetry install\r\nInstalling dependencies from lock file\r\n\r\nPackage operations: 106 installs, 0 updates, 0 removals\r\n\r\n  - Installing certifi (2024.8.30)\r\n  - Installing charset-normalizer (3.4.0)\r\n  - Installing idna (3.10)\r\n  - Installing markup",
          "created_at": "2024-11-09T16:50:08Z"
        }
      ]
    },
    {
      "issue_number": 259,
      "title": "Building Bob the Builder - the first gptme agent",
      "body": "Private repo for now, but promising results!\r\n\r\nAnnouncing Bob: https://x.com/ErikBjare/status/1857418334913933717\r\nRepo (private): https://github.com/ErikBjare/gptme-bob\r\n\r\nHe built this by himself: https://github.com/ErikBjare/gptme-rag",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-15T14:28:47Z",
      "updated_at": "2024-11-29T12:32:05Z",
      "closed_at": "2024-11-29T12:32:05Z",
      "labels": [
        "enhancement",
        "capabilities"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/259/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 1,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/259",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/259",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:57.888431",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I asked @brayo-pip to play with his own version of it, curious to see how it goes.",
          "created_at": "2024-11-15T14:57:10Z"
        },
        {
          "author": "danielw97",
          "body": "This sounds like an interesting approach, looking forward to experimenting with this at some point when it is made public.\r\nI'm using gptme daily, and the capabilities are already extremely helpful.",
          "created_at": "2024-11-15T15:03:36Z"
        },
        {
          "author": "ErikBjare",
          "body": "@danielw97 That's great to hear! Would love to hear any feedback you might have in the [discussions](https://github.com/ErikBjare/gptme/discussions).",
          "created_at": "2024-11-15T15:32:08Z"
        },
        {
          "author": "ErikBjare",
          "body": "I just published [gptme-agent-template](https://github.com/ErikBjare/gptme-agent-template) which can be used to fork new agents, the template itself is forked from Bob.\r\n\r\nAnnouncement: https://x.com/ErikBjare/status/1859544004628500649",
          "created_at": "2024-11-21T10:54:21Z"
        },
        {
          "author": "danielw97",
          "body": "This agent strategy looks very interesting, I'm going to check the template out.\r\nAre you planning to make any agents open source in the future alongside the basic template?\r\nI completely understand if not as they are probably streamlined for specific tasks, and the template is a very cool concept i",
          "created_at": "2024-11-22T18:36:52Z"
        }
      ]
    },
    {
      "issue_number": 290,
      "title": "gptme-server fails with `No module named 'flask'`",
      "body": "Perhaps this is an easy fix, but I didn't see anything for it in the docs.\r\n\r\n\r\n```\r\n$ gptme-server\r\nTraceback (most recent call last):\r\n  File \"/home/filip/.local/bin/gptme-server\", line 5, in <module>\r\n    from gptme.server.cli import main\r\n  File \"/home/filip/.local/share/pipx/venvs/gptme/lib/python3.12/site-packages/gptme/server/__init__.py\", line 5, in <module>\r\n    from .api import create_app\r\n  File \"/home/filip/.local/share/pipx/venvs/gptme/lib/python3.12/site-packages/gptme/server/api.py\", line 17, in <module>\r\n    import flask\r\nModuleNotFoundError: No module named 'flask'\r\n```",
      "state": "closed",
      "author": "FilipHarald",
      "author_type": "User",
      "created_at": "2024-11-29T10:52:06Z",
      "updated_at": "2024-11-29T10:58:35Z",
      "closed_at": "2024-11-29T10:58:12Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/290/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/290",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/290",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.095341",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "You need to install it with the `server` extras (`pipx install gptme[server]`).\r\n\r\nI see it is not mentioned in https://gptme.org/docs/server.html, will fix straight away.",
          "created_at": "2024-11-29T10:55:46Z"
        },
        {
          "author": "ErikBjare",
          "body": "Fixed in https://github.com/ErikBjare/gptme/commit/cb561d6bbbb76649383e75ef176dab014eb9d50b",
          "created_at": "2024-11-29T10:58:12Z"
        }
      ]
    },
    {
      "issue_number": 260,
      "title": "Create `gptme-util` CLI command",
      "body": "The main `gptme` cli takes arbitrary strings as input, making it unsuitable for subcommands, which is something I've wanted for a bunch of ideas for utilities I've had.\r\n\r\nAdding a `gptme-util` CLI with subcommands would be a way to work around this.\r\n\r\nExample subcommands:\r\n\r\n - `gptme-util token(s) count -m $model` - command for counting tokens\r\n - `gptme-util context generate` - commands for context generation\r\n - `gptme-util chat(s) ls` - list conversation logs\r\n - `gptme-util chat(s) read $name` - read & output conversation log in different formats (with filters etc.)\r\n - `gptme-util tool(s)` - subcommands for tools",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-17T12:38:49Z",
      "updated_at": "2024-11-17T15:48:50Z",
      "closed_at": "2024-11-17T15:48:50Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/260/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/260",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/260",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.273337",
      "comments": []
    },
    {
      "issue_number": 253,
      "title": "No module named 'termios'",
      "body": "I have successfully installed **gptme** on Windows machine but when I am running it it is giving error: **ModuleNotFoundError: No module named 'termios'**",
      "state": "closed",
      "author": "garima129",
      "author_type": "User",
      "created_at": "2024-11-11T11:00:32Z",
      "updated_at": "2024-11-11T18:01:48Z",
      "closed_at": "2024-11-11T18:01:43Z",
      "labels": [
        "duplicate"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/253/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/253",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/253",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.273373",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Duplicate of https://github.com/ErikBjare/gptme/issues/203\r\n\r\nWindows not directly supported, use WSL.",
          "created_at": "2024-11-11T18:01:43Z"
        }
      ]
    },
    {
      "issue_number": 226,
      "title": "Add docker container config for Ellipsis",
      "body": "Want to know if it makes @ellipsis-dev much better, might learn something.\r\n\r\n - https://docs.ellipsis.dev/build\r\n - https://docs.ellipsis.dev/config",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-24T18:14:32Z",
      "updated_at": "2024-11-01T19:03:57Z",
      "closed_at": null,
      "labels": [
        "ci"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/226/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/226",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/226",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.453259",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Hmm... I added the `ellipsis.yaml` config in https://github.com/ErikBjare/gptme/commit/b2de58685c27a3f5405b3dfbc012929d64874f2d, but don't see the option in the console.",
          "created_at": "2024-10-29T18:19:50Z"
        },
        {
          "author": "ErikBjare",
          "body": "<img width=\"418\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8385b099-ec30-4beb-8008-0c54c3dc1977\">\r\n",
          "created_at": "2024-10-30T13:56:34Z"
        }
      ]
    },
    {
      "issue_number": 95,
      "title": "Get it to propose changes deep in codebase from simple prompt (RAG + PRs)",
      "body": " - RAG: https://github.com/ErikBjare/gptme/issues/59\r\n   - Maybe make RAG a tool to keep it separate from `core`?\r\n - GitHub Bot: https://github.com/ErikBjare/gptme/issues/31\r\n - PRs: make PRs using  `bash` & `tmux` tools for `gh pr` and `gh run watch`",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-08-15T09:45:35Z",
      "updated_at": "2024-11-01T19:03:45Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/95/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/95",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/95",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.737523",
      "comments": []
    },
    {
      "issue_number": 242,
      "title": "PDF support",
      "body": "I've been working on reading them with the browser tool here: https://github.com/ErikBjare/gptme/pull/196\r\n\r\nAnthropic just announced PDF support: https://x.com/alexalbert__/status/1852394000101323193\r\n\r\n@simonw added it to llm here: https://x.com/simonw/status/1852423593084498409\r\n\r\nThe implementation I had in mind is model-agnostic, but doesn't include the vision component (probably good enough in 80% of cases), but Anthropics solution seems to be fully multimodal.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-01T18:57:53Z",
      "updated_at": "2024-11-01T18:58:08Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/242/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/242",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/242",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.737540",
      "comments": []
    },
    {
      "issue_number": 213,
      "title": "vim integration",
      "body": "I did some minimal experiments trying to call to gptme from within vim, which worked kinda well, but could probably be made to work a lot better by someone who is better at vim config/plugins.\r\n\r\nCould also use sharper prompting etc. Kinda similar to the needs of the GitHub Bot.\r\n\r\nI'm okay with nvim/lua personally.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-22T16:52:57Z",
      "updated_at": "2024-11-01T17:44:57Z",
      "closed_at": "2024-11-01T16:54:11Z",
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/213/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/213",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/213",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.737545",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "This turned out amazing, really happy with it!",
          "created_at": "2024-11-01T17:44:57Z"
        }
      ]
    },
    {
      "issue_number": 238,
      "title": "Fix incorrect distro version in system info prompt on Linux",
      "body": "See my comments here: https://github.com/ErikBjare/gptme/pull/171#issuecomment-2451708220",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-11-01T11:15:50Z",
      "updated_at": "2024-11-01T15:40:40Z",
      "closed_at": "2024-11-01T15:40:39Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/238/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "0xbrayo"
      ],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/238",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/238",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:58.921811",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Fixed in #239 ",
          "created_at": "2024-11-01T15:40:39Z"
        }
      ]
    },
    {
      "issue_number": 32,
      "title": "Add a way to share conversations",
      "body": "Could create a HTML, or rendering it as an image (the first would enable the latter).\r\n\r\nI partially want this to make nice examples in the docs, but partially just because sharing conversations feels like a basic feature.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-07T18:41:25Z",
      "updated_at": "2024-10-30T12:26:40Z",
      "closed_at": "2024-10-30T12:26:40Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/32/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/32",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/32",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.140599",
      "comments": []
    },
    {
      "issue_number": 23,
      "title": "Save and upload logs from bot run",
      "body": " - Include logs in PR message (as `<details>`)\r\n - Logs are stored in `~/.local/share/gptme/logs/<conversation name>/conversation.jsonl`",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-02T19:21:13Z",
      "updated_at": "2024-10-30T12:26:24Z",
      "closed_at": null,
      "labels": [
        "bug",
        "ci"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/23/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/23",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/23",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.140620",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "@gptme patch .github/workflows/bot.yml to implement this. Read the log from the `.jsonl` file. Each line has role and content keys.\r\n\r\nWhen the log is written to the issue inside the `<details>`, it should be converted to f\"{role}: {content}\\n\" for each line.\r\n\r\nDon't try to commit the changes.",
          "created_at": "2023-11-02T20:53:47Z"
        },
        {
          "author": "ErikBjare",
          "body": "@gptme now check if there's something left to do, apply patches if so",
          "created_at": "2023-11-02T22:40:05Z"
        },
        {
          "author": "ErikBjare",
          "body": "Could now be easily implemented via: https://github.com/ErikBjare/gptme/pull/235\r\n\r\nJust run `gptme -r -n '/export log.html'` after the conversation to export.",
          "created_at": "2024-10-30T12:26:23Z"
        }
      ]
    },
    {
      "issue_number": 50,
      "title": "Add vision support",
      "body": "Since the OpenAI API now has vision in beta, and we could use LLaVa locally.\r\n\r\nMight be a lot of work, or might be super easy. \r\n\r\nQuestion is, what would it be useful for?\r\n\r\n - #51: Xvfb to understand display/output and make a E2E desktop agent\r\n - #52: Screenshot with browser tool\r\n   -  Can be used to take screenshots of developed webapps for visually-aided autodebugging\r\n - Have it review plot outputs for correctness and to inspect results\r\n   - Could be useful for data science, but reading a good plain text output might still be superior",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-28T15:31:48Z",
      "updated_at": "2024-10-29T17:54:53Z",
      "closed_at": "2024-10-02T17:39:44Z",
      "labels": [
        "capabilities",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/50/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/50",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/50",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.307954",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Now works after adding the `vision` tool: https://github.com/ErikBjare/gptme/commit/597c66c5ad5860b92e022634e551659629b3b80e\r\n\r\nAlso merged the screenshot tool: https://github.com/ErikBjare/gptme/pull/92",
          "created_at": "2024-10-02T17:39:44Z"
        },
        {
          "author": "ErikBjare",
          "body": "Anthropic just announced their computer use stuff: https://www.anthropic.com/news/3-5-models-and-computer-use\r\n\r\nBasically same thing lol, although I should implement clicks and input (with pynput?), and let it run in Docker at 1280x800 resolution.",
          "created_at": "2024-10-22T21:46:22Z"
        },
        {
          "author": "ErikBjare",
          "body": "I saw that @simonw had implemented support for not only images, but also video and audio in https://github.com/simonw/llm/releases/tag/0.17: https://x.com/simonw/status/1851280825662521370\r\n\r\nThat would be a good continuation on this issue",
          "created_at": "2024-10-29T17:54:42Z"
        }
      ]
    },
    {
      "issue_number": 151,
      "title": "Dynamic system prompt",
      "body": " - Current date & training cutoff (model-dependent): https://github.com/ErikBjare/gptme/issues/137\r\n    - This seems easy to do, just looks for a date/cutoff-block in the system prompt and replace it if present on each call.\r\n - Tool selection\r\n    - Currently, we load default tools or those set by `--tools`, but it only impacts the system prompt on the first run.\r\n    - [x] ~~We could change `--tools` to only be valid for new conversations (lame?)~~\r\n       - Would still need us to figure out which tools the conversation was using when loaded.\r\n    - [ ] We could store the loaded tools for the conversation somewhere, so that we can at least resume with the correct toolset.\r\n    - [ ] We could let the user override `--tools` and have it modify the system prompt.\r\n\r\n\r\nVaguely related to (similar issues around mutability of conversations):  https://github.com/ErikBjare/gptme/issues/150",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-05T09:39:43Z",
      "updated_at": "2024-10-29T16:02:44Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/151",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/151",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.510096",
      "comments": [
        {
          "author": "kennethreitz",
          "body": "Curious to see how this develops.",
          "created_at": "2024-10-29T16:02:42Z"
        }
      ]
    },
    {
      "issue_number": 156,
      "title": "Hooks?",
      "body": "One potential way to deal with linting etc is to add a system with hooks that tools can register with.\r\n\r\nThese hooks could do things like:\r\n\r\n - Generating dynamic system prompt on every message: #151\r\n - Implement memory (as done by https://pypi.org/project/simplemind/)\r\n - Interrupt generation on detected tooluse (as currently hard-coded in our llm code)\r\n - Before running tools: Given an assistant message, react to or transform the message. #152\r\n    - Would work for patch/save-optimization\r\n - After saving/patching a file: lint/formatting.\r\n    - Maybe shouldn't be a hook?\r\n - Call out to expert sub-agents to help with problems?\r\n \r\n...what else?\r\n\r\nNot sure if making a \"hook\" concept like this is the way to go.\r\n\r\nMaybe adopting something like https://pypi.org/project/simplemind/ (https://github.com/ErikBjare/gptme/issues/233) makes sense long-term, if simple and pliable enough.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-06T02:09:28Z",
      "updated_at": "2024-10-29T13:04:55Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/156/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/156",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/156",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.708055",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Experimented with a lot of the linting/checking stuff in https://github.com/ErikBjare/gptme/pull/199, without going the hook approach.",
          "created_at": "2024-10-15T11:27:42Z"
        }
      ]
    },
    {
      "issue_number": 228,
      "title": "cannot run browser tool",
      "body": "I have followed the instructions and installed gptme on macos 14.6.1 as per:\r\n\r\n```\r\npipx install gptme[browser]\r\ngptme '/shell playwright install chromium'\r\n```\r\n\r\nThe default model used is `claude-3-5-sonnet-20241022` (latest). However when trying to run the example `gptme 'find out which is the latest ActivityWatch version from superuserlabs.org'`, I get the following error:\r\n\r\n```\r\nWARNING:gptme.chat:Failed to read URL http://www....BrowserType.launch: Executable doesn't exist at /Users/inigo/Library/Caches/ms-playwright/chromium-1134/chrome-mac/Chromium.app/Contents/MacOS/Chromium\r\n```\r\n\r\nI checked the directory and apparently Chromium is installed, but there is a discrepancy in the directory path, as the installation  is 1140 instead of 1134:\r\n\r\n```\r\n/Users/inigo/Library/Caches/ms-playwright/chromium-1140/...\r\n```\r\n\r\nAny suggestions on how to proceed?\r\n\r\nThanks!\r\n\r\nUPDATE: I manually changed the directory name under `.../ms-playwright/´from `chromium-1140` to `chromium-1134` and now it's fine. A bit dirty but it worked.",
      "state": "closed",
      "author": "ibagur",
      "author_type": "User",
      "created_at": "2024-10-25T18:37:01Z",
      "updated_at": "2024-10-29T13:04:31Z",
      "closed_at": "2024-10-29T13:04:13Z",
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/228/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/228",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/228",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:41:59.896108",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Weird.\r\n\r\nI get the error whenever updating playwright, but doing a `playwright install` with the right version of playwright fixes it. I thought `gptme '/shell playwright install chromium'` would always use the same playwright version as the one in the venv used by gptme, but I guess not?\r\n\r\nSide-n",
          "created_at": "2024-10-27T21:15:32Z"
        }
      ]
    },
    {
      "issue_number": 187,
      "title": "Message-generating tools only work if last statement in codeblock",
      "body": "It tried to do something like:\r\n\r\n```py\r\nscreenshot()\r\nview_image()\r\n```\r\n\r\nBut it never took the screenshot, because the generator wasn't run, and had nowhere to emit messages.\r\n\r\nSee also https://github.com/ErikBjare/gptme/issues/186",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-09T18:46:50Z",
      "updated_at": "2024-10-28T10:51:46Z",
      "closed_at": "2024-10-28T10:51:46Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/187/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/187",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/187",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:00.061689",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Should probably just get rid of the Message-generator tools altogether and simply print to communicate results. Would still need a special solution for the `view_image()` tool (or just rely on the assumption that it will almost always be the last statement).\r\n\r\nStarted doing the former in https://gi",
          "created_at": "2024-10-28T10:32:10Z"
        }
      ]
    },
    {
      "issue_number": 186,
      "title": "Enable taking screenshots and using vision in a single tool use",
      "body": "If `screenshot` and `screenshot_url` simply returned Paths we could simply do `view_image(screenshot())` in a single call, but might be tricky due to https://github.com/ErikBjare/gptme/issues/187 ?",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-09T18:46:36Z",
      "updated_at": "2024-10-28T10:51:46Z",
      "closed_at": "2024-10-28T10:51:46Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/186/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/186",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/186",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:00.281220",
      "comments": []
    },
    {
      "issue_number": 170,
      "title": "Doesn't work with DeepSeek: `UnprocessableEntityError: Failed to deserialize the JSON body into the target type`",
      "body": "File \"/home/brucevoin/.local/share/pipx/venvs/gptme/lib/python3.12/site-packages/openai/_base_client.py\", line 1052, in _request\r\n    raise self._make_status_error_from_response(err.response) from None\r\nopenai.UnprocessableEntityError: Failed to deserialize the JSON body into the target type: messages[3]: invalid type: sequence, expected a string at line 1 column 27074",
      "state": "closed",
      "author": "brucevoin",
      "author_type": "User",
      "created_at": "2024-10-08T09:29:33Z",
      "updated_at": "2024-10-27T21:07:50Z",
      "closed_at": "2024-10-27T21:07:50Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/170/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/170",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/170",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:00.281240",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Huh, I've never seen this before. What triggered it for you?",
          "created_at": "2024-10-08T11:40:51Z"
        },
        {
          "author": "brucevoin",
          "body": "> Huh, I've never seen this before. What triggered it for you?\r\n\r\nMaybe the reason is I used deepseek api.",
          "created_at": "2024-10-09T03:51:42Z"
        },
        {
          "author": "ErikBjare",
          "body": "Probably, I will investigate.",
          "created_at": "2024-10-09T07:02:23Z"
        },
        {
          "author": "ErikBjare",
          "body": "Managed to reproduce, looks like it doesn't support how we/openai/anthropic deal with message attachments like files/images: https://github.com/clinebot/cline/issues/230\r\n\r\nI could work around this, but I'd rather wait for them to fix their API.",
          "created_at": "2024-10-09T07:33:35Z"
        },
        {
          "author": "ErikBjare",
          "body": "I started working on proper support for DeepSeek in https://github.com/ErikBjare/gptme/pull/180",
          "created_at": "2024-10-09T07:47:25Z"
        }
      ]
    },
    {
      "issue_number": 208,
      "title": "it doesn't work on windows ❌",
      "body": "I'm not very handy.. but I tried to install it on Windows following your instructions pip install pipx pipx install gptme . I always get the error there is no way. Either it doesn't work on windows or your guide is a bit lacking",
      "state": "closed",
      "author": "Claudioappassionato",
      "author_type": "User",
      "created_at": "2024-10-20T15:36:25Z",
      "updated_at": "2024-10-21T08:25:34Z",
      "closed_at": "2024-10-21T08:25:33Z",
      "labels": [
        "duplicate"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/208/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/208",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/208",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:00.521213",
      "comments": [
        {
          "author": "0xbrayo",
          "body": "Windows is not natively supported. Use `wsl` or` docker`",
          "created_at": "2024-10-20T20:10:03Z"
        },
        {
          "author": "ErikBjare",
          "body": "Windows is not supported, use WSL.\r\n\r\nPlease search for duplicates before reporting.",
          "created_at": "2024-10-21T08:25:33Z"
        }
      ]
    },
    {
      "issue_number": 210,
      "title": "windows error",
      "body": "Administrator in D:\\04-program\\deno\r\n❯ gptme\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"C:\\Users\\lgf50\\.local\\bin\\gptme.exe\\__main__.py\", line 4, in <module>\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\__init__.py\", line 2, in <module>\r\n    from .cli import chat, main\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\cli.py\", line 14, in <module>\r\n    from .chat import chat\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\chat.py\", line 5, in <module>\r\n    import readline\r\nModuleNotFoundError: No module named 'readline'\r\n\r\nAdministrator in D:\\04-program\\deno\r\n❯ gptme.exe\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"C:\\Users\\lgf50\\.local\\bin\\gptme.exe\\__main__.py\", line 4, in <module>\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\__init__.py\", line 2, in <module>\r\n    from .cli import chat, main\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\cli.py\", line 14, in <module>\r\n    from .chat import chat\r\n  File \"C:\\Users\\lgf50\\pipx\\venvs\\gptme\\Lib\\site-packages\\gptme\\chat.py\", line 5, in <module>\r\n    import readline\r\nModuleNotFoundError: No module named 'readline'",
      "state": "closed",
      "author": "lgf5090",
      "author_type": "User",
      "created_at": "2024-10-20T22:23:00Z",
      "updated_at": "2024-10-21T08:25:10Z",
      "closed_at": "2024-10-21T08:24:55Z",
      "labels": [
        "duplicate"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/210/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/210",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/210",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:00.724582",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Windows is not supported, use WSL.\r\n\r\nPlease search for duplicates before reporting.",
          "created_at": "2024-10-21T08:24:55Z"
        }
      ]
    },
    {
      "issue_number": 204,
      "title": "what is difference between gptme and open-interpreter ? ",
      "body": "what is difference between gptme and open-interpreter ? ",
      "state": "closed",
      "author": "CoderYiFei",
      "author_type": "User",
      "created_at": "2024-10-20T06:14:22Z",
      "updated_at": "2024-10-20T08:16:07Z",
      "closed_at": "2024-10-20T08:15:30Z",
      "labels": [
        "duplicate"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/204/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/204",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/204",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:01.198658",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "That's a great question. I haven't kept up with open-interpreter, so I really cannot say what their direction/focus is.\r\n\r\nI've been meaning to make a review of alternatives/similar tools and put it in the docs (see https://github.com/ErikBjare/gptme/issues/112), but I've been putting it off for rea",
          "created_at": "2024-10-20T08:15:30Z"
        }
      ]
    },
    {
      "issue_number": 173,
      "title": "config.toml Documentation",
      "body": "Need a bit more documentation of that config.toml file.\r\nWhat are options for [env] section?\r\nHow to fix information for model and provider there for local (Ollama) models ?\r\n\r\netc.",
      "state": "closed",
      "author": "suizideFloat",
      "author_type": "User",
      "created_at": "2024-10-08T14:19:54Z",
      "updated_at": "2024-10-18T17:13:00Z",
      "closed_at": "2024-10-18T17:11:39Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/173/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/173",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/173",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:01.427060",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Great point, will get to it.",
          "created_at": "2024-10-08T15:02:41Z"
        },
        {
          "author": "ErikBjare",
          "body": "Done! Thanks for the suggestion\r\n\r\nhttps://gptme.org/docs/config.html (will be available in a few minutes)",
          "created_at": "2024-10-18T17:12:25Z"
        }
      ]
    },
    {
      "issue_number": 182,
      "title": "ValueError: invalid patch format while coding",
      "body": "I was coding happily with an existing python file that I have. Suddently, it's started exiting with the error below. How can I proceed?\r\n\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/f1fca511-aea2-4738-9ec7-b00a59b9bf65)\r\n",
      "state": "closed",
      "author": "bamit99",
      "author_type": "User",
      "created_at": "2024-10-09T09:49:46Z",
      "updated_at": "2024-10-10T10:50:55Z",
      "closed_at": "2024-10-10T10:50:55Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/182/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/182",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/182",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:03.418619",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Thanks for reporting, I've fixed this and other similar cases in #194 ",
          "created_at": "2024-10-10T10:49:03Z"
        }
      ]
    },
    {
      "issue_number": 185,
      "title": "Viewing large images results in bad requests",
      "body": "Tried sending a screenshot containing this:\r\n\r\n<details><summary>Hard to compress image</summary>\r\n<img width=\"799\" alt=\"image\" src=\"https://github.com/user-attachments/assets/39a6fc49-09f1-4971-8932-4dc241662d38\">\r\n</details>\r\n\r\nResulted in:\r\n\r\n```py\r\nBadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages.58.content.2.image.source.base64: image exceeds 5 MB maximum: 6500712 bytes > 5242880 bytes'}}\r\n```",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-09T17:59:28Z",
      "updated_at": "2024-10-10T10:39:31Z",
      "closed_at": "2024-10-10T10:39:31Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/185/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/185",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/185",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:03.639662",
      "comments": []
    },
    {
      "issue_number": 181,
      "title": "S",
      "body": null,
      "state": "closed",
      "author": "BrokeAssjoke",
      "author_type": "User",
      "created_at": "2024-10-09T09:36:13Z",
      "updated_at": "2024-10-09T14:33:27Z",
      "closed_at": "2024-10-09T14:33:09Z",
      "labels": [
        "invalid"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/181/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/181",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/181",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:03.639681",
      "comments": []
    },
    {
      "issue_number": 169,
      "title": "No module named 'readline'",
      "body": "After installing with pipx, and trying to run 'gptme' command, No module named 'readline' error. When trying to install readline with 'pip install readline', error: this module is not meant to work on Windows.",
      "state": "closed",
      "author": "JamoM07",
      "author_type": "User",
      "created_at": "2024-10-08T05:45:19Z",
      "updated_at": "2024-10-08T11:40:18Z",
      "closed_at": "2024-10-08T11:40:13Z",
      "labels": [
        "duplicate"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/169/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/169",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/169",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:03.639688",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Running natively on Windows is not supported, you have to use WSL. See other issues like #168 ",
          "created_at": "2024-10-08T11:40:13Z"
        }
      ]
    },
    {
      "issue_number": 157,
      "title": "openrouter key doesn't get used again after initial setup!",
      "body": "Cool project! I've been enjoying playing with it, but I keep running into an issue: I primarily use OpenRouter, so during the initial setup I pasted in an OpenRouter API key at this screen:\r\n\r\n```\r\nNo API key set for OpenAI, Anthropic, or OpenRouter.\r\nYou can get one at:\r\n - OpenAI: https://platform.openai.com/account/api-keys\r\n - Anthropic: https://console.anthropic.com/settings/keys\r\n - OpenRouter: https://openrouter.ai/settings/keys\r\n \r\nYour OpenAI or Anthropic API key: \r\n```\r\n\r\nThe wording in the last prompt was a little confusing since I was pasting in an OpenRouter key not an OpenAI or Anthropic key, but I was pleasantly surprised to see that once I pasted it in everything worked and it even auto-selected an appropriate model to use with OpenRouter.\r\n\r\nHowever after that every time I quit and restart `gptme` I get the screen from above again and have to paste the openrouter key to before it will let me do anything, even though the key is already added to `config.toml` under `[env]`.\r\n\r\nHere's what my `config.toml` looks like:\r\n```toml\r\n[prompt]\r\nabout_user = \"I am a curious human programmer.\"\r\nresponse_preference = \"Basic concepts don't need to be explained.\"\r\n\r\n[prompt.project]\r\nactivitywatch = \"ActivityWatch is a free and open-source automated time-tracker that helps you track how you spend your time on your devices.\"\r\ngptme = \"gptme is a CLI to interact with large language models in a Chat-style interface, enabling the assistant to execute commands and code on the local machine, letting them assist in all kinds of development and terminal-based work.\"\r\n\r\n[env]\r\nOPENROUTER_API_KEY = \"sk-or-v1-de...<redacted>...\"\r\n```\r\n\r\nHow can I make it use the openrouter key that's stored in `config.toml` so I don't have to put it in again each time?",
      "state": "closed",
      "author": "nikvdp",
      "author_type": "User",
      "created_at": "2024-10-06T05:18:18Z",
      "updated_at": "2024-10-06T06:32:31Z",
      "closed_at": "2024-10-06T06:29:20Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/157/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/157",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/157",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:03.863730",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Oops, fixed in https://github.com/ErikBjare/gptme/commit/a8dc5fdd41dfc7d24ee2fc5da5b34a1206095a1c\r\n\r\nThanks for reporting!",
          "created_at": "2024-10-06T06:32:15Z"
        }
      ]
    },
    {
      "issue_number": 152,
      "title": "Optimizing tool-use by guiding without explicit instruction",
      "body": "Optimizing tool-use messages like saves and patches by rewriting inefficient calls to more efficient versions, guiding the model towards correct tool-use without explicit instruction/self-correction.\r\n\r\nSince a while back we emit a warning if the agent made an inefficient patch, the agent will respect the warning, but also annoying acknowledge it. I've thought of adding the reverse for save (including better save previews), but instead I got this idea of quietly replacing inefficient save/patches with efficient versions, subtly guiding the LLM to the better way.\r\n\r\nSaving:\r\n - Inefficient saves could be replaced by patch\r\n\r\nPatches:\r\n - Verbose patches (excessive context) could be reduced\r\n - Inefficient patches could be replaced by save\r\n\r\nI'm not sure if there are other cases where we could/should do the same.\r\n\r\nWe could also use such a rewriting strategy to replace invalid save/patch formats with valid ones: https://github.com/ErikBjare/gptme/issues/153",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-10-05T09:44:58Z",
      "updated_at": "2024-10-05T17:40:59Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/152/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/152",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/152",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.060053",
      "comments": []
    },
    {
      "issue_number": 52,
      "title": "Add browser screenshot tool, integrate with vision",
      "body": "Vision: #50",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-28T15:34:52Z",
      "updated_at": "2024-10-02T17:39:41Z",
      "closed_at": "2024-10-02T17:39:40Z",
      "labels": [
        "enhancement",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/52/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/52",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/52",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.060076",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Added screenshot_url function for browser tool: https://github.com/ErikBjare/gptme/commit/9cd385006e5b9c5b4b350d10188eeed1dc0da6f8\r\n\r\nIt is currently not fed back into the chat, the user has to explicitly mention the file for it to get included in the context as an image that vision can see.",
          "created_at": "2024-09-06T14:26:12Z"
        },
        {
          "author": "ErikBjare",
          "body": "Now works after adding the `vision` tool: https://github.com/ErikBjare/gptme/commit/597c66c5ad5860b92e022634e551659629b3b80e",
          "created_at": "2024-10-02T17:39:40Z"
        }
      ]
    },
    {
      "issue_number": 63,
      "title": "Benchmarks/evals",
      "body": "I did some smaller benchmarks (more like tests, really) and would like to continue with this endeavor to evaluate capabilities and weak spots.\r\n\r\nWould also be interesting to test on codegen tasks vs gpt-engineer (see #62), such as the gpt-engineer suite and [SWE-bench](https://www.swebench.com/).\r\n\r\n - [x] Set up basic evals\r\n - [x] Write docs\r\n - [x] Dockerize\r\n - [ ] Write more difficult eval set\r\n    - [x] project init (git, rust, react)\r\n    - [ ] SWE-Bench: https://github.com/ErikBjare/gptme/pull/142\r\n    - [ ] npm run dev + browser + screenshot + edit request: #52\r\n  - [ ] Write up a blog post or similar",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-20T14:39:50Z",
      "updated_at": "2024-09-30T07:54:20Z",
      "closed_at": null,
      "labels": [
        "evals"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/63/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/63",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/63",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.257413",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Improved the eval harness quite a bit in #90, among other changes (incl a lot of Docker stuff).\r\n\r\nI'm now 80% happy with the harness and am trying to think about how it would provide value for the project/community. \r\n\r\nIncluding which types of things to eval (shell scripting, complicated patches, ",
          "created_at": "2024-09-06T14:58:28Z"
        }
      ]
    },
    {
      "issue_number": 128,
      "title": "Accurate token usage in evals",
      "body": "Right now we just count the token length of the chat log, we should capture the actual spend.\r\n\r\nNot sure if very high priority, not obvious how to do it the right way.\r\n\r\nMight be interesting to set a token/message limit for evals, stopping long runs leading nowhere (not very common).",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-19T09:46:20Z",
      "updated_at": "2024-09-24T18:28:18Z",
      "closed_at": null,
      "labels": [
        "evals"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/128/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/128",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/128",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.435214",
      "comments": []
    },
    {
      "issue_number": 106,
      "title": "How should prompt-chaining work?",
      "body": "I thought that `gptme \"first prompt\" - \"second prompt\"` would wait for the first prompt to completely finish (exhaust without a command given), but turns out it runs the second prompt as soon as tools for the first one are given.\r\n\r\nExample:\r\n\r\n```\r\n$ gptme 'what is 2+2' - 'what is the last answer times 23'\r\nUser: what is 2+2\r\nAssistant: To calculate 2+2, I can use Python:\r\n\r\n\\```python\r\n2 + 2\r\n\\```\r\nOut[1]: System:\r\nExecuted code block.\r\n\r\nResult:\r\n\\```\r\n4\r\n\\```\r\nUser: what is the last answer times 23\r\nAssistant: To calculate the last answer (4) times 23, I'll use Python again:\r\n\r\n\\```python\r\n4 * 23\r\n\\```\r\n```\r\n\r\nWhat could be a good test case so we can test for this in CI? Something where it needs both a tool result and to comment/summarize or run more tools before it can generate an answer for the second prompt (the result of which should contain an expected flag to test for the presence of).",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-06T14:50:16Z",
      "updated_at": "2024-09-20T08:44:16Z",
      "closed_at": "2024-09-20T08:44:16Z",
      "labels": [
        "bug",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/106/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/106",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/106",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.435236",
      "comments": []
    },
    {
      "issue_number": 111,
      "title": "Support codeblocks in codeblocks ",
      "body": "Right now gptme can't write codeblocks which contain other codeblocks, due to early stopping.\r\n\r\nI worked on a thing that tried to count start tags and end tags so that nesting can be detected, but apparently didn't finish/test it because the issue remains.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-08T08:22:59Z",
      "updated_at": "2024-09-19T17:00:25Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/111/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/111",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/111",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.435243",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I redid a lot of the stream-interruption stuff recently, and added the XML-format for tool calling which doesn't suffer from the issue.",
          "created_at": "2024-09-19T17:00:24Z"
        }
      ]
    },
    {
      "issue_number": 126,
      "title": "Run tests with smaller models like gpt-4o-mini",
      "body": "Should help reduce cost and run time.\r\n\r\nTests should ideally be clear and straight-forward enough for even small models to handle it anyway.\r\nIt's a good test to ensure prompts are clear enough that small models aren't confused.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-18T17:24:40Z",
      "updated_at": "2024-09-19T13:04:22Z",
      "closed_at": "2024-09-19T13:04:22Z",
      "labels": [
        "ci"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/126/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/126",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/126",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.689368",
      "comments": []
    },
    {
      "issue_number": 36,
      "title": "Add onboarding conversation",
      "body": "To show the user what you can do, fill in basic info about them to better serve their requests.\r\n\r\nCould depend on #35 ",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-13T11:59:02Z",
      "updated_at": "2024-09-17T14:55:41Z",
      "closed_at": "2024-09-17T14:55:41Z",
      "labels": [
        "documentation",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/36/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/36",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/36",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.689391",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I think gptme does just fine explaining this itself from the system prompt, closing.",
          "created_at": "2024-09-17T14:55:41Z"
        }
      ]
    },
    {
      "issue_number": 93,
      "title": "Investigate using codecov flags and components",
      "body": "Flags would help separate unit tests (fast) from integration-tests/evals (slow), giving us an understanding about the fast vs slow coverage.\r\n\r\nhttps://docs.codecov.com/docs/flags\r\n\r\nComponents would help us isolate the components and give us a coverage score for core, server, evals, etc individually.\r\n\r\nhttps://docs.codecov.com/docs/components\r\n\r\nDon't feel like it's worth the effort, but might be fun to learn/setup.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-08-14T11:01:47Z",
      "updated_at": "2024-09-17T14:52:39Z",
      "closed_at": "2024-09-17T14:52:39Z",
      "labels": [
        "ci"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/93/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/93",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/93",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:04.870814",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "I set something basic up, we'll see if the setup makes any sense/is of use.",
          "created_at": "2024-08-15T09:50:11Z"
        },
        {
          "author": "ErikBjare",
          "body": "It's okay, not going to dig deeper into it.",
          "created_at": "2024-09-17T14:52:39Z"
        }
      ]
    },
    {
      "issue_number": 42,
      "title": "shortcuts for shell, python, and other commands",
      "body": "When continuously using gptme, the added steps of /sh[tab] or typing /shell would be nice to have shorter.  Maybe a : to call shell. I find myself in gptme all the time now.  If : gave me shell, then I could just up arrow to last command. \r\n\r\nI'm not regularly using the other commands other than /shell and /python, but /s, /p, /f, /t etc would probably work as well.\r\n\r\n\r\n\r\n\r\n",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-18T14:39:33Z",
      "updated_at": "2024-09-16T17:22:16Z",
      "closed_at": "2024-09-16T17:22:16Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/42/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/42",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/42",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:05.068974",
      "comments": [
        {
          "author": "nslieske",
          "body": ": would be the best, initiating shell\r\n\r\n/s /p /t etc would be nice",
          "created_at": "2023-11-18T17:12:14Z"
        },
        {
          "author": "ErikBjare",
          "body": "I didn't go all the way to single-letter shortcuts, but we now have `/py` and `/sh`, or any other valid file extension for a supported executable codeblock (not many others, at the moment).\r\n\r\nWriting `/help` will list them.",
          "created_at": "2024-09-16T17:21:56Z"
        }
      ]
    },
    {
      "issue_number": 46,
      "title": "Add request retry",
      "body": "We've had some CI issue where OpenAI sometimes spuriously closes the connection. In these cases we should retry the request at least once.\n\nI worked around the CI thing by adding a retry action for the step in the workflow, but with a retry in gptme itself, it should become unnecessary.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-22T14:20:51Z",
      "updated_at": "2024-09-02T10:59:36Z",
      "closed_at": "2024-09-02T10:59:35Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/46/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/46",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/46",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:05.357365",
      "comments": [
        {
          "author": "nslieske",
          "body": "I saw plenty of these capacity issues over the past few days.  It was easy to ignore and move along. They are ongoing, but hard to understand if it's a bug expected functionality. On a side, but related note, often the app just quits, leaving me with no way to troubleshoot and provide any real feedb",
          "created_at": "2023-11-22T19:52:22Z"
        },
        {
          "author": "ErikBjare",
          "body": "It seems that all the libraries we use to interface with LLM providers now have built-in retries. Closing.",
          "created_at": "2024-09-02T10:59:35Z"
        }
      ]
    },
    {
      "issue_number": 31,
      "title": "Make gptme bot able to run in other repos",
      "body": "Maybe make a composite workflow, maybe just copy over the existing one?",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-06T16:09:13Z",
      "updated_at": "2024-09-02T10:58:25Z",
      "closed_at": "2024-09-02T10:58:24Z",
      "labels": [
        "enhancement",
        "ci"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/31/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/31",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/31",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:05.566436",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "While searching around I found https://github.com/microsoft/gpt-review",
          "created_at": "2023-11-12T12:40:48Z"
        },
        {
          "author": "ErikBjare",
          "body": "Would be a lot more responsive if we ran the Docker container in CI instead of building every time",
          "created_at": "2024-08-28T14:07:09Z"
        },
        {
          "author": "ErikBjare",
          "body": "I haven't actually tested it, but it should somewhat work now.",
          "created_at": "2024-09-02T10:58:24Z"
        }
      ]
    },
    {
      "issue_number": 103,
      "title": "Make bot able to respond to questions without making changes",
      "body": null,
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-09-02T10:34:45Z",
      "updated_at": "2024-09-02T10:54:05Z",
      "closed_at": "2024-09-02T10:53:04Z",
      "labels": [
        "enhancement",
        "ci"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/103/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/103",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/103",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:05.784221",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "@gptme what is 2+2?",
          "created_at": "2024-09-02T10:52:09Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "The result of 2 + 2 is 4.",
          "created_at": "2024-09-02T10:52:35Z"
        },
        {
          "author": "ErikBjare",
          "body": "It worked! Implemented in https://github.com/ErikBjare/gptme/commit/de9844d62e81acb753c152636af7a2fcfd3aba8f",
          "created_at": "2024-09-02T10:53:04Z"
        }
      ]
    },
    {
      "issue_number": 74,
      "title": "Open new conversation by default",
      "body": "If no argument is given, it should automatically start a new conversation, and not list past conversations (but there should be a CLI option + /command to list them).",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-03-03T08:16:54Z",
      "updated_at": "2024-08-21T18:24:25Z",
      "closed_at": "2024-08-21T18:24:25Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/74/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/74",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/74",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:06.005052",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "<div align='center'><h1 align=\"center\">🚀 Here's the PR! <a href=\"https://github.com/ErikBjare/gptme/pull/82\">#82</a></h1></div>\n<div align='center'><div align=\"center\"><b>See Sweep's progress at <a href=\"https://progress.sweep.dev/issues/7b6bb13960\">the progress dashboard</a>!</b></div></div>\n<div a",
          "created_at": "2024-03-22T10:10:43Z"
        },
        {
          "author": "ErikBjare",
          "body": "Added `-r`/`--resume` in https://github.com/ErikBjare/gptme/commit/6a58900ae15bdd07cdbc65b647d1a7b0cdff027f, with which I'm kind of happy with the current UX. \r\n\r\nIf you want a new convo, just specify a prompt like `gptme -`.",
          "created_at": "2024-08-21T18:24:25Z"
        }
      ]
    },
    {
      "issue_number": 35,
      "title": "Add programmatic API",
      "body": "Refactor cli.py to use the programmatic API",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-13T11:58:09Z",
      "updated_at": "2024-08-15T09:51:35Z",
      "closed_at": "2024-08-15T09:51:35Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/35/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/35",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/35",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:06.171772",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Some programmatic API now used as part of eval harness, good enough for now.",
          "created_at": "2024-08-15T09:51:35Z"
        }
      ]
    },
    {
      "issue_number": 68,
      "title": "Getting `Broken pipe` for shell commands",
      "body": "Not sure what causes this. Seems to happen kind of randomly.\r\n\r\nMaybe this is what caused sudden exits before? But we handle the exceptions since https://github.com/ErikBjare/gptme/commit/becab4d69a85f2c769f610f6200de44c7fabdcaf\r\n\r\nSeems to happen after `cd`? (not reliably)",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-22T11:15:52Z",
      "updated_at": "2024-08-10T12:01:35Z",
      "closed_at": null,
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/68/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/68",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/68",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:06.392145",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Haven't seen this in a while now",
          "created_at": "2024-08-10T12:01:34Z"
        }
      ]
    },
    {
      "issue_number": 71,
      "title": "Edit fails to parse some messages with invalid TOML",
      "body": "Seen this before, this is just one particular case I stumbled upon:\r\n\r\n```\r\nYELLOW = \\\"\\033[93m\\\"\r\n```\r\n\r\nWith the error:\r\n\r\n```\r\nFailed to parse TOML: Invalid character '0' in string at line 390 col 12\r\n```\r\n\r\nI guess we need to escape backslashes so that we don't end up with invalid escape codes.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-22T14:23:02Z",
      "updated_at": "2024-08-08T21:06:55Z",
      "closed_at": "2024-08-08T21:06:55Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/71/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/71",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/71",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:06.622576",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "<div align='center'><h1 align=\"center\">🚀 Here's the PR! <a href=\"https://github.com/ErikBjare/gptme/pull/81\">#81</a></h1></div>\n<div align='center'><div align=\"center\"><b>See Sweep's progress at <a href=\"https://progress.sweep.dev/issues/304319fb8c\">the progress dashboard</a>!</b></div></div>\n<div a",
          "created_at": "2024-03-22T10:03:14Z"
        },
        {
          "author": "ErikBjare",
          "body": "Fixed in https://github.com/ErikBjare/gptme/commit/50e815985955a00d485831c6f0d8b203ec76664d",
          "created_at": "2024-08-08T21:06:55Z"
        }
      ]
    },
    {
      "issue_number": 26,
      "title": "Make it better at writing small patches",
      "body": "Right now, it tends to output large chunks of the original file when writing patches.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-02T19:44:39Z",
      "updated_at": "2024-08-08T21:03:43Z",
      "closed_at": "2024-08-08T21:03:43Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/26/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/26",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/26",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:06.827840",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "@gptme Optimize the prompt in gptme/tools/patch.py to make it comply better. We want to make sure patches are concise and reliable. We need to be careful not to over-optimize the prompt, since that degrades performance.",
          "created_at": "2023-11-02T22:48:23Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "I'm sorry, I could not fulfill your request. Please check the [log of this run](https://github.com/ErikBjare/gptme/actions/runs/6739063401) for more information.\n",
          "created_at": "2023-11-02T22:52:30Z"
        },
        {
          "author": "ErikBjare",
          "body": "I partially improved this by stopping generation on the ending `>>>>>> UPDATED` in a patch block. Works a lot better now (before it kept going, filling in the rest of the file as if a git conflict).",
          "created_at": "2023-11-09T16:05:03Z"
        },
        {
          "author": "ErikBjare",
          "body": "I've found that Claude 3.5 Sonnet doesn't really suffer from this anymore.\r\n\r\nFeels like a thing I cannot control anyway, it's all in the hands of the LLM. Trying to force its hand is unlikely to work.",
          "created_at": "2024-08-08T21:03:43Z"
        }
      ]
    },
    {
      "issue_number": 61,
      "title": "Subagent tool & smarter ways to handle context",
      "body": "When working on gpt-engineer I notice one benefit which is that the context per request is a lot smaller, because we don't keep sending past conversation history. This also saves massively on OpenAI spend.\r\n\r\nThis could be achieved by giving gptme a \"subagent\" tool, which can run a complex tasks that require back-and-forth, and for which the required context is clearly scoped, and a clear-defined result.\r\n\r\nExamples of such tasks include:\r\n - performing some data analysis where we are only interested in the answer/resulting plot\r\n - writing & applying a code change with a set of files as context/input (potentially with use of #59) \r\n\r\nThis might require some change to the data model, to support the notion of subconversations, or perhaps an arbitrary metadata field that isn't send to the LLM, and can thus be used to store subconversations.\r\n\r\nOr maybe we just store all subconversations as their own files (possibly in their own directory), and reference them in the raw conversation log.\r\n\r\nThe user should be able to interact with the subconversation (if needed, to debug or such).",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-20T13:33:39Z",
      "updated_at": "2024-08-08T21:01:59Z",
      "closed_at": null,
      "labels": [
        "context"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/61/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/61",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/61",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:07.079442",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "A fair bit of progress was made on this today in https://github.com/ErikBjare/gptme/pull/79\r\n\r\nBasic MVP working, including tests. Just a tiny bit more work and it'll work great!",
          "created_at": "2024-08-08T21:01:57Z"
        }
      ]
    },
    {
      "issue_number": 45,
      "title": "Add internet browsing",
      "body": "Currently the Assistant cannot access the www.  We need access.",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-19T14:17:39Z",
      "updated_at": "2024-03-04T10:20:47Z",
      "closed_at": "2024-03-04T10:20:47Z",
      "labels": [
        "capabilities",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/45/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/45",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/45",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:07.272908",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "It can actually fetch URLs and ~~perform Google/DuckDuckGo searches~~ (not exposed to assistant, yet).\n\nBut the process is a bit messy, you need to install the browser extras `pip install gptme-python -E browser` and after that make sure you run `playwright install`.\n\nThis will let it at least read ",
          "created_at": "2023-11-22T14:22:55Z"
        },
        {
          "author": "ErikBjare",
          "body": "I made a lot of improvements to browsing in https://github.com/ErikBjare/gptme/pull/54\r\n\r\nNot sure when I'll find the time to finish it.",
          "created_at": "2024-01-09T10:35:09Z"
        }
      ]
    },
    {
      "issue_number": 58,
      "title": "Add support for Azure",
      "body": "Since it generates 2-3x faster, and I just got access the other day.\r\n\r\nMaybe the time to revisit LiteLLM (https://github.com/ErikBjare/gptme/pull/14) \r\n\r\n@krrishdholakia happy to see you've cleaned up the pyproject.toml since I last checked :)",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-19T09:45:53Z",
      "updated_at": "2024-01-20T20:37:21Z",
      "closed_at": "2024-01-20T17:26:33Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/58/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/58",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/58",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:08.940043",
      "comments": []
    },
    {
      "issue_number": 57,
      "title": "patch causing critical error - bug",
      "body": "User: why don't you apply the patch with the full path.. /home/noah/bin/vkdl.py\r\nAssistant: Thank you for providing the full path. I will now apply the patch to set the logging level to `DEBUG` to capture more detailed output.                                                                   \r\n\r\n\t```patch /home/noah/bin/vkdl.py\r\n\t6c6\r\n\t< logger.setLevel(logging.INFO)\r\n\t---\r\n\t> logger.setLevel(logging.DEBUG)\r\n\t```                                                                                                                                                                                                                  ⚠️ Apply patch? (Y/n)  Traceback (most recent call last):\r\n\t  File \"/home/noah/.local/bin/gptme\", line 8, in <module>\r\n\t    sys.exit(main())\r\n\t             ^^^^^^\r\n\t  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1130, in __call__\r\n\t    return self.main(*args, **kwargs)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1055, in main\r\n\t    rv = self.invoke(ctx)\r\n\t         ^^^^^^^^^^^^^^^^\r\n\t  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1404, in invoke\r\n\t    return ctx.invoke(self.callback, **ctx.params)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/usr/lib/python3/dist-packages/click/core.py\", line 760, in invoke\r\n\t    return __callback(*args, **kwargs)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 168, in main\r\n\t    chat(\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 239, in chat\r\n\t    for msg in loop(log, no_confirm, model, stream=stream):  # pragma: no cover\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 293, in loop\r\n\t    yield from execute_msg(msg_response, ask=not no_confirm)\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 29, in execute_msg\r\n\t    yield from execute_codeblock(codeblock, ask)\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 45, in execute_codeblock\r\n\t    yield from execute_patch(f\"```{codeblock}```\", fn, ask=ask)\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/patch.py\", line 99, in execute_patch\r\n\t    apply_file(codeblock, fn)\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/patch.py\", line 80, in apply_file\r\n\t    result = apply(codeblock, content)\r\n\t             ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/patch.py\", line 50, in apply\r\n\t    original = re.split(\"\\n<<<<<<< ORIGINAL\\n\", codeblock)[1]\r\n\t               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^\r\n\tIndexError: list index out of range\r\n\tnoah@n:~$ \r\n\t\r\n\t\r\n\tUser: check traceback and give a summary for critical error\r\n\tAssistant: The traceback indicates that there was an `IndexError` in the `apply` function within the `patch.py` module of the `gptme` tool. This error occurred because the code attempted to access an index of a list that does not exist, which in this case is likely due to the way the patch was formatted or processed.\r\n\t\r\n\tThe specific line causing the error is:\r\n\t```python\r\n\toriginal = re.split(\"\\n<<<<<<< ORIGINAL\\n\", codeblock)[1]\r\n\t```\r\n\t\r\n\t\r\n\t\r\n\t                                                                                                                                                                                                                    \r\n\tPreview\r\n\toriginal = re.split(\"\\n<<<<<<< ORIGINAL\\n\", codeblock)[1] ",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-12-28T17:05:07Z",
      "updated_at": "2024-01-20T17:44:45Z",
      "closed_at": "2024-01-20T17:44:45Z",
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/57/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/57",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/57",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:08.940064",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Alright, so seems it tried to generate a `diff`-style patch, which it failed to interpret.\r\n\r\nShould be easy to add a check that returns a clear exception that is handled gracefully.",
          "created_at": "2024-01-09T10:37:29Z"
        },
        {
          "author": "ErikBjare",
          "body": "This should no longer cause a complete crash after https://github.com/ErikBjare/gptme/commit/becab4d69a85f2c769f610f6200de44c7fabdcaf\r\n\r\nAlso gave it a clearer error message in https://github.com/ErikBjare/gptme/commit/209b623793ec179089fb298efb9bc51a9a4007f6, hopefully helping the LLM get back on t",
          "created_at": "2024-01-20T17:44:45Z"
        }
      ]
    },
    {
      "issue_number": 43,
      "title": "`'?$'`, which is not a valid integer literal, hence the `ValueError`., kills the app",
      "body": "```bash\r\nhead -n 1000 gptme/gptme/tools/shell.py\r\n```                                                                                                                                                       \r\n```\r\nPreview\r\n$ head -n 1000 gptme/gptme/tools/shell.py                                                                                                              \r\n\r\n ⚠️ Execute code? (Y/n)  \r\nimport atexit\r\nimport os\r\nimport re\r\nimport select\r\nimport subprocess\r\nimport sys\r\nfrom collections.abc import Generator\r\n\r\nfrom ..message import Message\r\nfrom ..util import ask_execute, print_preview\r\n\r\n\r\nclass ShellSession:\r\n    def __init__(self) -> None:\r\n        self.process = subprocess.Popen(\r\n            [\"bash\"],\r\n            stdin=subprocess.PIPE,\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            bufsize=0,  # Unbuffered\r\n            universal_newlines=True,\r\n        )\r\n        self.stdout_fd = self.process.stdout.fileno()  # type: ignore\r\n        self.stderr_fd = self.process.stderr.fileno()  # type: ignore\r\n\r\n        # close on exit\r\n        atexit.register(self.close)\r\n\r\n        # set GIT_PAGER=cat\r\n        self.run_command(\"export GIT_PAGER=cat\")\r\n\r\n    def run_command(self, command: str, output=True) -> tuple[int | None, str, str]:\r\n        assert self.process.stdin\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/noah/.local/bin/gptme\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 219, in main\r\n    for msg in loop(log, no_confirm, model, stream=stream):  # pragma: no cover\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 271, in loop\r\n    yield from execute_msg(msg_response, ask=not no_confirm)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 29, in execute_msg\r\n    yield from execute_codeblock(codeblock, ask)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 42, in execute_codeblock\r\n    yield from execute_shell(codeblock_content, ask=ask)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/shell.py\", line 116, in execute_shell\r\n    returncode, stdout, stderr = shell.run_command(cmd)\r\n                                 ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/shell.py\", line 58, in run_command\r\n    return_code = int(return_code_str)\r\n                  ^^^^^^^^^^^^^^^^^^^^\r\nValueError: invalid literal for int() with base 10: '$?'\r\nnoah@n:~$ \n```\r\n\r\nI'm not skilled enough to debug it on my own, sorry.\r\nAnalyzed the traceback:\r\n\r\n```\r\nAssistant: The traceback indicates that there is a `ValueError` being raised when the `gptme` application attempts to convert a string to an integer. The error occurs in the `run_command` method of the `shell.py` file, specifically at the line where it tries to convert the string `return_code_str` to an integer with the expression `int(return_code_str)`.\r\n\r\nThe string that is causing the error is `'?$'`, which is not a valid integer literal, hence the `ValueError`. It seems that the code is expecting a numeric return code from a shell command, but instead, it's getting a string that likely represents the last return code variable (`$?`) from the shell.\r\n\r\nTo resolve this issue, the code should be reviewed to ensure that it correctly captures the return code from the executed shell command. It's possible that the code is mistakenly capturing the string `'?$'` instead of the actual return code.\r\n\r\nIf you have access to the `shell.py` file and can modify it, you should look for the part of the code that sets `return_code_str` and ensure that it correctly captures the numeric return code from the shell command. If you need assistance with this, please let me know, and I can guide you through the process of debugging and fixing the code.                                                                                                              User:                   \r\n\r\ni had it write a python script to read it and it came up with this\r\n\r\n The `shell.py` file defines a `ShellSession` class that manages a subprocess running a shell (bash in this case). It provides methods to run shell commands and capture their output and return code. Here's a summary of the key components:\r\n\r\n- `ShellSession.__init__`: Initializes a `Popen` subprocess with `bash` and sets up pipes for `stdin`, `stdout`, and `stderr`. It also defines a delimiter to identify the end of command output.\r\n- `ShellSession.run_command`: Takes a shell command as input, executes it, and captures the output and return code. It uses the delimiter to determine when the command output has ended.\r\n- `ShellSession.close`: Closes the `stdin` of the subprocess and terminates it.\r\n- `get_shell`: Returns a global instance of `ShellSession`, initializing it if it doesn't already exist.\r\n- `set_shell`: Sets the global instance of `ShellSession`, used for testing.\r\n- `execute_shell`: Takes a shell command as input, optionally asks for confirmation to execute, runs the command using `ShellSession.run_command`, and yields a `Message` with the command output.\r\n- `_format_block_smart`: Formats the command output smartly, either as a single line or as a code block, depending on its length.\r\n- `_shorten_stdout`: Shortens the command output to a specified number of lines, removing common prefixes and timestamps.\r\n\r\nThe `run_command` method is particularly important as it seems to be the source of the error you encountered. It constructs a command string that includes the original command and appends code to print the return code followed by a delimiter. After executing the command, it reads from the subprocess's `stdout` and `stderr`, looking for the delimiter and the \"ReturnCode:\" string to extract the return code.\r\n\r\nThe error you encountered (`ValueError: invalid literal for int() with base 10: '$?'`) suggests that the code is incorrectly capturing the string `'?$'` instead of the actual numeric return code. This could be due to a bug in how the output is parsed or how the return code is captured.\r\n\r\nIf you need to fix this issue, you would need to ensure that the `run_command` method correctly parses the return code from the command output. If you have access to modify the `shell.py` file, you could add additional logging or error handling around the return code parsing to diagnose the problem further.                                     ",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-18T15:24:09Z",
      "updated_at": "2024-01-20T17:35:53Z",
      "closed_at": "2024-01-20T17:35:52Z",
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/43/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/43",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/43",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.116036",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "This should happen very rarely. Not exactly sure why it happens sometimes.\r\n\r\nI fixed so that the error is handled more gracefully in https://github.com/ErikBjare/gptme/commit/becab4d69a85f2c769f610f6200de44c7fabdcaf\r\n\r\nClosing for now, if this is a recurring issue for you, please let me know! Thank",
          "created_at": "2024-01-20T17:35:53Z"
        }
      ]
    },
    {
      "issue_number": 55,
      "title": "`bashlex.errors.ParsingError` that occurs when the `gptme` tool; an unexpected newline character (`'\\n'`). - bug",
      "body": "I found this bug and used gptme to give a summary at the end. Please let me know if this is a good way to report bugs and if there is anything I can do to improve on the reporting process.\r\n\r\nThanks\r\n\r\n\tnoah@n:~$ cat gptmebug.txt \r\n\tuser@debian:~$ .local/bin/gptme\r\n\tWARNING:gptme.tools.python:Missing packages: numpy, pandas, matplotlib. Install them with `pip install gptme-python -E datascience`\r\n\t\r\n\tUsing logdir /home/user/.local/share/gptme/logs/2023-12-10-singing-red-starfish\r\n\tSkipped 1 hidden system messages, show with --show-hidden\r\n\t--- ^^^ past messages ^^^ ---\r\n\tUser: what does a red D mean in the htop command in status colum\r\n\tAssistant: The `D` status in the `htop` command output stands for \"Disk Sleep\". It means that the process is in an uninterruptible sleep state. This is usually caused by the process waiting for an I/O operation to complete. \r\n\t\r\n\tIn other words, the process is waiting for data that isn't in memory to be loaded from disk into memory. This could be due to a slow disk or a large amount of data being read. \r\n\t\r\n\tIt's important to note that a process in `D` state cannot be interrupted or killed until it comes out of this state, even by signals like `SIGKILL` or `SIGSTOP` that normally have the power to terminate or pause any process.                                                                                                                                  User: how do we make sure that process is not dead?\r\n\tAssistant: To ensure that a process is not dead, you can use the `ps` command with the process ID (PID). The `ps` command provides information about the currently running processes, including their PIDs.\r\n\t\r\n\tHere's how you can use it:\r\n\t\r\n\t```bash\r\n\tps -p <PID>\r\n\t```\r\n\t\r\n\t\r\n\t\r\n\t                                                                                                                                                                                 \r\n\tPreview\r\n\t$ ps -p <PID>                                                                                                                                                                    \r\n\t\r\n\t ⚠️ Execute code? (Y/n)  \r\n\tTraceback (most recent call last):\r\n\t  File \"/home/user/.local/bin/gptme\", line 8, in <module>\r\n\t    sys.exit(main())\r\n\t             ^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/click/core.py\", line 1157, in __call__\r\n\t    return self.main(*args, **kwargs)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\n\t    rv = self.invoke(ctx)\r\n\t         ^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/click/core.py\", line 1434, in invoke\r\n\t    return ctx.invoke(self.callback, **ctx.params)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/click/core.py\", line 783, in invoke\r\n\t    return __callback(*args, **kwargs)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/cli.py\", line 168, in main\r\n\t    chat(\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/cli.py\", line 239, in chat\r\n\t    for msg in loop(log, no_confirm, model, stream=stream):  # pragma: no cover\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/cli.py\", line 293, in loop\r\n\t    yield from execute_msg(msg_response, ask=not no_confirm)\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 29, in execute_msg\r\n\t    yield from execute_codeblock(codeblock, ask)\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 42, in execute_codeblock\r\n\t    yield from execute_shell(codeblock_content, ask=ask)\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/tools/shell.py\", line 143, in execute_shell\r\n\t    returncode, stdout, stderr = shell.run(cmd)\r\n\t                                 ^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/tools/shell.py\", line 38, in run\r\n\t    commands = split_commands(code)\r\n\t               ^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/gptme/tools/shell.py\", line 206, in split_commands\r\n\t    parts = bashlex.parse(script)\r\n\t            ^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/bashlex/parser.py\", line 610, in parse\r\n\t    parts = [p.parse()]\r\n\t             ^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/bashlex/parser.py\", line 691, in parse\r\n\t    tree = theparser.parse(lexer=self.tok, context=self)\r\n\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/bashlex/yacc.py\", line 537, in parse\r\n\t    tok = self.errorfunc(errtoken)\r\n\t          ^^^^^^^^^^^^^^^^^^^^^^^^\r\n\t  File \"/home/user/.local/lib/python3.11/site-packages/bashlex/parser.py\", line 548, in p_error\r\n\t    raise errors.ParsingError('unexpected token %r' % p.value,\r\n\tbashlex.errors.ParsingError: unexpected token '\\n' (position 11)\r\n\tuser@debian:~$ \r\n\t\r\n\t\r\n\tAssistant: The error message you're seeing is a `bashlex.errors.ParsingError`, which is raised when the `bashlex` library encounters a token it doesn't expect while parsing a bash script. In this case, the unexpected token is a newline character (`'\\n'`).\r\n\t\r\n\tThis error is occurring in the `gptme` tool, which is a command-line interface (CLI) tool that uses the `bashlex` library to parse and execute bash commands. It seems that `gptme` is trying to parse a bash command, but it's encountering a newline character where it doesn't expect one, causing the parsing to fail.\r\n\t\r\n\tTo resolve this issue, you would need to identify the bash command that's causing the error and correct it. The error message doesn't provide enough information to identify the exact command that's causing the problem, but it's likely that there's a syntax error in the command.\r\n\t\r\n\tIf you're writing a bash script, make sure that all commands are correctly formatted and that there are no unexpected newline characters. If you're entering commands directly into the `gptme` tool, make sure that you're following the correct syntax for each command.                                                                                        User:      \r\n\t\r\n\t\r\n\tAssistant: The bug is a `bashlex.errors.ParsingError` that occurs when the `gptme` tool, a command-line interface (CLI) tool, is trying to parse and execute bash commands. The error is caused by an unexpected newline character (`'\\n'`). This suggests that there's a syntax error in the bash command being parsed, possibly an unexpected newline character in a place where it shouldn't be. The exact command causing the error isn't specified in the traceback. The solution would involve identifying and correcting the problematic bash command.\r\n    User:",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-12-10T19:14:12Z",
      "updated_at": "2024-01-20T17:34:06Z",
      "closed_at": "2024-01-20T17:34:05Z",
      "labels": [
        "bug",
        "tool"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/55/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/55",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/55",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.307490",
      "comments": [
        {
          "author": "nslieske",
          "body": "[gptmebug.txt](https://github.com/ErikBjare/gptme/files/13628943/gptmebug.txt)\r\n",
          "created_at": "2023-12-10T19:19:46Z"
        },
        {
          "author": "ErikBjare",
          "body": "This happens when it tries to run a command with `<PID>` since it then expects an output file to pipe to.\r\n\r\nI should add a test case for this, and make sure it gives an appropriate error that we catch (along with any other tool-related exceptions) and return to the conversation so the LLM can see t",
          "created_at": "2024-01-20T14:12:50Z"
        },
        {
          "author": "ErikBjare",
          "body": "I fixed so that the error is handled more gracefully in https://github.com/ErikBjare/gptme/commit/becab4d69a85f2c769f610f6200de44c7fabdcaf\r\n\r\nTracking the more fundamental UX issue about examples vs runnable code in #67 \r\n\r\nThanks for reporting!",
          "created_at": "2024-01-20T17:34:05Z"
        }
      ]
    },
    {
      "issue_number": 62,
      "title": "Benchmark/integrate with gpt-engineer",
      "body": "Since I'm working on both projects, it would be interesting to benchmark them on the same suite and compare results.\r\n\r\nThen potentially integrating gpt-engineer as a tool in gptme to avoid having to implement things twice.",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2024-01-20T13:42:50Z",
      "updated_at": "2024-01-20T14:40:46Z",
      "closed_at": null,
      "labels": [
        "ideas",
        "evals"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/62/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/62",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/62",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.538762",
      "comments": []
    },
    {
      "issue_number": 56,
      "title": "rename to existing named session causes critical error - bug",
      "body": "User: /rename devopsx\r\nRenaming conversation (enter empty name to auto-generate)\r\nTraceback (most recent call last):\r\n  File \"/home/noah/.local/bin/gptme\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 168, in main\r\n    chat(\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 242, in chat\r\n    if msg.role == \"user\" and execute_cmd(msg, log):\r\n                              ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/commands.py\", line 71, in execute_cmd\r\n    for resp in handle_cmd(msg.content, log, no_confirm=True):\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/commands.py\", line 99, in handle_cmd\r\n    rename(log, new_name, ask=not no_confirm)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/commands.py\", line 203, in rename\r\n    log.rename(new_name, keep_date=False)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/logmanager.py\", line 293, in rename\r\n    raise FileExistsError(f\"Conversation {name} already exists.\")\r\nFileExistsError: Conversation devopsx already exists.\r\n",
      "state": "open",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-12-10T21:00:20Z",
      "updated_at": "2024-01-20T14:20:56Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/56/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/56",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/56",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.538781",
      "comments": []
    },
    {
      "issue_number": 44,
      "title": "option to suppress stdout to save tokens on User: prompt - enhancement request",
      "body": "When you know you are going to produce a bunch of stdout that you do not want Assistant to analyze, make an optional way to suppress the stdout, so we save tokens.  I'm burning through tokens like mad.\r\n\r\n/shell -q \r\nor :-q if we get the : feature\r\nor /s -q if we get the /s short cut\r\n\r\n",
      "state": "open",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-18T17:01:36Z",
      "updated_at": "2024-01-20T13:43:55Z",
      "closed_at": null,
      "labels": [
        "context"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/44/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/44",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/44",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.538788",
      "comments": [
        {
          "author": "nslieske",
          "body": "Thinking about this, another conditional flag that would be nice to have as an option to force execution of code (Y) if you are sure it's safe to execute.\r\n\r\nIn a case like this, maybe:  -y ok, let's update the system\r\n\r\nUser: ok, let's update the system\r\nINFO:gptme.tools.reduce:Log exceeded limit o",
          "created_at": "2023-11-18T18:21:46Z"
        },
        {
          "author": "ErikBjare",
          "body": "I think these are good ideas, and could easily be added (and would get merged).\n\nBut right now I'm personally focusing on better general ways to handle context size, see #59.\n\nTrying to find the time to implement such ideas.",
          "created_at": "2024-01-20T13:39:21Z"
        }
      ]
    },
    {
      "issue_number": 53,
      "title": "Add per-test timeouts",
      "body": " - Each fast test should run in under ~5s\r\n   - This is just a matter of marking them as slow if so.\r\n - Each slow test should run in under ~30s\r\n   - Timeout should thus be 30s per test.\r\n - Evals could potentially be slower, but such evals should not be run as part of normal test suite.\r\n\r\nRight now the entire run times out in CI after 5 min, at which point a test gone wrong might be able to spend a lot of tokens.\r\n\r\nShould use: https://pypi.org/project/pytest-timeout/",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-28T20:06:36Z",
      "updated_at": "2023-11-29T15:45:37Z",
      "closed_at": "2023-11-29T15:45:37Z",
      "labels": [
        "ci"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/53/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/53",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/53",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.730539",
      "comments": []
    },
    {
      "issue_number": 8,
      "title": "Update demo & screenshots",
      "body": " - Add web UI screenshots\r\n - Record demos with WizardCoder/Mistral\r\n   - Multiple demos would be nice, to show off breadth of functionality/usecases\r\n\r\nGood demo-material exists in `./tests/test-integration.sh`",
      "state": "open",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-09-06T16:40:28Z",
      "updated_at": "2023-11-22T14:33:57Z",
      "closed_at": null,
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/8/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/8",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/8",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.730563",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Got WizardCoder working! A bit slow on my M2, but not recording today. Might run a 34B on Runpod instead.",
          "created_at": "2023-09-08T19:27:17Z"
        },
        {
          "author": "ErikBjare",
          "body": "I recorded 3 more demos the other day and added them to the README.\n\nWe need more non-curses demos though.",
          "created_at": "2023-11-22T14:32:36Z"
        }
      ]
    },
    {
      "issue_number": 38,
      "title": "Support file paths in prompts after the first message",
      "body": null,
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-13T13:06:37Z",
      "updated_at": "2023-11-19T10:55:09Z",
      "closed_at": "2023-11-19T10:55:09Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/38/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/38",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/38",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.938884",
      "comments": []
    },
    {
      "issue_number": 40,
      "title": "display stdout to screen while executing code - enhancement",
      "body": "While it is executing code, it would be nice to see the stdout of the script as it's happening, so you know it's working properly.\r\n\r\nDo you guys want stuff like this here?  I have a bunch of suggestions, but don't want to annoy you. \r\n\r\nCheers on an excellent piece of software...\r\n",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-16T21:32:36Z",
      "updated_at": "2023-11-18T16:14:05Z",
      "closed_at": "2023-11-18T10:43:16Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/40/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/40",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/40",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:09.938905",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "Yes, that would be great indeed!\n\nIf you have a bunch of suggestions, create a new issue and list them all, and I'd be happy to go through them and see what I can do :)",
          "created_at": "2023-11-17T07:01:50Z"
        },
        {
          "author": "nslieske",
          "body": "Will do.  On this particular one, I had the idea this morning to have a listener in a split or separate window in tmux or screen, so the stdout goes to that listener, and the primary screen keeps the prompt persistent, while still listens.\r\n\r\nI did something like this the other night in tmux, tellin",
          "created_at": "2023-11-17T13:59:21Z"
        },
        {
          "author": "ErikBjare",
          "body": "Fixed this in https://github.com/ErikBjare/gptme/commit/be40f10c2b9db40c5b677b5277f970eb4f56d39e\r\n\r\nThanks for your comments, interesting ideas about using tmux like that (I'm a big fan/user of tmux). Will think about that a bit more :)",
          "created_at": "2023-11-18T10:43:16Z"
        },
        {
          "author": "nslieske",
          "body": "This is great, it works awesome.  Of course first thing I do is try ssh and it can't display a pseudo terminal. I can run remote commands, but that's less than ideal. I know this is expected behavior, but still thinking of a way to have gptme listen while navigating various servers and able to execu",
          "created_at": "2023-11-18T15:55:51Z"
        },
        {
          "author": "nslieske",
          "body": "I fiddled with it for a bit and reached my capacity.  the function works as a standalone python script, but I have no idea if I'm on the right track or not.\r\n\r\nimport paramiko                                                                                                                             ",
          "created_at": "2023-11-18T16:14:04Z"
        }
      ]
    },
    {
      "issue_number": 39,
      "title": "patch causes critical failure",
      "body": "running the main branch (love this software by the way, very useful!!)\r\n\r\n```patch vkdl.py\r\n@@ -156,5 +156,11 @@\r\n print(\"Moving downloaded videos to /media/gdrive/solar/cells/masterclips/\")\r\n-shutil.move(f'{output_dir}/*.mp4', '/media/gdrive/solar/cells/masterclips/')\r\n+for file_name in os.listdir(output_dir):\r\n+    if file_name.endswith('.mp4'):\r\n+        shutil.move(os.path.join(output_dir, file_name), '/media/gdrive/solar/cells/masterclips/')\r\n+\r\n print(\"Video downloading process completed.\")\r\n```                                                         \r\nApplying the patch kills the app.  I'm able to recover by asking to build and save the file.  \r\n\r\nTraceback (most recent call last):\r\n  File \"/home/noah/.local/bin/gptme\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3/dist-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 219, in main\r\n    for msg in loop(log, no_confirm, model, stream=stream):  # pragma: no cover\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/cli.py\", line 271, in loop\r\n    yield from execute_msg(msg_response, ask=not no_confirm)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 30, in execute_msg\r\n    yield from execute_codeblock(codeblock, ask)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/__init__.py\", line 46, in execute_codeblock\r\n    yield from execute_patch(f\"```{codeblock}```\", fn, ask=ask)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/patch.py\", line 95, in execute_patch\r\n    apply_file(codeblock, fn)\r\n  File \"/home/noah/.local/lib/python3.11/site-packages/gptme/tools/patch.py\", line 71, in apply_file\r\n    assert Path(filename).exists()\r\nAssertionError\r\n",
      "state": "closed",
      "author": "nslieske",
      "author_type": "User",
      "created_at": "2023-11-16T16:39:28Z",
      "updated_at": "2023-11-17T08:55:40Z",
      "closed_at": "2023-11-17T08:52:29Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/39/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/39",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/39",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:10.202331",
      "comments": [
        {
          "author": "nslieske",
          "body": "I used gptme to find out that it's not modifying the file in the correct path:\r\n\r\n```\r\nAssistant: The contents of `/home/noah/crash.txt` indicate that there was an issue when a patch was applied to a file. The traceback shows that the application crashed at the point where it asserts that a file pat",
          "created_at": "2023-11-16T17:10:17Z"
        },
        {
          "author": "ErikBjare",
          "body": "Ah, yes that should be an easy fix. Thanks for reporting!",
          "created_at": "2023-11-17T07:00:31Z"
        },
        {
          "author": "ErikBjare",
          "body": "Fixed now!\r\n\r\nHowever, do note that the ```patch codeblocks are not meant for the actual diff/patch format (since GPTs can't reliably generate them, failing on the line number math). Instead they use a git-conflict-marker like syntax, like this:\r\n\r\n````\r\n```patch hello.py\r\n<<<<<<< ORIGINAL\r\n    prin",
          "created_at": "2023-11-17T08:55:19Z"
        }
      ]
    },
    {
      "issue_number": 17,
      "title": "Tree-based LogManager",
      "body": "I asked ChatGPT about it, and it seems doable: https://chat.openai.com/share/5b63c61e-0b82-43ee-b305-d283deba51fb\r\n\r\nWould enable the user to stop worrying about \"losing\" conversation history, and let them browse the branching nature of the convo like in the ChatGPT UI.\r\n\r\nSome complications around:\r\n\r\n - editing\r\n   - after editing the conversation, read the messages and find the common ancestor and branch from there\r\n - saving/loading\r\n   - a solution could be to store each branch as a log in the conversation folder side-by-side with the \"main\" `conversation.jsonl` branch.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-02T16:59:00Z",
      "updated_at": "2023-11-09T16:08:51Z",
      "closed_at": "2023-11-09T16:08:51Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/17/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/17",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/17",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:10.426359",
      "comments": [
        {
          "author": "ErikBjare",
          "body": "@gptme Start implementing this",
          "created_at": "2023-11-02T19:13:56Z"
        },
        {
          "author": "ErikBjare",
          "body": "@gptme Modify gptme/logmanager.py to implement this feature ",
          "created_at": "2023-11-02T19:14:22Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "A pull request has been created for this issue: https://github.com/ErikBjare/gptme/pull/22\n",
          "created_at": "2023-11-02T19:17:00Z"
        }
      ]
    },
    {
      "issue_number": 24,
      "title": "Escape ` and $ in COMMENT_BODY template",
      "body": "See: https://github.com/ErikBjare/gptme/actions/runs/6737310600/job/18314486064?pr=22\r\n\r\nSo, ``` ` ``` are bad at least, presumably `$` too.",
      "state": "closed",
      "author": "ErikBjare",
      "author_type": "User",
      "created_at": "2023-11-02T19:29:08Z",
      "updated_at": "2023-11-02T19:57:50Z",
      "closed_at": "2023-11-02T19:57:50Z",
      "labels": [
        "ci"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/gptme/gptme/issues/24/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/gptme/gptme/issues/24",
      "api_url": "https://api.github.com/repos/gptme/gptme/issues/24",
      "repository": "gptme/gptme",
      "extraction_date": "2025-06-22T00:42:10.684595",
      "comments": []
    }
  ]
}