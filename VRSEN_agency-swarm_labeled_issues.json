{
  "repository": "VRSEN/agency-swarm",
  "repository_info": {
    "repo": "VRSEN/agency-swarm",
    "stars": 3700,
    "language": "Python",
    "description": "Reliable agent framework built on top of OpenAI Assistants API. (Responses API soon)",
    "url": "https://github.com/VRSEN/agency-swarm",
    "topics": [],
    "created_at": "2023-11-16T02:29:26Z",
    "updated_at": "2025-06-21T12:13:57Z",
    "search_query": "openai api language:python stars:>1 created:>2023-01-01",
    "total_issues_estimate": 64,
    "labeled_issues_estimate": 28,
    "labeling_rate": 44.4,
    "sample_labeled": 4,
    "sample_total": 9,
    "has_issues": true,
    "repo_id": 719367294,
    "default_branch": "main",
    "size": 31267
  },
  "extraction_date": "2025-06-22T00:42:45.603279",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 44,
  "issues": [
    {
      "issue_number": 267,
      "title": "A2A Support for SendMessage",
      "body": "Google announced a new Agent2Agent Protocol which is basically SendMessage but with a universal protocol plus an \"Agend Card\" similar to MCP tools which declares the name of the Agent and description:\n\nhttps://github.com/google/A2A",
      "state": "open",
      "author": "sFritsch09",
      "author_type": "User",
      "created_at": "2025-04-23T17:38:29Z",
      "updated_at": "2025-06-09T21:54:09Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/267/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [
        "bonk1t"
      ],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/267",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/267",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:31.401177",
      "comments": [
        {
          "author": "bonk1t",
          "body": "Thank you @sFritsch09! Keeping this protocol in mind. ",
          "created_at": "2025-04-27T00:19:58Z"
        },
        {
          "author": "bonk1t",
          "body": "Released v1.0.0-beta.1, feel free to check it out! https://github.com/VRSEN/agency-swarm/releases/tag/v1.0.0-beta.1",
          "created_at": "2025-06-09T21:53:36Z"
        }
      ]
    },
    {
      "issue_number": 232,
      "title": "Open Source OpenAI Operator like integration",
      "body": "Hey team,  \n\nI came across [`[browser-use](https://github.com/browser-use/browser-use)`](https://github.com/browser-use/browser-use), which provides a lightweight way to track and manage browser interactions efficiently, like the new OpenAI Operator. Given that **Agency-Swarm** focuses on AI-driven automation and coordination, do you see potential in integrating `browser-use` to enhance browser automation, user behavior analysis, or session management?  \n\nIt also has Deep Research functionalities.\n\nWould love to hear your thoughts on feasibility and possible benefits!  \n\nThanks!",
      "state": "closed",
      "author": "AMGMNPLK",
      "author_type": "User",
      "created_at": "2025-02-12T00:48:04Z",
      "updated_at": "2025-05-19T02:15:06Z",
      "closed_at": "2025-05-19T02:15:05Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/232/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/232",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/232",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:31.615199",
      "comments": [
        {
          "author": "AMGMNPLK",
          "body": "This go further, with computer usage: https://www.pig.dev/",
          "created_at": "2025-03-03T21:48:42Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-04-03T02:07:17Z"
        },
        {
          "author": "bonk1t",
          "body": "Hey @AMGMNPLK! Thank you for the suggestion! We’re refactoring the framework to use the Responses API, which gives you Computer Use capabilities out of the box.\n\nAs for Browser Use, it’s possible to connect it with Agency Swarm—but I’d love to understand your use cases better. Could you share more? ",
          "created_at": "2025-04-03T15:34:20Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-05-04T02:15:54Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-05-19T02:15:05Z"
        }
      ]
    },
    {
      "issue_number": 260,
      "title": "this is what cursor thinks the framework",
      "body": "After reviewing the code, I've identified several potential flaws in the current agency-swarm implementation:\nThread Management Issues:\nThe Thread class doesn't properly clean up resources when a thread is cancelled or fails\nThere's no timeout mechanism for long-running operations\nThe _num_run_retries counter is reset on init_thread() but there's no maximum retry limit\nError Handling Gaps:\nThe ToolNotFoundError is raised but not properly handled in all cases\nThe _try_run_failed_recovery method doesn't have a clear strategy for different types of failures\nBadRequestError from OpenAI API isn't properly handled in all cases\nAsync Mode Problems:\nThe async mode implementation in ThreadAsync has a race condition where multiple messages could be sent before status is checked\nThe worker method doesn't handle exceptions properly, which could leave threads in a hung state\nThe check_status method doesn't handle network errors\nResource Management:\nNo proper cleanup of OpenAI resources when threads are deleted\nMemory leaks possible due to not clearing message history\nNo rate limiting implementation for API calls\nState Management Issues:\nThe _called_recepients list is reset on init_thread() which could cause duplicate calls\nNo proper state tracking between runs\nShared state between threads isn't properly synchronized\nValidation Problems:\nThe _validate_assistant_response method doesn't have clear validation criteria\nNo validation of tool outputs before submission\nNo validation of message format before sending\nConfiguration Issues:\nHard-coded values like max_workers = 4 in Thread class\nNo configuration for timeouts\nNo proper handling of environment variables\nCommunication Flow:\nThe message passing between agents isn't properly synchronized\nNo proper handling of circular dependencies in agent communication\nNo proper handling of message ordering\nTool Execution:\nTool execution doesn't have proper timeout handling\nNo proper handling of tool execution failures\nNo proper cleanup of tool resources\nDocumentation and Logging:\nInsufficient logging for debugging\nMissing documentation for error handling\nNo clear documentation for async mode usage\nThese issues could be contributing to the problems we've been seeing with:\nTimeout issues during agent communication\nTool not found errors\nThread management problems\nState inconsistencies between runs\nWould you like me to propose specific fixes for any of these issues?\nwhat version is that\n\nLet me check the version information from the repository:\nThe version of agency-swarm in the repository is 0.4.5, which matches what we have installed in your environment. This is the latest version available on PyPI.\nLet me also check the requirements to see what dependencies it's using:\nThe key dependencies are:\nopenai >= 1.66.0, < 2.0.0\npydantic 2.8.2\npython-dotenv 1.0.1\nrich 13.7.1\nThis version (0.4.5) is the latest stable release of agency-swarm. The issues we've been seeing are not due to using an outdated version, but rather due to some of the architectural flaws I identified in the codebase. Would you like me to propose specific fixes for any of those issues?",
      "state": "closed",
      "author": "lmcdo",
      "author_type": "User",
      "created_at": "2025-04-03T06:25:45Z",
      "updated_at": "2025-05-18T09:26:13Z",
      "closed_at": "2025-05-18T02:15:54Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/260/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 1,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/260",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/260",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:31.842592",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-05-18T02:15:54Z"
        },
        {
          "author": "bonk1t",
          "body": "v1.X will be a complete rewrite. ",
          "created_at": "2025-05-18T09:26:13Z"
        }
      ]
    },
    {
      "issue_number": 244,
      "title": "RuntimeError: This event loop is already running - When Using Agency Swarm in FastAPI Application",
      "body": "Dear Agency Swarm Development Team,\n\nI'm encountering a technical challenge with our FastAPI implementation that I'd like to discuss.\n\n## Environment\n- Agency Swarm version: 0.4.4\n- Python version: 3.12.1\n- FastAPI version: 0.115.8\n- OS: Linux (server environment)\n\n## Problem Description\nWe're experiencing a consistent `RuntimeError: This event loop is already running` when our FastAPI application attempts to use `agency.get_completion()` within an asynchronous endpoint. The error specifically occurs when one agent (CommunicationAgent) tries to communicate with another agent (PlanfixAgent).\n\n## Error Stack Trace\n```\nError getting completion from agency: This event loop is already running\nTraceback (most recent call last):\n  File \"/root/Projects/agreement_management_agency/agreement_management_server.py\", line 260, in background_process_and_respond\n    response = agency.get_completion(message_content)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/agency/agency.py\", line 210, in get_completion\n    message = next(res)\n              ^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 274, in get_completion\n    output = yield from handle_output(tool_call, output)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 190, in handle_output\n    item = next(output)\n           ^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 274, in get_completion\n    output = yield from handle_output(tool_call, output)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 190, in handle_output\n    item = next(output)\n           ^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 286, in get_completion\n    tool_outputs = self._await_coroutines(tool_outputs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/Projects/agreement_management_agency/.venv/lib/python3.12/site-packages/agency_swarm/threads/thread.py\", line 695, in _await_coroutines\n    results = loop.run_until_complete(\n              ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/root/.pyenv/versions/3.12.1/lib/python3.12/asyncio/base_events.py\", line 660, in run_until_complete\n    self._check_running()\n  File \"/root/.pyenv/versions/3.12.1/lib/python3.12/asyncio/base_events.py\", line 619, in _check_running\n    raise RuntimeError('This event loop is already running')\nRuntimeError: This event loop is already running\n```\n\n## Implementation Details\nOur application structure:\n1. We have a FastAPI server with asynchronous endpoints\n2. We're using Agency Swarm to manage communication between multiple agents\n3. The error occurs in an async function `background_process_and_respond` when calling `agency.get_completion(message_content)`\n4. The FastAPI server is already running an event loop, and the `_await_coroutines` method in Agency Swarm's `Thread` class attempts to create another one\n\n## Agency Configuration\nWe have an agency with 4 agents:\n- AgreementManager (entry point)\n- PlanfixAgent\n- BrowsingAgent\n- CommunicationAgent\n\nWith communication flows:\n- AgreementManager -> PlanfixAgent\n- AgreementManager -> BrowsingAgent\n- AgreementManager -> CommunicationAgent\n- CommunicationAgent -> PlanfixAgent\n\n## Attempted Solutions\n1. We tried using a generator approach to handle the completion without starting a new event loop\n2. We attempted to use `nest_asyncio` to patch the event loop, but it didn't resolve the issue\n3. We've ensured our webhook handling and error processing are working correctly\n\n## Agent Communication Analysis\nBelow is a chronological analysis of the communication between agents when the error occurs:\n\n```\nUNIFIED CHRONOLOGICAL TIMELINE\n\nThis timeline shows all events from all threads in chronological order.\n\nSwitching to thread: thread_63yacYB801migtpIEu9Bx5RX [user -> AgreementManager]\n\n[2025-03-04 13:06:43] MESSAGE - USER (user -> AgreementManager):\n04-03-2025 14:06/task_number: 150736/Khainatsky Ivan/message:<p>Хочу написати Штефану запитання про те, чи є вже план на наступний тиждень для монтажних робіт для працівників у Штутгарді. Він знає, про що це буде йти, мова. Дякую.&nbsp;</p>\n\n[2025-03-04 13:06:45] RUN STARTED - ID: run_AsUMSJedb9ozVzencWVzs6sp (user -> AgreementManager)\nAssistant ID: asst_nDT0QShvR3nMX4nYZ825L3W4\n\nRequired Action:\nType: submit_tool_outputs\n\nTool Calls:\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"CommunicationAgent\",\n  \"my_primary_instructions\": \"Next, generate the letter text for the communication subtask created for Stefan about the installation plan for next week.\",\n  \"message\": \"Please generate a response letter for subtask ID 150737. The client wants to inquire if there's already a plan for the installation work next week for workers in Stuttgart. Mention that Stefan is already aware of the context.\",\n  \"additional_instructions\": \"The inquiry is about the installation plan for next week for workers in Stuttgart. Stefan knows about the context.\"\n}\n\nID: call_Og32VCzuzKAA0y1OyUeJyA6p\n\n[2025-03-04 13:06:49] STEP STARTED - Type: tool_calls (user -> AgreementManager)\nStep ID: step_rciCcOVD5mwtOfiKICp3vZfB\nRun ID: run_AsUMSJedb9ozVzencWVzs6sp\n\nTool Calls Details (at start):\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"PlanfixAgent\",\n  \"my_primary_instructions\": \"First, create a new communication subtask for the request to inquire about the installation plan for next week from Stefan.\",\n  \"message\": \"Please create a new subtask under task ID 150736 with the name 'Anfrage zum Montageplan f\\u00fcr n\\u00e4chste Woche f\\u00fcr Arbeiter in Stuttgart'.\",\n  \"additional_instructions\": \"This subtask is for inquiring about the installation plan for next week for workers in Stuttgart. Stefan is aware of the context.\"\n}\n\n\nSwitching to thread: thread_hTiHZ4ryIENw2BwlyepHOjP6 [AgreementManager -> PlanfixAgent]\n\n[2025-03-04 13:06:52] MESSAGE - USER (AgreementManager -> PlanfixAgent):\nPlease create a new subtask under task ID 150736 with the name 'Anfrage zum Montageplan für nächste Woche für Arbeiter in Stuttgart'.\n\n[2025-03-04 13:06:53] RUN STARTED - ID: run_NmW6cstpgpl86eWlUym0ASFK (AgreementManager -> PlanfixAgent)\nAssistant ID: asst_Awe73WXEUZAJ8oNUI5uSmtP1\n\n[2025-03-04 13:06:56] STEP STARTED - Type: tool_calls (AgreementManager -> PlanfixAgent)\nStep ID: step_nLpwRAth5eb6zMNsUWA6q4a8\nRun ID: run_NmW6cstpgpl86eWlUym0ASFK\n\nTool Calls Details (at start):\nFunction: SubtaskCreator\nArguments:\n{\n  \"parent_task_id\": 150736,\n  \"name\": \"Anfrage zum Montageplan f\\u00fcr n\\u00e4chste Woche f\\u00fcr Arbeiter in Stuttgart\"\n}\n\n\n[2025-03-04 13:07:00] STEP COMPLETED - Type: tool_calls (AgreementManager -> PlanfixAgent)\n\nFunction Call Details:\nFunction: SubtaskCreator\nArguments:\n{\n  \"parent_task_id\": 150736,\n  \"name\": \"Anfrage zum Montageplan f\\u00fcr n\\u00e4chste Woche f\\u00fcr Arbeiter in Stuttgart\"\n}\n\n\nFunction Output:\n{\n    \"success\": true,\n    \"task_id\": \"150737\",\n    \"message\": \"Communication subtask created successfully\",\n    \"parent_task_subtasks\": [\n        150737\n    ]\n}\n\n\n[2025-03-04 13:07:03] MESSAGE - ASSISTANT (AgreementManager -> PlanfixAgent):\nThe new subtask titled \"Anfrage zum Montageplan für nächste Woche für Arbeiter in Stuttgart\" has been successfully created under task ID 150736. The subtask ID is 150737.\n\n[2025-03-04 13:07:03] RUN COMPLETED - ID: run_NmW6cstpgpl86eWlUym0ASFK (AgreementManager -> PlanfixAgent)\n\n[2025-03-04 13:07:03] STEP STARTED - Type: message_creation (AgreementManager -> PlanfixAgent)\nStep ID: step_VraoZljlfi5Px1IaNRdpFyCe\nRun ID: run_NmW6cstpgpl86eWlUym0ASFK\n\n[2025-03-04 13:07:03] STEP COMPLETED - Type: message_creation (AgreementManager -> PlanfixAgent)\n\n\nSwitching to thread: thread_63yacYB801migtpIEu9Bx5RX [user -> AgreementManager]\n\n[2025-03-04 13:07:06] STEP COMPLETED - Type: tool_calls (user -> AgreementManager)\n\nFunction Call Details:\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"PlanfixAgent\",\n  \"my_primary_instructions\": \"First, create a new communication subtask for the request to inquire about the installation plan for next week from Stefan.\",\n  \"message\": \"Please create a new subtask under task ID 150736 with the name 'Anfrage zum Montageplan f\\u00fcr n\\u00e4chste Woche f\\u00fcr Arbeiter in Stuttgart'.\",\n  \"additional_instructions\": \"This subtask is for inquiring about the installation plan for next week for workers in Stuttgart. Stefan is aware of the context.\"\n}\n\n\nFunction Output:\nThe new subtask titled \"Anfrage zum Montageplan für nächste Woche für Arbeiter in Stuttgart\" has been successfully created under task ID 150736. The subtask ID is 150737.\n\n[2025-03-04 13:07:09] STEP STARTED - Type: tool_calls (user -> AgreementManager)\nStep ID: step_bG8xAgDFXwYl7is0INICXlBM\nRun ID: run_AsUMSJedb9ozVzencWVzs6sp\n\nTool Calls Details (at start):\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"CommunicationAgent\",\n  \"my_primary_instructions\": \"Next, generate the letter text for the communication subtask created for Stefan about the installation plan for next week.\",\n  \"message\": \"Please generate a response letter for subtask ID 150737. The client wants to inquire if there's already a plan for the installation work next week for workers in Stuttgart. Mention that Stefan is already aware of the context.\",\n  \"additional_instructions\": \"The inquiry is about the installation plan for next week for workers in Stuttgart. Stefan knows about the context.\"\n}\n\n\nSwitching to thread: thread_RWGIOd5hS6kuCmLnqcP8MMa2 [AgreementManager -> CommunicationAgent]\n\n[2025-03-04 13:07:12] MESSAGE - USER (AgreementManager -> CommunicationAgent):\nPlease generate a response letter for subtask ID 150737. The client wants to inquire if there's already a plan for the installation work next week for workers in Stuttgart. Mention that Stefan is already aware of the context.\n\n[2025-03-04 13:07:13] RUN STARTED - ID: run_dDV3kiABTePw8RhLo4mQCNJB (AgreementManager -> CommunicationAgent)\nAssistant ID: asst_QmdpZ9ReTYDBrMdjWJT9bEKq\n\nRequired Action:\nType: submit_tool_outputs\n\nTool Calls:\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"PlanfixAgent\",\n  \"my_primary_instructions\": \"1. Receive a task ID from the AgreementManager\\n2. Request task details from the PlanfixAgent\\n3. Analyze the contacts and existing subtasks\\n4. If a specific subtask ID is provided, request its details\\n5. If needed, request comments to understand the communication history\\n6. Generate the appropriate communication letter\\n7. Ask the PlanfixAgent to update the letter text field in the subtask\\n8. Confirm to the AgreementManager that the communication has been generated\",\n  \"message\": \"Please retrieve the details for subtask ID 150737. I need to generate a response letter regarding the client's inquiry about the installation plan for next week for workers in Stuttgart.\",\n  \"additional_instructions\": \"Focus on retrieving subtask details including any existing comments to understand the communication history. This will help in drafting a comprehensive response letter.\"\n}\n\nID: call_E8pm2fhfguISzBZeDzQXcBvv\n\n[2025-03-04 13:07:16] STEP STARTED - Type: tool_calls (AgreementManager -> CommunicationAgent)\nStep ID: step_3AhQWSki8kYiNTrXJYRtfC8k\nRun ID: run_dDV3kiABTePw8RhLo4mQCNJB\n\nTool Calls Details (at start):\nFunction: SendMessage\nArguments:\n{\n  \"recipient\": \"PlanfixAgent\",\n  \"my_primary_instructions\": \"1. Receive a task ID from the AgreementManager\\n2. Request task details from the PlanfixAgent\\n3. Analyze the contacts and existing subtasks\\n4. If a specific subtask ID is provided, request its details\\n5. If needed, request comments to understand the communication history\\n6. Generate the appropriate communication letter\\n7. Ask the PlanfixAgent to update the letter text field in the subtask\\n8. Confirm to the AgreementManager that the communication has been generated\",\n  \"message\": \"Please retrieve the details for subtask ID 150737. I need to generate a response letter regarding the client's inquiry about the installation plan for next week for workers in Stuttgart.\",\n  \"additional_instructions\": \"Focus on retrieving subtask details including any existing comments to understand the communication history. This will help in drafting a comprehensive response letter.\"\n}\n\n\nSwitching to thread: thread_fX9jCUlCyienVPsxxW0PrVUk [CommunicationAgent -> PlanfixAgent]\n\n[2025-03-04 13:07:21] MESSAGE - USER (CommunicationAgent -> PlanfixAgent):\nPlease retrieve the details for subtask ID 150737. I need to generate a response letter regarding the client's inquiry about the installation plan for next week for workers in Stuttgart.\n\n[2025-03-04 13:07:21] RUN STARTED - ID: run_Y9ZaPl5op0xv7QBFaPyIEY1h (CommunicationAgent -> PlanfixAgent)\nAssistant ID: asst_Awe73WXEUZAJ8oNUI5uSmtP1\n\nRequired Action:\nType: submit_tool_outputs\n\nTool Calls:\nFunction: getTaskDetails\nArguments:\n{\n  \"task_id\": 150737,\n  \"fields\": \"id,name,description,status,priority,dateTime,endDateTime,31040,31636,31638\"\n}\n\nID: call_cUoXW5zCidTto735o1tKanOr\n\n[2025-03-04 13:07:24] STEP STARTED - Type: tool_calls (CommunicationAgent -> PlanfixAgent)\nStep ID: step_9Ticcs0u8WF1C073vEw4TvpP\nRun ID: run_Y9ZaPl5op0xv7QBFaPyIEY1h\n\nTool Calls Details (at start):\nFunction: getTaskDetails\nArguments:\n{\n  \"task_id\": 150737,\n  \"fields\": \"id,name,description,status,priority,dateTime,endDateTime,31040,31636,31638\"\n}\n\n[2025-03-04 13:07:25] ERROR - RuntimeError: This event loop is already running\n```\n\n## Questions\n\n1. What is the recommended approach for using Agency Swarm's `get_completion()` method within an already running event loop, such as in a FastAPI application? \n\n2. Is there a way to make Agency Swarm work with FastAPI's asynchronous nature without causing event loop conflicts?\n\n3. Should we be implementing a specific pattern when calling Agency Swarm methods from within FastAPI's async endpoints?\n\nI appreciate your expertise on this matter.\n\nBest regards,\nIvan Khainatsky",
      "state": "closed",
      "author": "khainatsky",
      "author_type": "User",
      "created_at": "2025-03-04T13:18:05Z",
      "updated_at": "2025-05-04T02:15:54Z",
      "closed_at": "2025-05-04T02:15:53Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/244/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/244",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/244",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:32.090849",
      "comments": [
        {
          "author": "ArtemShatokhin",
          "body": "Hi @khainatsky, I've managed to recreate the issue, however, using nest_asyncio patch successfully resolved it. Are you sure you are applying the patch correctly? If yes, could you please take a look at my test code below to find if there are any functional differences between your setup and mine, s",
          "created_at": "2025-03-20T10:39:14Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-04-20T02:12:58Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-05-04T02:15:53Z"
        }
      ]
    },
    {
      "issue_number": 228,
      "title": "Amazon Bedrock support",
      "body": "It would be amazing to enable Amazon Bedrock support, rather than OpenAI. This would allow to access many other models including Anthropic Claude.\n\nI tried to setup Bedrock Access Gateway which essentially is an OpenAI API proxy which translates into Bedrock API calls\n\nhttps://github.com/aws-samples/bedrock-access-gateway\n\nIt requires the env variables `OPENAI_BASE_URL` and `OPENAI_API_KEY`\n\nExample query using curl against the proxy\n\n```\ncurl $OPENAI_BASE_URL/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n{\"id\":\"chatcmpl-fb7f646e\",\"created\":1738607696,\"model\":\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\"system_fingerprint\":\"fp\",\"choices\":[{\"index\":0,\"finish_reason\":\"stop\",\"logprobs\":null,\"message\":{\"role\":\"assistant\",\"content\":\"Hi! How can I help you today?\"}}],\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":9,\"completion_tokens\":12,\"total_tokens\":21}}\n```",
      "state": "closed",
      "author": "sandrich",
      "author_type": "User",
      "created_at": "2025-02-03T18:36:13Z",
      "updated_at": "2025-03-20T02:05:11Z",
      "closed_at": "2025-03-20T02:05:10Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/228/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/228",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/228",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:32.314474",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-03-06T02:04:16Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-03-20T02:05:10Z"
        }
      ]
    },
    {
      "issue_number": 204,
      "title": "Repeated Messages from OrchestratorAgent",
      "body": "**Description**:\r\nI am experiencing an issue with an `OrchestratorAgent` that inherits from Agent where it sends repeated messages to the user. This seems to occur when the agent processes responses from the OpenAI API, leading to the same output being sent multiple times.\r\n\r\n**Steps to Reproduce**:\r\n1. Initialize the `OrchestratorAgent`.\r\n2. Send a message to create a process.\r\n3. Observe the output in the logs.\r\n\r\n**Expected Behavior**:\r\nThe agent should send a single, complete response to the user without repeating the same message multiple times.\r\n\r\n**Actual Behavior**:\r\nThe agent sends the same message repeatedly, which appears to be a result of how streaming responses are handled.",
      "state": "closed",
      "author": "AMGMNPLK",
      "author_type": "User",
      "created_at": "2024-12-18T14:48:31Z",
      "updated_at": "2025-03-19T02:06:10Z",
      "closed_at": "2025-03-19T02:06:09Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/204/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/204",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/204",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:32.566023",
      "comments": [
        {
          "author": "bonk1t",
          "body": "Hey @AMGMNPLK! Thank you for reporting the issue. Could you send us your code, Python version, framework version, the model you’re using, and any additional information that might help us reproduce the issue?",
          "created_at": "2024-12-18T17:47:04Z"
        },
        {
          "author": "AMGMNPLK",
          "body": "\r\n\r\n\r\n\r\n# Versions\r\nPython.                         3.11.9\r\nagency-swarm             0.4.2\r\nopenai                           1.56.2\r\nModels: gpt-4o-mini and gpt-4o\r\n\r\n# Steps to reproduce\r\nI you ask something that can take some lines, the terminal \r\n\r\n# Main code\r\n```\r\nclass OrchestratorMessageSchem",
          "created_at": "2024-12-18T21:54:02Z"
        },
        {
          "author": "bonk1t",
          "body": "@AMGMNPLK Thank for providing the code. Your code appears to be non-standard, which might be causing the issue. Have you tried using our [Cursor Rules](https://github.com/VRSEN/agency-swarm/blob/main/.cursorrules) with Cursor IDE (or just any advanced LLM) or following the examples in [the Documenta",
          "created_at": "2024-12-19T01:02:05Z"
        },
        {
          "author": "AMGMNPLK",
          "body": "Yes, I'm working with .cursorrules. Knowing this I'll try to fix it asking it to keep attached to them.",
          "created_at": "2024-12-20T02:56:21Z"
        },
        {
          "author": "AMGMNPLK",
          "body": "It still happens, even creating a new OrchestratorAgent from zero. I tried to use other terminal/shell, with no success.",
          "created_at": "2024-12-25T10:34:55Z"
        }
      ]
    },
    {
      "issue_number": 182,
      "title": "Azure integration error when try to make an Agency: BadRequestError: Unsupported data type",
      "body": "I got an error when I try to run with gpt4o (Azure) with the last version !pip install -U agency-swarm==0.3.1\r\nThe conection with llm is tested and worked well but the problem is when I tried to make the Agency, please help me\r\n\r\n## Mi code:\r\n------------------------------\r\nfrom openai import AzureOpenAI\r\nfrom agency_swarm import set_openai_client\r\nimport os\r\n\r\nos.environ[\"AZURE_OPENAI_KEY\"] = \"...\"\r\nos.environ[\"AZURE_ENDPOINT\"] = \"https://wafer-m1tixc2n-eastus2.openai.azure.com/openai/deployments/gpt-4o/chat/completions?api-version=2024-08-01-preview\" \r\n\r\nclient = AzureOpenAI(\r\n    api_key=os.getenv(\"AZURE_OPENAI_KEY\"),\r\n    api_version=\"2024-08-01-preview\",\r\n    azure_endpoint=os.getenv(\"AZURE_ENDPOINT\"),\r\n    timeout=5,\r\n    max_retries=5,\r\n)\r\nset_openai_client(client)\r\nfrom agency_swarm import Agent\r\nceo = Agent(name=\"ceo\")\r\nfrom agency_swarm import Agency\r\nagency = Agency([ceo])\r\nagency.run_demo()\r\n\r\n----------------------------\r\n## the error\r\n\r\nBadRequestError                           Traceback (most recent call last)\r\n[<ipython-input-4-45e61d03a8f6>](https://localhost:8080/#) in <cell line: 5>()\r\n      3 ceo = Agent(name=\"ceo\")\r\n      4 from agency_swarm import Agency\r\n----> 5 agency = Agency([ceo])\r\n      6 agency.run_demo()\r\n\r\n6 frames\r\n[/usr/local/lib/python3.10/dist-packages/openai/_base_client.py](https://localhost:8080/#) in _request(self, cast_to, options, retries_taken, stream, stream_cls)\r\n   1056 \r\n   1057             log.debug(\"Re-raising status error\")\r\n-> 1058             raise self._make_status_error_from_response(err.response) from None\r\n   1059 \r\n   1060         return self._process_response(\r\n\r\nBadRequestError: Unsupported data type\r\n\r\n",
      "state": "closed",
      "author": "arcossci",
      "author_type": "User",
      "created_at": "2024-11-04T20:42:21Z",
      "updated_at": "2025-03-04T09:54:12Z",
      "closed_at": "2024-12-20T02:01:59Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/182/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/182",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/182",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:32.795985",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-12-05T02:08:35Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-12-20T02:01:59Z"
        },
        {
          "author": "kauttoj",
          "body": "For Azure, the endpoint url must only contain the base, i.e., in this case\nazure_endpoint=\"https://wafer-m1tixc2n-eastus2.openai.azure.com\"\nThe actual model is defined when creating the agent. You can see all created agents in your Azure platform.",
          "created_at": "2025-03-04T09:54:11Z"
        }
      ]
    },
    {
      "issue_number": 215,
      "title": "Genesis rate limit",
      "body": "First of all, thank you for developing such an amazing framework. I am just learning how to build agents and your tools have saved me a ton of time.\r\n\r\nI have been trying to uses Genesis for creating an agency, and it seems to work like a charm. However, after some time it fails due to the OpenAI rate limit of 30000 TPM.\r\n\r\nWould it make sense to implement a throttling feature to prevent this, or is there another trick?",
      "state": "closed",
      "author": "ErikHougaard",
      "author_type": "User",
      "created_at": "2025-01-10T18:39:18Z",
      "updated_at": "2025-03-03T02:05:09Z",
      "closed_at": "2025-03-03T02:05:08Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/215/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/215",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/215",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:33.001010",
      "comments": [
        {
          "author": "achimstruve",
          "body": "I faced the same issue and am running into that token limit problem quite often with swarm agency.",
          "created_at": "2025-01-10T21:24:01Z"
        },
        {
          "author": "ArtemShatokhin",
          "body": "Hey @ErikHougaard,\nYou can create your own version of genesis agency and set custom token limits for it like so:\n```python\nfrom agency_swarm.agency.genesis import GenesisAgency\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nagency = GenesisAgency(with_browsing=False,\n    max_prompt_tokens=10000,\n  ",
          "created_at": "2025-01-17T16:50:55Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-02-17T02:03:10Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-03-03T02:05:08Z"
        }
      ]
    },
    {
      "issue_number": 211,
      "title": "Problem with Accessing output of one tool to other",
      "body": "Hi all, \r\nI need you guidance, I have an agent that perform vector search and consist of various tools, What i want to achieve is that i want to access of output of one tool to another tool. There is option of using shared state but this can be tricky in case there is multiple instance of tool running.\r\nThanks,\r\nAny help would be highly appreciated.",
      "state": "closed",
      "author": "kapil-huma",
      "author_type": "User",
      "created_at": "2025-01-08T12:30:42Z",
      "updated_at": "2025-03-03T02:05:09Z",
      "closed_at": "2025-03-03T02:05:09Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/211/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/211",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/211",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:33.219438",
      "comments": [
        {
          "author": "ArtemShatokhin",
          "body": "Hi @kapil-huma, \nIf I got your idea right, you are asking agent to launch multiple copies of the same tool simultaneously and then pass their results into another tool.\nI don't know your exact layout, but you might find this approach useful:\n1. You can define a unique id for every tool call so you c",
          "created_at": "2025-01-17T16:24:15Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-02-17T02:03:11Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-03-03T02:05:09Z"
        }
      ]
    },
    {
      "issue_number": 150,
      "title": "Genesis stuck in ToolCreator loop",
      "body": "Have just had a loop upon loop with user input experience. \r\n\r\nGenesis creating a tool before experiencing no change to its approach and repeating the same over and over infinitum. It never actually works out its issue and just keeps saying it has tried a different approach (which is always the same exact approach that doesn't function).\r\n\r\n`\r\nPlease make sure to now test this tool if possible.\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"BrandStrategist\",\"chain_of_thought\":\"To re-test the InterviewTool, I will provide mock inputs for the client's name and interview questions. The tool should simulate asking the\r\nquestions and storing the responses, using a local dictionary to simulate the shared_state for testing purposes.\",\"tool_name\":\"InterviewTool\",\"arguments\":\"{\\\"client_name\\\":\\\"John\r\nDoe\\\",\\\"interview_questions\\\":[\\\"What is your unique value proposition?\\\",\\\"What are your personal brand aspirations?\\\"]}\"}', name='TestTool', output=None)\r\nWhat is your unique value proposition? I provide value\r\nWhat are your personal brand aspirations? To have a working example\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nTestTool ⚙️ Function Output\r\nError: Error running tool InterviewTool: 'NoneType' object has no attribute 'set'\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems the issue persists. The error indicates that the shared_state is still not being handled correctly. To resolve this, I'll ensure that the shared_state is properly managed within the tool's context.\r\n\r\n                                                                           Step 5: Modify InterviewTool to Handle Shared State Correctly\r\n\r\nI'll update the InterviewTool to ensure it uses a local dictionary to simulate the shared_state for testing purposes.\r\n\r\n                                                                                      Updated Requirements for InterviewTool:\r\n\r\n • Conduct in-depth client interviews to gather information about their unique value propositions and personal brand aspirations.\r\n • Store and organize the interview data for further analysis.\r\n • Use a local dictionary to simulate the shared_state for testing purposes.\r\n\r\nLet's proceed with modifying the tool.\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"BrandStrategist\",\"tool_name\":\"InterviewTool\",\"requirements\":\"This tool will conduct in-depth client interviews to gather information about their unique value propositions and\r\npersonal brand aspirations. It should be able to store and organize the interview data for further analysis. Use a local dictionary to simulate the shared_state for testing purposes.\",\"mode\":\"modify\"}',\r\nname='CreateTool', output=None)\r\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nCertainly! Below is the revised InterviewTool class that meets the specified requirements and uses a local dictionary to simulate the shared_state for testing purposes:\r\n\r\n\r\n from agency_swarm.tools import BaseTool\r\n from pydantic import Field\r\n from typing import List, Dict\r\n\r\n class InterviewTool(BaseTool):\r\n     \"\"\"\r\n     This tool will conduct in-depth client interviews to gather information about their unique value propositions and personal brand aspirations.\r\n     It should be able to store and organize the interview data for further analysis.\r\n     \"\"\"\r\n\r\n     client_name: str = Field(\r\n         ..., description=\"The name of the client being interviewed.\"\r\n     )\r\n     interview_questions: List[str] = Field(\r\n         ..., description=\"A list of questions to ask the client during the interview.\"\r\n     )\r\n     interview_responses: Dict[str, str] = Field(\r\n         default_factory=dict, description=\"A dictionary to store the client's responses to the interview questions.\"\r\n     )\r\n\r\n     # Simulate shared_state with a local dictionary\r\n     shared_state: Dict[str, Dict] = {}\r\n\r\n     def run(self):\r\n         \"\"\"\r\n         Conducts the interview by asking each question and storing the responses.\r\n         \"\"\"\r\n         for question in self.interview_questions:\r\n             # Simulate asking the question and getting a response\r\n             response = input(f\"{question} \")\r\n             self.interview_responses[question] = response\r\n\r\n         # Organize the interview data for further analysis\r\n         organized_data = {\r\n             \"client_name\": self.client_name,\r\n             \"responses\": self.interview_responses\r\n         }\r\n\r\n         # Store the organized data in the shared state for further analysis\r\n         self.shared_state[f\"{self.client_name}_interview_data\"] = organized_data\r\n\r\n         return f\"Interview with {self.client_name} completed and data stored.\"\r\n\r\n # Example usage:\r\n # tool = InterviewTool(client_name=\"John Doe\", interview_questions=[\"What is your unique value proposition?\", \"What are your personal brand aspirations?\"])\r\n # tool.run()\r\n\r\n\r\nIn this version, the shared_state is simulated using a local dictionary within the InterviewTool class. This allows for testing the tool's functionality without relying on an external shared state mechanism. The\r\ninterview data is stored in this local dictionary for further analysis.\r\n\r\nPlease make sure to now test this tool if possible.\r\n`",
      "state": "closed",
      "author": "phuzzled",
      "author_type": "User",
      "created_at": "2024-06-19T09:13:53Z",
      "updated_at": "2025-02-26T02:02:59Z",
      "closed_at": "2025-02-26T02:02:59Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/150/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/150",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/150",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:33.470468",
      "comments": [
        {
          "author": "phuzzled",
          "body": "![image](https://github.com/VRSEN/agency-swarm/assets/167837094/4f8c5569-e64e-4a40-a755-da2cfd274d4e)\r\n",
          "created_at": "2024-06-19T09:46:21Z"
        },
        {
          "author": "phuzzled",
          "body": "![image](https://github.com/VRSEN/agency-swarm/assets/167837094/f648c266-ec4c-4dd2-a684-51d5629e8aca)\r\n",
          "created_at": "2024-06-19T09:47:09Z"
        },
        {
          "author": "VRSEN",
          "body": "I've had this issue a couple times even with more basic agents. I think it might be related to OpenAI API having issues from time to time, but I can add a response validator to prevent this in genesis",
          "created_at": "2024-06-27T08:57:44Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-07-28T01:56:51Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-08-11T01:58:36Z"
        }
      ]
    },
    {
      "issue_number": 207,
      "title": "Windsurf integration",
      "body": "The new feature to program with agent and the .cursorrules is amazing. I was wondering if it is in the roadmap to make the same for Windsurf. It is a very promising IDE, many people say it's better than Cursor.\r\n\r\nI'll have a look to this IDE, maybe just copypasting the .cursorrules is enough. I don't know yet.",
      "state": "closed",
      "author": "AMGMNPLK",
      "author_type": "User",
      "created_at": "2024-12-29T11:59:56Z",
      "updated_at": "2025-02-19T11:28:51Z",
      "closed_at": "2025-02-19T11:25:42Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/207/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/207",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/207",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:33.680220",
      "comments": [
        {
          "author": "dabrodev",
          "body": "+1 for this since we now have Windsurf Wave 2.",
          "created_at": "2025-01-19T19:24:22Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-02-19T02:01:44Z"
        },
        {
          "author": "bonk1t",
          "body": "As we don't use Windsurf internally, I can't provide exact timelines for the integration. However, we encourage you to contribute by creating a PR according to our [Contribution Guide](https://agency-swarm.ai/contributing/contributing)",
          "created_at": "2025-02-19T11:25:42Z"
        }
      ]
    },
    {
      "issue_number": 194,
      "title": "Refactor MessageHandler and follow Clean Architecture, SOLID and DDD principles",
      "body": "**Current Situation:**\r\nThe MessageHandler tool is currently duplicated across multiple agent folders, violating DRY and SOLID principles and making maintenance difficult. Reference: `tools/message_handler.py` in each agent's directory.\r\n\r\n**Problem:**\r\n1. Code duplication across agents\r\n2. Potential inconsistencies in message handling\r\n3. Difficult maintenance when updates are needed\r\n4. Violation of Single Responsibility Principle\r\n\r\n**Proposed Solution:**\r\nBased on the Agency Swarm framework structure, here's how I would reorganize it to better follow DDD, SOLID, TDD, and Clean Code principles:\r\n\r\n```\r\nagency_name/\r\n├── domain/\r\n│   ├── entities/\r\n│   │   ├── agent.py\r\n│   │   └── tool.py\r\n│   ├── value_objects/\r\n│   │   └── agent_config.py\r\n│   ├── repositories/\r\n│   │   ├── agent_repository.py\r\n│   │   └── tool_repository.py\r\n│   └── services/\r\n│       └── communication_service.py\r\n│\r\n├── application/\r\n│   ├── agents/\r\n│   │   ├── ceo/\r\n│   │   │   ├── __init__.py\r\n│   │   │   ├── ceo_agent.py\r\n│   │   │   ├── instructions.md\r\n│   │   │   └── tools/\r\n│   │   └── developer/\r\n│   │       ├── __init__.py\r\n│   │       ├── developer_agent.py\r\n│   │       ├── instructions.md\r\n│   │       └── tools/\r\n│   └── use_cases/\r\n│       ├── create_agent.py\r\n│       └── send_message.py\r\n│\r\n├── infrastructure/\r\n│   ├── persistence/\r\n│   │   └── settings_repository.py\r\n│   ├── external_services/\r\n│   │   └── openai_service.py\r\n│   └── logging/\r\n│       └── logger.py\r\n│\r\n├── interfaces/\r\n│   ├── api/\r\n│   │   └── rest_controller.py\r\n│   └── cli/\r\n│       └── command_line.py\r\n│\r\n├── tests/\r\n│   ├── unit/\r\n│   │   ├── domain/\r\n│   │   ├── application/\r\n│   │   └── infrastructure/\r\n│   ├── integration/\r\n│   └── e2e/\r\n│\r\n├── agency.py\r\n├── agency_manifesto.md\r\n├── requirements.txt\r\n└── .env\r\n```\r\n\r\nKey improvements:\r\n\r\n1. **Domain Layer**:\r\n   - Separates core business logic into entities, value objects, and domain services\r\n   - Makes the agent and tool concepts first-class citizens in the domain\r\n   - Follows Single Responsibility Principle with clear separation of concerns\r\n\r\n2. **Application Layer**:\r\n   - Contains use cases and orchestration logic\r\n   - Maintains agent-specific implementations while adhering to domain interfaces\r\n   - Follows Interface Segregation Principle with focused use cases\r\n\r\n3. **Infrastructure Layer**:\r\n   - Handles external concerns like persistence and third-party services\r\n   - Implements repository interfaces defined in the domain\r\n   - Follows Dependency Inversion Principle\r\n\r\n4. **Interface Layer**:\r\n   - Provides different ways to interact with the system\r\n   - Separates presentation concerns from business logic\r\n   - Follows Open/Closed Principle for adding new interfaces\r\n\r\n5. **Tests**:\r\n   - Organized by test type (unit, integration, e2e)\r\n   - Mirrors the main project structure\r\n   - Supports Test-Driven Development\r\n\r\n6. **Clean Code Principles**:\r\n   - Clear folder structure with meaningful names\r\n   - Single responsibility for each module\r\n   - Easy to navigate and understand\r\n\r\n\r\nThis structure would require some refactoring of the existing code, but would provide:\r\n- Better separation of concerns\r\n- Easier testing\r\n- More maintainable codebase\r\n- Clearer dependencies\r\n- Better scalability\r\n\r\n**Benefits:**\r\n1. Single source of truth for message handling\r\n2. Clear separation of concerns\r\n3. Easier testing and maintenance\r\n4. Better dependency management\r\n5. Consistent message handling across all agents\r\n\r\n**Implementation Notes:**\r\n1. Move core message handling logic to domain layer\r\n2. Create proper interfaces for dependency inversion\r\n3. Implement repository pattern for message storage\r\n4. Update agent tools to use the centralized message service\r\n5. Add proper unit tests for each layer\r\n\r\n**Breaking Changes:**\r\n- Will require updating import paths in all agents\r\n- Need to migrate existing message handling logic\r\n\r\nLabels: enhancement, architecture, clean-code",
      "state": "closed",
      "author": "golpeandopelotas",
      "author_type": "User",
      "created_at": "2024-12-01T14:55:45Z",
      "updated_at": "2025-01-16T01:59:17Z",
      "closed_at": "2025-01-16T01:59:16Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/194/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/194",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/194",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:33.878764",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2025-01-01T02:06:45Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2025-01-16T01:59:16Z"
        }
      ]
    },
    {
      "issue_number": 161,
      "title": "Fails to read/access files(csv, pdf, etc...)",
      "body": "<img width=\"1280\" alt=\"Screenshot 2024-07-25 at 10 59 09 PM\" src=\"https://github.com/user-attachments/assets/d1b33705-8373-40a4-a87f-a7a8fa11d546\">\r\n\r\nAgency Swarm is great! But it's quite frustrating sometimes that it fails to access the uploaded files from the storage, although it has the correct filepath's name that passed to custom tools to read/access but it fails to find the file by the custom tool. Instead of developing your own tool, if you just upload the file from the Gradio UI and just run it using Code Interpreter it works pretty well.",
      "state": "closed",
      "author": "Ruhul-Quddus-Tamim",
      "author_type": "User",
      "created_at": "2024-07-25T17:05:32Z",
      "updated_at": "2025-01-15T17:59:17Z",
      "closed_at": "2024-09-05T16:14:13Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/161/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/161",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/161",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:34.095912",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-08-25T01:59:00Z"
        },
        {
          "author": "bonk1t",
          "body": "Hi @Ruhul-Quddus-Tamim,\r\n\r\nThank you for raising this issue!\r\n\r\nThe reason you're able to use Code Interpreter successfully is that the files you upload through the Gradio UI are sent to OpenAI servers, allowing remote access. To enable local tools to use uploaded files, you can modify the `Agency` ",
          "created_at": "2024-09-05T15:07:32Z"
        },
        {
          "author": "Ruhul-Quddus-Tamim",
          "body": "Thanks @bonk1t ! \r\nThat helps alot",
          "created_at": "2024-09-05T16:14:13Z"
        },
        {
          "author": "CyberZod",
          "body": "> Hi @Ruhul-Quddus-Tamim,\r\n> \r\n> Thank you for raising this issue!\r\n> \r\n> The reason you're able to use Code Interpreter successfully is that the files you upload through the Gradio UI are sent to OpenAI servers, allowing remote access. To enable local tools to use uploaded files, you can modify the",
          "created_at": "2025-01-09T12:29:20Z"
        },
        {
          "author": "ArtemShatokhin",
          "body": "Hi @CyberZod, \r\nFirstly, make sure you're still accessing it from the localhost:8000 or 127.0.0.1:8000. `0.0.0.0` is a special address that allows access accross different network interfaces. I.e. when launching uvicorn at 0.0.0.0, you'll be able to use localhost, your LAN IP, public IP, etc. to acc",
          "created_at": "2025-01-15T17:59:15Z"
        }
      ]
    },
    {
      "issue_number": 162,
      "title": "genesis facing token limit for usage tier 1 openai accounts - suggesting having configurable model setting",
      "body": "for newly created openai accounts, the usage tier for gpt-4o is 30K TPM, which Genesis usually exceeds during new agencies creation process.\r\nmy hot fix was to switch to gpt-4o-mini by editing the model parameter in the framework's agent.py file.\r\nI think it would be a nice addition to have the model as a configurable agency parameter (for both Genesis and all other agencies)\r\n(+changing to mini could help one reduce testing and experimenting costs..)",
      "state": "closed",
      "author": "ofir-barkay",
      "author_type": "User",
      "created_at": "2024-07-29T14:39:47Z",
      "updated_at": "2024-12-13T02:09:18Z",
      "closed_at": "2024-12-13T02:09:18Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/162/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/162",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/162",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:36.373736",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-08-29T01:57:11Z"
        },
        {
          "author": "Cass0wary",
          "body": "+1 would be nice if agent-swarm could catch the `Rate limit reached` error and pause for `x` number of seconds before trying again instead of terminating. \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/username/Documents/AIAgents/venv/bin/agency-swarm\", line 8, in <module>\r\n    sys.exit",
          "created_at": "2024-09-02T02:01:44Z"
        },
        {
          "author": "phact",
          "body": "Addressed by https://github.com/VRSEN/agency-swarm/pull/173",
          "created_at": "2024-09-26T06:47:08Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-10-27T02:05:44Z"
        },
        {
          "author": "desperad0s",
          "body": "This is still an issue. Very discouraging for new users, after spending many hours refining my prompt and having a conversation with Genesis, and it then bouncing and failing due to rate-limit and never being able to pickup again and every time retrying, running into the same issues again.\r\n\r\nI will",
          "created_at": "2024-10-29T15:24:42Z"
        }
      ]
    },
    {
      "issue_number": 181,
      "title": "BUG: Infinite loop made by the Genesis Agency",
      "body": "I believe this is an infinite loop.\r\n\r\nSee the logs below:\r\n\r\n```bash\r\n👤 USER: I want to create an agency that can help me to solve any problem by digesting my input, breaking down tasks, and spawning tailored agents that can handle those tasks \r\nTHREAD:[ user -> GenesisCEO ]: URL https://platform.openai.com/playground/assistants?assistant=asst_i6A7P8Za87J0fpRC0SshsmBs&mode=assistant&thread=thread_gJt3Kg6R16fpYp1kZdLybOZz\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐹 GenesisCEO 🗣️ @User\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n 2 TaskAnalyzer Agent                                                                                                                                                         \r\n    • Role: Analyzes user input to break down complex problems into smaller, manageable tasks.                                                                                \r\n    • Tools/APIs: Natural Language Processing (NLP) tools to understand and analyze user input.                                                                               \r\n 3 AgentSpawner Agent                                                                                                                                                         \r\n    • Role: Creates new agents tailored to handle specific tasks as identified by the TaskAnalyzer.                                                                           \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n 2 TaskAnalyzer Agent                                                                                                                                                         \r\n    • Role: Analyzes user input to break down complex problems into smaller, manageable tasks.                                                                                \r\n    • Tools/APIs: Natural Language Processing (NLP) tools to understand and analyze user input.                                                                               \r\n 3 AgentSpawner Agent                                                                                                                                                         \r\n    • Role: Creates new agents tailored to handle specific tasks as identified by the TaskAnalyzer.                                                                           \r\n    • Tools/APIs: Access to the AgentCreator to spawn new agents.                                                                                                             \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n 2 TaskAnalyzer Agent                                                                                                                                                         \r\n    • Role: Analyzes user input to break down complex problems into smaller, manageable tasks.                                                                                \r\n    • Tools/APIs: Natural Language Processing (NLP) tools to understand and analyze user input.                                                                               \r\n 3 AgentSpawner Agent                                                                                                                                                         \r\n    • Role: Creates new agents tailored to handle specific tasks as identified by the TaskAnalyzer.                                                                           \r\n    • Tools/APIs: Access to the AgentCreator to spawn new agents.                                                                                                             \r\n\r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n 2 TaskAnalyzer Agent                                                                                                                                                         \r\n    • Role: Analyzes user input to break down complex problems into smaller, manageable tasks.                                                                                \r\n    • Tools/APIs: Natural Language Processing (NLP) tools to understand and analyze user input.                                                                               \r\n 3 AgentSpawner Agent                                                                                                                                                         \r\n    • Role: Creates new agents tailored to handle specific tasks as identified by the TaskAnalyzer.                                                                           \r\n    • Tools/APIs: Access to the AgentCreator to spawn new agents.                                                                                                             \r\n\r\n                                                                             Communication Flows                                                                              \r\n\r\n                                                                                                                                                                              \r\n🐹 GenesisCEO 🗣️ @User\r\nTo create an agency that can help you solve any problem by digesting your input, breaking down tasks, and spawning tailored agents, we need to define the structure and roles \r\nof the initial agents. Here's a proposed structure:                                                                                                                           \r\n\r\n                                                                                 Agency Name                                                                                  \r\n\r\n • ProblemSolverAgency                                                                                                                                                        \r\n\r\n                                                                                Agency Mission                                                                                \r\n\r\n • The mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle    \r\n   each task efficiently.                                                                                                                                                     \r\n\r\n                                                                          Proposed Initial Structure                                                                          \r\n\r\n 1 CEO Agent (ProblemSolverCEO)                                                                                                                                               \r\n    • Role: Oversees the entire agency, communicates with the user, and coordinates with other agents to ensure tasks are completed.                                          \r\n    • Tools/APIs: None initially, but can request additional tools as needed.                                                                                                 \r\n 2 TaskAnalyzer Agent                                                                                                                                                         \r\n    • Role: Analyzes user input to break down complex problems into smaller, manageable tasks.                                                                                \r\n    • Tools/APIs: Natural Language Processing (NLP) tools to understand and analyze user input.                                                                               \r\n 3 AgentSpawner Agent                                                                                                                                                         \r\n    • Role: Creates new agents tailored to handle specific tasks as identified by the TaskAnalyzer.                                                                           \r\n    • Tools/APIs: Access to the AgentCreator to spawn new agents.                                                                                                             \r\n\r\n                                                                             Communication Flows                                                                              \r\n\r\n                                                                                                                                                                              \r\n agency = Agency([                                                                                                                                                            \r\n     ceo,  # ProblemSolverCEO will be the entry point for communication with the user                                                                                         \r\n     [ceo, task_analyzer],  # CEO can initiate communication with TaskAnalyzer                                                                                                \r\n     [task_analyzer, agent_spawner],  # TaskAnalyzer can initiate communication with AgentSpawner                                                                             \r\n ])                                                                                                                                                                           \r\n                                                                                                                                                                              \r\n\r\n                                                                                  Next Steps                                                                                  \r\n\r\n 1 Confirm the agency structure and roles with you.                                                                                                                           \r\n 2 Create the agency folder and manifesto.                                                                                                                                    \r\n 3 Instruct the AgentCreator to create each agent one by one, starting with the CEO.                                                                                          \r\n 4 Finalize the agency structure.                                                                                                                                             \r\n\r\nPlease let me know if you have any modifications or if you'd like to proceed with this plan.                                                                                  \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n👤 USER: Good\r\nTHREAD:[ user -> GenesisCEO ]: URL https://platform.openai.com/playground/assistants?assistant=asst_i6A7P8Za87J0fpRC0SshsmBs&mode=assistant&thread=thread_gJt3Kg6R16fpYp1kZdLybOZz\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐹 GenesisCEO 🛠️ Executing Function\r\nFunction(arguments='{\"agency_name\":\"ProblemSolverAgency\",\"agency_chart\":\"[ceo, [ceo, task_analyzer], [task_analyzer, agent_spawner]]\",\"manifesto\":\"The mission of the         \r\nProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle each task efficiently.   \r\nThe agency will operate in an environment where communication between agents is seamless and each agent is empowered to perform its role effectively. The ultimate goal is to \r\nprovide users with efficient solutions to their problems by leveraging the power of autonomous agents.\"}', name='CreateAgencyFolder', output=None)                            \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateAgencyFolder ⚙️ Function Output\r\nAgency folder has been created. You can now tell AgentCreator to create agents for ProblemSolverAgency.                                                                       \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐹 GenesisCEO 🛠️ Executing Function\r\nFunction(arguments='{\"my_primary_instructions\":\"1. Confirm the agency structure and roles with the user. (Completed) 2. Create the agency folder and manifesto. (Completed) 3.\r\nInstruct the AgentCreator to create each agent one by one, starting with the CEO. 4. Finalize the agency structure.\",\"recipient\":\"AgentCreator\",\"message\":\"Please create the  \r\nCEO agent for the ProblemSolverAgency. The agent should be named ProblemSolverCEO. It will oversee the entire agency, communicate with the user, and coordinate with other    \r\nagents to ensure tasks are completed. Initially, it does not require any specific tools or APIs, but it can request additional tools as                                       \r\nneeded.\",\"additional_instructions\":null}', name='SendMessage', output=None)                                                                                                   \r\nTHREAD:[ GenesisCEO -> AgentCreator ]: URL https://platform.openai.com/playground/assistants?assistant=asst_yVWKHiptS3GsZPZQLmjBstnY&mode=assistant&thread=thread_cfVtUT6PbRI74ZEC0Ho3mfMg\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agency_name\":\"ProblemSolverAgency\"}', name='ReadManifesto', output=None)                                                                                \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nReadManifesto ⚙️ Function Output\r\nThe mission of the ProblemSolverAgency is to autonomously digest user input, break down complex problems into manageable tasks, and create specialized agents to handle each  \r\ntask efficiently. The agency will operate in an environment where communication between agents is seamless and each agent is empowered to perform its role effectively. The   \r\nultimate goal is to provide users with efficient solutions to their problems by leveraging the power of autonomous agents.                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"ProblemSolverCEO\",\"agent_description\":\"The ProblemSolverCEO oversees the entire ProblemSolverAgency, communicates with the user, and       \r\ncoordinates with other agents to ensure tasks are completed. It can request additional tools as needed.\",\"instructions\":\"# ProblemSolverCEO Agent Instructions\\n\\nYou are the \r\nCEO agent of the ProblemSolverAgency. Your primary role is to oversee the entire agency, communicate with the user, and coordinate with other agents to ensure tasks are      \r\ncompleted efficiently.\\n\\n### Primary Instructions:\\n1. Receive and interpret user input to understand the problem or task at hand.\\n2. Break down complex problems into      \r\nmanageable tasks and assign them to the appropriate agents within the agency.\\n3. Monitor the progress of each agent and ensure that tasks are being completed in a timely    \r\nmanner.\\n4. Communicate with the user to provide updates on the progress of their tasks and gather any additional information needed.\\n5. Request additional tools or         \r\nresources for agents if needed to complete their tasks.\\n6. Ensure seamless communication and collaboration between agents to achieve the common goal of the agency.\\n7.      \r\nReport back to the user with the final solution or outcome once all tasks are completed.\",\"agency_name\":\"ProblemSolverAgency\"}', name='CreateAgentTemplate', output=None)     \r\nAgent folder created successfully.\r\nImport it with: from ProblemSolverCEO import ProblemSolverCEO\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateAgentTemplate ⚙️ Function Output\r\nYou can tell the user that the process of creating ProblemSolverCEO has been completed, because CEO agent does not need to utilizie any tools or APIs.                        \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🗣️ @GenesisCEO\r\nThe ProblemSolverCEO agent has been successfully created for the ProblemSolverAgency. It will oversee the entire agency, communicate with the user, and coordinate with other \r\nagents to ensure tasks are completed efficiently. If you need any further assistance or modifications, feel free to let me know!                                              \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐹 GenesisCEO 🛠️ Executing Function\r\nFunction(arguments='{\"my_primary_instructions\":\"1. Confirm the agency structure and roles with the user. (Completed) 2. Create the agency folder and manifesto. (Completed) 3.\r\nInstruct the AgentCreator to create each agent one by one, starting with the CEO. 4. Finalize the agency structure.\",\"recipient\":\"AgentCreator\",\"message\":\"Please create the  \r\nTaskAnalyzer agent for the ProblemSolverAgency. This agent will analyze user input to break down complex problems into smaller, manageable tasks. It should have access to    \r\nNatural Language Processing (NLP) tools to understand and analyze user input.\",\"additional_instructions\":null}', name='SendMessage', output=None)                             \r\nTHREAD:[ GenesisCEO -> AgentCreator ]: URL https://platform.openai.com/playground/assistants?assistant=asst_yVWKHiptS3GsZPZQLmjBstnY&mode=assistant&thread=thread_cfVtUT6PbRI74ZEC0Ho3mfMg\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\": \"TaskAnalyzer\", \"agent_description\": \"The TaskAnalyzer agent analyzes user input to break down complex problems into smaller, manageable   \r\ntasks. It utilizes NLP tools to understand and analyze user input.\", \"instructions\": \"# TaskAnalyzer Agent Instructions\\n\\nYou are an agent responsible for analyzing user    \r\ninput to break down complex problems into smaller, manageable tasks. You utilize Natural Language Processing (NLP) tools to understand and analyze user input                 \r\neffectively.\\n\\n### Primary Instructions:\\n1. Receive user input and apply NLP techniques to comprehend the context and details of the problem.\\n2. Identify key components   \r\nand objectives within the user input that need to be addressed.\\n3. Break down the complex problem into smaller, manageable tasks that can be assigned to specialized         \r\nagents.\\n4. Communicate the breakdown of tasks to the ProblemSolverCEO for further delegation.\\n5. Continuously improve your analysis techniques by learning from previous    \r\ntasks and feedback.\\n6. Collaborate with other agents to ensure the tasks are aligned with the overall goals of the ProblemSolverAgency.\", \"default_tools\":                   \r\n[\"CodeInterpreter\"], \"agency_name\": \"ProblemSolverAgency\"}', name='CreateAgentTemplate', output=None)                                                                         \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🛠️ Executing Function\r\nFunction(arguments='{\"my_primary_instructions\": \"1. Read the manifesto if not done already.\\n2. Create agent templates as instructed by the user.\\n3. Communicate with        \r\nToolCreator agent to create necessary tools for the agents.\\n4. Notify the user once the agent is created.\\n5. Repeat the process for each agent as instructed by the user.\", \r\n\"recipient\": \"ToolCreator\", \"message\": \"Please create NLP tools for the TaskAnalyzer agent to enable it to understand and analyze user input effectively.\",                   \r\n\"additional_instructions\": \"The TaskAnalyzer agent will analyze user input to break down complex problems into smaller, manageable tasks. It should have access to Natural    \r\nLanguage Processing (NLP) tools to perform its tasks efficiently.\"}', name='SendMessage', output=None)                                                                        \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐻 AgentCreator 🗣️ @ToolCreator\r\nPlease create NLP tools for the TaskAnalyzer agent to enable it to understand and analyze user input effectively.                                                             \r\nTHREAD:[ AgentCreator -> ToolCreator ]: URL https://platform.openai.com/playground/assistants?assistant=asst_rGz8m86nqWem4mebBCuOQ4br&mode=assistant&thread=thread_XaB0rLKSS8GpYOp5wJsyW7m0\r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\"}', name='CreateTool', output=None)                                               \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: 'TaskAnalyzer'                                                                                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is an issue with the TaskAnalyzer agent's directory. I will attempt to create the tool again.                                                                  \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"AgencySwarm\"}', name='CreateTool', output=None)                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './AgencySwarm'                                                                                                                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is an issue with the directory for the agency. Let me try creating the tool without specifying the agency name.                                                \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\"}', name='CreateTool', output=None)                                               \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: 'TaskAnalyzer'                                                                                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt appears there is a persistent issue with the directory setup for the TaskAnalyzer agent. I will need to address this problem before proceeding with tool creation. Let me  \r\ntry a different approach to resolve this.                                                                                                                                     \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"GenesisAgency\"}', name='CreateTool', output=None)                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './GenesisAgency'                                                                                                                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a consistent issue with the directory structure for creating tools. I will need to investigate this further to resolve the problem. Please hold on while I  \r\nattempt to troubleshoot this issue.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"AgencySwarm\"}', name='CreateTool', output=None)                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './AgencySwarm'                                                                                                                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\"}', name='CreateTool', output=None)                                               \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: 'TaskAnalyzer'                                                                                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"GenesisAgency\"}', name='CreateTool', output=None)                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './GenesisAgency'                                                                                                                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a consistent issue with the directory structure for creating tools. I will need to investigate this further to resolve the problem. Please hold on while I  \r\nattempt to troubleshoot this issue.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"AgencySwarm\"}', name='CreateTool', output=None)                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './AgencySwarm'                                                                                                                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\"}', name='CreateTool', output=None)                                               \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: 'TaskAnalyzer'                                                                                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"GenesisAgency\"}', name='CreateTool', output=None)                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './GenesisAgency'                                                                                                                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a consistent issue with the directory structure for creating tools. I will need to investigate this further to resolve the problem. Please hold on while I  \r\nattempt to troubleshoot this issue.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"AgencySwarm\"}', name='CreateTool', output=None)                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './AgencySwarm'                                                                                                                   \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\"}', name='CreateTool', output=None)                                               \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: 'TaskAnalyzer'                                                                                                                    \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a persistent issue with the directory setup for creating tools. I will need to address this problem before proceeding with tool creation. Let me try a      \r\ndifferent approach to resolve this.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming, and lemmatization. The tool should be able to handle various text formats and      \r\nlanguages, ensuring the text is clean and standardized for further analysis.\",\"mode\":\"write\",\"agency_name\":\"GenesisAgency\"}', name='CreateTool', output=None)                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\nCreateTool ⚙️ Function Output\r\nError: [Errno 2] No such file or directory: './GenesisAgency'                                                                                                                 \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🗣️ @AgentCreator\r\nIt seems there is a consistent issue with the directory structure for creating tools. I will need to investigate this further to resolve the problem. Please hold on while I  \r\nattempt to troubleshoot this issue.                                                                                                                                           \r\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n🐨 ToolCreator 🛠️ Executing Function\r\n🐨 ToolCreator 🛠️ Executing Function\r\nFunction(arguments='{\"agent_name\":\"TaskAnalyzer\",\"tool_name\":\"TextPreprocessingTool\",\"requirements\":\"This tool should preprocess the user input text to make it suitable for  \r\nanalysis. It should include functionalities like tokenization, stopword removal, stemming', name='CreateTool', output=None)                                                   \r\nTraceback (most recent call last):\r\n  <redacted>\r\nKeyboardInterrupt\r\n\r\n(.venv) (.venv)\r\n```",
      "state": "closed",
      "author": "husniadil",
      "author_type": "User",
      "created_at": "2024-10-27T13:42:14Z",
      "updated_at": "2024-12-11T02:08:23Z",
      "closed_at": "2024-12-11T02:08:22Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/181/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/181",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/181",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:36.585698",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-11-27T02:07:21Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-12-11T02:08:21Z"
        }
      ]
    },
    {
      "issue_number": 175,
      "title": "Optimize Communication Between Entry Point Agent and Other Agents Using sendMessage",
      "body": "We are facing an issue where the entry point agent occasionally sends incorrect or malformed information when communicating with other agents. To address this, I want to enforce that all messages sent by the entry point agent are in JSON format to improve message consistency and avoid errors in communication. Specifically, I need guidance on:\r\n\r\nHow can I ensure that all messages sent by the entry point agent are in JSON format?\r\nIs there a way to optimize the sendMessage function to enforce JSON format for all outgoing messages?",
      "state": "closed",
      "author": "wass-21",
      "author_type": "User",
      "created_at": "2024-10-03T13:21:59Z",
      "updated_at": "2024-11-30T02:04:29Z",
      "closed_at": "2024-11-30T02:04:29Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/175/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/175",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/175",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:36.946072",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Hey did you try to enable JSON mode for the CEO agent? Also, discord is the best place for questions like this so we can assist you quicker",
          "created_at": "2024-10-16T13:16:01Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-11-16T02:03:58Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-11-30T02:04:28Z"
        }
      ]
    },
    {
      "issue_number": 164,
      "title": " Question: restart or finish a run of Genesis possible?",
      "body": "Is it possible to restart or \"pickup where left\" an agency creation run started with Genesis, after hitting an OpenAI api Error or a token limit hit? Before i ran into rate limits multiple times and started over with a different approach. Also used 4o-mini a few time and that worked pretty ok most of the times. \r\n\r\nJust now i'm able to use the tear 2 limits, and while i did not hit a token limit error, i did received an API error. So i started wondering, is it possible to continue or (partially) redo a agency creation job? \r\n\r\nI tried a few things in the playground on OpenAI web console, but without success.",
      "state": "closed",
      "author": "Bargemanos",
      "author_type": "User",
      "created_at": "2024-08-07T23:45:42Z",
      "updated_at": "2024-11-17T02:08:31Z",
      "closed_at": "2024-11-17T02:08:30Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/164/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/164",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/164",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:37.142831",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Yes, use this code:\r\n\r\n```python\r\nfrom agency_swarm.agency.genesis import GenesisAgency\r\n\r\nchat_id = \"my_chat_id\"\r\n\r\ndef load_threads(chat_id):\r\n    # Load threads from a file or database using the chat_id\r\n    with open(f\"{chat_id}_threads.json\", \"r\") as file:\r\n        threads = json.load(file)\r\n  ",
          "created_at": "2024-08-15T04:23:25Z"
        },
        {
          "author": "Cass0wary",
          "body": "Hey @VRSEN which file do I update this in? \r\n`my_chat_id` is this from `https://platform.openai.com/assistants/`? or somewhere else?\r\nWould I just run `agency-swarm genesis` again? ",
          "created_at": "2024-09-02T02:11:34Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-10-03T02:01:43Z"
        },
        {
          "author": "bonk1t",
          "body": "@Cass0wary You can paste the code into a new file in your project directory. Run this file to get Genesis up and running.\r\nHowever, be cautious about context contamination when using the same thread. Make sure to create a new thread for each new project or task, or whenever you notice a decline in q",
          "created_at": "2024-10-03T13:56:24Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-11-03T02:05:54Z"
        }
      ]
    },
    {
      "issue_number": 160,
      "title": "Genesis with Open Source / Third Party models",
      "body": "A few folks on discord have asked about the possibility of running `genesis` with open source or third party models. \r\n\r\n@VRSEN would you be okay if I implement this? \r\n\r\nI was thinking to add a `model` flag to the CLI and wrap / set the model only if the flag is set.",
      "state": "closed",
      "author": "phact",
      "author_type": "User",
      "created_at": "2024-07-24T13:58:31Z",
      "updated_at": "2024-11-11T02:01:54Z",
      "closed_at": "2024-11-11T02:01:53Z",
      "labels": [
        "feedback",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/160/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/160",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/160",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:37.486815",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Yeah if you can add this it would be great! Thanks",
          "created_at": "2024-08-01T16:27:51Z"
        },
        {
          "author": "qwaszaq",
          "body": "ollama possible?",
          "created_at": "2024-08-14T04:20:07Z"
        },
        {
          "author": "SwapnaliDhotre12",
          "body": "Can't find discord server for agency swarm. @phact can you please share/invite? Thank you!",
          "created_at": "2024-08-21T15:21:55Z"
        },
        {
          "author": "phact",
          "body": "Agency swarm discord is https://discord.com/invite/cw2xBaWfFM\r\n[astra-assistants](https://github.com/datastax/astra-assistants-api) discord is https://discord.com/invite/MEFVXUvsuy",
          "created_at": "2024-08-23T04:50:56Z"
        },
        {
          "author": "phact",
          "body": "Yes @qwaszaq that would include ollama. I'll try to find time for this in the next week or so.",
          "created_at": "2024-08-23T04:51:32Z"
        }
      ]
    },
    {
      "issue_number": 171,
      "title": "Agency Swarm",
      "body": null,
      "state": "closed",
      "author": "JBombar",
      "author_type": "User",
      "created_at": "2024-09-21T14:38:04Z",
      "updated_at": "2024-10-22T12:24:03Z",
      "closed_at": "2024-10-22T12:24:03Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/171/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/171",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/171",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:37.989294",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-10-22T02:02:33Z"
        }
      ]
    },
    {
      "issue_number": 163,
      "title": "Insufficient support  managing multiple threads when several users interact with the same agency simultaneously.",
      "body": "I have encountered a limitation in the `Agncy` class, specifically within the `get_completion` method. This method interacts with the Assistant API but does not currently support managing multiple threads effectively when several users interact with the same agency simultaneously.\r\n\r\nThe core of the issue lies in the inability to manage conversation threads and shared states uniquely for each user. This leads to potential conflicts or incorrect handling of state when multiple users interact with the agency concurrently.\r\n\r\n**Proposed Change**:\r\nI propose adding an enhancement to the `get_completion` method allowing it to accept a `thread_id` argument. This would enable:\r\n\r\n**Thread-specific interaction history management**: \r\nBy passing a unique `thread_id` per user session, the library can maintain separate interaction histories, ensuring that responses and states are correctly handled on a per-user basis.\r\n\r\n**State management enhancement**: \r\nAlongside the thread management, modifying the shared state handling to be thread-specific would prevent users from affecting each other’s state during concurrent interactions.\r\n\r\n**Example**:\r\nHere's a simple example of how the enhanced method could be called:\r\n`response = agency.get_completion(prompt=\"Hello, how can I assist you today?\", thread_id=user_session_id)`\r\n\r\n\r\n",
      "state": "closed",
      "author": "orenneiberg",
      "author_type": "User",
      "created_at": "2024-08-05T12:31:58Z",
      "updated_at": "2024-10-05T02:01:03Z",
      "closed_at": "2024-10-05T02:01:03Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/163/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/163",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/163",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:38.251417",
      "comments": [
        {
          "author": "SwapnaliDhotre12",
          "body": "Great suggesstion! I faced the same issue and was thinking of using async thread instead of thread in agency class",
          "created_at": "2024-08-21T15:13:35Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-09-21T01:58:50Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-10-05T02:01:02Z"
        }
      ]
    },
    {
      "issue_number": 158,
      "title": "Token Usage Statistics",
      "body": "Hello,\r\n\r\nIs there any way to see the token usage statistics?",
      "state": "closed",
      "author": "bhakimiy",
      "author_type": "User",
      "created_at": "2024-07-09T09:07:53Z",
      "updated_at": "2024-10-04T02:01:51Z",
      "closed_at": "2024-10-04T02:01:50Z",
      "labels": [
        "enhancement",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/158/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/158",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/158",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:38.484592",
      "comments": [
        {
          "author": "ivanguerron21",
          "body": "Hi, have you come to a solution?",
          "created_at": "2024-07-17T02:45:43Z"
        },
        {
          "author": "VRSEN",
          "body": "Hi, I will add this next week in 0.2.7 release",
          "created_at": "2024-07-17T15:43:45Z"
        },
        {
          "author": "ivanguerron21",
          "body": "Thanks!! Are you going to separate into input and output token statistics?",
          "created_at": "2024-07-19T04:58:29Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-08-19T01:55:28Z"
        },
        {
          "author": "ivanguerron21",
          "body": "Hi @VRSEN, when are we going to be able to see these upgrade\r\n",
          "created_at": "2024-08-20T02:21:42Z"
        }
      ]
    },
    {
      "issue_number": 165,
      "title": "Shared state Initialization",
      "body": "Hello,\r\n\r\nI am trying to understand how tools function with an easy example and while exploring the `shared_state` fundamentals, got into the following error using the below code.\r\n\r\n```python\r\nfrom agency_swarm.tools import BaseTool\r\nfrom pydantic import Field, model_validator\r\n\r\nclass MyCustomTool(BaseTool):\r\n    \"\"\"\r\n    A brief description of what the custom tool does. \r\n    The docstring should clearly explain the tool's purpose and functionality.\r\n    It will be used by the agent to determine when to use this tool.\r\n    \"\"\"\r\n\r\n    # Define the fields with descriptions using Pydantic Field\r\n    example_field: str = Field(\r\n        ..., description=\"Description of the example field, explaining its purpose and usage for the Agent.\"\r\n    )\r\n\r\n    # Additional Pydantic fields as required\r\n    # ...\r\n\r\n    def run(self):\r\n        \"\"\"\r\n        The implementation of the run method, where the tool's main functionality is executed.\r\n        This method should utilize the fields defined above to perform the task.\r\n        Doc string is not required for this method and will not be used by your agent.\r\n        \"\"\"\r\n        self.shared_state.set(\"context\", \"This is my context\")\r\n        \r\n        # Your custom tool logic goes here\r\n        # do_something(self.example_field)\r\n\r\n        # Return the result of the tool's operation as a string\r\n        return \"Result of MyCustomTool operation\"\r\n    \r\n    # Has access to the complete model attributes after pydantic pre-validation.\r\n    @model_validator(mode=\"after\")\r\n    def validate_field(self):\r\n        if len(self.example_field) < 10:\r\n            raise ValueError(\"The example field must be at least 10 characters long.\")\r\n\r\nif __name__ == \"__main__\":\r\n    print(MyCustomTool(example_field=\"example field greater than 10 chars\").run())\r\n```\r\n**Error:**\r\n```text\r\nAttributeError: 'NoneType' object has no attribute 'set'\r\n```\r\n\r\nOn further inspection, I could not find the initialization of the `shared_state` variable in the `BaseTool` class in order for the extended tools to use this variable. As we can see below, it is set to `None` by default.\r\n\r\n```python\r\nclass BaseTool(OpenAISchema, ABC):\r\n    shared_state: ClassVar[SharedState] = None\r\n    caller_agent: Any = None\r\n    event_handler: Any = None\r\n    one_call_at_a_time: bool = False\r\n\r\n    @classmethod\r\n    @property\r\n    def openai_schema(cls):\r\n        schema = super(BaseTool, cls).openai_schema\r\n\r\n        properties = schema.get(\"parameters\", {}).get(\"properties\", {})\r\n\r\n        properties.pop(\"caller_agent\", None)\r\n        properties.pop(\"shared_state\", None)\r\n        properties.pop(\"event_handler\", None)\r\n        properties.pop(\"one_call_at_a_time\", None)\r\n\r\n        required = schema.get(\"parameters\", {}).get(\"required\", [])\r\n        if \"caller_agent\" in required:\r\n            required.remove(\"caller_agent\")\r\n        if \"shared_state\" in required:\r\n            required.remove(\"shared_state\")\r\n        if \"event_handler\" in required:\r\n            required.remove(\"event_handler\")\r\n        if \"one_call_at_a_time\" in required:\r\n            required.remove(\"one_call_at_a_time\")\r\n\r\n        return schema\r\n\r\n    def model_dump(self, exclude=None, **kwargs):\r\n        if exclude is None:\r\n            exclude = {\"caller_agent\", \"shared_state\", \"event_handler\", \"one_call_at_a_time\"}\r\n        else:\r\n            exclude.update({\"caller_agent\", \"shared_state\", \"event_handler\", \"one_call_at_a_time\"})\r\n        return super().model_dump(exclude=exclude, **kwargs)\r\n\r\n    @abstractmethod\r\n    def run(self, **kwargs):\r\n        pass\r\n```\r\n\r\nCan someone guide on how to resolve this error or the right approach to use the `shared_state` variable ? btw, I have already referred the `Advanced Usage` section of the documentation\r\n\r\n",
      "state": "closed",
      "author": "chengaiahsc",
      "author_type": "User",
      "created_at": "2024-08-13T11:44:56Z",
      "updated_at": "2024-08-21T09:29:45Z",
      "closed_at": "2024-08-21T09:29:45Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/165/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/165",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/165",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:38.686543",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Hey, the shared state is stored in the agency class. Base tools use pointers, so when initializing tools separately, the state did not exist. Can you install from the main and try again, please?",
          "created_at": "2024-08-15T04:14:05Z"
        }
      ]
    },
    {
      "issue_number": 148,
      "title": "Needs Guide for Self Hosted LLMs",
      "body": "Hi! I learned about Agency-Swarm from your videos. They are very good, thank you.\r\n\r\nYou made a video, saying that there is open source LLM support. Is there a guide to using locally hosted LLMs?\r\n\r\nWe have fine tuned LLMs for specific tasks we need to use, but agency-swarm uses OpenAI assistants API, which makes it difficult to use with 3rd party LLMs or even mistrall.\r\n\r\nCould you consider wrapping or eliminating the usage of openai assistants API in agency swarm, or making it optional.",
      "state": "closed",
      "author": "haltingstate",
      "author_type": "User",
      "created_at": "2024-06-13T14:21:45Z",
      "updated_at": "2024-08-08T01:54:33Z",
      "closed_at": "2024-08-08T01:54:32Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/148/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/148",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/148",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:38.869998",
      "comments": [
        {
          "author": "samuelmukoti",
          "body": "Hi @haltingstate,\r\n\r\nYou should watch this YouTube video: https://www.youtube.com/watch?v=Vd-Gtfm_zjw&t=885s, where VRSEN discusses how agency-swarm supports local LLMs. They are using an open-source library called “open-assistant-api,” which allows your Mistral LLM to mimic OpenAI’s assistants API.",
          "created_at": "2024-06-13T17:39:25Z"
        },
        {
          "author": "windowsagent",
          "body": "Hey! I was attempting to use agency-swarm with local LLMs (specifically codestral), and I followed your guide. \r\nUnfortunately, I ran into an error I can't solve at all, whenever agency-swarm tries to ping platform.openai.com (see the image below)\r\n![photo1718247197](https://github.com/VRSEN/agency-",
          "created_at": "2024-06-13T17:48:16Z"
        },
        {
          "author": "phact",
          "body": "@windowsagent, today you can use `agency-swarm` with [astra-assistants]( https://github.com/datastax/astra-assistants-api/) which makes it easy to use with third party LLMs. Here's an example https://github.com/datastax/astra-assistants-api/blob/main/examples/python/agency-swarm/basic.py\r\n\r\ncodestra",
          "created_at": "2024-06-14T16:08:53Z"
        },
        {
          "author": "haltingstate",
          "body": "What about running with vLLM?",
          "created_at": "2024-06-15T21:50:29Z"
        },
        {
          "author": "phact",
          "body": "@haltingstate yes, [litellm supports vLLM](https://litellm.vercel.app/docs/providers/vllm) so [astra-assistants](https://github.com/datastax/astra-assistants-api/) does too since assitants uses the litellm library internally. You'd have to pass a special header though `LLM-PARAM-base-url` with the u",
          "created_at": "2024-06-22T04:34:16Z"
        }
      ]
    },
    {
      "issue_number": 143,
      "title": "feat:Add support zip, tar.gz and git repo uploading as files",
      "body": "Add support zip, tar.gz and git repo uploaded as files.",
      "state": "closed",
      "author": "sjurajpuchky",
      "author_type": "User",
      "created_at": "2024-06-05T17:15:32Z",
      "updated_at": "2024-08-07T01:54:33Z",
      "closed_at": "2024-08-07T01:54:33Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/143/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/143",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/143",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:39.138066",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Where are you trying to upload zip? In Gradio interface or using `files_folder`? \r\n\r\nIt should work with `files_folder` and upload your zip to use with code interpreter ",
          "created_at": "2024-06-23T04:56:50Z"
        },
        {
          "author": "sjurajpuchky",
          "body": "Let me fix this to be :100: ",
          "created_at": "2024-06-23T07:18:27Z"
        },
        {
          "author": "sjurajpuchky",
          "body": "Fix done",
          "created_at": "2024-06-23T08:14:14Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-07-24T01:53:32Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-08-07T01:54:32Z"
        }
      ]
    },
    {
      "issue_number": 147,
      "title": "Is there a way to have debugging/verbose output",
      "body": "Hi all,\r\n\r\nI started playing around with the framework, and the lab. Is there a way to get logging/verbose output what exactly its doing on the command line?\r\n\r\nSpecially, when it tests code, i cannot see what it is doing, it gets stuck and waits for someone to close the tool its testing at the moment. But i only can close the whole server.\r\n\r\nBest regards & many Thanks!",
      "state": "closed",
      "author": "tlnet1981",
      "author_type": "User",
      "created_at": "2024-06-10T14:04:34Z",
      "updated_at": "2024-08-07T01:54:32Z",
      "closed_at": "2024-08-07T01:54:31Z",
      "labels": [
        "feedback",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/147/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/147",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/147",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:39.370437",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Hey, if you need to add detailed debugging in your tool logic, the only way is to do it manually with print/logger statements",
          "created_at": "2024-06-23T04:53:13Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-07-24T01:53:31Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-08-07T01:54:31Z"
        }
      ]
    },
    {
      "issue_number": 149,
      "title": "Need \"ChatDev\" type workflow example",
      "body": "Please make an example, of a \"ChatDev\" type workflow, for generating software, running it, testing it, from a text prompt description or a .md specification file as input.\r\n\r\nIt would help people a lot. As many people are coming here from ChatDev.",
      "state": "closed",
      "author": "haltingstate",
      "author_type": "User",
      "created_at": "2024-06-13T14:24:24Z",
      "updated_at": "2024-08-07T01:54:30Z",
      "closed_at": "2024-08-07T01:54:30Z",
      "labels": [
        "feedback",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/149/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/149",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/149",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:39.598577",
      "comments": [
        {
          "author": "VRSEN",
          "body": "I'll consider adding this in [agency-swarm-lab](https://github.com/VRSEN/agency-swarm-lab). In the meantime checkout https://youtu.be/BEpDRj9H3zE?si=YApi1qQAjPXI0Eei",
          "created_at": "2024-06-23T04:50:02Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-07-24T01:53:29Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-08-07T01:54:29Z"
        }
      ]
    },
    {
      "issue_number": 92,
      "title": "Third-Party LLM Support",
      "body": "I'm seeing solid performance of Claude 3 Opus over GPT-4 Turbo\r\n\r\nHave you considered adding third-party LLM providers to further improve the performance of `agency-swarm`?\r\n\r\nIt would be great to see [anthropic](https://pypi.org/project/anthropic/)  Python library support for `agency-swarm` since it provides 200K token length (vs 128K for OpenAI)\r\n\r\nWith the [API release of Gemini 1.5 Pro](https://twitter.com/JeffDean/status/1770653917543870571), I anticipate that `agency-swam` will also benefit from the 1M input token length of this model\r\n\r\nI recognize that Claude 3 struggles with JSON mode (reported [here](https://x.com/DeepAIWriter/status/1771109500860215501))\r\n\r\nI am wondering how well Claude 3 (or Gemini 1.5 Pro) performs with `instructor` by [@jxnl](https://github.com/jxnl)\r\n\r\n**UPDATE: 2024-04-27**\r\n\r\nSeeing remarkable results with using Llama 3 models hosted on Groq!\r\n\r\nAlso, compliant-heavy industries (ex healthcare, government, fintech) would benefit from using this framework as they need to select model providers and database/CMS providers to stay compliant",
      "state": "closed",
      "author": "slavakurilyak",
      "author_type": "User",
      "created_at": "2024-03-21T17:44:11Z",
      "updated_at": "2024-07-30T01:53:35Z",
      "closed_at": "2024-07-30T01:53:34Z",
      "labels": [
        "enhancement",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/92/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/92",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/92",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:39.799384",
      "comments": [
        {
          "author": "jmdevall",
          "body": "Let me inform, I am not expert in the api of openai, but recently \"NousResearch\" released a tuned version of 7B mistral that I think operates with tools as chatgpt do... it seems that it was trained with prompt format with function calling and json, although I don't know the real differences (apart ",
          "created_at": "2024-03-21T20:29:34Z"
        },
        {
          "author": "VRSEN",
          "body": "I plan to test this next week: https://github.com/datastax/astra-assistants-api I'll let you know the results. Any contributions are welcome!",
          "created_at": "2024-04-12T03:37:57Z"
        },
        {
          "author": "StL-Jim",
          "body": "> I plan to test this next week: https://github.com/datastax/astra-assistants-api I'll let you know the results. Any contributions are welcome!\r\n\r\nWhat are your thoughts about going the [ollama](https://github.com/ollama/ollama) or [litellm](https://github.com/BerriAI/litellm) route for supporting o",
          "created_at": "2024-04-20T13:38:30Z"
        },
        {
          "author": "chymian",
          "body": "hi @VRSEN ,\r\njust found out about your interesting project.\r\nhow is you plan to suppord 3rd party, local LLMs today?\r\n",
          "created_at": "2024-04-24T16:00:03Z"
        },
        {
          "author": "VRSEN",
          "body": "Done. We will keep track of all supported backend assistants api implementations in docs: https://vrsen.github.io/agency-swarm/advanced-usage/open-source-models/",
          "created_at": "2024-05-09T05:04:51Z"
        }
      ]
    },
    {
      "issue_number": 128,
      "title": "Browsing Agent Is not working",
      "body": "This is directly from the Browsing Agent Notebook, The only added changes are in line one. \r\n\r\n`from agency_swarm.agents import BrowsingAgent`  to  `from agency_swarm.agents.BrowsingAgent import BrowsingAgent`\r\n\r\n```\r\nfrom agency_swarm.agents.BrowsingAgent import BrowsingAgent\r\nfrom agency_swarm import Agency, Agent\r\nimport openai\r\n\r\nopenai.api_key = \"what_ever\"\r\n\r\nselenium_config = {\r\n    # your canary profile path\r\n    # \"chrome_profile_path\": \"/Users/vrsen/Library/Application Support/Google/Chrome Canary/Profile 1\",\r\n    \"headless\": False,\r\n    \"full_page_screenshot\": False,\r\n}\r\n\r\nbrowsing_agent = BrowsingAgent(selenium_config=selenium_config)\r\n\r\nagency = Agency([browsing_agent])\r\n\r\ndemo = agency.demo_gradio(height=700) # Reload the notebook each time you run this cell\r\n```\r\n\r\n\r\nERROR TRACRBACK\r\n\r\n```\r\nFiles folder '/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/agents/BrowsingAgent/files' is not a directory. Skipping...\r\nSchemas folder path is not a directory. Skipping...  /home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/agents/BrowsingAgent/schemas\r\nError parsing tool file SelectDropdown.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file ExportFile.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file ClickElement.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file WebPageSummarizer.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file Scroll.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file ReadURL.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file GoBack.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file SolveCaptcha.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file AnalyzeContent.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file SendKeys.py: invalid syntax (<string>, line 1). Skipping...\r\nUpdating assistant... BrowsingAgent\r\n/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\r\n  from .autonotebook import tqdm as notebook_tqdm\r\nRunning on local URL:  http://127.0.0.1:7860/\r\n\r\nTo create a public link, set `share=True` in `launch()`.\r\n\r\n\r\n```\r\n\r\nWHEN I TYPE \"what is the current AAPL stock price in the radio text box, I get the below error.\r\n\r\n```\r\nIMPORTANT: You are using gradio version 4.26.0, however version 4.29.0 is available, please upgrade.\r\n--------\r\nMessage files:  []\r\nTHREAD:[ user -> BrowsingAgent ]: URL https://platform.openai.com/playground?assistant=asst_XIwdgiDFb73zbZ5ySRtranGK&mode=assistant&thread=thread_duQMs2Ji1fsfimOjmUsaTGSG\r\n/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/pydantic/main.py:347: UserWarning: Pydantic serializer warnings:\r\n  Expected `Union[RunStepDeltaMessageDelta, ToolCallDeltaObject]` but got `ToolCallDeltaObject` - serialized value may not be as expected\r\n  Expected `Union[CodeInterpreterToolCallDelta, RetrievalToolCallDelta, FunctionToolCallDelta]` but got `CodeInterpreterToolCallDelta` - serialized value may not be as expected\r\n  return self.__pydantic_serializer__.to_python(\r\nException in thread Thread-9 (get_completion_stream):\r\nTraceback (most recent call last):\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/threading.py\", line 1038, in _bootstrap_inner\r\n    self.run()\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/ipykernel/ipkernel.py\", line 761, in run_closure\r\n    _threading_Thread_run(self)\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/threading.py\", line 975, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/agency/agency.py\", line 147, in get_completion_stream\r\n    next(gen)\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/threads/thread.py\", line 69, in get_completion\r\n    self._create_run(recipient_agent, additional_instructions, event_handler)\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/threads/thread.py\", line 196, in _create_run\r\n    stream.until_done()\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/openai/lib/streaming/_assistants.py\", line 102, in until_done\r\n    consume_sync_iterator(self)\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/openai/_utils/_streams.py\", line 6, in consume_sync_iterator\r\n    for _ in iterator:\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/openai/lib/streaming/_assistants.py\", line 69, in __iter__\r\n    for item in self._iterator:\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/openai/lib/streaming/_assistants.py\", line 405, in __stream__\r\n...\r\n  File \"/home/chukypedro15/anaconda3/envs/pyxellenv/lib/python3.11/site-packages/agency_swarm/agency/agency.py\", line 266, in on_tool_call_created\r\n    if tool_call.type == \"function\":\r\n       ^^^^^^^^^^^^^^\r\nAttributeError: 'dict' object has no attribute 'type'\r\n```",
      "state": "closed",
      "author": "okoliechykwuka",
      "author_type": "User",
      "created_at": "2024-05-23T06:46:49Z",
      "updated_at": "2024-07-23T01:53:33Z",
      "closed_at": "2024-07-23T01:53:33Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 12,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/128/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/128",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/128",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:40.074618",
      "comments": [
        {
          "author": "emdagon",
          "body": "I'm facing the same problem.",
          "created_at": "2024-05-24T17:33:00Z"
        },
        {
          "author": "Eunomiac",
          "body": "Exact same problem here --- both when importing from `agency-swarm`, and when importing from a custom module I created after importing BrowserAgent via the CLI `agency-swarm import-agent` command.",
          "created_at": "2024-05-25T07:47:09Z"
        },
        {
          "author": "VRSEN",
          "body": "Hey guys, please install from main branch using `pip install --no-cache -e .` and let me know if this persists ",
          "created_at": "2024-05-25T14:33:08Z"
        },
        {
          "author": "kinghotelwelco",
          "body": "> Hey guys, please install from main branch using `pip install --no-cache -e .` and let me know if this persists\r\n\r\nStill not working as of now.",
          "created_at": "2024-05-27T20:24:37Z"
        },
        {
          "author": "okoliechykwuka",
          "body": "I am using requirement or poetry . How can I install the module without using  ```pip install --no-cache -e . ``` so that I can use the browsing agent\r\n\r\n```pip install --no-cache -e .``` method can only work in development. ",
          "created_at": "2024-05-28T21:14:42Z"
        }
      ]
    },
    {
      "issue_number": 94,
      "title": "fix (Readme Banner Image): Please replace the banner with a simpler one without the VRSEN (no offend)",
      "body": "Yeah, pretty much the title. Please replace the banner image with a more streamlined one. Maybe one-color and the icon? \r\nNo offense to VRSEN, but I would like to recommend this framework more, but if this framework wants to survive on it's own, then this should be considered.\r\n\r\nMuch love",
      "state": "closed",
      "author": "cutmasta-kun",
      "author_type": "User",
      "created_at": "2024-03-22T15:28:34Z",
      "updated_at": "2024-07-20T10:37:27Z",
      "closed_at": "2024-05-27T01:49:45Z",
      "labels": [
        "feedback",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/94/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/94",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/94",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:40.320164",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Yeah, I understand. I have ordered a proper logo and everything. Thanks for feedback!",
          "created_at": "2024-03-24T05:41:22Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-05-13T01:49:28Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-05-27T01:49:45Z"
        },
        {
          "author": "VRSEN",
          "body": "This is done now, sorry for a delay",
          "created_at": "2024-07-20T10:37:26Z"
        }
      ]
    },
    {
      "issue_number": 125,
      "title": "File Handling not working properly when uploaded from the chatbot interface.",
      "body": "I am working with CV Analyzing, when I upload file from the chatbot interface , the file ID generated but in the terminal throws the FileNotFound Error. Please let me know how can I change the default file_path from the source code in a way that it handles the uploaded file. ",
      "state": "closed",
      "author": "Vansh-Techseria2024",
      "author_type": "User",
      "created_at": "2024-05-16T13:28:54Z",
      "updated_at": "2024-07-19T01:52:41Z",
      "closed_at": "2024-07-19T01:52:40Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/125/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/125",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/125",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:40.500984",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Hey, there was a problem with message file assignment based on file type, but I am not sure if it's related. Can you please pull and install from main and let me know if this fixes it? If not, please send an error message as well.",
          "created_at": "2024-05-27T04:35:30Z"
        },
        {
          "author": "Vansh-Techseria2024",
          "body": "Hello ,\r\nThank you for the git commit and making the effort to solve the issue raised regarding the file uploading. I will make sure to update you after pulling from the main branch and running the necessary tests,\r\n\r\nThank you\r\nVansh Limbachiya.\r\n________________________________\r\nFrom: Arsenii Shat",
          "created_at": "2024-05-27T06:43:07Z"
        },
        {
          "author": "VRSEN",
          "body": "@Vansh-Techseria2024, remember you can't upload files into custom tools from Gradio. Gradio files are uploaded to OpenAI. If your BaseTool accepts a local file path, first add it to your local directory and then send the file path to the agent in the message.",
          "created_at": "2024-05-30T04:41:23Z"
        },
        {
          "author": "Vansh-Techseria2024",
          "body": "@VRSEN  Thank you for the clarity regarding the function!\r\n I'll ,make sure to remember this point and then test the functionality, will update you soon about the results.\r\n\r\nRegards!",
          "created_at": "2024-05-30T13:00:25Z"
        },
        {
          "author": "Vansh-Techseria2024",
          "body": "@VRSEN  Hello Arsenii , As of our last discussion I tried to perform File Operations on a .pdf file while keeping your instructions  in mind regarding to local path. Though the file was uploaded this time but its giving a different type of error:\r\n\r\n  raise self._make_status_error_from_response(err.",
          "created_at": "2024-06-03T05:38:29Z"
        }
      ]
    },
    {
      "issue_number": 138,
      "title": "BrowsingAgent get_completion() returns a generator object",
      "body": "I tried running the example notebook on browsing agent and it worked fine. However, in the notebook the demo_gradio() method ws used to start the agent. But I want to run the agent in a script so I used the `get_completion()` method by calling on the agent instance but it keeps returning a generator object. What should I do to get the response.\r\n\r\nBelow is the code I ran and the output\r\n\r\n` def agency_agent(task):\r\n        \"\"\"\r\n        \r\n        :param task: A string of the user task prompt.\r\n        :type task: str\r\n        \r\n        :return: The output of running the modified task using the Agency Swarm.\r\n        :rtype: Any\r\n        \"\"\"\r\n        \r\n\r\n        \r\n        report_manager = Agent(name=\"Report Manager\",\r\n            description=\"The Report Manager Agent is responsible for supervising data collection,  task completion from various  websites,  and compiling reports as necessary.\",\r\n            instructions=dedent(\"\"\"As a Report Manager Agent, your role involves direct interaction and oversight of the BrowsingAgent's operations.\r\n                                   Your primary duty is to guarantee that the user's task is comprehensively and accurately completed. \r\n                                   Achieve this by methodically breaking down each task from the user into smaller steps required to complete it. Then, issue each step of the task as a distinct message to the BrowsingAgent.\r\n                                   Make sure to always tell the browsing agent to go back to google search results before proceeding to the the next source. After the necessary data is collection, compile a report and send it to the user.\r\n                                   Make sure to ask the browsing agent for direct links to the sources and include them into report. Try to trouble shoot any issues that may arise along the way with the other agents first, before reporting back to the user.\r\n                                   Do not respond to the user until the report is complete or you have encountered an issue that you cannot resolve yourself.\"\"\")\r\n                                )\r\n        \r\n        selenium_config = {\r\n                # your profile path\r\n                # \"chrome_profile_path\": \"/Users/vrsen/Library/Application Support/Google/Chrome/Profile 1\",\r\n                \"headless\": False,\r\n                \"full_page_screenshot\": False,\r\n            }\r\n\r\n        browsing_agent = BrowsingAgent(selenium_config=selenium_config)\r\n        \r\n        agency = Agency([report_manager,\r\n                   [report_manager, browsing_agent]],\r\n                   shared_instructions=dedent(\"\"\"You are a part of a web browsing agency with the goal to find the most relevant information, fill forms, create account, analyse stock prices, and compile reports.\r\n                                        Your core value is autonomy and you are free to use any means necessary to achieve your goal. You do not stop until you have found the information you need or you have exhausted all possible means.\r\n                                        You always to compile a comprehensive report with as much information from the web pages as possible.\"\"\")\r\n                       )\r\n        \r\n        completion_output = agency.get_completion(task, yield_messages=True)\r\n\r\n        \r\n        return completion_output\r\n    `\r\n\r\n`task_2 = \"'https://relevanceai.com/pricing/', Extract the pricing info\"\r\n \r\n    agency_output = agency_agent(task=task_2)\r\n    print(agency_output)\r\n  `\r\n\r\n\r\n\r\n\r\nHere is the output I got:\r\n\r\n`\r\nFiles folder '/opt/anaconda3/envs/fastapis/lib/python3.10/site-packages/agency_swarm/agents/BrowsingAgent/files' is not a directory. Skipping...\r\nSchemas folder path is not a directory. Skipping...  /opt/anaconda3/envs/fastapis/lib/python3.10/site-packages/agency_swarm/agents/BrowsingAgent/schemas\r\nError parsing tool file ClickElement.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file GoBack.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file ExportFile.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file Scroll.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file ReadURL.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file SendKeys.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file WebPageSummarizer.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file SelectDropdown.py: invalid syntax (<string>, line 1). Skipping...\r\nError parsing tool file SolveCaptcha.py: invalid syntax (<string>, line 1). Skipping...\r\nUpdating agent... Report Manager\r\nUpdating agent... BrowsingAgent\r\n<generator object Thread.get_completion at 0x7fc0ff97bf40>\r\n`",
      "state": "closed",
      "author": "Omotade-MY",
      "author_type": "User",
      "created_at": "2024-05-30T12:57:20Z",
      "updated_at": "2024-07-16T01:53:54Z",
      "closed_at": "2024-07-16T01:53:54Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/138/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/138",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/138",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:40.697369",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Just set `yield_messages=False` in get_completion method",
          "created_at": "2024-06-01T05:23:19Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-07-02T01:51:43Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-07-16T01:53:54Z"
        }
      ]
    },
    {
      "issue_number": 151,
      "title": "Duplicate call_ids Submitted When Calling Tool Multiple Times Causes openai.BadRequestError",
      "body": "This issue occurs when the agent is asked to call a tool multiple times in parallel. No similar issues were found on the Internet.\r\n\r\nTraceback:\r\n```\r\nException in thread Thread-11 (get_completion_stream):\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py\", line 1045, in _bootstrap_inner\r\n    self.run()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py\", line 982, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/agency_swarm/agency/agency.py\", line 196, in get_completion_stream\r\n    next(res)\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/agency_swarm/threads/thread.py\", line 190, in get_completion\r\n    self._submit_tool_outputs(tool_outputs, event_handler)\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/agency_swarm/threads/thread.py\", line 304, in _submit_tool_outputs\r\n    with self.client.beta.threads.runs.submit_tool_outputs_stream(\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/openai/lib/streaming/_assistants.py\", line 444, in __enter__\r\n    self.__stream = self.__api_request()\r\n                    ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1240, in post\r\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/openai/_base_client.py\", line 921, in request\r\n    return self._request(\r\n           ^^^^^^^^^^^^^^\r\n  File \"/Users/nick/PycharmProjects/.../venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1020, in _request\r\n    raise self._make_status_error_from_response(err.response) from None\r\nopenai.BadRequestError: Error code: 400 - {'error': {'message': \"Duplicate call_ids submitted: ['call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN', 'call_jByezqWjNlzHp9wEs4WGKChN']\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\r\n```\r\n",
      "state": "closed",
      "author": "bonk1t",
      "author_type": "User",
      "created_at": "2024-06-23T21:43:36Z",
      "updated_at": "2024-07-06T11:30:19Z",
      "closed_at": "2024-07-06T11:30:19Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/151/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/151",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/151",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:40.947820",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Rare bug when agent calls the same tool multiple times and the request times out, should be fixed now. Thanks",
          "created_at": "2024-06-28T04:49:35Z"
        }
      ]
    },
    {
      "issue_number": 123,
      "title": "Unable to use Azure OpenAI",
      "body": "Hello,\r\n\r\nI am getting the following error while following this [Azure Notebook](https://github.com/VRSEN/agency-swarm/blob/main/notebooks/azure.ipynb) example.\r\n\r\n```text\r\nopenai.BadRequestError: Error code: 400 - {'error': {'message': \"Unknown parameter: 'tool_resources'.\", 'type': 'invalid_request_error', 'param': 'tool_resources', 'code': 'unknown_parameter'}}\r\n```\r\n\r\nDo we need to enable some additional configuration to make it functional ?\r\n\r\nAlso, I would like to use Azure OpenAI endpoint with `Genesis` agency as demonstrated in this [notebook](https://github.com/VRSEN/agency-swarm/blob/main/notebooks/genesis_agency.ipynb). However, I could not find a way to inject the `azure deployment` as `model` to the Agency. Would appreciate if someone can share a way to achieve this ?",
      "state": "closed",
      "author": "scchengaiah",
      "author_type": "User",
      "created_at": "2024-05-15T16:07:46Z",
      "updated_at": "2024-06-30T01:54:57Z",
      "closed_at": "2024-06-30T01:54:57Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/123/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/123",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/123",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:41.173746",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Seems like azure still hasn't updated to assistants v2. Try with previous version\r\n\r\n`pip install agency-swarm==0.1.7`",
          "created_at": "2024-05-16T03:51:22Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-06-16T01:54:21Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-06-30T01:54:57Z"
        }
      ]
    },
    {
      "issue_number": 120,
      "title": "Consistent FileWriter Errors",
      "body": "Anytime Devid goes to save something  and sometimes the Browsing Agent similar errors.  Also loses its place in the directory structure, moving down a level then not being able to validate the directory and write the file. \r\n\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nTHREAD:[ PlannerAgent -> BrowsingAgent ]: URL https://platform.openai.com/playground?assistant=asst_RAEE49tiwJG68jVvsulfEZUf&mode=assistant&thread=thread_Y04QrqGPxcdIe21SnFhFI4zt\r\nTHREAD:[ PlannerAgent -> Devid ]: URL https://platform.openai.com/playground?assistant=asst_D5HxnyVhXW3Uwx2D8JRygVpi&mode=assistant&thread=thread_zAgVmq6UHWZrJdzegm65UnzP\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\nError: llm_validator() got an unexpected keyword argument 'openai_client'. Trying again.\r\n^CKeyboard interruption in main thread... closing server.\r\nseluser@8a763a2da35f:/app/CodeSolutionAgency$ ",
      "state": "closed",
      "author": "spocksbrain",
      "author_type": "User",
      "created_at": "2024-05-12T03:19:00Z",
      "updated_at": "2024-06-27T01:51:05Z",
      "closed_at": "2024-06-27T01:51:05Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/120/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/120",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/120",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:41.365407",
      "comments": [
        {
          "author": "VRSEN",
          "body": "In the latest agency swarm update, there were some breaking changes with the instructor. I have updated the agency swarm lab repository to accommodate these changes. Please pull the latest version and try again.",
          "created_at": "2024-05-13T03:52:12Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-06-13T01:50:29Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-06-27T01:51:04Z"
        }
      ]
    },
    {
      "issue_number": 112,
      "title": "Connecting agency-swarm to own gpt-like LLM API like the new Llama-3-70B-Instruct",
      "body": "So, as the title says. I've been wondering how difficult would it be to replace the openai API with connector to a Llama instance running somewhere, potentially even locally (I do have the compute power). Seems at first glance the API integration is quite hot-swappable, but I wanted to get the creator's thoughts on the matter. Having an option like this could mean significant performance upgrade and cost savings.",
      "state": "closed",
      "author": "NVS-AI",
      "author_type": "User",
      "created_at": "2024-04-25T12:05:17Z",
      "updated_at": "2024-06-24T01:52:05Z",
      "closed_at": "2024-06-24T01:52:04Z",
      "labels": [
        "enhancement",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 15,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/112/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/112",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/112",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:41.633100",
      "comments": [
        {
          "author": "samuelmukoti",
          "body": "I’ve heard the creator speak many times on his YouTube about why he only will support OpenAI right now. He believes in building upon the best framework and tools available and OpenAI is the leader right now, he also mentioned how he leverages the OpenAI assistance API which is specific and I’m not s",
          "created_at": "2024-04-25T13:52:18Z"
        },
        {
          "author": "codermrrob",
          "body": "I heard in another recent YouTube video today that @VRSEN is looking into this. It would be very cool, OpenAI is restrictively expensive for solo developer to experiment with :( and while I have been making great progress I could easily run up bills of 100+ a week building out and refining an agency",
          "created_at": "2024-04-26T13:35:42Z"
        },
        {
          "author": "VRSEN",
          "body": "Hey everyone, I'm currently testing the repo https://github.com/datastax/astra-assistants-api, which worked with Assistants v1. However, it may need some time to update to v2. Nonetheless, for any project that mimics the Assistants API, you just need to replace the OpenAI client like this:\r\n\r\n```pyt",
          "created_at": "2024-04-29T06:33:57Z"
        },
        {
          "author": "NVS-AI",
          "body": "> If you manage to get any of these repos working, please ping me, and I'll give you a shoutout on the next video.\r\n\r\nThanks, will do :) Currently playing around with starting a Llama 3 instance locally. then gonna see about a wrapper API... Worst case scenario, will make one that mimics the openai ",
          "created_at": "2024-04-29T07:11:22Z"
        },
        {
          "author": "jay377",
          "body": "> Author\r\n\r\nYes please somebody make this work, i actually want to learn a real agents tool that's production capable but to poor to experiment on openai",
          "created_at": "2024-04-30T19:34:27Z"
        }
      ]
    },
    {
      "issue_number": 113,
      "title": "Baseless claim about autogen",
      "body": "Your readme is out of date as autogen now has a custom speaker selection mechanism which makes it very easy to model agent interaction...",
      "state": "closed",
      "author": "Morriz",
      "author_type": "User",
      "created_at": "2024-04-28T08:09:15Z",
      "updated_at": "2024-06-23T10:57:36Z",
      "closed_at": "2024-04-30T05:17:14Z",
      "labels": [
        "feedback"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/113/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/113",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/113",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:41.903312",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Is this very easy, in your opinion? https://microsoft.github.io/autogen/docs/notebooks/agentchat_groupchat_customized/\r\n\r\nSure, my claim about \"uncustomizable\" may be outdated now, but having to hardcode every single interaction does not seem easy to me.",
          "created_at": "2024-04-29T06:10:34Z"
        },
        {
          "author": "Morriz",
          "body": "What? You have to model stuff the way you need it, and where that happens does not matter...",
          "created_at": "2024-04-29T08:23:46Z"
        },
        {
          "author": "VRSEN",
          "body": "Do you understand that the complexity of communication increases exponentially with the number of participants? For example, with two agents, there is one communication flow; with three, there are three flows; with four, there are six flows; and with 50, there are 1,225 flows. \r\n\r\nPlease model those",
          "created_at": "2024-04-29T08:33:28Z"
        },
        {
          "author": "Morriz",
          "body": "AutoGen shares one function that encompasses it all. I think you don't understand the implications. Plus you seem to think that it is advantageous to have a lot of agents to accomplish a goal? I don't think so. I suggest to model small bits. Just the amount that is needed is enough. We are merely as",
          "created_at": "2024-04-29T09:01:02Z"
        },
        {
          "author": "VRSEN",
          "body": "Have you even watched my content, man? I always say that you should start with as few agents as possible and not compare them with people. However, with the current pace of development in our AI agency, some of our clients are not far from having 50 agents running their business.\r\n\r\nRegarding one fu",
          "created_at": "2024-04-29T09:38:49Z"
        }
      ]
    },
    {
      "issue_number": 115,
      "title": "Genesis needs human-interaction when it is not needed. ",
      "body": "![image](https://github.com/VRSEN/agency-swarm/assets/45744329/97b78e9b-146e-4333-8721-10f6eaef864c)\r\n\r\nFirst off, i love genesis. I am a senior developer, and having an automation tool to setup the pipeline infrastructure is a fantastic move imo. Well done. \r\n\r\nHowever, i am having a bit of an issue with it, as in my scenerios gensis needs constant babying. What do i mean: \r\n\r\nThe genesis outputs files such as:\r\n```md\r\n<!-- instructions.md -->\r\n# Plant Intelligence Agent (PIA) Instructions\r\n\r\nYou are tasked with the identification of plants, and the detection of diseases and pests using advanced machine learning techniques within the GardenGenius agency. Utilize the Retrieval Augmented Generation (RAG) workflow integrated with both real-time and historical data.\r\n\r\n### Primary Instructions:\r\n1. Use advanced machine learning toolkits for image and pattern recognition to analyze plant health.\r\n2. Leverage databases for long-term memory that helps to track and understand user preferences and plant health history.\r\n3. Communicate findings effectively to the Director of Garden Operations (DGO) for appropriate actions.\r\n4. Stay updated with the latest advancements in AI and plant sciences to improve detection and identification processes.\r\n```\r\n```py\r\n# __init__.py\r\n# These first two are correct and modified by me, the human\r\nfrom DirectorOfGardenOperations import DirectorOfGardenOperations\r\nfrom EnvironmentAnalysisAgent import EnvironmentAnalysisAgent\r\n\r\n# This is the format for all newly created agents, before human intervention\r\nfrom .plantintelligenceagent import PlantIntelligenceAgent\r\n```\r\n\r\nAs you can see, the name for the agents containing folder is derived from the markdown instructions - however there are spaces in the name in the markdown but _not_ in the python file or folder names (as it should be). This causes genesis to fail to discover the agent directory and create a false import statement. After resolving the import and the name formatting for the containing folder - I can proceed by telling genesis that the directory issue is solved. However, in multi-tenant applications with lots of agents, this is not a sustainable or automated workflow and requires constant babying. \r\n\r\nHere is the project folder structure for reference, as generated by genesis:\r\n![image](https://github.com/VRSEN/agency-swarm/assets/45744329/12d7848a-de01-4b54-a0e2-d7b5584cbe43)\r\n",
      "state": "closed",
      "author": "ZanzyTHEbar",
      "author_type": "User",
      "created_at": "2024-04-29T11:17:15Z",
      "updated_at": "2024-06-22T01:49:35Z",
      "closed_at": "2024-06-22T01:49:34Z",
      "labels": [
        "bug",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 13,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/115/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/115",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/115",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:42.084396",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Thank you for opening this. Could you please test again and let me know if it works? I prefer folder names for agents in CamelCase without spaces.",
          "created_at": "2024-04-30T04:55:27Z"
        },
        {
          "author": "ZanzyTHEbar",
          "body": "Hey! Thanks for responding so quickly. I will test this and get back to you :)",
          "created_at": "2024-04-30T14:07:01Z"
        },
        {
          "author": "ZanzyTHEbar",
          "body": "It seems to be working, but now _all_ of my projects fail to create tools: \r\n\r\n```bash\r\nCreateTool ⚙️ Function Output\r\nError: Request timed out.\r\n```\r\nThen it continues to try until i get this: \r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/workspaces/verdant_virtuoso/.venv/lib/python3.11",
          "created_at": "2024-04-30T17:46:11Z"
        },
        {
          "author": "slowell",
          "body": "> It seems to be working, but now _all_ of my projects fail to create tools:\r\n> \r\n> ```shell\r\n> CreateTool ⚙️ Function Output\r\n> Error: Request timed out.\r\n> ```\r\n> \r\n> Then it continues to try until i get this:\r\n> \r\n> ```shell\r\n> Traceback (most recent call last):\r\n>   File \"/workspaces/verdant_vir",
          "created_at": "2024-05-01T00:33:04Z"
        },
        {
          "author": "VRSEN",
          "body": "Thanks for the feedback, guys. This can happen if you are creating or running an extremely complex agency where a run timeout occurs before agents have finished execution. I added some error handling for this; let me know if it helps. Hopefully, openai will add controls for the run timeout later.",
          "created_at": "2024-05-01T05:25:22Z"
        }
      ]
    },
    {
      "issue_number": 34,
      "title": "Turn off CoT when calling SendMessage.",
      "body": "Hi, @VRSEN, I noticed that it goes through the CoT by default when SendMessage is sent, and then the split subtasks are sent to the receiver one by one. This is probably practical for most task-splitting workflows, but there are still times when I'd like to skip the CoT and customize the message content. I understand that it might be possible to emphasize skipping the CoT in the Instruction when the Agent is instantiated, but I'd still like to use a more deterministic way of controlling the message content. Would it be possible to provide such a parameter like to turn off CoT by default?\r\n![image](https://github.com/VRSEN/agency-swarm/assets/19701927/37c10844-4503-4150-928e-69ec73b7a934)\r\n\r\nAlso, I'm developing a MySQL automated ops solution using Agency-Swarm, as I think he's the development framework that better fits my needs. My project is here: [DBMA](https://github.com/dcstrange/DBMA.git). In the future I'll feed the project development experience and requirements into the Agency-Swarm framework itself.",
      "state": "closed",
      "author": "dcstrange",
      "author_type": "User",
      "created_at": "2023-12-29T09:52:50Z",
      "updated_at": "2024-05-27T01:49:49Z",
      "closed_at": "2024-05-27T01:49:49Z",
      "labels": [
        "enhancement",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/34/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/34",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/34",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:42.335979",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-05-13T01:49:30Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-05-27T01:49:48Z"
        }
      ]
    },
    {
      "issue_number": 79,
      "title": "Feature Request - Optimize SolveCaptcha Tool for Fading CAPTCHAs in Agency Swarm's Browsing Agent",
      "body": "### Feature Request: Enhanced Image Processing for Fading CAPTCHAs\r\n\r\n**Problem Statement:**\r\nThe current implementation of the SolveCaptcha tool within the Agency Swarm's Browsing Agent takes screenshots of all the images within a CAPTCHA during each interaction cycle. This approach is not optimized for \"fading CAPTCHAs\", where images fade and new ones appear after an interaction. Currently, the tool re-scans all tiles, including those already determined to be irrelevant, leading to unnecessary processing and increased completion time.\r\n\r\n**Proposed Solution:**\r\nImplement an enhancement for the SolveCaptcha tool that intelligently processes only the changed or new images during fading CAPTCHA tasks. The proposed feature would initially scan all tiles, but after the first interaction, it would:\r\n\r\n- Keep track of the state of each tile (clicked/not clicked).\r\n- Identify and process only the new or changed tiles that appear after each interaction.\r\n- Utilize a caching mechanism to store the state of the tiles, reducing redundant analysis and requests to the AI model.\r\n\r\n**Benefits:**\r\n- **Efficiency:** Reduces the number of images processed by the AI model, saving on computational resources and time.\r\n- **Accuracy:** Focuses on changed images, potentially improving the success rate of CAPTCHA solving by ensuring that only relevant data is analyzed.\r\n- **Cost-effectiveness:** Minimizes the number of requests to the AI model, which could reduce operational costs associated with the API usage.\r\n\r\n**Implementation Considerations:**\r\n- Integrate an image comparison algorithm or leverage checksum/hash comparison techniques to detect changes in tiles.\r\n- Ensure that the new method respects rate limits and request quotas from the AI service.\r\n- Consider the implementation of a \"smart retry\" logic that reacts to CAPTCHA challenges dynamically, improving the tool's adaptability.\r\n\r\nThis feature would significantly enhance the Browsing Agent's ability to interact with complex CAPTCHA systems, streamlining the user experience and supporting more efficient web navigation.\r\n",
      "state": "closed",
      "author": "sfdrada",
      "author_type": "User",
      "created_at": "2024-02-15T20:43:18Z",
      "updated_at": "2024-05-27T01:49:48Z",
      "closed_at": "2024-05-27T01:49:47Z",
      "labels": [
        "enhancement",
        "stale"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/79/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/79",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/79",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:42.556112",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-04-12T03:53:46Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-05-13T01:49:29Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue was closed because it has been inactive for 14 days since being marked as stale. If the issue still persists, please reopen.",
          "created_at": "2024-05-27T01:49:47Z"
        }
      ]
    },
    {
      "issue_number": 109,
      "title": "Problem with Azure OpenAI",
      "body": "Executing code:\r\nfrom agency_swarm import Agency\r\n\r\nagency = Agency([ceo, [ceo, agent1]])\r\n\r\nI got this error:\r\n\r\n`---------------------------------------------------------------------------\r\nBadRequestError                           Traceback (most recent call last)\r\n[<ipython-input-9-8c249ad2af08>](https://localhost:8080/#) in <cell line: 3>()\r\n      1 from agency_swarm import Agency\r\n      2 \r\n----> 3 agency = Agency([ceo, [ceo, agent1]])\r\n\r\n6 frames\r\n[/usr/local/lib/python3.10/dist-packages/openai/_base_client.py](https://localhost:8080/#) in _request(self, cast_to, options, remaining_retries, stream, stream_cls)\r\n    986 \r\n    987             log.debug(\"Re-raising status error\")\r\n--> 988             raise self._make_status_error_from_response(err.response) from None\r\n    989 \r\n    990         return self._process_response(\r\n\r\nBadRequestError: Error code: 400 - {'error': {'type': 'invalid_request_error', 'param': 'model', 'code': 'model_not_found'}}`\r\n\r\nThere should be some specific model deployments on my Azure OpenAI service? \r\nThanks for help",
      "state": "closed",
      "author": "Chmurexxx",
      "author_type": "User",
      "created_at": "2024-04-17T15:07:09Z",
      "updated_at": "2024-05-09T04:59:06Z",
      "closed_at": "2024-05-09T04:58:26Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/109/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/109",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/109",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:42.820700",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Yes, you need to first create a deployment on Azure OpenAI Studio for a specific model, and then enter deployment name when intializing your agents for `model` parameter.\r\n\r\n**Docs**: https://vrsen.github.io/agency-swarm/advanced-usage/azure-openai/",
          "created_at": "2024-04-20T04:01:52Z"
        }
      ]
    },
    {
      "issue_number": 111,
      "title": "Temperature Integration on Agent Creation",
      "body": "Hi there! Temperature can be set with the creation of an agent within OpenAI. It would be great to add that to the Agent class as an input parameter so that individual Agent temperatures can be controlled within the Agency.  \r\n\r\nThanks in advance!",
      "state": "closed",
      "author": "hicknughes",
      "author_type": "User",
      "created_at": "2024-04-23T16:34:52Z",
      "updated_at": "2024-04-30T06:15:29Z",
      "closed_at": "2024-04-30T06:13:08Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/111/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/111",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/111",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:43.040292",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Hey yeah, there were a lot of updates so I am working on it right now. It's almost done. You can checkout `dev/assistants-v2` branch",
          "created_at": "2024-04-24T03:55:00Z"
        },
        {
          "author": "hicknughes",
          "body": "Great! Will that version also allow for the use of a specific agent on a specific thread? I have been using OpenAI's Assistants API to deploy agents on specific threads in an effort to control token cost creep. Is there a better solution that exists or in development within the agency-swarm framewor",
          "created_at": "2024-04-25T19:30:31Z"
        },
        {
          "author": "VRSEN",
          "body": "There are new parameters in the agency and agent classes to control token costs from Assistants V2. Simply set `max_prompt_tokens` and OpenAI will do the truncating for you. The parameter in the agent class overrides the parameter in the agency, which acts as the default. `temperature` works the sam",
          "created_at": "2024-04-30T06:13:08Z"
        }
      ]
    },
    {
      "issue_number": 85,
      "title": "some minor issues",
      "body": "![image](https://github.com/VRSEN/agency-swarm/assets/96944978/8d3af307-48dc-4760-b1b7-f9fedf933dcd)\r\n![image](https://github.com/VRSEN/agency-swarm/assets/96944978/39f38065-cf2e-44d9-a4b5-90f7d1ecf5a8)\r\n\r\nFirst there are some time timeout issue idk why \r\n2nd as yellow labels are hiding my input labels which some time I think my agent is being confused to enter data in same input field again without adding the data in 2nd field and moving forward.",
      "state": "closed",
      "author": "obaidmuneer",
      "author_type": "User",
      "created_at": "2024-02-25T19:18:03Z",
      "updated_at": "2024-04-12T03:59:30Z",
      "closed_at": "2024-04-12T03:59:29Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/85/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/85",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/85",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:43.270787",
      "comments": [
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-04-12T03:53:43Z"
        },
        {
          "author": "VRSEN",
          "body": "Some websites might have weird html structure which can cause these issues. Anyway, upgrade to the latest release and reimport new browsing agent please",
          "created_at": "2024-04-12T03:59:29Z"
        }
      ]
    },
    {
      "issue_number": 68,
      "title": "Enhance Agency class to support optional public sharing in Gradio demos",
      "body": "I am working on adding the tutorial notebook and ran into an issue. When running the notebook in colab, you can see when you launch gradio it gives an error that the value for share must equal True to launch a public interface, but, colab has some underlying settings that override this and launch the public url anyway. \r\n\r\nBut, if you try running the notebook with jupyter it doesnt launch the public url. And if you are running the notebook from within a container, it will only launch on 127.0.0.1 from within container which is not accessible. You could enable passing through the ability to set the ip address and launch it to 0.0.0.0, but for my use case it would suffice to simply enable passing through the sharing setting. \r\n\r\nI think I will also need this when I get past the notebooks and am running it as a python project as my typical dev environment is a container running on a remote k8s cluster so if I use gradio it will be nice to have this option. \r\n\r\nI have already modified and tested updating the demo_gradio function to leave the default value of share=False but allow the share=True option to be passed in when calling `agency.demo_gradio(height=900, share=True)`. \r\n![Screenshot 2024-01-31 at 11 53 55 PM](https://github.com/VRSEN/agency-swarm/assets/17549071/83e5fe8a-d03f-40cd-a8f0-38a09a0ba2cf)\r\n\r\nI will submit a PR to resolve this issue shortly, I am not sure if you normally allow PR's without an associated issue ticket but in case I wanted to submit this ticket in advance of the PR to provide a clear explanation. \r\n\r\nI'm sure you will see the diff in the PR I submit, but if you want to see the reference from my fork its here: https://github.com/afewell/agency-swarm/commit/588d671093a2148461a005220746b64465ea0446\r\n\r\nThanks!",
      "state": "closed",
      "author": "afewell",
      "author_type": "User",
      "created_at": "2024-02-01T07:56:16Z",
      "updated_at": "2024-04-12T03:57:48Z",
      "closed_at": "2024-04-12T03:57:48Z",
      "labels": [
        "stale"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/68/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/68",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/68",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:43.484955",
      "comments": [
        {
          "author": "VRSEN",
          "body": "Thank you, I will merge soon.",
          "created_at": "2024-02-02T03:48:15Z"
        },
        {
          "author": "github-actions[bot]",
          "body": "This issue is stale because it has been open for 30 days with no activity. Please upgrade to the latest version and test it again.",
          "created_at": "2024-04-12T03:53:50Z"
        }
      ]
    },
    {
      "issue_number": 66,
      "title": "Feedback: Using Zapier in the introductory tutorial notebook is a bad UX",
      "body": "I am really excited to use this project, I love the design decisions and if all goes well I would like to be a regular user and contributor. \r\n\r\nI know in the tutorial notebook it says zapier is optional, but I would really like to learn as much as I can so I thought I would try, and I have never had such a frustrating experience trying to get an API key. I think they have changed their UI as all the bots are wrong, perplexity is wrong, your chatbot is wrong, all the instructions I can find are wrong. There is no option to create an app, their is a section that says apps, but when you create new you can create several things, none of which is an app. And yes I am using the developer platform. The default option to create a zap from the developer platform is an AI workflow that tries to use AI to build your zap, so using a value like \"Agency Swarm Integration\" as suggested by the Swarm Agent Chatbot doesnt work. There is an option to switch to manually create Zap, but its not even save-able until I configure at least one trigger and 1 action. The NLA Instructions say to connect your account to a custom action, but it is not usable until you select an available existing action from their list, I cannot find any way around it. \r\n\r\nI have used a LOT of API's from a lot of sites, gotten a lot of api keys, never had much trouble until zapier, and I know it says the option can be skipped but I think putting something like this which can easily lead to frustration in the introductory tutorial which has a high risk of making people frustrated before they can even try agency swarm, and the problem has nothing to do with agency swarm. \r\n\r\nI am not trying to insist that something be changed for my benefit, just offering a suggestion as I think not using the zapier integration in the introductory tutorial and maybe making it a separate example would be a better user experience and create a better assurance that new users have a good experience when first trying out agency swarm. \r\n\r\nThank you!",
      "state": "closed",
      "author": "afewell",
      "author_type": "User",
      "created_at": "2024-01-31T00:04:49Z",
      "updated_at": "2024-02-06T23:07:29Z",
      "closed_at": "2024-02-06T23:07:29Z",
      "labels": [
        "feedback"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/66/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/VRSEN/agency-swarm/issues/66",
      "api_url": "https://api.github.com/repos/VRSEN/agency-swarm/issues/66",
      "repository": "VRSEN/agency-swarm",
      "extraction_date": "2025-06-22T00:42:45.399780",
      "comments": [
        {
          "author": "afewell",
          "body": "For clarity the link to the introductory tutorial notebook I am using is from the video, not on this repo. The link provided is https://colab.research.google.com/drive/1qGVyK-vIoxZD0dMrMVqCxCsgL1euMLKj#scrollTo=sY8FY_UwLKy_&uniqifier=2\r\n\r\nThanks! ",
          "created_at": "2024-01-31T00:27:37Z"
        },
        {
          "author": "VRSEN",
          "body": "Thanks for feedback @afewell. I totally agree with you. This notebook was created a long time ago, and needs an update. Do you have any suggestions for which tools to replace them with?",
          "created_at": "2024-01-31T02:40:42Z"
        },
        {
          "author": "arnavsaxena17",
          "body": "Get zapier key here : https://nla.zapier.com/credentials/",
          "created_at": "2024-01-31T10:42:30Z"
        },
        {
          "author": "afewell",
          "body": "Wow Thanks for such a quick response ... honestly I wasnt expecting such a rapid response and I'd hoped to already have some updates to commit. I am still finding my way around but I will plan to make a PR with some revised suggestions for the notebook soon. If you would prefer to close this please ",
          "created_at": "2024-01-31T19:00:44Z"
        },
        {
          "author": "afewell",
          "body": "Going through this notebook has been a great learning exercise for me as you have done so many great updates since this was written, ive been going in and updating it with current methods. I still have more to update and am about out of time tonight but I will get it all updated to current methods a",
          "created_at": "2024-02-01T09:18:43Z"
        }
      ]
    }
  ]
}