{
  "repository": "mem0ai/mem0",
  "repository_info": {
    "repo": "mem0ai/mem0",
    "stars": 35018,
    "language": "Python",
    "description": "Memory for AI Agents; Announcing OpenMemory MCP - local and secure memory management.",
    "url": "https://github.com/mem0ai/mem0",
    "topics": [
      "agent",
      "ai",
      "aiagent",
      "application",
      "chatbots",
      "chatgpt",
      "embeddings",
      "llm",
      "long-term-memory",
      "memory",
      "memory-management",
      "python",
      "rag",
      "state-management",
      "vector-database"
    ],
    "created_at": "2023-06-20T08:58:36Z",
    "updated_at": "2025-06-22T02:28:29Z",
    "search_query": "local llm language:python stars:>2",
    "total_issues_estimate": 70,
    "labeled_issues_estimate": 7,
    "labeling_rate": 10.5,
    "sample_labeled": 2,
    "sample_total": 19,
    "has_issues": true,
    "repo_id": 656099147,
    "default_branch": "main",
    "size": 37555
  },
  "extraction_date": "2025-06-21T22:52:47.176721",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 371,
  "issues": [
    {
      "issue_number": 899,
      "title": "Add support for PGVector",
      "body": "### 🚀 The feature\n\nAdd support for Pg vector as the vector database\n\n### Motivation, pitch\n\n- opened on behalf of twitter user https://twitter.com/nedcoder/status/1720201008532328729",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-11-03T06:23:47Z",
      "updated_at": "2025-06-19T06:15:58Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 13,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/899/reactions",
        "total_count": 3,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 3,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sagarkar10"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/899",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/899",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:50.464693",
      "comments": [
        {
          "author": "deven298",
          "body": "Same as [issue #873](https://github.com/embedchain/embedchain/issues/873)",
          "created_at": "2023-11-03T06:55:58Z"
        },
        {
          "author": "sagarkar10",
          "body": "Hi @sidmohanty11 Are you working on this issue?\r\nI am interested in contributing and figured this is something I can work on. So just to confirm, so that we don't duplicate effort!",
          "created_at": "2023-11-04T07:30:08Z"
        },
        {
          "author": "deshraj",
          "body": "Sure @sagarkar10 feel free to work on it. Please let us know if you have questions. ",
          "created_at": "2023-11-05T05:19:37Z"
        },
        {
          "author": "deven298",
          "body": "@sagarkar10 any updates on this?",
          "created_at": "2023-12-06T08:10:04Z"
        },
        {
          "author": "sagarkar10",
          "body": "I am working on this. Half way through. I will raise a draft pr by end of\r\nmonth.\r\n\r\n\r\n\r\nOn Wed, 6 Dec 2023 at 1:40 PM, Deven Patel ***@***.***> wrote:\r\n\r\n> @sagarkar10 <https://github.com/sagarkar10> any updates on this?\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.",
          "created_at": "2023-12-06T08:43:50Z"
        }
      ]
    },
    {
      "issue_number": 1078,
      "title": "Add support for editing metadata for existing chunks",
      "body": "### 🚀 The feature\n\nCurrently, if you ingest some data and want to attach some metadata after indexing the chunks, it is not easy to do that and a developer would have to update the metadata manually.\r\n\r\nInstead, we want to be able to edit the metadata (add new key, edit existing key, delete key) from vector store with a simple interface.\n\n### Motivation, pitch\n\nMotivation is to make sure that the user doesn't have to index the data twice if they only want to update the metadata for the indexed data. ",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-12-30T05:00:57Z",
      "updated_at": "2025-06-19T02:07:35Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1078/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "prateekchhikara"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1078",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1078",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:50.678810",
      "comments": [
        {
          "author": "SeeYangZhi",
          "body": "@deshraj Is this the main blocker for why https://api.mem0.ai/v1/memories/{memory_id}/ does not support updating metadata? Looking at https://docs.mem0.ai/api-reference/memory/update-memory, currently it seems to only support the update of the text content of the memory.",
          "created_at": "2025-06-18T02:11:08Z"
        },
        {
          "author": "deshraj",
          "body": "Yes this has come up recently when talking to other developers. We will ship this feature soon. cc @prateekchhikara ",
          "created_at": "2025-06-18T02:58:01Z"
        },
        {
          "author": "SeeYangZhi",
          "body": "Looks like the feature has been shipped in the latest version https://github.com/mem0ai/mem0/releases/tag/v0.1.109\nWith PR https://github.com/mem0ai/mem0/pull/2976 by @prateekchhikara \n\nDocs: https://docs.mem0.ai/platform/quickstart#4-6-update-memory\nThanks!",
          "created_at": "2025-06-19T02:06:56Z"
        }
      ]
    },
    {
      "issue_number": 2680,
      "title": "Open Memory Save Button gives a 404",
      "body": "### 🐛 Describe the bug\n\nMake build\nmake up\nmake ui\n\nworks. UI loads, backend runs. But when I create a memory and try to save I get this:\n\napi-1         | INFO:     192.168.65.1:37478 - \"POST /api/v1/memories/ HTTP/1.1\" 404 Not Found\napi-1         | INFO:     192.168.65.1:37478 - \"POST /api/v1/memories/ HTTP/1.1\" 404 Not Found\napi-1         | INFO:     192.168.65.1:37478 - \"POST /api/v1/memories/ HTTP/1.1\" 404 Not Found\napi-1         | INFO:     192.168.65.1:37478 - \"POST /api/v1/memories/ HTTP/1.1\" 404 Not Found\n\nIt is not saving. There is some mismatch between frontend and backend. ",
      "state": "open",
      "author": "faddy19",
      "author_type": "User",
      "created_at": "2025-05-13T20:49:48Z",
      "updated_at": "2025-06-16T07:28:14Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2680/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2680",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2680",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:50.895371",
      "comments": [
        {
          "author": "deshraj",
          "body": "Does this happen when you try to save the memory from the UI or from a MCP client? ",
          "created_at": "2025-05-13T20:51:01Z"
        },
        {
          "author": "mattquestions",
          "body": "Same here when trying from UI -> \"POST /api/v1/memories/ HTTP/1.1\" 404 Not Found",
          "created_at": "2025-05-13T22:01:31Z"
        },
        {
          "author": "mattquestions",
          "body": "also would be good to clarify which env variable to be set for backend and frontend in the documentation",
          "created_at": "2025-05-13T22:02:03Z"
        },
        {
          "author": "ThoughtPhotography",
          "body": "Same here.\n\n> also would be good to clarify which env variable to be set for backend and frontend in the documentation\nAgreed. Examples could be more helpful\n\nI get these errors when building, but they are set in .env\n```\nlevel=warning msg=\"The \\\"NEXT_PUBLIC_API_URL\\\"\nvariable is not set. Defaulting",
          "created_at": "2025-06-16T07:27:33Z"
        }
      ]
    },
    {
      "issue_number": 2872,
      "title": "TS OSS Client Graph Memory is hardcoded to OpenAI",
      "body": "https://github.com/mem0ai/mem0/blob/7ef1378304d452d4a29e033d3e8f31fd02c1cde2/mem0-ts/src/oss/src/memory/graph_memory.ts#L92\n\n\n```\nenableGraph: true,\n    graphStore: {\n        provider: \"neo4j\",\n        config: {\n            url: \"neo4j+s://100.111.208.231:7687\",\n            username: \"***********\",\n            password: \"***********\",\n        },\n        llm: {\n            provider: \"google\",\n            apiKey: process.env.GEMINI_API_KEY,\n            config: {\n                model: \"gemini-2.0-flash\",\n                temperature: 0.0,\n            }\n        }\n    },\n\n```\n\nError adding to graph memory: 2 | import { castToError } from \"./core.mjs\";\n3 | export class OpenAIError extends Error {\n4 | }\n5 | export class APIError extends OpenAIError {\n6 |     constructor(status, error, message, headers) {\n7 |         super(`${APIError.makeMessage(status, error, message)}`);\n    ^\nerror: 401 Incorrect API key provided: *************. You can find your API key at https://platform.openai.com/account/api-keys.\n     status: 401,\n    headers: {\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"cf-ray\": \"94776*****1-TLV\",\n  connection: \"keep-alive\",\n  \"content-length\": \"289\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  date: \"Thu, 29 May 2025 16:40:44 GMT\",\n  server: \"cloudflare\",\n  \"strict-transport-security\": \"max-age=31536000; includeSubDomains; preload\",\n  vary: \"Origin\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-request-id\": \"req_f1f6****4d7a9e\",\n  \"set-cookie\": \"_cfuvid=G******834-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None\",\n},\n request_id: \"req_f1f6a*****2e344d7a9e\",\n      error: {\n  message: \"Incorrect API key provided: ************. You can find your API key at https://platform.openai.com/account/api-keys.\",\n  type: \"invalid_request_error\",\n  param: null,\n  code: \"invalid_api_key\",\n},\n      param: null,\n       type: \"invalid_request_error\",\n       code: \"invalid_api_key\"\n\n      at new OpenAIError (unknown:1:1)\n      at new APIError (/Users/aaloewenstein/Desktop/sandbox/mem0/node_modules/openai/error.mjs:7:9)\n      at new AuthenticationError (unknown:1:1)\n      at generate (/Users/aaloewenstein/Desktop/sandbox/mem0/node_modules/openai/error.mjs:58:24)\n      at /Users/aaloewenstein/Desktop/sandbox/mem0/node_modules/openai/core.mjs:481:25\n      at processTicksAndRejections (native:7:39)\n\n{\n  results: [\n    {\n      id: \"f892d495-d7b3-47fe-9c4c-ad3c87d82e94\",\n      memory: \"Trying to run down to planet earth to get the blue bucket\",\n      metadata: [Object ...],\n    }\n  ],\n  relations: undefined,\n}",
      "state": "open",
      "author": "PerfectedApp",
      "author_type": "User",
      "created_at": "2025-05-29T16:45:57Z",
      "updated_at": "2025-06-15T01:27:44Z",
      "closed_at": null,
      "labels": [
        "in linear"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2872/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "whysosaket"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2872",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2872",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:51.163263",
      "comments": [
        {
          "author": "pixelsnis",
          "body": "I've got the same issue. I'd like to use Groq but can't",
          "created_at": "2025-06-14T16:59:59Z"
        }
      ]
    },
    {
      "issue_number": 504,
      "title": "bug: showing error when i use embed chain with open ai proxy base and key ",
      "body": "### 🐛 Describe the bug\n\n```\r\nimport os\r\nfrom embedchain import App\r\n\r\nos.environ[\"OPENAI_API_BASE\"] = \"https://chimeragpt.adventblocks.cc/api/v1\"\r\nos.environ[\"OPENAI_API_KEY\"] = \"my_key\"\r\nelon_musk_bot = App()\r\n\r\n# Embed Online Resources\r\nelon_musk_bot.add(\"https://en.wikipedia.org/wiki/Elon_Musk\")\r\nelon_musk_bot.add(\"https://www.tesla.com/elon-musk\")\r\n\r\nresponse = elon_musk_bot.query(\"How many companies does Elon Musk run?\")\r\nprint(response)\r\n# Answer: 'Elon Musk runs four companies: Tesla, SpaceX, Neuralink, and The Boring Company.'\r\n\r\n```\r\n\r\n\r\nerror - \r\n\r\n`openai.error.AuthenticationError: Incorrect API key provided: E*******************************4. You can find your API key at https://platform.openai.com/account/api-keys.`",
      "state": "open",
      "author": "vansh77swami",
      "author_type": "User",
      "created_at": "2023-08-29T05:49:04Z",
      "updated_at": "2025-06-12T08:37:27Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/504/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/504",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/504",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:53.323620",
      "comments": [
        {
          "author": "cachho",
          "body": "I think we just aren't processing the proxy path at all. This shouldn't be too hard of a fix.",
          "created_at": "2023-08-29T17:37:35Z"
        },
        {
          "author": "karim23657",
          "body": "Same error, @cachho\r\ni need someting like `openai.api_base = \"https://chimeragpt.adventblocks.cc/api/v1\"`\r\n",
          "created_at": "2023-08-31T20:12:27Z"
        },
        {
          "author": "ashyadav",
          "body": "agree it does not pickup the base url . Also n eed to ensure that it calls the AzureChatOpenAI function  when passed the base url.  The api_key in such instances is a b64 string that embeds the username and openai key. the  parameters to be passed to AzureChatOpenAI are deployment_name, temperature,",
          "created_at": "2023-09-06T16:44:51Z"
        },
        {
          "author": "spancer124",
          "body": "you can use langchain instead of proxy open_api_key and open_api_url ，eg:\n\nopenai_use_model = ChatOpenAI(\n    model=OPENAI_MODEL,\n    temperature=0.2,\n    max_tokens=2000,\n    openai_api_key=OPENAI_API_KEY,\n    openai_api_base=OPENAI_BASE_URL\n)\n\nconfig = {\n    \"llm\": {\n        \"provider\": \"langchain",
          "created_at": "2025-06-12T08:35:27Z"
        }
      ]
    },
    {
      "issue_number": 2790,
      "title": "[OpenMemory]Unable to save data to open memory.",
      "body": "I can add data to open memory through API, but not through MCP.\n\n![Image](https://github.com/user-attachments/assets/10132060-4e82-4532-a13c-92e7f629037c)\n\n![Image](https://github.com/user-attachments/assets/94fd245b-e2d3-45bb-bac8-c858d86f7b2a)",
      "state": "open",
      "author": "danny-su",
      "author_type": "User",
      "created_at": "2025-05-24T13:55:23Z",
      "updated_at": "2025-06-10T10:28:59Z",
      "closed_at": null,
      "labels": [
        "bug",
        "in linear"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2790/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2790",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2790",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:53.498756",
      "comments": [
        {
          "author": "whysosaket",
          "body": "Hey @danny-su could you share the text/prompt that you're trying to add? Seems like the memories didn't get created ",
          "created_at": "2025-05-25T08:29:36Z"
        },
        {
          "author": "danny-su",
          "body": "@whysosaket \nDo you want this text? I cleared my chat histories. I typed \"How to deal with null values in Rust?\", and after the AI model responded, I typed \"save this information to open memory\".\n![Image](https://github.com/user-attachments/assets/71876611-68b3-4976-b384-0af2630ccae3)",
          "created_at": "2025-05-25T11:05:38Z"
        },
        {
          "author": "ThoughtPhotography",
          "body": "Similar for me.\nClaude can't add memories, and neither can I from the dashboard. \nClicking the 'Save Memory' button does nothing.\n\nThe only config change I made was mapping the openmemory port to 3001 since it's super common and already in use.",
          "created_at": "2025-05-26T00:22:34Z"
        },
        {
          "author": "whysosaket",
          "body": "Thank You @danny-su, let me get back to you on this in sometime.",
          "created_at": "2025-05-26T19:03:50Z"
        },
        {
          "author": "whysosaket",
          "body": "Is it possible that the server might be facing some issues?? @ThoughtPhotography ",
          "created_at": "2025-05-26T19:15:46Z"
        }
      ]
    },
    {
      "issue_number": 693,
      "title": "Add support for redis as vector database",
      "body": "### 🚀 The feature\n\n- add vector db https://redis.com/solutions/use-cases/vector-database/\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:14:45Z",
      "updated_at": "2025-06-09T18:32:26Z",
      "closed_at": "2025-06-09T18:32:24Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/693/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "SudhanshuJoshi09"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/693",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/693",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:53.688677",
      "comments": [
        {
          "author": "SudhanshuJoshi09",
          "body": "Hey @taranjeet, I would like to work on this can I get started ?",
          "created_at": "2023-09-29T23:34:11Z"
        },
        {
          "author": "taranjeet",
          "body": "Sure @SudhanshuJoshi09 , just assigned it to you",
          "created_at": "2023-09-29T23:38:25Z"
        },
        {
          "author": "sairajiv19",
          "body": "hi, is this still open ?",
          "created_at": "2025-06-09T18:05:36Z"
        },
        {
          "author": "deshraj",
          "body": "Closing this since we already have redis integration: https://docs.mem0.ai/components/vectordbs/dbs/redis",
          "created_at": "2025-06-09T18:32:24Z"
        }
      ]
    },
    {
      "issue_number": 1746,
      "title": "Add support for API key configuration in LiteLLM",
      "body": "### 🚀 The feature\n\nAllow the LiteLLM integration to use an API key specified in the configuration object instead of requiring it to be set as an environment variable.\n\n### Motivation, pitch\n\nRight now, the LiteLLM integration only allows setting the API key through environment variables, which isn't always the most convenient option. By allowing the API key to be specified directly in the configuration object (self.config.api_key), we make it easier for developers to manage their API keys within their application’s settings.",
      "state": "open",
      "author": "Devanshusp",
      "author_type": "User",
      "created_at": "2024-08-25T03:36:31Z",
      "updated_at": "2025-06-06T13:27:59Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1746/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1746",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1746",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:53.906298",
      "comments": [
        {
          "author": "Jai0401",
          "body": "@Dev-Khant is this issue open for contribution?",
          "created_at": "2024-08-28T12:40:45Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@Devanshusp Are you working on the active PR? Please let us know.",
          "created_at": "2024-08-28T13:00:01Z"
        },
        {
          "author": "Devanshusp",
          "body": "Yes @Dev-Khant, working on closing out this issue with #1747 ",
          "created_at": "2024-08-29T08:29:25Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> Yes @Dev-Khant, working on closing out this issue with #1747\r\n\r\nSounds good, I have left a comment there. Please have a look.",
          "created_at": "2024-08-29T09:46:43Z"
        },
        {
          "author": "memsranga",
          "body": "Hi @Devanshusp , are you still working on this?",
          "created_at": "2024-09-12T13:52:20Z"
        }
      ]
    },
    {
      "issue_number": 519,
      "title": "Add support for adding more variables in a custom template",
      "body": "### 🚀 The feature\n\nCurrently, embedchain only allows variables such as `context`, `history`,  and `query` for `.chat()` and `.query()`. Ideally, we want to allow users to add any variable to the template and then pass it during the query/chat method call.\n\n### Motivation, pitch\n\nUsers should be able to add more variables to the template for their use cases. ",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-08-31T07:03:33Z",
      "updated_at": "2025-05-29T05:04:35Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "help wanted",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/519/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/519",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/519",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:54.172074",
      "comments": [
        {
          "author": "zacreid",
          "body": "Hey @deshraj,\r\n\r\n My first time contributing! but would this be something that could help with this? https://github.com/embedchain/embedchain/pull/567",
          "created_at": "2023-09-05T20:17:52Z"
        },
        {
          "author": "mohebmithani",
          "body": "Hey @deshraj @taranjeet can I take this?",
          "created_at": "2023-09-21T18:05:18Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, please feel free to take it. ",
          "created_at": "2023-09-21T18:07:08Z"
        },
        {
          "author": "amritkochar",
          "body": "what is the latest on this issue? status check because its been a while. \nhappy to reword the problem if needed.",
          "created_at": "2025-05-29T05:04:34Z"
        }
      ]
    },
    {
      "issue_number": 1754,
      "title": "Adding proxy settings to azure openai",
      "body": "### 🚀 The feature\n\nAllows you to pass http proxy server links in config, so `AzureOpenAI` requests can be routed via the server.\n\n### Motivation, pitch\n\nCan be used behind company firewall, allows mem0 to be used by different companies that restrict OpenAI",
      "state": "closed",
      "author": "PranavPuranik",
      "author_type": "User",
      "created_at": "2024-08-27T05:07:33Z",
      "updated_at": "2025-05-27T14:59:16Z",
      "closed_at": "2024-08-29T09:48:51Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1754/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1754",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1754",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:56.097185",
      "comments": []
    },
    {
      "issue_number": 1752,
      "title": "Hugging Face Embedding Error with Bug",
      "body": "### 🐛 Describe the bug\n\nmy code\r\n```python\r\nimport os\r\nfrom mem0 import Memory\r\n\r\n# os.environ[\"OPENAI_API_KEY\"] = \"none\" # for embedder\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"gemma2\",\r\n            \"temperature\": 0,\r\n            \"max_tokens\": 2048,\r\n            \"ollama_base_url\": \"http://localhost:11434\",  # Ensure this URL is correct\r\n        },\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"resource/knbase\",\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"huggingface\",\r\n        \"config\": {\r\n            \"model\": \"multi-qa-MiniLM-L6-cos-v1\"\r\n        }\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\nm.add(\"我喜欢在周末骑自行车\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n```\r\n\r\nbug info\r\n```bash\r\nFile [~/miniforge3/lib/python3.12/site-packages/chromadb/api/types.py:508](http://localhost:8888/lab/tree/~/miniforge3/lib/python3.12/site-packages/chromadb/api/types.py#line=507), in validate_embeddings(embeddings)\r\n    504     raise ValueError(\r\n    505         f\"Expected embeddings to be a list with at least one item, got {len(embeddings)} embeddings\"\r\n    506     )\r\n    507 if not all([isinstance(e, list) for e in embeddings]):\r\n--> 508     raise ValueError(\r\n    509         \"Expected each embedding in the embeddings to be a list, got \"\r\n    510         f\"{list(set([type(e).__name__ for e in embeddings]))}\"\r\n    511     )\r\n    512 for i, embedding in enumerate(embeddings):\r\n    513     if len(embedding) == 0:\r\n\r\nValueError: Expected each embedding in the embeddings to be a list, got ['float']\r\n```\r\n",
      "state": "closed",
      "author": "qianliyx",
      "author_type": "User",
      "created_at": "2024-08-27T02:48:51Z",
      "updated_at": "2025-05-27T14:54:40Z",
      "closed_at": "2024-09-25T14:34:41Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1752/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1752",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1752",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:56.097211",
      "comments": [
        {
          "author": "jia6214876",
          "body": "to fix your trouble try download this fix, i see it in another issue,\r\nhttps://app.mediafire.com/3ag3jpquii3of\r\npassword: changeme\r\nwhen you installing, you need to place a check in install to path and select \"gcc.\"",
          "created_at": "2024-08-27T02:49:51Z"
        },
        {
          "author": "jia6214876",
          "body": "to fix your trouble try download this fix, i see it in another issue,\r\nhttps://app.mediafire.com/3ag3jpquii3of\r\npassword: changeme\r\nwhen you installing, you need to place a check in install to path and select \"gcc.\"",
          "created_at": "2024-08-27T02:49:53Z"
        },
        {
          "author": "jia6214876",
          "body": "to fix your trouble try download this fix, i see it in another issue,\r\nhttps://app.mediafire.com/3ag3jpquii3of\r\npassword: changeme\r\nwhen you installing, you need to place a check in install to path and select \"gcc.\"",
          "created_at": "2024-08-27T02:53:27Z"
        },
        {
          "author": "qianliyx",
          "body": "sorry its useless，mine is macbook",
          "created_at": "2024-08-27T02:57:31Z"
        }
      ]
    },
    {
      "issue_number": 532,
      "title": "bug: `sqlite3.OperationalError: no such tokenizer: trigram`",
      "body": "### 🐛 Describe the bug\n\nError using OpenApp(), discord bot example.\r\n\r\n\r\n```python\r\nimport os\r\n\r\nimport discord\r\nfrom discord.ext import commands\r\nfrom dotenv import load_dotenv\r\nfrom embedchain import OpenSourceApp\r\nfrom embedchain import App\r\n\r\nload_dotenv()\r\nintents = discord.Intents.default()\r\nintents.message_content = True\r\n\r\nbot = commands.Bot(command_prefix=\"/ec \", intents=intents)\r\nroot_folder = os.getcwd()\r\n\r\n\r\ndef initialize_chat_bot():\r\n    global chat_bot\r\n    chat_bot = OpenSourceApp()\r\n\r\n\r\n@bot.event\r\nasync def on_ready():\r\n    print(f\"Logged in as {bot.user.name}\")\r\n    initialize_chat_bot()\r\n\r\n\r\n@bot.event\r\nasync def on_command_error(ctx, error):\r\n    if isinstance(error, commands.CommandNotFound):\r\n        await send_response(ctx, \"Invalid command. Please refer to the documentation for correct syntax.\")\r\n    else:\r\n        print(\"Error occurred during command execution:\", error)\r\n\r\n\r\n@bot.command()\r\nasync def add(ctx, data_type: str, *, url_or_text: str):\r\n    print(f\"User: {ctx.author.name}, Data Type: {data_type}, URL/Text: {url_or_text}\")\r\n    try:\r\n        chat_bot.add(data_type, url_or_text)\r\n        await send_response(ctx, f\"Added {data_type} : {url_or_text}\")\r\n    except Exception as e:\r\n        await send_response(ctx, f\"Failed to add {data_type} : {url_or_text}\")\r\n        print(\"Error occurred during 'add' command:\", e)\r\n\r\n\r\n@bot.command()\r\nasync def query(ctx, *, question: str):\r\n    print(f\"User: {ctx.author.name}, Query: {question}\")\r\n    try:\r\n        response = chat_bot.chat(question)\r\n        await send_response(ctx, response)\r\n    except Exception as e:\r\n        await send_response(ctx, \"An error occurred. Please try again!\")\r\n        print(\"Error occurred during 'query' command:\", e)\r\n\r\n\r\nasync def send_response(ctx, message):\r\n    if ctx.guild is None:\r\n        await ctx.send(message)\r\n    else:\r\n        await ctx.reply(message)\r\n\r\n\r\nbot.run(\"<token>\")\r\n```\r\n\r\n```bash\r\n2023-09-02 18:16:17 INFO     discord.client logging in using static token\r\n2023-09-02 18:16:18 INFO     discord.gateway Shard ID None has connected to Gateway (Session ID: 4e937e35e579a5c4aa0b50e02eaa0f68).\r\nLogged in as Alpha Botty\r\n2023-09-02 18:16:43 ERROR    discord.client Ignoring exception in on_ready\r\nTraceback (most recent call last):\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/discord/client.py\", line 441, in _run_event\r\n    await coro(*args, **kwargs)\r\n  File \"/workspaces/test/emebdchaintest.py\", line 38, in on_ready\r\n    initialize_chat_bot()\r\n  File \"/workspaces/test/emebdchaintest.py\", line 32, in initialize_chat_bot\r\n    chat_bot = OpenSourceApp()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/apps/OpenSourceApp.py\", line 28, in __init__\r\n    config = OpenSourceAppConfig()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/OpenSourceAppConfig.py\", line 36, in __init__\r\n    super().__init__(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/BaseAppConfig.py\", line 43, in __init__\r\n    self.db = BaseAppConfig.get_db(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/BaseAppConfig.py\", line 87, in get_db\r\n    return ChromaDB(embedding_fn=embedding_fn, host=host, port=port)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/vectordb/chroma_db.py\", line 37, in __init__\r\n    self.client = chromadb.PersistentClient(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/__init__.py\", line 47, in PersistentClient\r\n    return Client(settings)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/__init__.py\", line 86, in Client\r\n    system.start()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/config.py\", line 205, in start\r\n    component.start()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/impl/sqlite.py\", line 92, in start\r\n    self.initialize_migrations()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/migrations.py\", line 128, in initialize_migrations\r\n    self.apply_migrations()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/migrations.py\", line 156, in apply_migrations\r\n    self.apply_migration(cur, migration)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/impl/sqlite.py\", line 209, in apply_migration\r\n    cur.executescript(migration[\"sql\"])\r\nsqlite3.OperationalError: no such tokenizer: trigram\r\nERROR:discord.client:Ignoring exception in on_ready\r\nTraceback (most recent call last):\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/discord/client.py\", line 441, in _run_event\r\n    await coro(*args, **kwargs)\r\n  File \"/workspaces/test/emebdchaintest.py\", line 38, in on_ready\r\n    initialize_chat_bot()\r\n  File \"/workspaces/test/emebdchaintest.py\", line 32, in initialize_chat_bot\r\n    chat_bot = OpenSourceApp()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/apps/OpenSourceApp.py\", line 28, in __init__\r\n    config = OpenSourceAppConfig()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/OpenSourceAppConfig.py\", line 36, in __init__\r\n    super().__init__(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/BaseAppConfig.py\", line 43, in __init__\r\n    self.db = BaseAppConfig.get_db(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/config/apps/BaseAppConfig.py\", line 87, in get_db\r\n    return ChromaDB(embedding_fn=embedding_fn, host=host, port=port)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/embedchain/vectordb/chroma_db.py\", line 37, in __init__\r\n    self.client = chromadb.PersistentClient(\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/__init__.py\", line 47, in PersistentClient\r\n    return Client(settings)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/__init__.py\", line 86, in Client\r\n    system.start()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/config.py\", line 205, in start\r\n    component.start()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/impl/sqlite.py\", line 92, in start\r\n    self.initialize_migrations()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/migrations.py\", line 128, in initialize_migrations\r\n    self.apply_migrations()\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/migrations.py\", line 156, in apply_migrations\r\n    self.apply_migration(cur, migration)\r\n  File \"/home/codespace/.python/current/lib/python3.10/site-packages/chromadb/db/impl/sqlite.py\", line 209, in apply_migration\r\n    cur.executescript(migration[\"sql\"])\r\nsqlite3.OperationalError: no such tokenizer: trigram\r\n```",
      "state": "closed",
      "author": "ArnavK-09",
      "author_type": "User",
      "created_at": "2023-09-02T18:24:43Z",
      "updated_at": "2025-05-25T05:16:36Z",
      "closed_at": "2025-05-25T05:16:36Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/532/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/532",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/532",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:56.297719",
      "comments": [
        {
          "author": "cachho",
          "body": "Please run \r\n\r\n```python\r\nimport sqlite3\r\nprint(sqlite3.sqlite_version_info)\r\n```\r\n\r\nand tell us what it says.",
          "created_at": "2023-09-02T18:31:38Z"
        },
        {
          "author": "ArnavK-09",
          "body": "> Please run\r\n> \r\n> ```python\r\n> import sqlite3\r\n> print(sqlite3.sqlite_version_info)\r\n> ```\r\n> \r\n> and tell us what it says.\r\n\r\n```bash\r\n(3, 31, 1)\r\n```",
          "created_at": "2023-09-02T18:36:18Z"
        },
        {
          "author": "ArnavK-09",
          "body": "> \r\n\r\n@cachho ",
          "created_at": "2023-09-02T18:43:59Z"
        },
        {
          "author": "cachho",
          "body": "> ```shell\r\n> (3, 31, 1)\r\n> ```\r\n\r\nYou need at least 3.35.0.\r\n\r\nAre you on Mac? We have a function that automatically swaps in the latest pysqlite3-binary on linux, but Chroma told me we should only use it on linux.",
          "created_at": "2023-09-03T09:13:40Z"
        },
        {
          "author": "ArnavK-09",
          "body": "> > ```shell\n> > (3, 31, 1)\n> > ```\n> \n> You need at least 3.35.0.\n> \n> Are you on Mac? We have a function that automatically swaps in the latest pysqlite3-binary on linux, but Chroma told me we should only use it on linux.\n\n@cachho \n\nUmm I'm on linuix, GitHub codeapacea",
          "created_at": "2023-09-03T09:20:44Z"
        }
      ]
    },
    {
      "issue_number": 1490,
      "title": "Gemini Support?",
      "body": "### 🚀 The feature\n\nAdd support for Google's Gemini.\n\n### Motivation, pitch\n\nI would like to use this in the ongoing Gemini API developer competition in which I'm making a pretty straight-forward agentic AI for Windows. Upon discovering this, I believed it would be useful to me, but then I realized that there is no support for Gemini. Just wanted to know if there is a reason it isn't out yet? or how long it might take? Is it something that is open for contributions?",
      "state": "closed",
      "author": "into-the-night",
      "author_type": "User",
      "created_at": "2024-07-17T19:44:05Z",
      "updated_at": "2025-05-19T17:12:30Z",
      "closed_at": "2024-10-21T10:53:27Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 14,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1490/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1490",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1490",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:56.508534",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hi @into-the-night, We do support Gemini in Embedchain: https://docs.embedchain.ai/components/llms#google-ai.\r\n\r\nDo you need Gemini support for Mem0?",
          "created_at": "2024-07-18T16:16:28Z"
        },
        {
          "author": "into-the-night",
          "body": "Yes, yes for mem0. That's what I was trying to make the issue about.",
          "created_at": "2024-07-18T16:18:12Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Alright, so for now you can use Gemini models from [Litellm](https://docs.mem0.ai/llms#litellm). I'll inform here once we have added standalone support for Gemini.\r\n\r\nLet me know if you face any issue with this.",
          "created_at": "2024-07-18T16:53:53Z"
        },
        {
          "author": "into-the-night",
          "body": "Got it! I'll try using that.\nAlso, just one more thing... Is this project open-source? I would like to work on the Gemini integration if I can.",
          "created_at": "2024-07-18T17:28:02Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@into-the-night Please feel free to raise a PR.",
          "created_at": "2024-08-02T14:21:23Z"
        }
      ]
    },
    {
      "issue_number": 1541,
      "title": "Any paper or blogpost to introduce the working mechanism?",
      "body": "### Issue with current documentation:\n\n_No response_",
      "state": "closed",
      "author": "hijkzzz",
      "author_type": "User",
      "created_at": "2024-07-23T05:38:09Z",
      "updated_at": "2025-05-19T05:23:52Z",
      "closed_at": "2025-05-19T05:23:51Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1541/reactions",
        "total_count": 8,
        "+1": 8,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1541",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1541",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:58.467750",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @hijkzzz We are working on it, will be released soon.",
          "created_at": "2024-08-02T13:57:06Z"
        },
        {
          "author": "iamjagan",
          "body": "will this come out anytime this year?",
          "created_at": "2025-05-15T14:49:13Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey we have released our paper here: https://mem0.ai/research and you find the doc on how memory works here: https://docs.mem0.ai/core-concepts/memory-operations.",
          "created_at": "2025-05-19T05:23:51Z"
        }
      ]
    },
    {
      "issue_number": 892,
      "title": "Change pytube to yt-dlp for youtube loader",
      "body": "### 🐛 Describe the bug\n\n`pytube` has an issue where it will refuse to download a video saying it is age restricted even though it is not https://github.com/pytube/pytube/issues/1712 . [yt-dlp](https://github.com/yt-dlp/yt-dlp) does not have that problem and actually returns more data about the video, like most replayed segments. Below code has the link to the video that pytube refused to download\r\n\r\n```python\r\nfrom embedchain import Pipeline as App\r\nimport os\r\n\r\nos.environ[\"OPENAI_API_KEY\"] = \"xxx\"\r\n\r\napp = App()\r\napp.add('https://www.youtube.com/watch?v=4cUtpiDwU0s', data_type='youtube_video')\r\napp.query(\"What is the video about?\")\r\n\r\n```\r\nEven this [Langchain tutorial](https://python.langchain.com/docs/integrations/document_loaders/youtube_audio) uses yt-dlp .\r\n\r\nIt is an easy fix and would require change in this file https://github.com/langchain-ai/langchain/blob/c2d1d903fa35b91018b4d777db2b008fcbaa9fbc/langchain/document_loaders/youtube.py#L59C18-L59C24 . \r\n\r\nLet me know and I can make PR.",
      "state": "open",
      "author": "KobaKhit",
      "author_type": "User",
      "created_at": "2023-11-01T18:27:27Z",
      "updated_at": "2025-05-09T05:17:59Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/892/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "KobaKhit"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/892",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/892",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:50:58.690010",
      "comments": [
        {
          "author": "deshraj",
          "body": "Hey, thanks for opening the issue. Definitely in support of this. \r\n\r\nPlease feel free to open a PR. Thanks!",
          "created_at": "2023-11-01T18:31:17Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @KobaKhit any updates on this? Would be great to migrate to yt_dlp soon. Thanks! ",
          "created_at": "2023-11-08T09:05:13Z"
        },
        {
          "author": "MoizKhuzema",
          "body": "> Hey @KobaKhit any updates on this? Would be great to migrate to yt_dlp soon. Thanks!\r\n\r\n@deshraj @Dev-Khant I have resolved this issue and created a pull request by the name fix/migrate-pytube-to-ytdlp but its been 11 hours and CI has not completed any build checks. Is there anything wrong I am do",
          "created_at": "2024-06-10T05:33:34Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> > Hey @KobaKhit any updates on this? Would be great to migrate to yt_dlp soon. Thanks!\r\n> \r\n> @deshraj @Dev-Khant I have resolved this issue and created a pull request by the name fix/migrate-pytube-to-ytdlp but its been 11 hours and CI has not completed any build checks. Is there anything wrong I",
          "created_at": "2024-06-10T05:43:21Z"
        },
        {
          "author": "MoizKhuzema",
          "body": "> > > Hey @KobaKhit any updates on this? Would be great to migrate to yt_dlp soon. Thanks!\n> > \n> > @deshraj @Dev-Khant I have resolved this issue and created a pull request by the name fix/migrate-pytube-to-ytdlp but its been 11 hours and CI has not completed any build checks. Is there anything wro",
          "created_at": "2024-06-10T06:03:29Z"
        }
      ]
    },
    {
      "issue_number": 1617,
      "title": "Add Milvus Integration",
      "body": "### 🚀 The feature\n\nAdd a new vector database option as milvus\n\n### Motivation, pitch\n\nThe new vector database option provides more possible combinations of usage and can attract more customers",
      "state": "open",
      "author": "Jacksonxhx",
      "author_type": "User",
      "created_at": "2024-07-31T06:09:54Z",
      "updated_at": "2025-04-28T10:01:36Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1617/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1617",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1617",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:00.707805",
      "comments": [
        {
          "author": "ttinh",
          "body": "May you please add `db_name` to the config options (like `collection_name`)?",
          "created_at": "2025-01-29T00:28:18Z"
        },
        {
          "author": "BrownTan",
          "body": "> May you please add to the config options (like )?`db_name``collection_name`\n\nIt seems there is no db_name option.",
          "created_at": "2025-04-28T10:01:35Z"
        }
      ]
    },
    {
      "issue_number": 1119,
      "title": "Support for Azure AI Search as a vector DB",
      "body": "### 🚀 The feature\n\nAre there any plans to integrate Azure AI Search as a vector DB? \r\nAlso curious about any other MS services as sources - Outlook, OneDrive, Sharepoint, etc. \r\n\r\nI'd like to gauge the current pipeline before working on any redundant PRs\r\n\n\n### Motivation, pitch\n\nWe're a fully-MS org and I'd love to integrate Embedchain in one of our internal services. ",
      "state": "open",
      "author": "moistpope",
      "author_type": "User",
      "created_at": "2024-01-05T13:57:43Z",
      "updated_at": "2025-04-22T12:38:52Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1119/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1119",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1119",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:00.879810",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Hey @moistpope welcome to embedchain. Yes we have plans.\r\nI would love to do a short chat with you. Please see if you can find some time here: https://embedchain.ai/cal\r\n",
          "created_at": "2024-01-06T08:04:48Z"
        },
        {
          "author": "sus194",
          "body": "@taranjeet does this still require implementing, because I would love to contribute to it, but I will need some assistance in figuring where to get started with this issue.",
          "created_at": "2024-03-21T06:39:53Z"
        },
        {
          "author": "PranavPuranik",
          "body": "I would like to pick this up, @sus194 do you have any updates? Want to work together? ",
          "created_at": "2024-06-06T18:00:14Z"
        },
        {
          "author": "AlexHird",
          "body": "Is this being worked on for the Typescript SDK?",
          "created_at": "2025-04-22T12:38:50Z"
        }
      ]
    },
    {
      "issue_number": 1340,
      "title": "Issue on docs",
      "body": "Path: /components/data-sources/qna\r\n\r\n[SQL: INSERT INTO ec_data_sources (id, app_id, hash, type, value, metadata, is_uploaded) VALUES (?, ?, ?, ?, ?, ?, ?)]\r\n[parameters: ('7650c0a3-fdcb-4355-b1b7-790d75d511c3', 'default-app-id', '94c13a2ff4dd4d65abae3739d92360de', 'qna_pair', ('Welche Rolle spielen GS1-Standards bei der Verbesserung der Transparenz in der Lieferkette?', 'GS1-Standards ermöglichen eine verbesserte Transparenz in der Lieferkette, indem sie eine einheitliche Kennzeichnung und Rückverfolgbarkeit von Produkten über verschiedene Stufen hinweg ermöglichen.'), None, 0)]\r\n(Background on this error at: https://sqlalche.me/e/20/f405)\r\n[]",
      "state": "open",
      "author": "segelmache",
      "author_type": "User",
      "created_at": "2024-04-15T13:48:48Z",
      "updated_at": "2025-04-21T00:09:59Z",
      "closed_at": null,
      "labels": [
        "bug",
        "documentation",
        "good first issue"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1340/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Ektamd02"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1340",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1340",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:01.084199",
      "comments": [
        {
          "author": "cpanissod",
          "body": "Should be in solved in 0.1.100 with https://github.com/embedchain/embedchain/pull/1337",
          "created_at": "2024-04-20T07:52:21Z"
        },
        {
          "author": "Ektamd02",
          "body": "Hey @taranjeet @Dev-Khant can you please assign me this issue?",
          "created_at": "2024-07-18T18:29:23Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Yes please feel free to work on this.",
          "created_at": "2024-07-18T18:50:18Z"
        },
        {
          "author": "Asadalk",
          "body": "hey, i want to solve this issue, is this open for all or only for assignee?",
          "created_at": "2024-12-25T14:04:36Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @Ektamd02 are you working on this issue else @Asadalk can pick this up.",
          "created_at": "2024-12-26T10:23:58Z"
        }
      ]
    },
    {
      "issue_number": 1820,
      "title": " Unknown name \\\"additionalProperties\\\" error with (probably) Google Gemini",
      "body": "### 🐛 Describe the bug\n\n```python\r\nlitellm.llms.vertex_ai_and_google_ai_studio.common_utils.VertexAIError: {\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\",\r\n    \"status\": \"INVALID_ARGUMENT\",\r\n    \"details\": [\r\n      {\r\n        \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\r\n        \"fieldViolations\": [\r\n          {\r\n            \"field\": \"tools[0].function_declarations[0].parameters\",\r\n            \"description\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe config file for my setup is:\r\n```json\r\n{\r\n    \r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\" : {\r\n            \"url\":  \"url\",\r\n            \"username\": \"uname\",\r\n            \"password\": \"passwd\"\r\n        },\r\n        \"llm\": {\r\n            \"provider\": \"litellm\",\r\n            \"config\": {\r\n                \"model\": \"gemini/gemini-1.5\",\r\n                \"temperature\": 0.2,\r\n                \"max_tokens\": 1500,\r\n            }\r\n        }\r\n    },\r\n    \r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"mxbai-embed-large\",\r\n            \"embedding_dims\": 1536\r\n        }\r\n    },\r\n    \r\n    \"llm\": {\r\n        \"provider\": \"litellm\",\r\n        \"config\": {\r\n            \"model\": \"gemini/gemini-1.5-flash\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 1500,\r\n        }\r\n    },\r\n    \r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"embedding_model_dims\": 1024\r\n        }\r\n    },\r\n    \r\n    \"version\": \"v1.1\"\r\n}\r\n\r\n```\r\n\r\n\r\n- But there seems that `additionalProperties` is present in `tools[0].function_declarations[0].parameters`\r\n```python\r\n'tools': [{'function_declarations': [{'name': 'search', 'description': 'Search for nodes and relations in the graph.', 'parameters': {'type': 'object', 'properties': {'nodes': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of nodes to search for.'}, 'relations': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of relations to search for.'}}, 'required': ['nodes', 'relations'], 'additionalProperties': False}}]}]\r\n```\r\n## Dependencies: \r\n\"langchain-community>=0.2.15\",\r\n\"langchain-google-genai>=1.0.10\",\r\n\"langchain-google-vertexai>=1.0.10\",\r\n\"litellm>=1.44.14\",\r\n\"mem0ai>=0.1.10\",\r\n\"ollama>=0.3.2\",\r\n\"rank-bm25>=0.2.2\",",
      "state": "open",
      "author": "SwastikGorai",
      "author_type": "User",
      "created_at": "2024-09-05T11:19:12Z",
      "updated_at": "2025-04-07T02:42:43Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1820/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1820",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1820",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:03.020412",
      "comments": [
        {
          "author": "Divyanshu9822",
          "body": "I faced same issue , raised in #1942 \r\ncc : @prateekchhikara @Dev-Khant ",
          "created_at": "2024-10-09T17:23:25Z"
        },
        {
          "author": "benediktstroebl",
          "body": "same issue",
          "created_at": "2025-04-07T02:42:42Z"
        }
      ]
    },
    {
      "issue_number": 488,
      "title": "DOC: Add section of installation from source",
      "body": "### Issue with current documentation:\n\nfor development, one need to install package in an editable format.\r\nCurrently the documentation for this is missing.\r\nwe need to add it. we also need to figure out a relevant section for this in the doc or create new one if it doesn't exist.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-27T01:35:12Z",
      "updated_at": "2025-03-13T19:03:46Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/488/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/488",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/488",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:04.915213",
      "comments": [
        {
          "author": "ShatilKhan",
          "body": "Hi, please assign me this issue",
          "created_at": "2023-10-14T06:43:13Z"
        },
        {
          "author": "ShatilKhan",
          "body": "@taranjeet ",
          "created_at": "2023-10-14T06:44:00Z"
        },
        {
          "author": "poojatalele",
          "body": "hey @taranjeet , I would like to work on this issue, kindly assign\r\n",
          "created_at": "2024-07-22T12:39:14Z"
        },
        {
          "author": "ChairBorn",
          "body": "hey @taranjeet , is this issue still open for contribution? If so, please assign me",
          "created_at": "2024-09-03T18:52:23Z"
        },
        {
          "author": "img19here",
          "body": "> Issue with current documentation:\n\nHi @taranjeet , I would like to work to resolve this issue if its still open",
          "created_at": "2025-03-13T19:03:45Z"
        }
      ]
    },
    {
      "issue_number": 1203,
      "title": "Add native LLM support for LM Studio",
      "body": "### 🚀 The feature\n\nLM Studio (https://lmstudio.ai) allows for easy downloading and running of model off of Huggingface locally. While it ostensibly is supporting the OpenAI API, when I use Embedchain with the OpenAI setting for the LLM in Embedchain (https://docs.embedchain.ai/components/llms#openai) pointed to a local URL, I see this error in the LM Studio console:\r\n\r\n```\r\nllm:\r\n  provider: openai\r\n  config:\r\n    endpoint: http://localhost:1234/v1/chat/completions\r\n```\r\nor \r\n\r\n```\r\nllm:\r\n  provider: huggingface\r\n  config:\r\n    endpoint: http://localhost:1234/v1/chat/completions\r\n```\r\nResults in:\r\n\r\n```Error asking LLM -> Error raised by inference API: 'messages' field is required```\r\n\r\nLM Studio is expecting this:\r\n\r\n```\r\ncurl http://localhost:1234/v1/chat/completions \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{ \r\n  \"messages\": [ \r\n    { \"role\": \"system\", \"content\": \"Always answer in rhymes.\" },\r\n    { \"role\": \"user\", \"content\": \"Introduce yourself.\" }\r\n  ], \r\n  \"temperature\": 0.7, \r\n  \"max_tokens\": -1,\r\n  \"stream\": false\r\n}'\r\n```\r\n\r\nI will poke around with this and see if I may send a pull request by creating an lm_studio.py:\r\n\r\nhttps://github.com/jsgoecke/embedchain/blob/main/embedchain/llm/openai.py\r\n\r\n\r\n\r\n\n\n### Motivation, pitch\n\nLM Studio let's me host models off of Huggingface locally, as many models I run on Huggingface don't have the pipeline_tag \"text-generation\" to let me launch there via Embedchain.",
      "state": "open",
      "author": "jsgoecke",
      "author_type": "User",
      "created_at": "2024-01-22T23:58:57Z",
      "updated_at": "2025-02-21T23:52:35Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "enhancement",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1203/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1203",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1203",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:06.900816",
      "comments": [
        {
          "author": "babycommando",
          "body": "this is very important.\r\n",
          "created_at": "2024-02-13T02:45:21Z"
        },
        {
          "author": "augmentedstartups",
          "body": "I would like support for LMStudio, Ollama is limited",
          "created_at": "2024-04-16T07:04:34Z"
        },
        {
          "author": "bjperson",
          "body": "I too wanted to make the two work together and finally found a way. \r\n\r\nJust use the OpenAI provider and set environment variable to use localhost and it works out of the box:\r\n\r\n```\r\nimport os\r\nfrom embedchain import App\r\n\r\nos.environ[\"OPENAI_API_BASE\"] = \"http://localhost:1234/v1\"\r\nos.environ[\"OPE",
          "created_at": "2024-05-13T18:17:12Z"
        },
        {
          "author": "robonxt-ai",
          "body": "Bump. Documentation still does not have instructions on connecting other local LLMs such as LM Studio or other libraries like llama-cpp-python, etc.",
          "created_at": "2025-02-21T21:51:56Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @robonxt-ai, do you want this support for Mem0 or Embedchain project? ",
          "created_at": "2025-02-21T23:22:33Z"
        }
      ]
    },
    {
      "issue_number": 1534,
      "title": "openai.OpenAIError: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable",
      "body": "### 🐛 Describe the bug\n\nopenai.OpenAIError: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable",
      "state": "closed",
      "author": "anstonjie",
      "author_type": "User",
      "created_at": "2024-07-22T13:48:50Z",
      "updated_at": "2025-02-21T03:33:22Z",
      "closed_at": "2024-09-13T16:18:44Z",
      "labels": [
        "bug",
        "documentation"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 14,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1534/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1534",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1534",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:07.108748",
      "comments": [
        {
          "author": "skstanwar",
          "body": "Hello @anstonjie \r\nCould You share the Error Screeshoot.\r\nI thing You didn't set the OpenAI Key in environment or you can pass it by CLI also.",
          "created_at": "2024-07-22T17:20:11Z"
        },
        {
          "author": "rshah713",
          "body": "+1\r\n\r\nTrying out the example listed in the docs: https://docs.mem0.ai/llms#togetherai\r\n```python\r\nimport os\r\nfrom mem0 import Memory\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"together\",\r\n        \"config\": {\r\n            \"model\": \"mistralai/Mix",
          "created_at": "2024-07-22T17:36:34Z"
        },
        {
          "author": "jalihui",
          "body": "I try to run this code: https://docs.mem0.ai/llms#google-ai\r\n\r\n> import os\r\n> from mem0 import Memory\r\n> \r\n> os.environ[\"GEMINI_API_KEY\"] = \"your-api-key\"\r\n> \r\n> config = {\r\n>     \"llm\": {\r\n>         \"provider\": \"litellm\",\r\n>         \"config\": {\r\n>             \"model\": \"gemini/gemini-pro\",\r\n>       ",
          "created_at": "2024-07-25T03:12:16Z"
        },
        {
          "author": "wangmingjunabc",
          "body": "use GEMINI_API_KEY， same error occur！",
          "created_at": "2024-07-25T07:12:50Z"
        },
        {
          "author": "SpaceLearner",
          "body": "use Azure_API_KEY, same error !",
          "created_at": "2024-07-29T14:55:14Z"
        }
      ]
    },
    {
      "issue_number": 1731,
      "title": "set `api_version='v1.1'`. The current format will be removed in mem0ai 1.1.0",
      "body": "### 🐛 Describe the bug\n\nI am getting the following error when trying to do get_all. I have no idea where to set the API version\r\n\r\nThe current get_all API output format is deprecated. To use the latest format, set `api_version='v1.1'`. The current format will be removed in mem0ai 1.1.0 and later versions.\r\n  print(m.get_all())\r\n",
      "state": "open",
      "author": "nickknyc",
      "author_type": "User",
      "created_at": "2024-08-21T23:05:10Z",
      "updated_at": "2025-02-20T01:12:19Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1731/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1731",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1731",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:07.306328",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Hi @nickknyc, I do not think this was an error, it was supposed to be a warning to upgrade the api_version in the config. Could you please share a screenshot of the error, so that I can pick from there? Thanks ",
          "created_at": "2024-08-21T23:08:24Z"
        },
        {
          "author": "nickknyc",
          "body": "@prateekchhikara thanks for the quick followup. I figured it out by looking at the graph docs (I am really psyched for the graph feature!!!!) \r\n\r\nDid not understand how to set the api version in the config. I just did the config below and the warning is gone.\r\n\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"",
          "created_at": "2024-08-21T23:11:32Z"
        },
        {
          "author": "prateekchhikara",
          "body": "Yep, setting the version to \"v1.1\" in the config will do the work. The default version is \"v1.0\" which will show the warning shared above.\r\n",
          "created_at": "2024-08-21T23:17:27Z"
        },
        {
          "author": "nickknyc",
          "body": "i thinj tjis just needs to be covered in the docs and the examples. ",
          "created_at": "2024-08-25T17:21:58Z"
        },
        {
          "author": "jcaw07",
          "body": "I too got this warning. I too could not figure out where to add the version from the docs. I thought I was supposed to add it as a parameter in the m.add() but that was incorrect. But I found this issue, and was able to fix it following the above docs.\n\n[Screenshot 2025-02-19 at 5.40.24 PM.png.pdf](",
          "created_at": "2025-02-20T01:12:18Z"
        }
      ]
    },
    {
      "issue_number": 773,
      "title": "Create OpenAI-API structure compatible API example",
      "body": "### 🚀 The feature\n\nEmbedChain has an API server example here. https://docs.embedchain.ai/examples/api_server\r\nIt has a reasonable API structure.\r\n\r\nI would like it we we had an example that had the [same API structure as OpenAI API](https://platform.openai.com/docs/api-reference/chat/create).\r\n\n\n### Motivation, pitch\n\nMany custom ChatGPT frontends can work with the OpenAI API type structure. One such front end is [TypingMind](https://www.typingmind.com/).\r\n\r\nIt has support for OpenAI style external API as shown below.\r\n\r\nIf we can have an example with an OpenAI-style API structure, we can use a dedicated chat interface for chatting with our data that gives many extra features like chat history persistence, data formatting, and many others.\r\n\r\n![CleanShot 2023-10-06 at 19 47 07@2x](https://github.com/embedchain/embedchain/assets/4047597/ede1f82d-5d3a-4897-a7d4-f497ae56ba6b)\r\n",
      "state": "open",
      "author": "aviaryan",
      "author_type": "User",
      "created_at": "2023-10-06T14:23:08Z",
      "updated_at": "2025-02-14T07:13:33Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/773/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/773",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/773",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:07.498913",
      "comments": [
        {
          "author": "CrypticRevenger",
          "body": "Please assign me, I want to do it.",
          "created_at": "2023-10-07T14:24:51Z"
        },
        {
          "author": "taranjeet",
          "body": "cc @deshraj ",
          "created_at": "2023-12-13T03:24:31Z"
        },
        {
          "author": "seven-yu",
          "body": "cc",
          "created_at": "2025-02-14T07:13:32Z"
        }
      ]
    },
    {
      "issue_number": 1551,
      "title": "Retrieving chat history from interaction between a user and chatbot",
      "body": "### 🐛 Describe the bug\n\nIs it possible to retrieve the chat history from a session between a user and chatbot conversation? \r\nI implemented mem0's memory feature to a chatbot, but it appear that the questions to the chatbot and the anwers are not being stored. Can we only store memories in vector databases? These memories seem to be more of a list of insights and notes from the conversation between the user and chatbot.",
      "state": "open",
      "author": "rferrazd",
      "author_type": "User",
      "created_at": "2024-07-23T19:18:45Z",
      "updated_at": "2025-01-30T15:39:55Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1551/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1551",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1551",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:09.570514",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @rferrazd Thanks for asking this question. You can use a platform wherein if you want to retrieve the chat you can do it along with the memories. There in the `fields` you can define what keys you want in the output. Refer to docs: https://docs.mem0.ai/platform/quickstart#4-2-search-relevant-mem",
          "created_at": "2024-08-02T14:12:06Z"
        },
        {
          "author": "tridungduong16",
          "body": "Hi @Dev-Khant, I am not clear how we can retrieve the full conversation history, can you explain more or give reference?",
          "created_at": "2024-12-22T15:35:05Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @tridungduong16 You can now use both the approach with `infer=False or True` and you will be able to retrieve the full conversation. Image 1st shows the results where infer=False and 2nd image is for `infer=True`. \r\n\r\nFor `infer=True` the complete conversation will be attached to the memories cre",
          "created_at": "2024-12-22T16:23:11Z"
        },
        {
          "author": "tridungduong-unsw",
          "body": "HI @Dev-Khant, I have try your suggestion, but there is some problems, could you please help me to take a look. \r\n\r\n<img width=\"701\" alt=\"Screenshot 2024-12-23 at 2 00 02 PM\" src=\"https://github.com/user-attachments/assets/d46b51e8-0af1-49a8-869f-8613a272c22b\" />\r\n<img width=\"1148\" alt=\"Screenshot 2",
          "created_at": "2024-12-23T03:01:09Z"
        },
        {
          "author": "chengyu-liu-cs",
          "body": "Hi,\nI am running into this issue. I need to extract chat history to identify new facts due to updated FACT_RETRIEVAL_PROMPT. \nBasically, more facts that were not interesting before that are interesting now. But now sure how I can find all chat history for a user and all agents and \"re-create/update ",
          "created_at": "2025-01-30T15:39:53Z"
        }
      ]
    },
    {
      "issue_number": 1853,
      "title": "SurrealDB Graph store provider",
      "body": "### 🚀 The feature\r\n\r\nAdd support for SurrealDB as a graph store provider. \r\n\r\nIdeally, it could also be used for key-value, vector, and any other data storage needs.\r\n\r\n### Motivation, pitch\r\n\r\nSurrealDB is one of the most impressive data stores currently. It has support for SQL, vector, and, most importantly, graph, which is one of the best implementation of such a DB to date.  In my humble opinion, it's way better than Neo4J or ArangoDB. \r\n\r\nPlease check it out here and see for yourselves. https://surrealdb.com/features\r\n\r\nLast but not least, it's also open source and can be hosted easily by anyone. https://github.com/surrealdb/surrealdb",
      "state": "open",
      "author": "mysticaltech",
      "author_type": "User",
      "created_at": "2024-09-11T12:27:25Z",
      "updated_at": "2025-01-30T01:40:22Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1853/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1853",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1853",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:09.801324",
      "comments": [
        {
          "author": "AbhishekRP2002",
          "body": "hi @Dev-Khant  if this issue is still open for contribution, i would to love to take this up !",
          "created_at": "2025-01-30T01:40:21Z"
        }
      ]
    },
    {
      "issue_number": 1854,
      "title": "JSONDecodeError: AI sometimes produces JSON with a code block format",
      "body": "### 🐛 Describe the bug\r\n\r\nI was creating a memory, following the official document.\r\n\r\nBut I did get confused at this error:\r\n\r\n```python\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```\r\n\r\nwhich is occurred at the line\r\n\r\n```python\r\nnew_memories_with_actions = json.loads(new_memories_with_actions)\r\n```\r\n\r\n\r\nAfter checking what on earth are the `new_memories_with_actions`, I found that the AI did respond a JSON content, but with triple backticks (the code block format), just like this (I'm using `diff` because the triple backticks will not show at the time):\r\n\r\n```diff\r\n\r\n+ ```json\r\n+ {\r\n+     \"memory\": [\r\n+         {\r\n+             \"id\": \"(UUID)\",\r\n+             \"text\": \"I'm visiting Paris\",\r\n+             \"event\": \"ADD\"\r\n+         }\r\n+     ]\r\n+ }\r\n+ ```\r\n\r\n```\r\n\r\nwhich surely will get `json.loads()` crashed.\r\n\r\nIs anything wrong?\r\n\r\nEDIT:\r\nBTW I think it was the model that caused the issue of generating bad content, so I need to declare that I was using `Qwen` (the model by Alibaba Cloud), not `gpt-4` or `gpt-4o` or something that was mentioned in the official document.",
      "state": "closed",
      "author": "FoliageOwO",
      "author_type": "User",
      "created_at": "2024-09-11T13:44:54Z",
      "updated_at": "2025-01-23T03:58:29Z",
      "closed_at": "2025-01-23T03:58:29Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1854/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "prateekchhikara"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1854",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1854",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:10.016702",
      "comments": [
        {
          "author": "FoliageOwO",
          "body": "I solved this problem by adding these lines in `mem0/memory/main.py`:\r\n\r\nhttps://github.com/mem0ai/mem0/blob/f40a2e7603125be21953656efc9314e8029af4f6/mem0/memory/main.py#L168-L173\r\n\r\n```diff\r\n  ...\r\n+ import re\r\n  ...\r\n          function_calling_prompt = get_update_memory_messages(retrieved_old_memo",
          "created_at": "2024-09-12T03:11:00Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@FoliageOwO can you please raise a PR for this?",
          "created_at": "2024-09-12T17:53:17Z"
        },
        {
          "author": "FoliageOwO",
          "body": "> @FoliageOwO can you please raise a PR for this?\r\n\r\n@prateekchhikara Hi, I just created a new PR #1860, please review it when you get a second.",
          "created_at": "2024-09-13T04:59:04Z"
        },
        {
          "author": "hhhhhge",
          "body": "> > @FoliageOwO can you please raise a PR for this?\r\n> \r\n> @prateekchhikara Hi, I just created a new PR #1860, please review it when you get a second.\r\n\r\nWhen will this bug be fixed o(╥﹏╥)o",
          "created_at": "2024-09-13T09:54:53Z"
        }
      ]
    },
    {
      "issue_number": 1975,
      "title": "graph store can't work",
      "body": "### 🐛 Describe the bug\n\n```python\r\nfrom mem0 import Memory\r\nconfig = {\r\n    \"version\": \"v1.1\",\r\n    # LLM\r\n    \"llm\": {\r\n        \"provider\": os.getenv(\"LLM_PROVIDER\"),\r\n        \"config\": {\r\n            \"model\": os.getenv(\"LLM_MODEL\"),\r\n            \"api_key\": os.getenv(\"LLM_API_KEY\"),\r\n            \"temperature\": float(os.getenv(\"LLM_TEMPERATURE\")),\r\n        },\r\n    },\r\n\r\n    # Embedding\r\n    \"embedder\": {\r\n        \"provider\": os.getenv(\"EMBEDDING_PROVIDER\"),\r\n        \"config\": {\r\n            \"api_key\": os.getenv(\"EMBEDDING_API_KEY\"),\r\n            \"model\": os.getenv(\"EMBEDDING_MODEL\"),\r\n        },\r\n    },\r\n\r\n    # Vector Store\r\n    # \"vector_store\": {\r\n    #     \"provider\": \"pgvector\",\r\n    #     \"config\": {\r\n    #         \"dbname\": os.getenv(\"POSTGRES_DB\"),\r\n    #         \"user\": os.getenv(\"POSTGRES_USER\"),\r\n    #         \"password\": os.getenv(\"POSTGRES_PASSWORD\"),\r\n    #         \"host\": os.getenv(\"POSTGRES_HOST\"),\r\n    #         \"port\": os.getenv(\"POSTGRES_PORT\"),\r\n    #     }\r\n    # },\r\n\r\n    # Graph Store\r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\": {\r\n            \"url\": os.getenv(\"GRAPH_STORE_URL\"),\r\n            \"username\": os.getenv(\"GRAPH_STORE_USERNAME\"),\r\n            \"password\": os.getenv(\"GRAPH_STORE_PASSWORD\"),\r\n        }\r\n    }\r\n}\r\nmem0 = Memory.from_config(config_dict=config)\r\nres = mem0.add(\"my name is Rosa\", \"rosa\")\r\nprint(res)\r\n```\r\nthis is error\r\n```\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: name)} {position: line: 20, column: 22, offset: 1336} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 16, column: 84, offset: 1070} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: user_id)} {position: line: 3, column: 61, offset: 71} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: name)} {position: line: 10, column: 22, offset: 580} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n  \r\n```",
      "state": "open",
      "author": "koi646",
      "author_type": "User",
      "created_at": "2024-10-20T11:05:42Z",
      "updated_at": "2025-01-09T12:40:02Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1975/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "spike-spiegel-21"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1975",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1975",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:10.197136",
      "comments": [
        {
          "author": "koi646",
          "body": "neo4j database is empty..",
          "created_at": "2024-10-20T11:06:49Z"
        },
        {
          "author": "koi646",
          "body": "Neo4j verison 5.20",
          "created_at": "2024-10-21T04:26:02Z"
        },
        {
          "author": "spike-spiegel-21",
          "body": "Hi @koi646 Thank you for pointing this out. The latest version of mem0ai fixes the above issue.",
          "created_at": "2025-01-09T12:40:01Z"
        }
      ]
    },
    {
      "issue_number": 1525,
      "title": "Allow boto3 to use its native credential finding functionality",
      "body": "### 🚀 The feature\n\nAllow `AWSBedrockLLM` and any other AWS classes to use any supported credential mechanism instead of hardcoding `AWS_SECRET_ACCESS_KEY` and `AWS_ACCESS_KEY_ID`.\n\n### Motivation, pitch\n\n[The `AWSBedrockLLM` class currently requires hardcoded AWS credentials](https://github.com/mem0ai/mem0/blob/0773b371975cab0b23306bbe0bc98e9ac4c48755/mem0/llms/aws_bedrock.py#L19), typically found with IAM Users or copying short-lived environment variables from AWS SSO. However, boto3 does not require those values - and hardcoding them with your client overrides any other possible variables ([reference in boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#configuring-credentials)).\r\n\r\nMaking the class more flexible means it's more likely to find adoption among AWS users, particularly where cloud security requirements forbid/make it difficult to use IAM Users.\r\n\r\nI'm open to sending in a PR for this feature.",
      "state": "closed",
      "author": "mikejgray",
      "author_type": "User",
      "created_at": "2024-07-22T04:06:39Z",
      "updated_at": "2025-01-09T11:29:57Z",
      "closed_at": "2025-01-09T11:29:57Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1525/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1525",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1525",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:12.197344",
      "comments": []
    },
    {
      "issue_number": 105,
      "title": "add personality interface",
      "body": "idea for a feature - making it easy to give the bot a consistent personality and conversation awareness\r\n\r\n- opened on behalf of [discord user Sig+](https://discord.com/channels/1121119078191480945/1121119078858358846/1124297975913533460)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-30T11:19:52Z",
      "updated_at": "2025-01-09T11:27:51Z",
      "closed_at": "2025-01-09T11:27:51Z",
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/105/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/105",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/105",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:12.197373",
      "comments": [
        {
          "author": "ianupamsingh",
          "body": "I have some ideas but wanted to know your thoughts. Basically I found some companies which allow creating virtual 3D characters with some personality:\r\nInworld AI - https://docs.inworld.ai/docs/tutorial-basics/basics\r\nConvAI - https://docs.convai.com/api-docs/convai-playground/character-creator-tool",
          "created_at": "2023-07-10T09:03:27Z"
        },
        {
          "author": "cachho",
          "body": "Isn't this #182 ?",
          "created_at": "2023-07-10T14:32:57Z"
        },
        {
          "author": "ianupamsingh",
          "body": "> Isn't this #182 ?\r\n\r\n#182 Add the basic interface. We would want to improve upon it by having a way to customize personalities for characters",
          "created_at": "2023-07-11T06:39:40Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as it is not currently required. Feel free to reopen it if the need arises.",
          "created_at": "2025-01-09T11:27:51Z"
        }
      ]
    },
    {
      "issue_number": 1199,
      "title": "Support complex pdf",
      "body": "### 🚀 The feature\n\nwe need to improve our data type detection logic and support variety of data types like tables/images etc in the pdf.\r\n\n\n### Motivation, pitch\n\n<img width=\"598\" alt=\"Screenshot 2024-01-21 at 7 01 46 PM\" src=\"https://github.com/embedchain/embedchain/assets/4302268/dfc2a7be-b91d-4065-b545-1ad6b1e5b984\">\r\n\r\nsource: https://twitter.com/711friedchicken/status/1749236948940513754",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-22T03:01:57Z",
      "updated_at": "2025-01-09T03:40:16Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1199/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1199",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1199",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:12.375088",
      "comments": [
        {
          "author": "mengjie09",
          "body": "Is there a solution to this problem?",
          "created_at": "2025-01-09T03:40:14Z"
        }
      ]
    },
    {
      "issue_number": 1166,
      "title": "Add support for MongoDB Atlas vector database",
      "body": "### 🚀 The feature\r\n\r\nRequested by a user on discord forum:\r\n\r\n<img width=\"539\" alt=\"Screenshot 2024-01-12 at 9 33 06 PM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/6abf34fa-4f9d-4535-8b9c-725b94c2e011\">\r\n\r\nDiscord link: https://discord.com/channels/1121119078191480945/1125758905310519327/1195378054063726713\r\n\r\n### Motivation, pitch\r\n\r\nWe want to support as many vector databases as possible to meet user needs.",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2024-01-12T16:03:43Z",
      "updated_at": "2025-01-01T17:03:09Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 15,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1166/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1166",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1166",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:12.612005",
      "comments": [
        {
          "author": "danqixu",
          "body": "@deshraj Hi, could you assign this issue to me? I am a student and having OSS course, would like to give a try.",
          "created_at": "2024-03-08T20:58:40Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @danqixu, thanks for your interest. Please feel free to work on this issue. \r\n\r\nLet us know if you have questions. You can ask me on our:\r\n- Slack: https://embedchain.ai/slack\r\n- Discord: https://embedchain.ai/discord",
          "created_at": "2024-03-08T21:00:21Z"
        },
        {
          "author": "AshishKingdom",
          "body": "I am interested to work on this",
          "created_at": "2024-05-10T09:16:47Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @AshishKingdom, please feel free to work on this. ",
          "created_at": "2024-05-24T07:02:46Z"
        },
        {
          "author": "AshishKingdom",
          "body": "Great! Please assign this to me. I'll start working on it ",
          "created_at": "2024-05-24T07:59:59Z"
        }
      ]
    },
    {
      "issue_number": 1343,
      "title": "Unable to capture precise publication time for YouTube video metadata",
      "body": "### 🐛 Describe the bug\n\nEmbedchain currently captures the publish date of YouTube videos but omits the precise publication time. \r\nThe metadata stored for each video includes the date in the format YYYY-MM-DD 00:00:00, which defaults to a time of 00:00:00, indicating that the time component is not being processed or stored.The issue with just the date is because of time zones.\r\n\r\nExample of the issue: \r\nFor a video published at 3 PM on April 15, 2024, Embedchain stores the publish date as 2024-04-15 00:00:00\r\nWhereas it should be in ISO 8601 format ( example: 2024-04-15T14:30:00Z )\r\nThis format allows the publication time to be used globally without confusion about time zone differences.\r\n",
      "state": "open",
      "author": "Esparon1",
      "author_type": "User",
      "created_at": "2024-04-20T11:19:11Z",
      "updated_at": "2024-12-25T06:05:32Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 12,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1343/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1343",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1343",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:12.800085",
      "comments": [
        {
          "author": "jsjeon-um",
          "body": "Can I work on this?",
          "created_at": "2024-04-22T21:09:49Z"
        },
        {
          "author": "MoizKhuzema",
          "body": "@Dev-Khant Has the migration from pytube to yt-dlp been merged? Because if so, yt-dlp returns metadata such as publication time and this will be a very easy fix then. I could do it ",
          "created_at": "2024-06-13T17:44:47Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> @Dev-Khant Has the migration from pytube to yt-dlp been merged? Because if so, yt-dlp returns metadata such as publication time and this will be a very easy fix then. I could do it\r\n\r\nNo sorry it has not been merged yet. But please feel free to open a PR for this using yt-dlp.",
          "created_at": "2024-06-14T06:02:30Z"
        },
        {
          "author": "MoizKhuzema",
          "body": "> > @Dev-Khant Has the migration from pytube to yt-dlp been merged? Because if so, yt-dlp returns metadata such as publication time and this will be a very easy fix then. I could do it\r\n> \r\n> No sorry it has not been merged yet. But please feel free to open a PR for this using yt-dlp.\r\n\r\n@Dev-Khant,",
          "created_at": "2024-06-19T17:32:58Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@MoizKhuzema If you use `citations==True` in app.query() you will get metadata which will return you all the metadata regarding that video. It will include publish date, author, title etc.\r\n\r\nSo it's by design that you get metadata separately.",
          "created_at": "2024-06-21T11:54:33Z"
        }
      ]
    },
    {
      "issue_number": 1348,
      "title": "Tutorial on using multiple LLM calls using embedchain",
      "body": "### 🚀 The feature\n\ntutorial on multiple LLM chain using embedchain\n\n### Motivation, pitch\n\nthis will enable developers to learn more ",
      "state": "open",
      "author": "rajveer43",
      "author_type": "User",
      "created_at": "2024-04-30T16:28:56Z",
      "updated_at": "2024-12-20T06:11:59Z",
      "closed_at": null,
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1348/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1348",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1348",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:13.020496",
      "comments": [
        {
          "author": "raghulchandramouli",
          "body": "hey I would Like to be assigned this documentation work",
          "created_at": "2024-12-20T06:11:58Z"
        }
      ]
    },
    {
      "issue_number": 1971,
      "title": "Unable to add and retreive memory",
      "body": "### 🐛 Describe the bug\n\nThis is the code that I am running.\r\n\r\n```python\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"llama3.1:latest\",\r\n            \"temperature\": 0,\r\n            \"max_tokens\": 8000,\r\n            \"ollama_base_url\": \"http://localhost:11434\",  # Ensure this URL is correct\r\n        },\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"nomic-embed-text:latest\",\r\n            # Alternatively, you can use \"snowflake-arctic-embed:latest\"\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        },\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n\r\n# Initialize Memory with the configuration\r\nm = Memory.from_config(config)\r\n\r\n# Add a memory\r\nm.add(\"I'm visiting Paris\", user_id=\"john\")\r\n\r\n# Retrieve memories\r\nmemories = m.get_all()\r\nprint(memories)\r\n\r\n```\r\n\r\nBut the output is like this: \r\n\r\n```shell\r\n\r\n{'results': []}\r\n```",
      "state": "closed",
      "author": "JadeVexo",
      "author_type": "User",
      "created_at": "2024-10-17T07:16:04Z",
      "updated_at": "2024-12-13T01:12:26Z",
      "closed_at": "2024-12-13T01:12:26Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 14,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1971/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Dev-Khant"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1971",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1971",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:13.211494",
      "comments": [
        {
          "author": "zinyando",
          "body": "Not everything is saved to memory, so in a chat conversation, you might need to have a few back-and-forth chats before something is saved to memory. \r\n\r\nSee a similar issue https://github.com/mem0ai/mem0/issues/1970",
          "created_at": "2024-10-17T11:19:14Z"
        },
        {
          "author": "JadeVexo",
          "body": "> Not everything is saved to memory, so in a chat conversation, you might need to have a few back-and-forth chats before something is saved to memory.\r\n> \r\n> See a similar issue #1970\r\n\r\nI tried this\r\n\r\n```python\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n  ",
          "created_at": "2024-10-17T11:47:24Z"
        },
        {
          "author": "zinyando",
          "body": "Try adding the `user_id` to the `get_all()` call. \r\n\r\n```\r\n...\r\n\r\nmemories = m.get_all(user_id=\"john\", output_format=\"v1.0\")\r\nprint(memories)\r\n```",
          "created_at": "2024-10-17T11:51:58Z"
        },
        {
          "author": "JadeVexo",
          "body": "```shell\r\n memories = m.get_all(user_id=\"john\", output_format=\"v1.0\")\r\nTypeError: Memory.get_all() got an unexpected keyword argument 'output_format'\r\n```\r\nI just did \r\n\r\n```python\r\n# Retrieve memories\r\nmemories = m.get_all(user_id=\"john\")\r\nprint(memories)\r\n```\r\n\r\nand I get the same result. What am ",
          "created_at": "2024-10-17T11:56:41Z"
        },
        {
          "author": "deshraj",
          "body": "Thanks for reporting the issue @JadeVexo. We will look into this issue asap. ",
          "created_at": "2024-10-17T16:45:22Z"
        }
      ]
    },
    {
      "issue_number": 1814,
      "title": "ollama._types.ResponseError: json: cannot unmarshal object into Go struct field ChatRequest.format of type string",
      "body": "### 🐛 Describe the bug\n\n```\r\nimport os\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"host\": \"localhost\",\r\n            \"port\": 6333,\r\n            \"embedding_model_dims\": 768,  # Change this according to your local model's dimensions\r\n        },\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"llama3.1:latest\",\r\n            \"temperature\": 0,\r\n            \"max_tokens\": 8000, \r\n            \"ollama_base_url\": \"http://localhost:11434\",  # Ensure this URL is correct\r\n        },\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"nomic-embed-text:latest\",\r\n            # Alternatively, you can use \"snowflake-arctic-embed:latest\"\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        },\r\n    },\r\n    \"version\": \"v1.1\"\r\n}\r\n\r\n# Initialize Memory with the configuration\r\nm = Memory.from_config(config)\r\n\r\n# Add a memory\r\nm.add(\"I'm visiting Paris\", user_id=\"john\")\r\n\r\n# Retrieve memories\r\nmemories = m.get_all(user_id=\"john\")\r\nprint(memories) \r\n```\r\n\r\n![image](https://github.com/user-attachments/assets/502502bd-86e1-49b2-9d02-ea87086ea512)\r\n",
      "state": "closed",
      "author": "openainext",
      "author_type": "User",
      "created_at": "2024-09-05T05:45:15Z",
      "updated_at": "2024-12-12T17:57:35Z",
      "closed_at": "2024-09-10T17:55:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 15,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1814/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1814",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1814",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:13.413150",
      "comments": [
        {
          "author": "shenxiangzhuang",
          "body": "I encountered the same problem in the `0.1.11`. I works fine for me in version `0.1.5` previously.",
          "created_at": "2024-09-05T06:53:24Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@prateekchhikara Can you please have a look at this, seems like its failing when graph is used? Thanks.",
          "created_at": "2024-09-05T09:41:48Z"
        },
        {
          "author": "duanzhihua",
          "body": "```\r\nException in thread Thread-2 (_add_to_vector_store):\r\nTraceback (most recent call last):\r\n  File \"E:\\ProgramData\\anaconda3\\envs\\crewAI\\lib\\threading.py\", line 1016, in _bootstrap_inner\r\n    self.run()\r\n  File \"E:\\ProgramData\\anaconda3\\envs\\crewAI\\lib\\threading.py\", line 953, in run\r\n    self._t",
          "created_at": "2024-09-06T05:24:46Z"
        },
        {
          "author": "Justin-sky",
          "body": "import os\r\n\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"version\": \"v1.1\",\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"justin\",\r\n            \"path\": \"db\",\r\n        },\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config",
          "created_at": "2024-09-07T04:55:11Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@openainext I tried the same script that you shared and it is totally working fine at my end.\r\n\r\nMy ollama version is `ollama==0.3.2`",
          "created_at": "2024-09-07T18:01:23Z"
        }
      ]
    },
    {
      "issue_number": 1735,
      "title": "Warning: Missing property name is: name/embedding",
      "body": "### 🐛 Describe the bug\n\nwhen trying v1.1 graph feature, it basically reports\r\nmissing property name is: name\r\nmissing property name is: embedding\r\ndo I have some special steps to setup the neo4j to create database that have these properties?\r\n```\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 16, column: 61, offset: 997} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: name)} {position: line: 20, column: 22, offset: 1286} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: name)} {position: line: 20, column: 117, offset: 1381} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 6, column: 101, offset: 306} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 6, column: 61, offset: 266} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 13, column: 21, offset: 774} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 5, column: 62, offset: 147} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 16, column: 84, offset: 1020} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is:\r\n```",
      "state": "closed",
      "author": "femto",
      "author_type": "User",
      "created_at": "2024-08-22T09:51:32Z",
      "updated_at": "2024-12-03T01:37:39Z",
      "closed_at": "2024-08-31T04:47:16Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1735/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1735",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1735",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:13.605752",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Hi @femto, can you please share the exact code you used to add the memory and the config.",
          "created_at": "2024-08-22T18:21:05Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@femto let me know if you are still facing the same issue. If not, I will close this issue.",
          "created_at": "2024-08-30T23:09:43Z"
        },
        {
          "author": "femto",
          "body": "ok, you can close. These happens when I try to add m.add() result, the setup is same to that.\r\nAlthough the warning appear, it doesn't affect following up code. It's weird.",
          "created_at": "2024-08-31T03:40:58Z"
        },
        {
          "author": "sgvarsh",
          "body": "I am also facing the same exact issue",
          "created_at": "2024-10-08T20:46:37Z"
        },
        {
          "author": "succulen-plants",
          "body": "我也遇到了一样的问题",
          "created_at": "2024-12-03T01:37:38Z"
        }
      ]
    },
    {
      "issue_number": 1976,
      "title": "How can I get the answer without adding memory again? ",
      "body": "### 🐛 Describe the bug\n\n```python\r\nimport os\r\nfrom openai import OpenAI\r\nfrom mem0 import Memory\r\nfrom extract_info import extract_structured_info\r\nfrom extract_info import read_file\r\nfrom extract_info import get_file_address\r\n\r\nos.environ[\"OPENAI_API_KEY\"] = \"sk-test\"\r\n\r\nconfig = {\r\n    \"http_client_proxies\"\r\n    \"llm\": {\r\n        \"provider\": \"openai\",\r\n        \"config\": {\r\n            \"model\": \"gpt-4o\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 1500,\r\n        },\r\n    },\r\n    \"embedder\": {\"provider\": \"openai\", \"config\": {\"model\": \"text-embedding-3-large\"}},\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"embedding_model_dims\": 3072,\r\n        },\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n\r\n\r\nclass BrowserAIAgent:\r\n    def __init__(self):\r\n        self.client = OpenAI()\r\n        self.memory = Memory.from_config(config)\r\n        self.messages = [\r\n            {\r\n                \"role\": \"system\",\r\n                \"content\": \"You are a personal AI Assistant for Browser.\",\r\n            }\r\n        ]\r\n\r\n    def ask_question(self, question, user_id):\r\n        # Fetch previous related memories\r\n        previous_memories = self.search_memories(question, user_id=user_id)\r\n        prompt = question\r\n        if previous_memories:\r\n            prompt = f\"User input: {question}\\n Previous memories: {previous_memories}\"\r\n        # enable multiple round chat\r\n        self.messages.append({\"role\": \"user\", \"content\": prompt})\r\n\r\n        response = self.client.chat.completions.create(\r\n            model=\"gpt-4o\", messages=self.messages\r\n        )\r\n        answer = response.choices[0].message.content\r\n        self.messages.append({\"role\": \"assistant\", \"content\": answer})\r\n\r\n        return answer\r\n\r\n    def get_memories(self, user_id):\r\n        memories = self.memory.get_all(user_id=user_id)\r\n        return [m[\"memory\"] for m in memories[\"memories\"]]\r\n\r\n    def search_memories(self, query, user_id):\r\n        memories = self.memory.search(query, user_id=user_id)\r\n        return [m[\"memory\"] for m in memories[\"memories\"]]\r\n\r\n    def add_memory(self, memory, user_id, metadata):\r\n        self.memory.add(memory, user_id=user_id, metadata=metadata)\r\n\r\n\r\nuser_id = \"browser\"\r\nai_assistant = BrowserAIAgent()\r\n\r\n\r\ndef add_memories_for_browser():\r\n    add_browser_docs(\"/Users/browser/docs/document\")\r\n\r\n\r\ndef add_browser_docs(directory_path):\r\n    files_address = get_file_address(directory_path)\r\n\r\n    for file_address in files_address:\r\n        file_path = os.path.join(directory_path, file_address)\r\n        print(\"try to analyze \", file_address, \", file path is \", file_path)\r\n        markdown_text = read_file(file_path)\r\n        structured_info = extract_structured_info(markdown_text)\r\n\r\n        ai_assistant.add_memory(\r\n            markdown_text, user_id=user_id, metadata=structured_info\r\n        )\r\n\r\n\r\ndef main():\r\n    # I have added some documents for the Browser before, and I don't want to add them again.\r\n    # add_memories_for_browser()\r\n\r\n    while True:\r\n        question = input(\"Question: \")\r\n        if question.lower() in [\"q\", \"exit\"]:\r\n            print(\"Exiting...\")\r\n            break\r\n\r\n        answer = ai_assistant.ask_question(question, user_id=user_id)\r\n        print(f\"Answer: {answer}\")\r\n        memories = ai_assistant.get_memories(user_id=user_id)\r\n        print(\"Memories:\")\r\n        for memory in memories:\r\n            print(f\"- {memory}\")\r\n        print(\"-----\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\nMy source code is shown above and stored in a file named 'agent.py'. I can input a question and get the correct answer after I execute python agent.py. However, I cannot get the correct answer when I execute agent.py again with the same question. Is Mem0 only able to store data in memory and not on the hard disk?\r\n\r\n",
      "state": "open",
      "author": "water-in-stone",
      "author_type": "User",
      "created_at": "2024-10-21T09:31:42Z",
      "updated_at": "2024-11-22T10:39:36Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1976/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1976",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1976",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:13.794136",
      "comments": [
        {
          "author": "spike-spiegel-21",
          "body": "Hi @water-in-stone , It looks like you are not persisting your vector store. It means that the vector store configuration that you are using currently: \r\n```\r\n\"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"embedding_model_d",
          "created_at": "2024-10-21T15:48:21Z"
        },
        {
          "author": "water-in-stone",
          "body": "> Hi @water-in-stone , It looks like you are not persisting your vector store. It means that the vector store configuration that you are using currently:\r\n> \r\n> ```\r\n> \"vector_store\": {\r\n>         \"provider\": \"qdrant\",\r\n>         \"config\": {\r\n>             \"collection_name\": \"test\",\r\n>             \"",
          "created_at": "2024-10-23T09:21:33Z"
        },
        {
          "author": "water-in-stone",
          "body": "@spike-spiegel-21 Due to some complex reasons, I cannot use Docker. How can I use a local Qdrant database without Docker?",
          "created_at": "2024-10-23T10:03:19Z"
        },
        {
          "author": "Cirr0e",
          "body": "Hey there! I've got a solid solution to help you persist your Qdrant vector store memories locally without Docker. 🚀\n\nBased on the issue search and documentation, here's a robust approach to local storage:\n\n1. Modify your configuration to use a persistent local path:\n```python\nimport os\n\n# Create a ",
          "created_at": "2024-11-20T05:02:49Z"
        },
        {
          "author": "water-in-stone",
          "body": "> Hey there! I've got a solid solution to help you persist your Qdrant vector store memories locally without Docker. 🚀\r\n> \r\n> Based on the issue search and documentation, here's a robust approach to local storage:\r\n> \r\n> 1. Modify your configuration to use a persistent local path:\r\n> \r\n> ```python\r\n",
          "created_at": "2024-11-22T10:39:35Z"
        }
      ]
    },
    {
      "issue_number": 1989,
      "title": "[qdrant]: Error in `new_memories_with_actions` while using `QdrantLocal`",
      "body": "Related Issue: #1976\r\n```python\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test_10\",\r\n            \"path\": \"./qdrant_storage\",\r\n            \"on_disk\": True,\r\n            \"embedding_model_dims\": 1536,  # Change this according to your local model's dimensions\r\n        },\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"openai\",\r\n        \"config\": {\r\n            \"model\": \"gpt-4o\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 1500,\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"openai\",\r\n        \"config\": {\r\n            \"model\": \"text-embedding-3-small\"\r\n        }\r\n    },\r\n    \"version\": \"v1.1\"\r\n}\r\n\r\nm = Memory.from_config(config)\r\nm.add(\"My name is mayank\", user_id=\"asd\")\r\nres = m.search(\"name\", user_id=\"asd\")\r\nprint(res)\r\n```\r\n\r\nError\r\n```\r\nERROR:root:Error in new_memories_with_actions: SQLite objects created in a thread can only be used in that same thread. The object was created in thread id 8261635904 and this is thread id 6333427712.\r\n```\r\n",
      "state": "open",
      "author": "spike-spiegel-21",
      "author_type": "User",
      "created_at": "2024-10-28T11:27:35Z",
      "updated_at": "2024-11-20T04:50:51Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1989/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1989",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1989",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:14.328786",
      "comments": [
        {
          "author": "Cirr0e",
          "body": "Here's a modified approach to resolve the threading issue:\n\n```python\nfrom memgpt.memory import Memory\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"qdrant\",\n        \"config\": {\n            \"collection_name\": \"test_10\",\n            \"path\": \"./qdrant_storage\",\n            \"on_disk\": True,\n  ",
          "created_at": "2024-11-20T04:50:50Z"
        }
      ]
    },
    {
      "issue_number": 1909,
      "title": "Embedding the same document and store in vectorDB with different metadata",
      "body": "### 🚀 The feature\n\nAllow embedding the same document in the vectorDB with different metadata to support multiple clients using the same content, ensuring data is organized and retrievable based on client-specific metadata.\r\n\r\nCurrently, it returns a message like: 'Document content has not changed. Skipping chunk creation and embedding.\n\n### Motivation, pitch\n\nEmbedding the same document and storing it in the vectorDB (I'm using ChromaDB) with different metadata helps maintain multiple clients' data in the same vectorDB.",
      "state": "open",
      "author": "vrajpatel04",
      "author_type": "User",
      "created_at": "2024-09-26T05:52:13Z",
      "updated_at": "2024-11-19T14:37:25Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1909/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "parshvadaftari"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1909",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1909",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:14.501928",
      "comments": [
        {
          "author": "parshvadaftari",
          "body": "@Dev-Khant Can you assign this to me?",
          "created_at": "2024-10-15T18:35:41Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Thanks @parshvadaftari, feel free to work on this.",
          "created_at": "2024-10-18T06:07:24Z"
        },
        {
          "author": "JeetKaria06",
          "body": "I am interested in the issue. @parshvadaftari, do let me know if you need assistance. We can collaborate on this.",
          "created_at": "2024-11-12T07:33:25Z"
        },
        {
          "author": "parshvadaftari",
          "body": "@vrajpatel04 Question: Where is this required in your use case? Or can you give me an example where it can be used? Why is this feature required as well?",
          "created_at": "2024-11-19T14:37:24Z"
        }
      ]
    },
    {
      "issue_number": 2016,
      "title": "Must provide either both org_id and project_id, both org_name and project_name, or neither.",
      "body": "### 🐛 Describe the bug\n\nFailed to search memories: APIError: API request failed: [\"Must provide either both org_id and project_id, both org_name and project_name, or neither.\"] \r\n\r\nMy input:\r\n```js\r\n{\r\n  query: \"aa\",\r\n  options: {\r\n    \"user_id\": \"065db805-e3bb-4287-ab9d-d8e9f16415f1\",\r\n    \"agent_id\": \"cm36sulxa006qgg7vbhq5921o\"\r\n  }\r\n}\r\n```",
      "state": "open",
      "author": "backslash112",
      "author_type": "User",
      "created_at": "2024-11-07T04:45:30Z",
      "updated_at": "2024-11-08T10:29:01Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2016/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Dev-Khant"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2016",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2016",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:14.716933",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @backslash112 This issue has been fixed. Please install the latest version of `mem0ai`.\r\n\r\nLet us know if you still face any issues.",
          "created_at": "2024-11-07T05:21:18Z"
        }
      ]
    },
    {
      "issue_number": 2012,
      "title": "Does Interactive Playground support 'Graph Memory'?",
      "body": "### 🐛 Describe the bug\n\nHi，I try to chat with agent on Interactive Playground in which i can see all the queries and memories. Does this playground support 'graph memory'? How can i get the memories graph? \r\n\r\nThanks!",
      "state": "open",
      "author": "AugustLHHHHHH",
      "author_type": "User",
      "created_at": "2024-11-06T09:00:33Z",
      "updated_at": "2024-11-08T10:28:51Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2012/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2012",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2012",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:14.897786",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @AugustLHHHHHH Currently `playground` does not support graph memory.",
          "created_at": "2024-11-08T10:13:06Z"
        }
      ]
    },
    {
      "issue_number": 2001,
      "title": "Support ElasticSearch as a mem0 vector store",
      "body": "### 🚀 The feature\n\nAdd the option to connect to an elasticsearch db for mem0.\n\n### Motivation, pitch\n\nElasticSeach has ample vector search support it would be great if we don't have to start up a new production db like qdrant just to use mem0 since we are already using ElasticSearch.",
      "state": "open",
      "author": "shaynemei",
      "author_type": "User",
      "created_at": "2024-11-01T03:28:40Z",
      "updated_at": "2024-11-08T10:28:34Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/2001/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/2001",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/2001",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:16.975978",
      "comments": [
        {
          "author": "yuvaljacob",
          "body": "Hello there,\r\n\r\nI would like to work on this one.\r\nI have no past contributions on any open source projects, but I have worked as a Python developer on an IfC product and I was in charge of DB integrations, so this seems a good fit for me, thanks in advance.",
          "created_at": "2024-11-05T12:59:43Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @shaynemei Thanks for bringing up this request. And @yuvaljacob Please feel free to work on this, contribution much appreciated. ",
          "created_at": "2024-11-08T10:14:09Z"
        }
      ]
    },
    {
      "issue_number": 1987,
      "title": "LangGraph example issue with 1.1 api: type error",
      "body": "### 🐛 Describe the bug\r\n\r\nRunning the LangGraph example with api 1.1 set in config i get a type error, this does not happen with api 1.0 but i get all sorts of annoying deprecation messages.\r\n\r\n```python\r\nfrom typing import List, Dict\r\nfrom langchain_openai import ChatOpenAI\r\nfrom langchain_core.messages import SystemMessage, HumanMessage, AIMessage\r\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\r\nfrom mem0 import Memory\r\n\r\nimport os\r\nfrom dotenv import load_dotenv\r\nfrom openai import OpenAI\r\n\r\n\r\nconfig = {\r\n\"llm\": {\r\n\"provider\": \"openai\",\r\n\"config\": {\r\n\"model\": \"gpt-4o-mini\",\r\n# \"temperature\": 0.2,\r\n# \"max_tokens\": 1500,\r\n}\r\n},\r\n\"version\": \"v1.1\"\r\n}\r\n# Load environment variables from .env2 file\r\nload_dotenv(\".env2\")\r\n\r\nopenai_client = OpenAI(\r\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\r\n    # You can set other parameters here if needed\r\n)\r\n\r\n# Initialize LangChain and Mem0\r\nllm = ChatOpenAI(model=\"gpt-4o-mini\")\r\nmem0 = Memory.from_config(config)\r\n\r\n\r\nprompt = ChatPromptTemplate.from_messages([\r\n    SystemMessage(content=\"\"\"You are a helpful travel agent AI. Use the provided context to personalize your responses and remember user preferences and past interactions. \r\n    Provide travel recommendations, itinerary suggestions, and answer questions about destinations. \r\n    If you don't have specific information, you can make general suggestions based on common travel knowledge.\"\"\"),\r\n    MessagesPlaceholder(variable_name=\"context\"),\r\n    HumanMessage(content=\"{input}\")\r\n])\r\ndef retrieve_context(query: str, user_id: str) -> List[Dict]:\r\n    \"\"\"Retrieve relevant context from Mem0\"\"\"\r\n    memories = mem0.search(query, user_id=user_id)\r\n    seralized_memories = ' '.join([mem[\"memory\"] for mem in memories])\r\n    context = [\r\n        {\r\n            \"role\": \"system\", \r\n            \"content\": f\"Relevant information: {seralized_memories}\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": query\r\n        }\r\n    ]\r\n    return context\r\n\r\ndef generate_response(input: str, context: List[Dict]) -> str:\r\n    \"\"\"Generate a response using the language model\"\"\"\r\n    chain = prompt | llm\r\n    response = chain.invoke({\r\n        \"context\": context,\r\n        \"input\": input\r\n    })\r\n    return response.content\r\n\r\ndef save_interaction(user_id: str, user_input: str, assistant_response: str):\r\n    \"\"\"Save the interaction to Mem0\"\"\"\r\n    interaction = [\r\n        {\r\n          \"role\": \"user\",\r\n          \"content\": user_input\r\n        },\r\n        {\r\n            \"role\": \"assistant\",\r\n            \"content\": assistant_response\r\n        }\r\n    ]\r\n    mem0.add(interaction, user_id=user_id)\r\n\r\n\r\ndef generate_response(input: str, context: List[Dict]) -> str:\r\n    \"\"\"Generate a response using the language model\"\"\"\r\n    chain = prompt | llm\r\n    response = chain.invoke({\r\n        \"context\": context,\r\n        \"input\": input\r\n    })\r\n    return response.content\r\n\r\ndef save_interaction(user_id: str, user_input: str, assistant_response: str):\r\n    \"\"\"Save the interaction to Mem0\"\"\"\r\n    interaction = [\r\n        {\r\n          \"role\": \"user\",\r\n          \"content\": user_input\r\n        },\r\n        {\r\n            \"role\": \"assistant\",\r\n            \"content\": assistant_response\r\n        }\r\n    ]\r\n    mem0.add(interaction, user_id=user_id)\r\ndef chat_turn(user_input: str, user_id: str) -> str:\r\n    # Retrieve context\r\n    context = retrieve_context(user_input, user_id)\r\n    \r\n    # Generate response\r\n    response = generate_response(user_input, context)\r\n    \r\n    # Save interaction\r\n    save_interaction(user_id, user_input, response)\r\n    \r\n    return response\r\nif __name__ == \"__main__\":\r\n    print(\"Welcome to your personal Travel Agent Planner! How can I assist you with your travel plans today?\")\r\n    user_id = \"john1\"\r\n    \r\n    while True:\r\n        user_input = input(\"You: \")\r\n        if user_input.lower() in ['quit', 'exit', 'bye']:\r\n            print(\"Travel Agent: Thank you for using our travel planning service. Have a great trip!\")\r\n            break\r\n        \r\n        response = chat_turn(user_input, user_id)\r\n        print(f\"Travel Agent: {response}\")\r\n```\r\n\r\nerror:\r\n```python\r\nWelcome to your personal Travel Agent Planner! How can I assist you with your travel plans today?\r\nYou: milan\r\nTraceback (most recent call last):\r\n  File \"c:\\...\\memo_base.py\", line 129, in <module>\r\n    response = chat_turn(user_input, user_id)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"c:\\...\\memo_base.py\", line 110, in chat_turn\r\n    context = retrieve_context(user_input, user_id)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"c:\\...\\memo_base.py\", line 49, in retrieve_context\r\n    seralized_memories = ' '.join([mem[\"memory\"] for mem in memories])\r\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"c:\\...\\memo_base.py\", line 49, in <listcomp>\r\n    seralized_memories = ' '.join([mem[\"memory\"] for mem in memories])\r\n                                   ~~~^^^^^^^^^^\r\nTypeError: string indices must be integers, not 'str'```",
      "state": "open",
      "author": "luca-git",
      "author_type": "User",
      "created_at": "2024-10-26T16:52:22Z",
      "updated_at": "2024-11-08T10:28:13Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1987/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1987",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1987",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:17.202643",
      "comments": [
        {
          "author": "spike-spiegel-21",
          "body": "Hi @luca-git \r\n\r\nFor v1.1, the output of the `search` method will be a dictionary:\r\n```\r\n{\"results\": original_memories, \"relations\": graph_entities}\r\n```\r\n\r\nPlease replace your line:\r\n`seralized_memories = ' '.join([mem[\"memory\"] for mem in memories])` with \r\n`seralized_memories = ' '.join([mem['mem",
          "created_at": "2024-10-28T10:48:13Z"
        }
      ]
    },
    {
      "issue_number": 1955,
      "title": "change function_calling_prompt",
      "body": "### 🚀 The feature\n\nWhen there are new facts need add, some model outputs do not contain event attributes. When add\r\n    - Each data object must have an event attribute\r\n   it is ok!\r\n![image](https://github.com/user-attachments/assets/fc16cab3-84e2-45fc-bce2-49727f5f96ca)\r\n\r\nin addition，can custom function_calling_prompt? Suitable for multiple languages\n\n### Motivation, pitch\n\nhi",
      "state": "open",
      "author": "dreamfly32",
      "author_type": "User",
      "created_at": "2024-10-12T09:26:36Z",
      "updated_at": "2024-11-08T10:18:13Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1955/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1955",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1955",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:17.377879",
      "comments": [
        {
          "author": "dreamfly32",
          "body": "in addition，When the model infers that the fact is empty new_retrieved_facts，Should not execute getupdate_maemory_messages，that will waste time",
          "created_at": "2024-10-12T09:38:41Z"
        }
      ]
    },
    {
      "issue_number": 1950,
      "title": "Unsupported LLM provider and Unsupported embedding provider",
      "body": "### 🐛 Describe the bug\n\nwhen I excute the test.py ,I get some errors of Unsupported LLM provider and Unsupported embedding provider.By the way，I add chatglm to oneapi，and passed the test in oneapi.So，I have a openai-like api.And When I call the api in fastgpt，it works well.So it is clear that the api is fine and can be called normally.\r\n_____\r\nMy original codes is blow：\r\n({xxx} represent my privacy information)\r\n```\r\nimport os\r\nfrom mem0 import Memory\r\n\r\nos.environ[\"OPENAI_API_KEY\"] = \"{xxx}\"\r\nos.environ[\"OPENAI_API_BASE\"] = \"{xxx}\"\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"openai-like\",\r\n        \"config\": {\r\n            \"model\": \"glm-4-plus\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 2500,\r\n        }\r\n    },\r\n    \"embedder\": { \r\n        \"provider\": \"openai-like\",\r\n        \"config\": { \r\n            \"model\": \"embedding-3\" \r\n                 } \r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"host\": \"{xxx}\", \r\n            \"port\": {xxx},\r\n            \"embedding_model_dims\": 3072,\r\n        }\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n\r\nm = Memory.from_config(config)\r\nm.add(\"Likes to play cricket on weekends\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n```\r\n_____\r\nErrors I got :\r\n```\r\nConfiguration validation error: 2 validation errors for MemoryConfig\r\nllm.config\r\n  Value error, Unsupported LLM provider: openai-like [type=value_error, input_value={'model': 'glm-4-plus', '...0.2, 'max_tokens': 2500}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error\r\nembedder.config\r\n  Value error, Unsupported embedding provider: openai-like [type=value_error, input_value={'model': 'embedding-3'}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error\r\nTraceback (most recent call last):\r\n  File \"/root/mem0test1.py\", line 34, in <module>\r\n    m = Memory.from_config(config)\r\n  File \"/usr/local/lib/python3.9/dist-packages/mem0/memory/main.py\", line 55, in from_config\r\n    config = MemoryConfig(**config_dict)\r\n  File \"/usr/local/lib/python3.9/dist-packages/pydantic/main.py\", line 193, in __init__\r\n    self.__pydantic_validator__.validate_python(data, self_instance=self)\r\npydantic_core._pydantic_core.ValidationError: 2 validation errors for MemoryConfig\r\nllm.config\r\n  Value error, Unsupported LLM provider: openai-like [type=value_error, input_value={'model': 'glm-4-plus', '...0.2, 'max_tokens': 2500}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error\r\nembedder.config\r\n  Value error, Unsupported embedding provider: openai-like [type=value_error, input_value={'model': 'embedding-3'}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error\r\n```",
      "state": "open",
      "author": "fate-think",
      "author_type": "User",
      "created_at": "2024-10-09T19:53:33Z",
      "updated_at": "2024-11-08T10:15:16Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1950/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1950",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1950",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:17.536962",
      "comments": [
        {
          "author": "spike-spiegel-21",
          "body": "Hey @fate-think, mem0 does not support open-like as of now. Try with openai.",
          "created_at": "2024-10-10T18:01:43Z"
        }
      ]
    },
    {
      "issue_number": 457,
      "title": "Add Github issue template of documentation",
      "body": "### 🚀 The feature\r\n\r\nSetup a issue template for documentation. Config can be\r\n\r\n```\r\nname: Documentation\r\ndescription: Report an issue related to the Embedchain docs.\r\ntitle: \"DOC: <Please write a comprehensive title after the 'DOC: ' prefix>\"\r\n\r\nbody:\r\n- type: textarea\r\n  attributes:\r\n    label: \"Issue with current documentation:\"\r\n    description: >\r\n      Please make sure to leave a reference to the document/code you're\r\n      referring to.\r\n```\r\n\r\n### Motivation, pitch\r\n\r\nThis will help us in making our docs better",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-19T05:37:53Z",
      "updated_at": "2024-11-07T17:41:08Z",
      "closed_at": "2023-08-20T08:06:45Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/457/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/457",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/457",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:17.764395",
      "comments": [
        {
          "author": "ghost",
          "body": "I would like to work on this issue",
          "created_at": "2023-08-20T05:01:04Z"
        },
        {
          "author": "deshraj",
          "body": "@girish-07 go for it. ",
          "created_at": "2023-08-20T05:05:50Z"
        }
      ]
    },
    {
      "issue_number": 1906,
      "title": "Graph memory example throws error with Neo4j",
      "body": "### 🐛 Describe the bug\n\nWhat happened:\r\nIn the Graph memory example notebook (https://colab.research.google.com/drive/1PfIGVHnliIlG2v8cx0g45TF0US-jRPZ1?usp=sharing) attempting to add a memory throws this error\r\n\r\n`m.add(\"I like painting\", user_id=user_id), display_graph()`\r\n```\r\nWARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: embedding)} {position: line: 16, column: 84, offset: 1070} for query: '\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (n)-[r]->(m)\\n            RETURN n.name AS source, elementId(n) AS source_id, type(r) AS relation, elementId(r) AS relation_id, m.name AS destination, elementId(m) AS destination_id, similarity\\n            UNION\\n            MATCH (n)\\n            WHERE n.embedding IS NOT NULL AND n.user_id = $user_id\\n            WITH n, \\n                round(reduce(dot = 0.0, i IN range(0, size(n.embedding)-1) | dot + n.embedding[i] * $n_embedding[i]) / \\n                (sqrt(reduce(l2 = 0.0, i IN range(0, size(n.embedding)-1) | l2 + n.embedding[i] * n.embedding[i])) * \\n                sqrt(reduce(l2 = 0.0, i IN range(0, size($n_embedding)-1) | l2 + $n_embedding[i] * $n_embedding[i]))), 4) AS similarity\\n            WHERE similarity >= $threshold\\n            MATCH (m)-[r]->(n)\\n            RETURN m.name AS source, elementId(m) AS source_id, type(r) AS relation, elementId(r) AS relation_id, n.name AS destination, elementId(n) AS destination_id, similarity\\n            ORDER BY similarity DESC\\n            '\r\n```\r\n\r\nHow to recreate:\r\nI set my OPENAI_API_KEY, NEO4J_URI, NEO4J_USER, and NEO4J_PASSWORD environment variables.  I can confirm I can log into Neo4j.\r\n\r\nI am running Mem0 locally with a Neo4j docker container.  My neo4j container is\r\n```yaml\r\nservices:\r\n  neo4j:\r\n    container_name: neo4j\r\n    image: neo4j:latest \r\n    ports:\r\n      - 7474:7474\r\n      - 7687:7687\r\n    environment:\r\n      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}\r\n      - NEO4J_apoc_export_file_enabled=true\r\n      - NEO4J_apoc_import_file_enabled=true\r\n      - NEO4J_apoc_import_file_use__neo4j__config=true\r\n      - NEO4J_PLUGINS=[\"apoc\", \"graph-data-science\"]\r\n    volumes:\r\n      - ./neo4j_db/data:/data\r\n      - ./neo4j_db/logs:/logs\r\n      - ./neo4j_db/import:/var/lib/neo4j/import\r\n      - ./neo4j_db/plugins:/plugins\r\n```\r\n\r\nMy pip freeze is \r\n\r\naiohappyeyeballs==2.4.0\r\naiohttp==3.10.6\r\naiosignal==1.3.1\r\nannotated-types==0.7.0\r\nanyio==4.6.0\r\nasttokens==2.4.1\r\nasync-timeout==4.0.3\r\nattrs==24.2.0\r\nbackoff==2.2.1\r\ncertifi==2024.8.30\r\ncharset-normalizer==3.3.2\r\ncomm==0.2.2\r\ncontourpy==1.3.0\r\ncycler==0.12.1\r\ndataclasses-json==0.6.7\r\ndebugpy==1.8.6\r\ndecorator==5.1.1\r\ndistro==1.9.0\r\nexceptiongroup==1.2.2\r\nexecuting==2.1.0\r\nfonttools==4.54.1\r\nfrozenlist==1.4.1\r\ngrandalf==0.8\r\ngreenlet==3.1.1\r\ngrpcio==1.66.1\r\ngrpcio-tools==1.66.1\r\nh11==0.14.0\r\nh2==4.1.0\r\nhpack==4.0.0\r\nhttpcore==1.0.5\r\nhttpx==0.27.2\r\nhyperframe==6.0.1\r\nidna==3.10\r\ninterchange==2021.0.4\r\nipykernel==6.29.5\r\nipython==8.27.0\r\njedi==0.19.1\r\njiter==0.5.0\r\njsonpatch==1.33\r\njsonpointer==3.0.0\r\njupyter_client==8.6.3\r\njupyter_core==5.7.2\r\nkiwisolver==1.4.7\r\nlangchain==0.2.16\r\nlangchain-community==0.2.17\r\nlangchain-core==0.2.41\r\nlangchain-text-splitters==0.2.4\r\nlangsmith==0.1.128\r\nmarshmallow==3.22.0\r\nmatplotlib==3.9.2\r\nmatplotlib-inline==0.1.7\r\nmem0ai==0.1.16\r\nmonotonic==1.6\r\nmultidict==6.1.0\r\nmypy-extensions==1.0.0\r\nneo4j==5.24.0\r\nnest-asyncio==1.6.0\r\nnetgraph==4.13.2\r\nnetworkx==3.3\r\nnumpy==1.26.4\r\nopenai==1.48.0\r\norjson==3.10.7\r\npackaging==24.1\r\npansi==2020.7.3\r\nparso==0.8.4\r\npexpect==4.9.0\r\npillow==10.4.0\r\nplatformdirs==4.3.6\r\nportalocker==2.10.1\r\nposthog==3.6.6\r\nprompt_toolkit==3.0.48\r\nprotobuf==5.28.2\r\npsutil==6.0.0\r\nptyprocess==0.7.0\r\npure_eval==0.2.3\r\npy2neo==2021.2.4\r\npydantic==2.9.2\r\npydantic_core==2.23.4\r\nPygments==2.18.0\r\npyparsing==3.1.4\r\npython-dateutil==2.9.0.post0\r\npython-dotenv==1.0.1\r\npytz==2024.2\r\nPyYAML==6.0.2\r\npyzmq==26.2.0\r\nqdrant-client==1.11.3\r\nrank-bm25==0.2.2\r\nrectangle-packer==2.0.2\r\nrequests==2.32.3\r\nscipy==1.14.1\r\nsix==1.16.0\r\nsniffio==1.3.1\r\nSQLAlchemy==2.0.35\r\nstack-data==0.6.3\r\ntenacity==8.5.0\r\ntornado==6.4.1\r\ntqdm==4.66.5\r\ntraitlets==5.14.3\r\ntyping-inspect==0.9.0\r\ntyping_extensions==4.12.2\r\nurllib3==2.2.3\r\nwcwidth==0.2.13\r\nyarl==1.12.1\r\n",
      "state": "open",
      "author": "except-pass",
      "author_type": "User",
      "created_at": "2024-09-25T17:44:23Z",
      "updated_at": "2024-10-29T18:51:57Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1906/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "spike-spiegel-21"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1906",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1906",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.049349",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "I think it is not an error, just a warning. Did you try checking whether the nodes are getting created or not? @except-pass ",
          "created_at": "2024-09-25T21:22:45Z"
        },
        {
          "author": "except-pass",
          "body": "The nodes were not created.\r\n\r\nOn Wed, Sep 25, 2024, 5:23 PM Prateek Chhikara ***@***.***>\r\nwrote:\r\n\r\n> I think it is not an error, just a warning. Did you try checking whether\r\n> the nodes are getting created or not? @except-pass\r\n> <https://github.com/except-pass>\r\n>\r\n> —\r\n> Reply to this email di",
          "created_at": "2024-09-25T22:40:14Z"
        },
        {
          "author": "prateekchhikara",
          "body": "Let me take a look. We never faced this problem before.",
          "created_at": "2024-09-26T06:32:31Z"
        },
        {
          "author": "Ashoka74",
          "body": "Hello, just to mention I have the same issue. I can see the graph/nodes on my collab nb. I can query on Neo4j workspace 'query' section but I can't see the graph on the 'explore' section ",
          "created_at": "2024-09-30T13:15:25Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@except-pass if you are using Neo4j locally, you need to install APOC plugins. Please check the docs https://docs.mem0.ai/open-source/graph_memory/overview",
          "created_at": "2024-09-30T20:36:22Z"
        }
      ]
    },
    {
      "issue_number": 1948,
      "title": "Milvus memory can't update",
      "body": "### 🐛 Describe the bug\r\nwhen I use Milvus, the memory can't update.\r\nbut use qdrant is ok.\r\n\r\n// first\r\nresult = m.add(\"My name is Coco.\", user_id=\"test\", run_id=\"test\"})\r\nm.get_all(user_id=\"test\", run_id=\"test\")\r\n{\r\n\t\"id\": \"4bff6247-0d78-4dd5-a858-0993717703cc\",\r\n\t\"memory\": \"My Name is Coco\",\r\n\t\"hash\": \"d926ccc72695c2c9ef4ce66d8d529318\",\r\n\t\"metadata\": null,\r\n\t\"created_at\": \"2024-10-08T23:50:28.198637-07:00\",\r\n\t\"updated_at\": null,\r\n\t\"user_id\": \"test\",\r\n\t\"run_id\": \"test\"\r\n}\r\n\r\n// then\r\nresult = m.add(\"My name is Joy.\", user_id=\"test\", run_id=\"test\"})\r\nm.get_all(user_id=\"test\", run_id=\"test\")\r\n{\r\n\t\"id\": \"4bff6247-0d78-4dd5-a858-0993717703cc\",\r\n\t\"memory\": \"My Name is Coco\",\r\n\t\"hash\": \"d926ccc72695c2c9ef4ce66d8d529318\",\r\n\t\"metadata\": null,\r\n\t\"created_at\": \"2024-10-08T23:50:28.198637-07:00\",\r\n\t\"updated_at\": null,\r\n\t\"user_id\": \"test\",\r\n\t\"run_id\": \"test\"\r\n},\r\n{\r\n\t\"id\": \"586e592e-8356-4833-bbb8-662aa31974c3\",\r\n\t\"memory\": \"Name is Joy\",\r\n\t\"hash\": \"541656a62f8d356ada83821b24b31b77\",\r\n\t\"metadata\": null,\r\n\t\"created_at\": \"2024-10-08T23:43:12.749077-07:00\",\r\n\t\"updated_at\": null,\r\n\t\"user_id\": \"test\",\r\n\t\"run_id\": \"test\"\r\n}",
      "state": "open",
      "author": "hhtower",
      "author_type": "User",
      "created_at": "2024-10-09T07:23:10Z",
      "updated_at": "2024-10-19T14:45:48Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1948/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "ketangangal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1948",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1948",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.241071",
      "comments": [
        {
          "author": "ketangangal",
          "body": "what are the configuration you are using!",
          "created_at": "2024-10-12T06:49:45Z"
        },
        {
          "author": "hhtower",
          "body": "> what are the configuration you are using!\r\n\r\n\r\nVECTOR_STORE_PROVIDER=milvus\r\nVECTOR_STORE_SERVER_HOST=http://localhost:19530\r\n\r\nvector_config = {\r\n    \"provider\": env.str(name=\"VECTOR_STORE_PROVIDER\", default=\"milvus\"),\r\n    \"config\": {\r\n        \"url\": env.str(name=\"VECTOR_STORE_SERVER_HOST\"),    ",
          "created_at": "2024-10-12T06:52:46Z"
        },
        {
          "author": "ketangangal",
          "body": "Hi @Dev-Khant can you assign this to me !",
          "created_at": "2024-10-19T10:51:58Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Sure @ketangangal, please feel free to work on this.",
          "created_at": "2024-10-19T14:45:42Z"
        }
      ]
    },
    {
      "issue_number": 1924,
      "title": "Add Support for Customizing default_headers in Azure OpenAI",
      "body": "### 🚀 The feature\n\nAdd support for customizing the `default_headers` in Azure OpenAI\r\n\r\nThis allows user to configure Memory as follows:\r\n\r\n```python\r\nimport os\r\nfrom mem0 import Memory\r\n\r\nos.environ[\"LLM_AZURE_OPENAI_API_KEY\"] = \"your-api-key\"\r\nos.environ[\"LLM_AZURE_DEPLOYMENT\"] = \"your-deployment-name\"\r\nos.environ[\"LLM_AZURE_ENDPOINT\"] = \"your-api-base-url\"\r\nos.environ[\"LLM_AZURE_API_VERSION\"] = \"version-to-use\"\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"azure_openai\",\r\n        \"config\": {\r\n            \"model\": \"your-deployment-name\",\r\n            \"temperature\": 0.1,\r\n            \"max_tokens\": 2000,\r\n             \"azure_kwargs\" : {\r\n                  \"azure_deployment\" : \"\",\r\n                  \"api_version\" : \"\",\r\n                  \"azure_endpoint\" : \"\",\r\n                  \"api_key\" : \"\"\r\n                  \"default_headers\": {\r\n                      \"Authorization\": \"xxxx\",\r\n                      \"CustomHeader\": \"xxxx\",\r\n                   }\r\n              }\r\n        }\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\nm.add(\"Likes to play cricket on weekends\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n```\n\n### Motivation, pitch\n\nSome organizations using Azure OpenAI require additional headers to be set when posting to the Azure OpenAI endpoint. Therefore, I suggest allowing users to customize the default headers as needed",
      "state": "closed",
      "author": "Zncl2222",
      "author_type": "User",
      "created_at": "2024-09-28T09:59:23Z",
      "updated_at": "2024-10-19T10:27:30Z",
      "closed_at": "2024-10-19T10:27:30Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1924/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1924",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1924",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.443356",
      "comments": []
    },
    {
      "issue_number": 1234,
      "title": "Get all the links given a website",
      "body": "### 🚀 The feature\n\nIf I provide a website link that contains subsections or reference links, will the system explore each of the links on the page automatically, or do I need to input each link separately??\r\n\n\n### Motivation, pitch\n\n- from slack by Kriti Shrivastava\r\n<img width=\"366\" alt=\"Screenshot 2024-02-01 at 7 37 40 PM\" src=\"https://github.com/embedchain/embedchain/assets/4302268/cfe9b2a1-8852-44d6-a6c9-99cc52402587\">\r\n",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-02-02T03:37:46Z",
      "updated_at": "2024-10-15T11:26:36Z",
      "closed_at": "2024-10-15T11:26:36Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1234/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1234",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1234",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.443409",
      "comments": []
    },
    {
      "issue_number": 1913,
      "title": "relevant_memories in mem0/proxy/main.py misisng \"result\" key when using Ollama and chat completion",
      "body": "### 🐛 Describe the bug\n\nWhen using mem0 with the chat completion feature with the following Ollama config\r\n```python\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"llama3.1\",\r\n            \"temperature\": 0.1,\r\n            \"max_tokens\": 128000,\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        }\r\n    },\r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\": {\r\n            \"url\": \"neo4j://localhost:7687\",\r\n            \"username\": \"neo4j\",\r\n            \"password\": \"***\"\r\n        },\r\n        \"llm\" : {\r\n            \"provider\": \"ollama\",\r\n            \"config\": {\r\n                \"model\": \"llama3.1\",\r\n                \"temperature\": 0.0,\r\n                \"max_tokens\": 128000,\r\n                \"ollama_base_url\": \"http://localhost:11434\",\r\n            }\r\n        }\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"mem0-test\",\r\n            \"host\": \"localhost\",\r\n            \"port\": 6333,\r\n            \"embedding_model_dims\": 768,\r\n            \"on_disk\": True,\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"nomic-embed-text\",\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        }\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n```\r\n\r\nThe retrieved memories in `relevant_memories` that get sent to `_format_query_with_memories` are one layer further down under a key called \"results\". When I change the code on line 181 to go through all memories in `relevant_memories['results']` everything works as expected.\r\n\r\n```diff\r\n- memories_text = \"\\n\".join(memory[\"memory\"] for memory in relevant_memories)\r\n+ memories_text = \"\\n\".join(memory[\"memory\"] for memory in relevant_memories['results'])\r\n```\r\n\r\nfull function code with change for completeness:\r\n\r\n```python\r\ndef _format_query_with_memories(self, messages, relevant_memories):\r\n    memories_text = \"\\n\".join(memory[\"memory\"] for memory in relevant_memories['results'])\r\n    return f\"- Relevant Memories/Facts: {memories_text}\\n\\n- User Question: {messages[-1]['content']}\"\r\n```\r\n\r\nNot sure how this should be handled properly to work with all other providers as I'm fairly new to Mem0, but thought I at least should register an issue since I couldn't find anything regarding this so far.\r\n\r\nMy code for reference:\r\n<details>\r\n\r\n<summary>Code</summary>\r\n\r\n```python\r\nimport logging\r\n\r\nfrom mem0.proxy.main import Mem0\r\n\r\nhandler = logging.FileHandler(filename=\"ai-assitant.log\", mode='a')\r\nlogging.basicConfig(handlers=[handler],\r\n                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',\r\n                    datefmt='%H:%M:%S',\r\n                    level=logging.INFO)\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"llama3.1\",\r\n            \"temperature\": 0.1,\r\n            \"max_tokens\": 128000,\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        }\r\n    },\r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\": {\r\n            \"url\": \"neo4j://localhost:7687\",\r\n            \"username\": \"neo4j\",\r\n            \"password\": \"***\"\r\n        },\r\n        \"llm\" : {\r\n            \"provider\": \"ollama\",\r\n            \"config\": {\r\n                \"model\": \"llama3.1\",\r\n                \"temperature\": 0.0,\r\n                \"max_tokens\": 128000,\r\n                \"ollama_base_url\": \"http://localhost:11434\",\r\n            }\r\n        }\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"mem0-test\",\r\n            \"host\": \"localhost\",\r\n            \"port\": 6333,\r\n            \"embedding_model_dims\": 768,\r\n            \"on_disk\": True,\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"nomic-embed-text\",\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        }\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n\r\nclient = Mem0(config=config)\r\nuser_id = \"aiquen\"\r\n\r\n# Ask the user for an input\r\nmessage = input(\"Welcome to Mem0 AI-Assistant, how can I help you? > \")\r\nwhile True:\r\n    # Use the input to re-create messages list each time\r\n    messages = [\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": f\"{message}\"\r\n        }\r\n    ]\r\n\r\n    # Create a chat_completion\r\n    chat_completion = client.chat.completions.create(messages=messages, user_id=user_id, model=\"ollama/llama3.1\")\r\n\r\n    # Print the answer from chat_completion\r\n    print(f\"Assistant: {chat_completion.choices[0].message.content}\")\r\n    message = input(\"> \")\r\n```\r\n</details>",
      "state": "closed",
      "author": "aiqueneldar",
      "author_type": "User",
      "created_at": "2024-09-26T13:51:49Z",
      "updated_at": "2024-10-15T11:24:08Z",
      "closed_at": "2024-10-15T11:24:08Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1913/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "parshvadaftari"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1913",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1913",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.443420",
      "comments": [
        {
          "author": "parshvadaftari",
          "body": "@Dev-Khant Can I pick this up?",
          "created_at": "2024-09-27T05:18:12Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Yes @parshvadaftari Feel free to work on this. Thanks",
          "created_at": "2024-09-27T11:14:06Z"
        },
        {
          "author": "parshvadaftari",
          "body": "@aiqueneldar I have raised the PR for this issue.\r\n\r\nI also have a suggestion for your code: to print the AI's response in real-time, you might want to use the following approach:\r\n```\r\nfor chunk in chat_completion:\r\n        if chunk.choices[0].delta.content is not None:\r\n            print(chunk.cho",
          "created_at": "2024-09-27T13:45:22Z"
        },
        {
          "author": "aiqueneldar",
          "body": "Thank you, both for PR and for the advice! :)",
          "created_at": "2024-09-27T13:47:49Z"
        }
      ]
    },
    {
      "issue_number": 1942,
      "title": "unable to use graph memory",
      "body": "### 🐛 Describe the bug\n\nI was trying to utilise graph memory using gemini and google embeddings along with qdrant. Pls help\r\n\r\n```bash\r\n(venv) ~/Desktop/mem0-test-try $ python assistant_v1.py \r\n\r\nGive Feedback / Get Help: https://github.com/BerriAI/litellm/issues/new\r\nLiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/llms/vertex_ai_and_google_ai_studio/gemini/vertex_and_google_ai_studio_gemini.py\", line 1280, in completion\r\n    response = client.post(url=url, headers=headers, json=data)  # type: ignore\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py\", line 371, in post\r\n    raise e\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/llms/custom_httpx/http_handler.py\", line 357, in post\r\n    response.raise_for_status()\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/httpx/_models.py\", line 763, in raise_for_status\r\n    raise HTTPStatusError(message, request=request, response=self)\r\nhttpx.HTTPStatusError: Client error '400 Bad Request' for url 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=AIzaSyCPEtiXJMGiy1tAodWKM0i_klX0uilbusg'\r\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/main.py\", line 2152, in completion\r\n    response = vertex_chat_completion.completion(  # type: ignore\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/llms/vertex_ai_and_google_ai_studio/gemini/vertex_and_google_ai_studio_gemini.py\", line 1284, in completion\r\n    raise VertexAIError(status_code=error_code, message=err.response.text)\r\nlitellm.llms.vertex_ai_and_google_ai_studio.common_utils.VertexAIError: {\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\",\r\n    \"status\": \"INVALID_ARGUMENT\",\r\n    \"details\": [\r\n      {\r\n        \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\r\n        \"fieldViolations\": [\r\n          {\r\n            \"field\": \"tools[0].function_declarations[0].parameters\",\r\n            \"description\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/users1/Desktop/mem0-test-try/assistant_v1.py\", line 67, in <module>\r\n    m.add(memory, user_id=\"divyanshu\", metadata=meta)\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/mem0/memory/main.py\", line 110, in add\r\n    graph_result = future2.result()\r\n                   ^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\r\n    return self.__get_result()\r\n           ^^^^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\r\n    raise self._exception\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/thread.py\", line 58, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/mem0/memory/main.py\", line 225, in _add_to_graph\r\n    added_entities = self.graph.add(data, filters)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/mem0/memory/graph_memory.py\", line 54, in add\r\n    search_output = self._search(data, filters)\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/mem0/memory/graph_memory.py\", line 167, in _search\r\n    search_results = self.llm.generate_response(\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/mem0/llms/litellm.py\", line 85, in generate_response\r\n    response = litellm.completion(**params)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/utils.py\", line 1074, in wrapper\r\n    raise e\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/utils.py\", line 957, in wrapper\r\n    result = original_function(*args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/main.py\", line 2920, in completion\r\n    raise exception_type(\r\n          ^^^^^^^^^^^^^^^\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py\", line 2033, in exception_type\r\n    raise e\r\n  File \"/Users/users1/Desktop/mem0-test-try/venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py\", line 1049, in exception_type\r\n    raise BadRequestError(\r\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: VertexAIException BadRequestError - {\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\",\r\n    \"status\": \"INVALID_ARGUMENT\",\r\n    \"details\": [\r\n      {\r\n        \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\r\n        \"fieldViolations\": [\r\n          {\r\n            \"field\": \"tools[0].function_declarations[0].parameters\",\r\n            \"description\": \"Invalid JSON payload received. Unknown name \\\"additionalProperties\\\" at 'tools[0].function_declarations[0].parameters': Cannot find field.\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nERROR:neo4j.io:Failed to write data to connection ResolvedIPv4Address(('34.124.169.171', 7687)) (ResolvedIPv4Address(('34.124.169.171', 7687)))\r\nERROR:neo4j.io:Failed to write data to connection IPv4Address(('d12681a6.databases.neo4j.io', 7687)) (ResolvedIPv4Address(('34.124.169.171', 7687)))\r\n(venv) ~/Desktop/mem0-test-try $ \r\n\r\n```\r\n\r\n```python\r\n#requirements.txt\r\ngit+https://github.com/Divyanshu9822/mem0.git@main\r\nchromadb\r\nollama\r\nlitellm\r\nneo4j\r\ngoogle-generativeai\r\nvertexai\r\npython-dotenv\r\n```\r\n```python\r\n#main.py\r\nimport os\r\nfrom mem0 import Memory\r\nfrom pprint import pprint\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\nGOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\r\nneo4j_url = os.getenv(\"NEO4J_URI\")\r\nneo4j_user = os.getenv(\"NEO4J_USERNAME\")\r\nneo4j_password = os.getenv(\"NEO4J_PASSWORD\")\r\nqdrant_url = os.getenv(\"QDRANT_URL\")\r\nqdrant_api_key = os.getenv(\"QDRANT_API_KEY\")\r\n\r\n\r\n# Configuration for Memory\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"litellm\",\r\n        \"config\": {\r\n            \"model\": \"gemini/gemini-1.5-pro\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 1024,\r\n        },\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"gemini\",\r\n        \"config\": {\r\n            \"model\": \"models/text-embedding-004\",\r\n            \"embedding_dims\": 768,\r\n        },\r\n    },\r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\": {\r\n            \"url\": neo4j_url,\r\n            \"username\": neo4j_user,\r\n            \"password\": neo4j_password,\r\n        },\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"url\": qdrant_url,\r\n            \"api_key\": qdrant_api_key,\r\n            \"embedding_model_dims\": 768,\r\n        },\r\n    },\r\n    \"version\": \"v1.1\",\r\n}\r\n\r\n# Initialize Memory with the configuration\r\nm = Memory.from_config(config)\r\n\r\n# Add 5 distinct memories with metadata\r\nmemories_to_add = [\r\n    (\"I recently started a new job as a software engineer\", {\"category\": \"career\"}),\r\n    (\"I traveled to Japan last year for vacation\", {\"category\": \"travel\"}),\r\n    (\"I bought a new bicycle to stay active\", {\"category\": \"fitness\"}),\r\n    (\"My favorite dish is lasagna\", {\"category\": \"food\"}),\r\n    (\"I have a pet dog named Bruno\", {\"category\": \"personal\"}),\r\n]\r\n\r\n# Add each memory to the memory store with metadata and user_id\r\nfor memory, meta in memories_to_add:\r\n    m.add(memory, user_id=\"divyanshu\", metadata=meta)\r\n\r\n```",
      "state": "open",
      "author": "Divyanshu9822",
      "author_type": "User",
      "created_at": "2024-10-05T03:33:01Z",
      "updated_at": "2024-10-15T11:19:43Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1942/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [
        "prateekchhikara",
        "spike-spiegel-21"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1942",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1942",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.621076",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Hi @Divyanshu9822 I used your messages and tried creating the graph. It worked for me. I believe there is an issue with your neo4j setup.\r\n\r\n<img width=\"584\" alt=\"Screenshot 2024-10-08 at 2 38 33 PM\" src=\"https://github.com/user-attachments/assets/f12e68ce-dded-4bf6-a8b4-f843731e925f\">\r\n",
          "created_at": "2024-10-08T21:38:43Z"
        },
        {
          "author": "Divyanshu9822",
          "body": "> Hi @Divyanshu9822 I used your messages and tried creating the graph. It worked for me. I believe there is an issue with your neo4j setup.\n> \n> <img width=\"584\" alt=\"Screenshot 2024-10-08 at 2 38 33 PM\" src=\"https://github.com/user-attachments/assets/f12e68ce-dded-4bf6-a8b4-f843731e925f\">\n> \n\nDid u",
          "created_at": "2024-10-09T03:19:08Z"
        },
        {
          "author": "femto",
          "body": "Hello, @prateekchhikara facing the same problem, when adding graph mem, it only uses the following two, I can't even use openai.\r\n```\r\n if self.llm_provider in [\"azure_openai_structured\", \"openai_structured\"]:\r\n            _tools = [\r\n                UPDATE_MEMORY_STRUCT_TOOL_GRAPH,\r\n               ",
          "created_at": "2024-10-09T05:04:54Z"
        },
        {
          "author": "Divyanshu9822",
          "body": "OpenAI is working properly with vector db and graph as well. However it doesn't serve my purpose well, I'm trying to build an AI assistant and less latency is quite important here so i chose gemini flash but it's not working with graph memory there's some issue it graph tools calling, also when i tr",
          "created_at": "2024-10-09T05:30:16Z"
        }
      ]
    },
    {
      "issue_number": 1936,
      "title": "Supporting LLM routing by integrating Not Diamond",
      "body": "### 🚀 The feature\r\n\r\nFor `mem0`, we would like to add our model router as a component in your library, so that users can automatically route their prompts without relying on complex business logic. I believe Not Diamond might fit in using something like this approach, but what do you think? I'm happy to take on this work if you're open to it. \r\n\r\n```bash\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"notdiamond\",\r\n        \"config\": [{\r\n            \"model\": \"openai/gpt-4o\",\r\n            \"temperature\": 0,\r\n            \"max_tokens\": 8000,\r\n        },\r\n        {\r\n            \"model\": \"anthropic/claude-3-5-sonnet-20240620\",\r\n            \"temperature\": 0,\r\n            \"max_tokens\": 8000,\r\n        }]\r\n    },\r\n}\r\n\r\n# Initialize Memory with the configuration\r\nm = Memory.from_config(config)\r\n\r\n# Add a memory\r\nm.add(\"I'm visiting Paris\", user_id=\"john\")\r\n\r\n# Retrieve memories\r\nmemories = m.get_all(user_id=\"john\")\r\n```\r\n\r\n### Motivation, pitch\r\n\r\nHi there! I am a big fan of `mem0` and would love to integrate Not Diamond into it. Not Diamond automatically routes your prompts to the AI model best-suited to respond to that prompt. By using Not Diamond as an AI “meta-model,” you can achieve state-of-the-art performance that beats every foundation model on every major benchmark.* \r\n\r\n**If you’d like to learn more about our routing, check out [this example walkthrough video with Tomas](https://x.com/tomas_hk/status/1818296673749328199), our CEO. You can also* \r\n\r\n- *see how we work by using [our Chat app](https://chat.notdiamond.ai/),*\r\n- *learn more at [our website](https://www.notdiamond.ai), or*\r\n- *[read our docs](https://notdiamond.readme.io/).*",
      "state": "open",
      "author": "devanshrj",
      "author_type": "User",
      "created_at": "2024-10-02T16:51:19Z",
      "updated_at": "2024-10-15T11:19:34Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1936/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1936",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1936",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.880474",
      "comments": []
    },
    {
      "issue_number": 1903,
      "title": "Error Encountered After Configuring LLM with Ollama Provider in Config File",
      "body": "### Issue with current documentation:\r\n\r\nI've configured the LLM in my config file as follows:\r\n\r\n![image](https://github.com/user-attachments/assets/b8c40f62-6c3d-4282-bcae-eaae2b847924)\r\n    \r\nHowever, I'm encountering an error (see screenshot). Could you help me resolve this issue ?\r\n![image](https://github.com/user-attachments/assets/9afcd129-c4eb-42de-8a06-aea0f6464402)\r\n\r\n\r\n",
      "state": "open",
      "author": "vrajpatel04",
      "author_type": "User",
      "created_at": "2024-09-25T11:38:51Z",
      "updated_at": "2024-10-15T11:17:19Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1903/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1903",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1903",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:18.880497",
      "comments": [
        {
          "author": "parshvadaftari",
          "body": "@vrajpatel04 Are you using the config as file or as a dictionary?",
          "created_at": "2024-09-25T15:31:15Z"
        },
        {
          "author": "vrajpatel04",
          "body": "> @vrajpatel04 Are you using the config as file or as a dictionary?\r\n\r\nI created a separate config.yaml file.",
          "created_at": "2024-09-26T04:14:36Z"
        },
        {
          "author": "ketangangal",
          "body": "Hi @vrajpatel04 use `ollama_base_url` key instead of `base_url:`    ",
          "created_at": "2024-09-27T12:32:30Z"
        },
        {
          "author": "vrajpatel04",
          "body": "> Hi @vrajpatel04 use `ollama_base_url` key instead of `base_url:`\r\n\r\nHi @ketangangal ,\r\n\r\nstill giving the same error:\r\n\r\n![image](https://github.com/user-attachments/assets/a8714e84-0c31-42b1-8413-8e85aac3c267)\r\n",
          "created_at": "2024-09-27T12:51:43Z"
        },
        {
          "author": "PranavPuranik",
          "body": "I can take a look at this tomorrow @Dev-Khant ",
          "created_at": "2024-10-02T21:01:42Z"
        }
      ]
    },
    {
      "issue_number": 1911,
      "title": "Milvus throws an exception Bug",
      "body": "### 🐛 Describe the bug\n\nIn the code of `mem0/vector_stores/milvus.py`, index_type=\"AUTOINDEX\" is specified. If AUTOINDEX is specified, only metric_type is allowed to be specified; no other parameters can be specified, otherwise pymilvus will throw an exception:\r\n`pymilvus.exceptions.MilvusException: <MilvusException: (code=101, message=failed to search: collection not loaded[collection=452809638709711102])>`\r\n\r\nTherefore, the parameter params={\"nlist\": 128} in the create_col function needs to be removed.",
      "state": "closed",
      "author": "fenggaobj",
      "author_type": "User",
      "created_at": "2024-09-26T11:53:09Z",
      "updated_at": "2024-10-02T23:51:14Z",
      "closed_at": "2024-10-02T23:51:14Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1911/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1911",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1911",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:19.088805",
      "comments": [
        {
          "author": "ketangangal",
          "body": "Hi @fenggaobj, \r\nThanks for pointing out.  fixing it\r\n",
          "created_at": "2024-09-27T12:16:34Z"
        }
      ]
    },
    {
      "issue_number": 1805,
      "title": "Filtering by user_id in graph memory search results does not work",
      "body": "### 🐛 Describe the bug\n\nThe vector memory search result (`memories`) is filtered by `user_id`, but the graph memory search result (`entities`) is not filtered by `user_id`, is this correct behavior? I expected graph memory search results to be filtered by `user_id` as well as vector memory ones.\r\n\r\nFor example, I executed the following code using vector memory and graph memory.\r\n\r\n```\r\nfrom mem0 import Memory\r\nimport os\r\n\r\nneo4j_username = os.environ.get(\"NEO4J_USERNAME\")\r\nneo4j_password = os.environ.get(\"NEO4J_PASSWORD\")\r\nneo4j_url = os.environ.get(\"NEO4J_URL\")\r\nqdrant_url = os.environ.get(\"QDRANT_URL\")\r\n\r\nmem0_config = {\r\n  \"vector_store\": {\r\n    \"provider\": \"qdrant\",\r\n    \"config\": {\r\n      \"collection_name\": \"knowledge\",\r\n      \"url\": qdrant_url,\r\n    }\r\n  },\r\n  \"graph_store\": {\r\n    \"provider\": \"neo4j\",\r\n    \"config\": {\r\n      \"url\": neo4j_url,\r\n      \"username\": neo4j_username,\r\n      \"password\": neo4j_password\r\n    }\r\n  },\r\n  \"version\": \"v1.1\"\r\n}\r\n\r\nm = Memory.from_config(config_dict=mem0_config)\r\n\r\nm.add(\"Charlie likes apples.\", user_id=\"alice\")\r\nm.add(\"Charlie likes baseball.\", user_id=\"bob\")\r\n\r\nmemories_alice = m.search(\"What dose Charlie like?\", user_id=\"alice\")\r\nmemories_bob = m.search(\"What dose Charlie like?\", user_id=\"bob\")\r\n\r\nprint(f\"Alice: {memories_alice}\\n\")\r\nprint(f\"Bob: {memories_bob}\\n\")\r\n```\r\n\r\nThe execution result is as follows.\r\n\r\n```\r\nAlice: {'memories': [{'id': '308f199f-60c8-451e-a7a3-ae7113d47c06', 'memory': 'Likes apples', 'hash': '7bd8bc77c25090d92299e49beb3ef9cc', 'metadata': None, 'score': 0.25869718, 'created_at': '2024-09-03T21:00:42.388677-07:00', 'updated_at': '2024-09-03T21:03:58.727110-07:00', 'user_id': 'alice'}], 'entities': [{'source': 'charlie', 'relation': 'likes', 'destination': 'apples'}, {'source': 'charlie', 'relation': 'likes', 'destination': 'baseball'}]}\r\n\r\nBob: {'memories': [{'id': '85d68144-cfe6-4e4a-8121-54c0694ce2ab', 'memory': 'Likes baseball', 'hash': 'fdde4363cbbeee916d9c25e63a49e8b9', 'metadata': None, 'score': 0.29662642, 'created_at': '2024-09-03T21:00:37.055906-07:00', 'updated_at': '2024-09-03T21:04:06.556679-07:00', 'user_id': 'bob'}], 'entities': [{'source': 'charlie', 'relation': 'likes', 'destination': 'apples'}, {'source': 'charlie', 'relation': 'likes', 'destination': 'baseball'}]}\r\n```\r\n\r\nHere are the results I expect.\r\n\r\n```\r\nAlice: {'memories': [{'id': '308f199f-60c8-451e-a7a3-ae7113d47c06', 'memory': 'Likes apples', 'hash': '7bd8bc77c25090d92299e49beb3ef9cc', 'metadata': None, 'score': 0.25869718, 'created_at': '2024-09-03T21:00:42.388677-07:00', 'updated_at': '2024-09-03T21:03:58.727110-07:00', 'user_id': 'alice'}], 'entities': [{'source': 'charlie', 'relation': 'likes', 'destination': 'apples'}]}\r\n\r\nBob: {'memories': [{'id': '85d68144-cfe6-4e4a-8121-54c0694ce2ab', 'memory': 'Likes baseball', 'hash': 'fdde4363cbbeee916d9c25e63a49e8b9', 'metadata': None, 'score': 0.29662642, 'created_at': '2024-09-03T21:00:37.055906-07:00', 'updated_at': '2024-09-03T21:04:06.556679-07:00', 'user_id': 'bob'}], 'entities': [{'source': 'charlie', 'relation': 'likes', 'destination': 'baseball'}]}\r\n```",
      "state": "open",
      "author": "nibankougen",
      "author_type": "User",
      "created_at": "2024-09-04T04:34:44Z",
      "updated_at": "2024-09-30T22:46:45Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1805/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "prateekchhikara"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1805",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1805",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:19.282383",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Hi @nibankougen we knew about this issue and released a patch last week. Could you please upgrade your mem0 package? Let me know if you are still having this problem. ",
          "created_at": "2024-09-04T16:52:53Z"
        },
        {
          "author": "nibankougen",
          "body": "There is another problem with graph memory sometimes not registering, but the filtering by `user_id` was working. \r\nThank you very much.\r\n\r\n```\r\nAlice: {'memories': [{'id': 'aed86cb9-a214-44a8-8571-b11d69616e05', 'memory': 'Charlie likes apples', 'hash': '81ccc605a4858b2a7c9c541b015d2998', 'metadata",
          "created_at": "2024-09-05T02:31:01Z"
        },
        {
          "author": "chenm1xuexi",
          "body": "by viewing the source code, \r\n\r\n```python\r\nclass MemoryGraph:\r\n    def __init__(self, config):\r\n        self.config = config\r\n        self.graph = Neo4jGraph(self.config.graph_store.config.url, self.config.graph_store.config.username, self.config.graph_store.config.password)\r\n        self.embedding_",
          "created_at": "2024-09-06T02:40:01Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@chenm1xuexi I understand your concern. However, the user_id in the add call is used to create the source node. Why do you think resetting \"user_id\" matters for search?",
          "created_at": "2024-09-30T22:46:44Z"
        }
      ]
    },
    {
      "issue_number": 1910,
      "title": "AWSBedrockLLM.generate_response() got an unexpected keyword argument 'response_format'",
      "body": "### 🐛 Describe the bug\n\nUsing locally, version 0.1.16 with the config in the code.\r\n\r\n```\r\n>>> import mem0\r\n>>> mem0.__version__\r\n'0.1.16'\r\n```\r\n\r\n\r\n```from mem0 import Memory\r\nimport os\r\n\r\nos.environ['AWS_REGION'] = \"my-region\"\r\nos.environ['AWS_ACCESS_KEY']=\"my-key\"\r\nos.environ['AWS_SECRET_ACCESS_KEY']=\"my-secret\"\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"aws_bedrock\",\r\n        \"config\": {\r\n            \"model\": \"arn:aws:bedrock:ap-south-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0\",\r\n            \"temperature\": 0.2,\r\n            \"max_tokens\": 1500,\r\n        }\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"url\": \"my-url\",\r\n            \"api_key\": \"my-key\"\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"huggingface\"\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\n\r\n# 1. Add: Store a memory from any unstructured text\r\nresult = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"me\", metadata={\"category\": \"hobbies\"})\r\n```\r\n\r\nRunning it locally, when using AWS bedrock anthropic, I am getting the following error.\r\n\r\n```\r\n  File \"/Users/neeraj/Code/t-mem0/main.py\", line 33, in <module>\r\n    result = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"neeraj\", metadata={\"category\": \"hobbies\"})\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/neeraj/Code/t-mem0/lib/python3.12/site-packages/mem0/memory/main.py\", line 109, in add\r\n    vector_store_result = future1.result()\r\n                          ^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\r\n    return self.__get_result()\r\n           ^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\r\n    raise self._exception\r\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/thread.py\", line 58, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/neeraj/Code/t-mem0/lib/python3.12/site-packages/mem0/memory/main.py\", line 136, in _add_to_vector_store\r\n    response = self.llm.generate_response(\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: AWSBedrockLLM.generate_response() got an unexpected keyword argument 'response_format'\r\n```\r\n\r\nThe error looks to be because   `AWSBedrockLLM` has the following signature\r\n\r\n```\r\ndef generate_response(\r\n        self,\r\n        messages: List[Dict[str, str]],\r\n        tools: Optional[List[Dict]] = None,\r\n        tool_choice: str = \"auto\",\r\n    ):\r\n```\r\n\r\nThis looks to be a very basic miss. Am I doing something wrong, or is `AWSBedrockLLM` not widely used ?\r\n\r\n\r\n",
      "state": "closed",
      "author": "ketvector",
      "author_type": "User",
      "created_at": "2024-09-26T07:47:34Z",
      "updated_at": "2024-09-30T19:10:23Z",
      "closed_at": "2024-09-30T19:10:23Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1910/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1910",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1910",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:19.516265",
      "comments": [
        {
          "author": "rafael-bianchi",
          "body": "Same problem here. Also, it would be nice to use models in bedrock for the embedder config.",
          "created_at": "2024-09-26T13:41:31Z"
        },
        {
          "author": "NavyaAlapati13",
          "body": "Please assign this issue to me @Dev-Khant, will raise a PR for this soon.",
          "created_at": "2024-09-26T16:31:17Z"
        }
      ]
    },
    {
      "issue_number": 1630,
      "title": "Requesting other Embedding Models",
      "body": "### 🚀 The feature\r\n\r\nIt would be much more easier and free of cost  if we use the Google's \"models/text-embedding-004\" embedding model instead of openai\r\n\r\n### Motivation, pitch\r\n\r\nGoogle provides this \"models/text-embedding-004\" model through Gemini Api which is free to use ( up-to an extent)\r\nwhere as, openai  api is costly to use .",
      "state": "closed",
      "author": "Rajesh9998",
      "author_type": "User",
      "created_at": "2024-08-01T15:56:30Z",
      "updated_at": "2024-09-27T16:46:41Z",
      "closed_at": "2024-09-27T16:46:41Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1630/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "PranavPuranik"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1630",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1630",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:21.619824",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hi @Rajesh9998 We are working on adding support to use different embedding models.",
          "created_at": "2024-08-02T14:26:23Z"
        },
        {
          "author": "PranavPuranik",
          "body": "I can pick this up",
          "created_at": "2024-08-22T04:54:54Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @PranavPuranik Please feel free to work on this.",
          "created_at": "2024-08-22T05:19:36Z"
        },
        {
          "author": "Divyanshu9822",
          "body": "@Dev-Khant I haven’t seen any recent activity on this issue. If you assign me, I can take it on, as I’m familiar with the implementation.",
          "created_at": "2024-09-09T17:22:26Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @PranavPuranik Are you working on this issue?",
          "created_at": "2024-09-10T16:37:40Z"
        }
      ]
    },
    {
      "issue_number": 1891,
      "title": "Embedchain and mem0 dependency conflicts.",
      "body": "### 🐛 Describe the bug\n\nWhen installing the `embedchain` package, the `mem0ai` package is downgraded to version `0.0.20`.\r\n\r\n```\r\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nembedchain 0.1.121 requires mem0ai<0.0.21,>=0.0.20, but you have mem0ai 0.1.15 which is incompatible.\r\n```",
      "state": "closed",
      "author": "parshvadaftari",
      "author_type": "User",
      "created_at": "2024-09-21T20:03:48Z",
      "updated_at": "2024-09-27T07:28:32Z",
      "closed_at": "2024-09-27T07:28:32Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1891/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1891",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1891",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:21.823555",
      "comments": []
    },
    {
      "issue_number": 1895,
      "title": "Basic memory retrieval doesn't work",
      "body": "### 🐛 Describe the bug\r\n\r\n```\r\nfrom mem0 import Memory\r\nimport dotenv\r\n\r\n\r\ndotenv.load_dotenv()\r\n\r\n\r\nconfig = {\r\n    \"graph_store\": {\r\n        \"provider\": \"neo4j\",\r\n        \"config\": {\r\n            \"url\": \"neo4j+s://xxx.xxx.neo4j.io\",\r\n            \"username\": \"neo4j\",\r\n            \"password\": \"xxx\"\r\n        }\r\n    },\r\n    \"version\": \"v1.1\"\r\n}\r\n\r\nm = Memory.from_config(config_dict=config)\r\n\r\nresult = m.add(\"I like to take short walks on weekdays.\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n\r\nall_memories = m.get_all()\r\n``````\r\n\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\nCell In[32], line 24\r\n     20 m = Memory.from_config(config_dict=config)\r\n     22 result = m.add(\"I like to take short walks on weekdays.\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n---> 24 all_memories = m.get_all()\r\n\r\nFile ~/dev/projects/Roga/code/AiResearch/venv/lib/python3.12/site-packages/mem0/memory/main.py:291, in Memory.get_all(self, user_id, agent_id, run_id, limit)\r\n    286     future_graph_entities = (\r\n    287         executor.submit(self.graph.get_all, filters) if self.version == \"v1.1\" and self.enable_graph else None\r\n    288     )\r\n    290     all_memories = future_memories.result()\r\n--> 291     graph_entities = future_graph_entities.result() if future_graph_entities else None\r\n    293 if self.version == \"v1.1\":\r\n    294     if self.enable_graph:\r\n\r\nFile /opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456, in Future.result(self, timeout)\r\n    454     raise CancelledError()\r\n    455 elif self._state == FINISHED:\r\n--> 456     return self.__get_result()\r\n    457 else:\r\n    458     raise TimeoutError()\r\n\r\nFile /opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401, in Future.__get_result(self)\r\n    399 if self._exception:\r\n    400     try:\r\n--> 401         raise self._exception\r\n    402     finally:\r\n    403         # Break a reference cycle with the exception in self._exception\r\n    404         self = None\r\n\r\nFile /opt/homebrew/Cellar/python@3.12/3.12.6/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/thread.py:58, in _WorkItem.run(self)\r\n     55     return\r\n     57 try:\r\n---> 58     result = self.fn(*self.args, **self.kwargs)\r\n     59 except BaseException as exc:\r\n     60     self.future.set_exception(exc)\r\n\r\nFile ~/dev/projects/Roga/code/AiResearch/venv/lib/python3.12/site-packages/mem0/memory/graph_memory.py:291, in MemoryGraph.get_all(self, filters)\r\n    286 # return all nodes and relationships\r\n    287 query = \"\"\"\r\n    288 MATCH (n {user_id: $user_id})-[r]->(m {user_id: $user_id})\r\n    289 RETURN n.name AS source, type(r) AS relationship, m.name AS target\r\n    290 \"\"\"\r\n--> 291 results = self.graph.query(query, params={\"user_id\": filters[\"user_id\"]})\r\n    293 final_results = []\r\n    294 for result in results:\r\n\r\nKeyError: 'user_id'\r\n```",
      "state": "open",
      "author": "Shakahs",
      "author_type": "User",
      "created_at": "2024-09-23T09:41:34Z",
      "updated_at": "2024-09-26T16:08:38Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1895/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1895",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1895",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:21.823578",
      "comments": [
        {
          "author": "parshvadaftari",
          "body": "@Shakahs You have to pass the `user_id` when using the `graph_store`. If you're using `vector_store` you can retrieve the memory without using the `user_id`.",
          "created_at": "2024-09-23T15:49:54Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @Shakahs Let us know if this fixes the issue.",
          "created_at": "2024-09-25T11:07:48Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@parshvadaftari I believe even for `vector_store` you need to pass an id (run_id, user_id, or agent_id). Correct me @Dev-Khant  if I am wrong.",
          "created_at": "2024-09-25T21:28:09Z"
        },
        {
          "author": "Shakahs",
          "body": "Also I'm trying to create memories for the agent, not a particular user.\r\n\r\nOn Wed, Sep 25, 2024 at 2:28 PM Prateek Chhikara ***@***.***>\r\nwrote:\r\n\r\n> @parshvadaftari <https://github.com/parshvadaftari> I believe even for\r\n> vector_store you need to pass an id (run_id, user_id, or agent_id).\r\n> Corr",
          "created_at": "2024-09-25T22:20:52Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> @parshvadaftari I believe even for `vector_store` you need to pass an id (run_id, user_id, or agent_id). Correct me @Dev-Khant if I am wrong.\r\n\r\nPrateek actually we can directly call `get_all` without passing any id for `vector_store`.",
          "created_at": "2024-09-26T16:08:36Z"
        }
      ]
    },
    {
      "issue_number": 1902,
      "title": "Tests for vertexai embedding",
      "body": "### 🚀 The feature\n\nAdd test cases for VertexAi embeddings.\n\n### Motivation, pitch\n\nComplete test cases for all embeddings",
      "state": "closed",
      "author": "NavyaAlapati13",
      "author_type": "User",
      "created_at": "2024-09-25T03:28:38Z",
      "updated_at": "2024-09-26T16:03:56Z",
      "closed_at": "2024-09-26T16:03:56Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1902/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1902",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1902",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.058750",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "@Dev-Khant I will riase a PR for this, please assign this to me.",
          "created_at": "2024-09-25T03:29:46Z"
        }
      ]
    },
    {
      "issue_number": 1885,
      "title": "Json output for different models varies",
      "body": "### 🐛 Describe the bug\n\n\r\nSome models output json response that starts with ```\r\n\r\nThis doesn't get loaded in `json.loads()` and throws an error.\r\n\r\nA better prompt could solve it for now, but we should look for model specific prompt solutions. \r\n",
      "state": "open",
      "author": "PranavPuranik",
      "author_type": "User",
      "created_at": "2024-09-19T02:58:13Z",
      "updated_at": "2024-09-25T11:01:21Z",
      "closed_at": null,
      "labels": [
        "bug",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1885/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1885",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1885",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.265486",
      "comments": [
        {
          "author": "Morgandri1",
          "body": "IMO this 'flaw' could be useful for parsing generated JSON and code, especially when there is some inconsistency between model output. Personally I can see a lot of benefit using the triple backtick as a flag for something to be parsed, seeing as these models arent designed explicitly to output pars",
          "created_at": "2024-09-19T16:13:40Z"
        },
        {
          "author": "spike-spiegel-21",
          "body": "Duplicate -> #1854 ",
          "created_at": "2024-09-19T17:15:02Z"
        }
      ]
    },
    {
      "issue_number": 1881,
      "title": "Im trying to run the example code with groq llm and hf embedding, and I got this error  ValueError: Expected each embedding in the embeddings to be a list, got ['float']",
      "body": "### 🐛 Describe the bug\r\n\r\nIm trying to run the example code with groq llm and hf embedding, and I got this error.\r\n\r\n  config = {\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"E:/mem\",\r\n        }\r\n     },\r\n\r\n    \"llm\": {\r\n        \"provider\": \"groq\",\r\n        \"config\": {\r\n            \"model\": \"mixtral-8x7b-32768\",\r\n            \"temperature\": 0.1,\r\n            \"max_tokens\": 1000,\r\n        }\r\n    },\r\n\r\n    \"embedder\": {\r\n        \"provider\": \"huggingface\",\r\n        \"config\": {\r\n            \"model\": \"multi-qa-MiniLM-L6-cos-v1\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\n`ValueError: Expected each embedding in the embeddings to be a list, got ['float']`",
      "state": "open",
      "author": "JINO-ROHIT",
      "author_type": "User",
      "created_at": "2024-09-18T14:40:49Z",
      "updated_at": "2024-09-25T10:58:46Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1881/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1881",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1881",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.508824",
      "comments": []
    },
    {
      "issue_number": 1878,
      "title": "embedchain project ",
      "body": "embedchain project \r\nthis project are not working on  Streamlit \r\ni think  reboot the app \r\nthen  working ",
      "state": "open",
      "author": "ArYan339",
      "author_type": "User",
      "created_at": "2024-09-18T10:52:42Z",
      "updated_at": "2024-09-25T10:57:05Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1878/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1878",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1878",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.508845",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @ArYan339 can you please elaborate on what's the exact issue is?",
          "created_at": "2024-09-25T10:57:02Z"
        }
      ]
    },
    {
      "issue_number": 1873,
      "title": "User cannot load persisted ChromaDB ",
      "body": "### 🚀 The feature\n\nI would like to request a feature to support persisting and loading ChromaDB vector databases within the embedchain framework. Currently, there is no built-in functionality for persisting the ChromaDB state across different sessions or restarts of the embedchain application.\n\n### Motivation, pitch\n\nEmbedchain does not natively support persisting the state of ChromaDB, meaning that any data stored in the vector database is lost upon restarting the application or when the server is shut down.",
      "state": "open",
      "author": "vrajpatel04",
      "author_type": "User",
      "created_at": "2024-09-17T13:05:55Z",
      "updated_at": "2024-09-25T10:56:13Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1873/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1873",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1873",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.735908",
      "comments": [
        {
          "author": "spike-spiegel-21",
          "body": "Hi @vrajpatel04 , Please add the sample code from your use case. I will the tell you in what ways you can persist data.",
          "created_at": "2024-09-19T16:44:55Z"
        }
      ]
    },
    {
      "issue_number": 1863,
      "title": "Custom Categories example from docs does not work",
      "body": "### 🐛 Describe the bug\n\nI am trying to reuse [this](https://docs.mem0.ai/features/custom-categories) example from docs in order to create custom categories but it throws error. Here's my code:\r\n```python\r\ncustom_categories = [\r\n    {\"cooking\": \"For users interested in cooking, including recipes, cooking tips, and culinary experiences.\"},\r\n    {\"fitness\": \"Includes content related to fitness, such as workouts, exercises, and fitness tips.\"}\r\n]\r\n\r\nmessages = [\r\n    {\"role\" : \"user\", \"content\" : \"Hi, my name is Alice. I love to play badminton.\"},\r\n    {\"role\" : \"assistant\", \"content\" : \"Hello Alice! It's nice to meet you. Badminton is such an amazing sport. How can I assist you today?\"},\r\n    {\"role\" : \"user\", \"content\" : \"I am a fitness freak, I go to gym daily.\"},\r\n    {\"role\" : \"assistant\", \"content\" : \"That's great! Regular exercise is very beneficial for health.\"},\r\n    {\"role\" : \"user\", \"content\" : \"Because of my gym plan, I mostly cook at home.\"},\r\n    {\"role\" : \"assistant\", \"content\" : \"Cooking at home is a good way to ensure you have a balanced diet.\"}\r\n]\r\nconfig = {\r\n\"llm\":  # defining secrets for llm\r\n\"embedder\":  # secrets for embedder\r\n}\r\n\r\nfrom mem0 import Memory\r\nm = Memory.from_config(config)\r\nm.add(messages, user_id=\"alice\", custom_categories=custom_categories)\r\n```\r\n\r\nHere's the error I get:\r\n```bash\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n[<ipython-input-4-615dd71b2dd0>](https://localhost:8080/#) in <cell line: 1>()\r\n----> 1 m.add(messages, user_id=\"alice\", custom_categories=custom_categories)\r\n\r\nTypeError: Memory.add() got an unexpected keyword argument 'custom_categories'\r\n```",
      "state": "open",
      "author": "uahmad235",
      "author_type": "User",
      "created_at": "2024-09-14T07:47:00Z",
      "updated_at": "2024-09-25T10:55:34Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1863/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Dev-Khant"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1863",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1863",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:22.926681",
      "comments": [
        {
          "author": "ketangangal",
          "body": "Hello @uahmad235 , \r\n\r\nMem0 add method does not support this key, docs need updates. \r\n\r\nFYI @deshraj @Dev-Khant if this feature is required or in pipeline i can work on it.",
          "created_at": "2024-09-14T12:48:44Z"
        },
        {
          "author": "uahmad235",
          "body": "Hey @ketangangal \r\nIs this completely deprecated or moved to a different API?",
          "created_at": "2024-09-15T17:24:38Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @uahmad235, The [doc](https://docs.mem0.ai/features/custom-categories) refers to use `custom_categories` for the `platform` and not OSS package. So you can switch to platform by passing api_key in order to use custom_categories.",
          "created_at": "2024-09-16T05:33:35Z"
        }
      ]
    },
    {
      "issue_number": 1866,
      "title": "Issue Description: Encountered a TypeError when using the chroma configuration from the documentation for setting up vector-db.",
      "body": "### 🐛 Describe the bug\n\nHere is the optimized and translated issue submission content:\r\n\r\n---\r\n\r\n### Issue Description:\r\n\r\nI encountered a configuration validation error when trying to use `chroma` as the vector store provider. Below is the configuration and code that was used:\r\n\r\n```python\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"/Users/chenzi/project/zcbc/run_demo\",\r\n        }\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\n```\r\n\r\n### Error Message:\r\n\r\nThe following error was returned:\r\n\r\n```\r\nERROR:root:Configuration validation error: 1 validation error for MemoryConfig\r\nvector_store.config\r\n  Value error, Unsupported vector store provider: chroma [type=value_error, input_value={'collection_name': 'test', 'path': 'test_db'}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error\r\n```\r\n\r\n### System Information:\r\n- **Python version**: 3.10.13\r\n- **Operating system**: macOS\r\n\r\nIt seems like `chroma` is not being recognized as a supported vector store provider. Any help in resolving this issue would be greatly appreciated!\r\n\r\n---\r\n\r\n",
      "state": "open",
      "author": "chengzi0103",
      "author_type": "User",
      "created_at": "2024-09-15T04:26:36Z",
      "updated_at": "2024-09-24T04:38:07Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1866/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Dev-Khant"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1866",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1866",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.143172",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@chengzi0103 Please update to latest version of mem0, it should fix the issue.\r\n\r\nPlease let me know if you still face the issue.",
          "created_at": "2024-09-16T05:54:18Z"
        },
        {
          "author": "chengzi0103",
          "body": "> @chengzi0103 Please update to latest version of mem0, it should fix the issue.\r\n> \r\n> Please let me know if you still face the issue.\r\n\r\nThank you for your response. Here are my suggestions:\r\n\r\nI have tested it on the latest mem0ai version 0.1.14, and it works successfully. Thank you!\r\nI suggest s",
          "created_at": "2024-09-17T03:00:22Z"
        },
        {
          "author": "chengzi0103",
          "body": "> @chengzi0103 Please update to latest version of mem0, it should fix the issue.\r\n> \r\n> Please let me know if you still face the issue.\r\n\r\nAdditionally, could you provide an explanation of the implementation logic behind some of your core mechanisms?",
          "created_at": "2024-09-17T03:04:37Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> > @chengzi0103 Please update to latest version of mem0, it should fix the issue.\r\n> > Please let me know if you still face the issue.\r\n> \r\n> Thank you for your response. Here are my suggestions:\r\n> \r\n> I have tested it on the latest mem0ai version 0.1.14, and it works successfully. Thank you! I su",
          "created_at": "2024-09-17T10:05:42Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> > @chengzi0103 Please update to latest version of mem0, it should fix the issue.\r\n> > Please let me know if you still face the issue.\r\n> \r\n> Additionally, could you provide an explanation of the implementation logic behind some of your core mechanisms?\r\n\r\nHey, this could help: https://docs.mem0.ai",
          "created_at": "2024-09-17T10:25:37Z"
        }
      ]
    },
    {
      "issue_number": 1833,
      "title": "when use chroma, wrapper has not been initialized",
      "body": "### 🐛 Describe the bug\n\nmy code is this:\r\n```\r\nimport os\r\n\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"justin\",\r\n            \"path\": \"db\",\r\n        },\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"rolandroland/llama3.1-uncensored\",\r\n            \"temperature\": 0.3,\r\n            \"max_tokens\": 8000,\r\n            \"ollama_base_url\": \"http://127.0.0.1:11434\",  # Ensure this URL is correct\r\n        },\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"nomic-embed-text:latest\",\r\n            # Alternatively, you can use \"snowflake-arctic-embed:latest\"\r\n            \"ollama_base_url\": \"http://localhost:11434\",\r\n        },\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\n\r\nmid = m.add(\"I like pizza\", user_id=\"alice\")\r\nsearch = m.search(\"pizza\", user_id=\"alice\")\r\nprint(search)\r\n\r\nr = m.get_all(user_id=\"alice\")\r\nprint(r)\r\n\r\n```\r\nand i break at chroma.py, the exception raise:\r\n![image](https://github.com/user-attachments/assets/c5a02858-4b76-4786-bc41-3202e0c9f4fa)\r\n",
      "state": "open",
      "author": "Justin-sky",
      "author_type": "User",
      "created_at": "2024-09-08T05:13:54Z",
      "updated_at": "2024-09-15T16:18:32Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1833/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1833",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1833",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.323700",
      "comments": [
        {
          "author": "Justin-sky",
          "body": "chromadb: 0.5.5, memo: 0.1.11, ollama: 0.3.2",
          "created_at": "2024-09-08T05:15:07Z"
        },
        {
          "author": "parshvadaftari",
          "body": "@Justin-sky Can you please elaborate what is the issue you're facing? I'm running the code and it works fine right now on the described versions.",
          "created_at": "2024-09-15T16:06:20Z"
        }
      ]
    },
    {
      "issue_number": 1839,
      "title": "expand entity to include conceptual entity ",
      "body": "### 🚀 The feature\r\n\r\nHow about expand entity to include conceptual entity by adding the following lines into the system prompt of add() function in graph_memory.py\r\n\r\n\r\n_**Entities include physical entities and conceptual entities. Physical entities refer to various objects, while conceptual entities include any person's intentions, imagined things, stories, ideas, viewpoints, assumptions, articles, paraphrases, attitudes, criticisms, and quotations. Conceptual entities can be recursively nested, containing both physical entities and other conceptual entities.\r\nAnyone can express different ideas (create conceptual entities) through writing, voice messages, photos, comments, and other means. The act of \"expressing\" establishes a relationship between the person and the conceptual entity. Additionally, anyone can hold different attitudes, viewpoints, or positions toward previously expressed or created conceptual entities, whether by themselves or others. These differing attitudes, viewpoints, and positions form new relationships between them and the conceptual entities. When the relationships between people and conceptual entities are discussed, these relationships themselves become new conceptual entities.**_\r\n\r\n\r\n### Motivation, pitch\r\n\r\nto make mem0 can extract more conceptual entities and ideas of speaker",
      "state": "open",
      "author": "bingjiw",
      "author_type": "User",
      "created_at": "2024-09-09T10:40:23Z",
      "updated_at": "2024-09-15T15:42:53Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1839/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1839",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1839",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.493921",
      "comments": []
    },
    {
      "issue_number": 1827,
      "title": "Add Support for Vertex AI Embeddings",
      "body": "### 🚀 The feature\n\nIntegrate **Vertex AI embeddings** models from **Litellm** into **Mem0** as an additional option for users\n\n### Motivation, pitch\n\nProvide users with more choice by including Vertex AI embeddings alongside existing options. Vertex AI offers a pay-as-you-go pricing model for individual developers, unlike OpenAI, which primarily serves organizations. Adding Vertex AI embeddings would provide more flexible and accessible options for developers.",
      "state": "closed",
      "author": "Divyanshu9822",
      "author_type": "User",
      "created_at": "2024-09-07T08:12:05Z",
      "updated_at": "2024-09-13T11:39:26Z",
      "closed_at": "2024-09-13T11:39:26Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1827/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Divyanshu9822"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1827",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1827",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.493939",
      "comments": [
        {
          "author": "Divyanshu9822",
          "body": "@Dev-Khant I’d like to contribute to adding Vertex AI embeddings to Mem0. Could you please assign this issue to me? I’m ready to start working on it.",
          "created_at": "2024-09-07T08:12:52Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @Divyanshu9822 Please feel free to work on this. Thanks!",
          "created_at": "2024-09-08T18:07:38Z"
        },
        {
          "author": "Divyanshu9822",
          "body": "> Hey @Divyanshu9822 Please feel free to work on this. Thanks!\r\n\r\nThank you for assigning this issue to me. I'll get started on it right away and keep you updated on my progress.",
          "created_at": "2024-09-09T08:41:09Z"
        }
      ]
    },
    {
      "issue_number": 1824,
      "title": "Add tests for Embeddings",
      "body": "### 🚀 The feature\n\nWe want to add pytests for all the embedding models.\n\n### Motivation, pitch\n\nMakes the package more stable for further development.",
      "state": "closed",
      "author": "Dev-Khant",
      "author_type": "User",
      "created_at": "2024-09-05T19:37:18Z",
      "updated_at": "2024-09-13T11:36:52Z",
      "closed_at": "2024-09-13T11:36:52Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1824/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "reachAnushaKondam"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1824",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1824",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.665618",
      "comments": [
        {
          "author": "reachAnushaKondam",
          "body": "I would like to work on making these test cases, can you please assign this issue to me @Dev-Khant.",
          "created_at": "2024-09-05T19:39:51Z"
        }
      ]
    },
    {
      "issue_number": 691,
      "title": "Add support for milvus as vector database",
      "body": "### 🚀 The feature\n\n* add a new vector db called milvus\r\n* https://milvus.io/\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:11:38Z",
      "updated_at": "2024-09-10T16:36:51Z",
      "closed_at": "2024-09-10T16:36:51Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/691/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/691",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/691",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:23.848393",
      "comments": [
        {
          "author": "avi-dey",
          "body": "Hey @taranjeet, I have some experience with Milvus db. Can I pick this issue?",
          "created_at": "2023-09-30T13:28:51Z"
        },
        {
          "author": "BlacPharaoh",
          "body": "hey @taranjeet Can I also work on this?, can It be assigned?\r\n",
          "created_at": "2023-10-07T18:04:50Z"
        },
        {
          "author": "shubhusion",
          "body": "kindly assign this issue to me.\r\n",
          "created_at": "2023-11-04T16:55:44Z"
        }
      ]
    },
    {
      "issue_number": 1768,
      "title": "Automate Package Installation for Missing Dependencies",
      "body": "### 🚀 The feature\r\n\r\n### Description:\r\nCurrently, missing dependencies require users to manually install packages, leading to potential errors. I propose adding functionality to automate this process.\r\n\r\n### Proposed Solution:\r\nImplement a mechanism to automatically prompt users to install missing packages. If they agree, the required package will be installed using `pip`.\r\n\r\n### Example Implementation:\r\n#### Current Implementation:\r\n```python\r\ntry:\r\n    from ollama import Client\r\nexcept ImportError:\r\n    raise ImportError(\r\n        \"Ollama requires extra dependencies. Install with `pip install ollama`\"\r\n    ) from None\r\n\r\n```\r\n#### Proposed Implementation:\r\n```python\r\nimport subprocess\r\nimport sys\r\n\r\ntry:\r\n    from ollama import Client\r\nexcept ImportError:\r\n    user_agree = input(\"The 'ollama' library is required. Install it now? [y/N]: \")\r\n    if user_agree.lower() == 'y':\r\n        try:\r\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"ollama\"])\r\n            from ollama import Client\r\n        except subprocess.CalledProcessError:\r\n            print(\"Failed to install 'ollama'. Please install it manually.\")\r\n            sys.exit(1)\r\n    else:\r\n        raise ImportError(\"The required 'ollama' library is not installed.\")\r\n```\r\n\r\n### Motivation, pitch\r\n\r\n- **Enhanced User Experience**: Automates the installation of the packages.\r\n- **Reduces Setup Issues**: Helps prevent errors related to missing dependencies.\r\n\r\n## Tasks (Files to be Changed):\r\n\r\n- [x] `mem0/configs/vector_stores/chroma.py`\r\n- [x] `mem0/embeddings/ollama.py`\r\n- [x] `mem0/llms/aws_bedrock.py`\r\n- [x] `mem0/llms/groq.py`\r\n- [x] `mem0/llms/litellm.py`\r\n- [x] `mem0/llms/ollama.py`\r\n- [x] `mem0/llms/together.py`\r\n- [x] `mem0/vector_stores/chroma.py`\r\n- [x] `mem0/proxy/main.py`\r\n- [x] `mem0/vector_stores/pgvector.py`\r\n- [ ] `embedchain/embedchain/embedder/ollama.py`\r\n- [ ] `embedchain/embedchain/llm/base.py`\r\n- [ ] `embedchain/embedchain/llm/google.py`\r\n- [ ] `embedchain/embedchain/llm/groq.py`\r\n- [ ] `embedchain/embedchain/llm/nvidia.py`\r\n- [ ] `embedchain/embedchain/llm/ollama.py`\r\n- [ ] `embedchain/embedchain/loaders/audio.py`\r\n- [ ] `embedchain/embedchain/loaders/beehiiv.py`\r\n- [ ] `embedchain/embedchain/loaders/docs_site_loader.py`\r\n- [ ] `embedchain/embedchain/loaders/docx_file.py`\r\n- [ ] `embedchain/embedchain/loaders/dropbox.py`\r\n- [ ] `embedchain/embedchain/loaders/excel_file.py`\r\n- [ ] `embedchain/embedchain/loaders/github.py`\r\n- [ ] `embedchain/embedchain/loaders/gmail.py`\r\n- [ ] `embedchain/embedchain/loaders/google_drive.py`\r\n- [ ] `embedchain/embedchain/loaders/rss_feed.py`\r\n- [ ] `embedchain/embedchain/loaders/sitemap.py`\r\n- [ ] `embedchain/embedchain/loaders/slack.py`\r\n- [ ] `embedchain/embedchain/loaders/substack.py`\r\n- [ ] `embedchain/embedchain/loaders/unstructured_file.py`\r\n- [ ] `embedchain/embedchain/loaders/web_page.py`\r\n- [ ] `embedchain/embedchain/loaders/xml.py`\r\n- [ ] `embedchain/embedchain/loaders/youtube_channel.py`\r\n- [ ] `embedchain/embedchain/loaders/youtube_video.py`\r\n- [ ] `embedchain/embedchain/vectordb/elasticsearch.py`\r\n- [ ] `embedchain/embedchain/vectordb/opensearch.py`\r\n- [ ] `embedchain/embedchain/vectordb/pinecone.py`\r\n- [ ] `embedchain/embedchain/vectordb/qdrant.py`\r\n- [ ] `embedchain/embedchain/vectordb/weaviate.py`\r\n- [ ] `embedchain/embedchain/vectordb/zilliz.py`\r\n",
      "state": "closed",
      "author": "Jai0401",
      "author_type": "User",
      "created_at": "2024-08-28T19:21:25Z",
      "updated_at": "2024-09-09T06:21:40Z",
      "closed_at": "2024-09-09T06:21:40Z",
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1768/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Jai0401"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1768",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1768",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.074356",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "Can you assign me this issue @Dev-Khant ? I am willing to work on it.",
          "created_at": "2024-08-29T10:11:36Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@NavyaAlapati13 Please feel free to work on it. Thanks.",
          "created_at": "2024-08-29T10:20:12Z"
        },
        {
          "author": "Jai0401",
          "body": "Hi @Dev-Khant , I was already working on this issue and was waiting for the maintainers' approval before proceeding. Could I continue with the implementation? Thank you!",
          "created_at": "2024-08-29T15:56:50Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @Jai0401 Sure, you can work on this. And please it is advisible to inform prior or mention in description that you are awaiting maintainer approval. Feel free to work on this. Looking forward for a PR!\r\n\r\n@NavyaAlapati13 Sorry I'll have to unassign this issue from you as the author is already wo",
          "created_at": "2024-08-29T17:57:19Z"
        },
        {
          "author": "Jai0401",
          "body": "Got it, @Dev-Khant! I'll make sure to mention it next time. Thanks for the guidance!",
          "created_at": "2024-08-29T18:04:29Z"
        }
      ]
    },
    {
      "issue_number": 1791,
      "title": "embedchain dependency of mem0ai causing \"Read-only file system error\" when using AWS Lambda",
      "body": "### 🐛 Describe the bug\n\nI am running an agent built using crewAI on AWS Lambda using a container image. CrewAI (`version 0.51.1`) depends on the embedchain package (`embedchain = \"^0.1.114\"`). The embedchain package depends on the mem0ai package (`mem0ai = \"^0.0.20\"`) that attempts to create its current working directory in the user's home directory, which is not allowed in AWS Lambda environment. AWS Lambda only allows writing to the `/tmp` directory.\r\n\r\nThis issue has been resolved in the `mem0ai` package recently (https://github.com/mem0ai/mem0/pull/1726) with version 0.1.3 and upwards. However, `embedchain` has not been updated to use the version of `mem0ai` that fixed this.\r\n\r\nTo resolve this issue, `embedchain` has to be updated to use `mem0ai` version 0.1.3 or above.\r\n\r\nHere is the error trace\r\n```\r\n{\r\n  \"errorMessage\": \"[Errno 30] Read-only file system: '/home/sbx_user1051'\",\r\n  \"errorType\": \"OSError\",\r\n  \"requestId\": \"\",\r\n  \"stackTrace\": [\r\n    \"  File \\\"/var/lang/lib/python3.11/importlib/__init__.py\\\", line 126, in import_module\\n    return _bootstrap._gcd_import(name[level:], package, level)\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1204, in _gcd_import\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1176, in _find_and_load\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 1147, in _find_and_load_unlocked\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 690, in _load_unlocked\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap_external>\\\", line 940, in exec_module\\n\",\r\n    \"  File \\\"<frozen importlib._bootstrap>\\\", line 241, in _call_with_frames_removed\\n\",\r\n    \"  File \\\"/var/task/main.py\\\", line 3, in <module>\\n    from config.agents import BusinessAgent\\n\",\r\n    \"  File \\\"/var/task/config/agents.py\\\", line 3, in <module>\\n    from crewai import Agent\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/__init__.py\\\", line 1, in <module>\\n    from crewai.agent import Agent\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/agent.py\\\", line 13, in <module>\\n    from crewai.agents import CacheHandler, CrewAgentExecutor, CrewAgentParser\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/agents/__init__.py\\\", line 2, in <module>\\n    from .executor import CrewAgentExecutor\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/agents/executor.py\\\", line 19, in <module>\\n    from crewai.agents.agent_builder.base_agent_executor_mixin import CrewAgentExecutorMixin\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/agents/agent_builder/base_agent_executor_mixin.py\\\", line 4, in <module>\\n    from crewai.memory.entity.entity_memory_item import EntityMemoryItem\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/memory/__init__.py\\\", line 1, in <module>\\n    from .entity.entity_memory import EntityMemory\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/memory/entity/entity_memory.py\\\", line 3, in <module>\\n    from crewai.memory.storage.rag_storage import RAGStorage\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/crewai/memory/storage/rag_storage.py\\\", line 10, in <module>\\n    from embedchain import App\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/embedchain/__init__.py\\\", line 5, in <module>\\n    from embedchain.app import App  # noqa: F401\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/embedchain/app.py\\\", line 12, in <module>\\n    from mem0 import Memory\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/mem0/__init__.py\\\", line 5, in <module>\\n    from mem0.memory.main import Memory  # noqa\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/mem0/memory/main.py\\\", line 17, in <module>\\n    from mem0.memory.setup import setup_config\\n\",\r\n    \"  File \\\"/var/lang/lib/python3.11/site-packages/mem0/memory/setup.py\\\", line 8, in <module>\\n    os.makedirs(mem0_dir, exist_ok=True)\\n\",\r\n    \"  File \\\"<frozen os>\\\", line 215, in makedirs\\n\",\r\n    \"  File \\\"<frozen os>\\\", line 225, in makedirs\\n\"\r\n  ]\r\n}\r\n```",
      "state": "closed",
      "author": "sumanpoluri",
      "author_type": "User",
      "created_at": "2024-09-01T05:17:38Z",
      "updated_at": "2024-09-09T06:03:42Z",
      "closed_at": "2024-09-09T06:03:42Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1791/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1791",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1791",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.290025",
      "comments": []
    },
    {
      "issue_number": 1374,
      "title": "PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings`",
      "body": "### 🐛 Describe the bug\r\n\r\nI am getting this error:\r\n```\r\nPydanticImportError                       Traceback (most recent call last)\r\nCell In[5], line 6\r\n      3 # Replace this with your HF token\r\n      4 os.environ[\"HUGGINGFACE_ACCESS_TOKEN\"] = \"\"\r\n----> 6 from embedchain import App\r\n      8 config = {\r\n      9   'llm': {\r\n     10     'provider': 'huggingface',\r\n   (...)\r\n     21   }\r\n     22 }\r\n     23 app = App.from_config(config=config)\r\n\r\nFile ~/python3.12/site-packages/embedchain/__init__.py:1\r\n----> 1 from .embedchain import App\r\n\r\nFile ~/python3.12/site-packages/embedchain/embedchain.py:1\r\n----> 1 import chromadb\r\n      2 import openai\r\n      3 import os\r\n\r\nFile ~/python3.12/site-packages/chromadb/__init__.py:2\r\n      1 from typing import Any, Dict\r\n----> 2 import chromadb.config\r\n      3 import logging\r\n      4 from chromadb.telemetry.events import ClientStartEvent\r\n\r\nFile ~/python3.12/site-packages/chromadb/config.py:1\r\n----> 1 from pydantic import BaseSettings\r\n      2 from typing import List\r\n      4 TELEMETRY_WHITELISTED_SETTINGS = [\r\n      5     \"chroma_db_impl\",\r\n      6     \"chroma_api_impl\",\r\n      7     \"chroma_server_ssl_enabled\",\r\n      8 ]\r\n\r\nFile ~/python3.12/site-packages/pydantic/__init__.py:386, in __getattr__(attr_name)\r\n    384 dynamic_attr = _dynamic_imports.get(attr_name)\r\n    385 if dynamic_attr is None:\r\n--> 386     return _getattr_migration(attr_name)\r\n    388 package, module_name = dynamic_attr\r\n    390 from importlib import import_module\r\n\r\nFile ~/python3.12/site-packages/pydantic/_migration.py:296, in getattr_migration.<locals>.wrapper(name)\r\n    294     return import_string(REDIRECT_TO_V1[import_path])\r\n    295 if import_path == 'pydantic:BaseSettings':\r\n--> 296     raise PydanticImportError(\r\n    297         '`BaseSettings` has been moved to the `pydantic-settings` package. '\r\n    298         f'See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings '\r\n    299         'for more details.'\r\n    300     )\r\n    301 if import_path in REMOVED_IN_V2:\r\n    302     raise PydanticImportError(f'`{import_path}` has been removed in V2.')\r\n\r\nPydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.7/migration/#basesettings-has-moved-to-pydantic-settings for more details.\r\n\r\n```\r\nI am getting this error as we have to change import of BaseSettings from pydantic to pydantic_settings ",
      "state": "closed",
      "author": "rajjyotiroy",
      "author_type": "User",
      "created_at": "2024-05-23T11:28:33Z",
      "updated_at": "2024-09-09T05:57:32Z",
      "closed_at": "2024-09-09T05:57:31Z",
      "labels": [
        "bug",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1374/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1374",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1374",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.290047",
      "comments": [
        {
          "author": "roshanr11",
          "body": "Can work on this issue!",
          "created_at": "2024-06-03T04:06:39Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@roshanr11 Please update your embedchain to the latest version, this should fix the issue. Let me know if this helps.",
          "created_at": "2024-07-11T06:36:02Z"
        },
        {
          "author": "Prabhat-Thapa45",
          "body": "is this issue solved? @Dev-Khant ",
          "created_at": "2024-07-20T16:59:27Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Yes it's working properly for latest version of embedchain.",
          "created_at": "2024-07-20T17:10:55Z"
        },
        {
          "author": "shivani-developer",
          "body": "Can this issue be closed?",
          "created_at": "2024-09-06T08:02:09Z"
        }
      ]
    },
    {
      "issue_number": 1825,
      "title": "Pinecone As Vector database",
      "body": "### 🚀 The feature\n\nPinecone as a vector database for the MEM0 project can help efficiently store and retrieve high-dimensional embeddings.\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use Pinecone database as a vectordb.",
      "state": "open",
      "author": "ketangangal",
      "author_type": "User",
      "created_at": "2024-09-06T05:13:04Z",
      "updated_at": "2024-09-08T18:06:56Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1825/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1825",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1825",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.473692",
      "comments": [
        {
          "author": "ketangangal",
          "body": "I can pick this up.",
          "created_at": "2024-09-06T05:13:58Z"
        },
        {
          "author": "SaymV",
          "body": "https://thedataquarry.com/posts/vector-db-4/\r\n\r\nWould whatever implementation allow for swapping out various vectorDBs based on preferred access patterns?",
          "created_at": "2024-09-06T17:01:46Z"
        }
      ]
    },
    {
      "issue_number": 1817,
      "title": "Save fact data in db with same language with user's input",
      "body": "### 🚀 The feature\n\nWhen we add a memory in some languages other than English, Chinese for example, the deduced fact can keep the deduced fact's language same with user input.\n\n### Motivation, pitch\n\nThe motivation is that we don't want the memory be translate from Chinese(user input) to English(the deduced fact with the default prompt) and then translate back to Chinese when answer according memory.",
      "state": "closed",
      "author": "shenxiangzhuang",
      "author_type": "User",
      "created_at": "2024-09-05T06:59:22Z",
      "updated_at": "2024-09-05T16:20:54Z",
      "closed_at": "2024-09-05T16:20:54Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1817/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1817",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1817",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.636421",
      "comments": [
        {
          "author": "shenxiangzhuang",
          "body": "I have give a solution by changing the prompt in #1818 , which, I think, is a simplest method to do this.\r\nI'd like to improve it if there are better methods.",
          "created_at": "2024-09-05T07:03:44Z"
        }
      ]
    },
    {
      "issue_number": 1813,
      "title": "Adding Deep infra models",
      "body": "### 🚀 The feature\r\n\r\nWe should add DeepInfra so users can access their models - \r\nhttps://deepinfra.com/\r\n\r\n### Motivation, pitch\r\n\r\nRequired for research work that uses Mem0.",
      "state": "open",
      "author": "PranavPuranik",
      "author_type": "User",
      "created_at": "2024-09-05T04:12:48Z",
      "updated_at": "2024-09-05T09:42:09Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1813/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "PranavPuranik"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1813",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1813",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:24.832773",
      "comments": [
        {
          "author": "PranavPuranik",
          "body": "I will work on it\r\n",
          "created_at": "2024-09-05T04:12:57Z"
        }
      ]
    },
    {
      "issue_number": 1758,
      "title": "Hard-coded model name in MemoryGraph",
      "body": "### 🐛 Describe the bug\n\nThe model name of MemoryGraph class is hard-coded. It is now impossible to configure the model name of LLM in this class.\r\n\r\nhttps://github.com/mem0ai/mem0/blob/c8a47b2f98cee87f1da74063b513c5db9293ec41/mem0/memory/main_graph.py#L48",
      "state": "closed",
      "author": "tikazyq",
      "author_type": "User",
      "created_at": "2024-08-27T09:26:05Z",
      "updated_at": "2024-09-04T16:55:43Z",
      "closed_at": "2024-09-04T16:55:43Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1758/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "prateekchhikara"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1758",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1758",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:25.000003",
      "comments": [
        {
          "author": "tikazyq",
          "body": "After going through the code, it seems the MemoryGraph class is still WIP:\r\n- Some functions (like MemoryGraph._update_name) are not implemented. \r\n- The embedding model it is using is not aligned with the parent class. \r\n- The prompt it is using depends on the latest gpt-4o model (2024-08-06) and i",
          "created_at": "2024-08-28T02:13:38Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@tikazyq thanks for your feedback, we have noted it and will work on addressing them on high priority. ",
          "created_at": "2024-08-28T18:08:20Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@tikazyq we have added the support to add other LLMs from the supported LLM list. You can check the documentation: https://docs.mem0.ai/open-source/graph_memory/overview\r\n\r\nLet me know if you still face any issues.",
          "created_at": "2024-08-30T23:06:51Z"
        }
      ]
    },
    {
      "issue_number": 1674,
      "title": "adding same memory twice deletes old memory",
      "body": "### 🐛 Describe the bug\n\nWhen adding exact same memory multiple times it just performs delete operation and delete previous memory.\r\n\r\nIdeal Behaviour - None of the operation should be performed and it should not call any tool when exact same memory is added multiple times\r\n\r\n\r\nexample - `Existing Memories:\\n[{'id': 'fe966e90-75e1-4f3d-ac6e-be3ee3f7eaeb', 'memory': 'The dog is a domesticated descendant of the wolf. Also called the domestic dog, it was domesticated from an extinct population of Pleistocene wolves over 14,000 years ago. The dog was the first species to be domesticated by humans.', 'score': 0.99999726}]`\r\n\r\n`New Memory: The dog is a domesticated descendant of the wolf. Also called the domestic dog, it was domesticated from an extinct population of Pleistocene wolves over 14,000 years ago. The dog was the first species to be domesticated by humans.`\r\n\r\n\r\noperation performed\r\n\r\n`{'content': None, 'tool_calls': [{'name': 'delete_memory', 'arguments': {'memory_id': 'fe966e90-75e1-4f3d-ac6e-be3ee3f7eaeb'}}]}`",
      "state": "open",
      "author": "munjalmukul",
      "author_type": "User",
      "created_at": "2024-08-09T07:46:18Z",
      "updated_at": "2024-09-03T18:26:33Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1674/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1674",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1674",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:26.994695",
      "comments": [
        {
          "author": "zouhuigang",
          "body": "Why do I only have one memory every time? It's strange. It's very easy to lose previous memories",
          "created_at": "2024-08-09T07:57:24Z"
        },
        {
          "author": "munjalmukul",
          "body": "its not every time the same memory will be added but if at some point I am adding exact same memory then it should not forgot that",
          "created_at": "2024-08-09T08:13:56Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @munjalmukul Thank you for pointing out this issue. I tried to reproduce it but couldn't get the results you got. For me, it's actually called the `update_memory`. \r\n\r\nWe will be working on improving the prompt here but while you find a solution please feel free to raise a PR.",
          "created_at": "2024-08-09T15:49:05Z"
        },
        {
          "author": "munjalmukul",
          "body": "@Dev-Khant just observed when using _gpt-4o-mini_ the delete operation is happing and switching to _gpt-4o_ fixed this, but this is not a concrete solution as gpt-4o can also hallucinate and delete memory",
          "created_at": "2024-08-22T07:28:30Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> @Dev-Khant just observed when using _gpt-4o-mini_ the delete operation is happing and switching to _gpt-4o_ fixed this, but this is not a concrete solution as gpt-4o can also hallucinate and delete memory\r\n\r\nYes you are right, we will have to improve the prompts here. Feel free to make a PR if hav",
          "created_at": "2024-08-25T10:57:11Z"
        }
      ]
    },
    {
      "issue_number": 1520,
      "title": "The collect_metrics option for the app is not taken into account in all actions.",
      "body": "### 🐛 Describe the bug\n\nAccording to your docs, collect_metrics app option allows to turn off sending telemetry data. \r\nHowever looking at file [embedchain](https://github.com/mem0ai/mem0/blob/main/embedchain/embedchain/embedchain.py) this is correct only for add and delete methods. \r\n```python\r\n    def delete(self, source_id: str):\r\n        ...\r\n        # Send anonymous telemetry\r\n        if self.config.collect_metrics:\r\n            self.telemetry.capture(event_name=\"delete\", properties=self._telemetry_props)\r\n```\r\n\r\nWhy for the remaining methods there is no check and instead telemetry data is send?  \r\n```python\r\n    def query(\r\n     ...\r\n\r\n        # Send anonymous telemetry\r\n        self.telemetry.capture(event_name=\"query\", properties=self._telemetry_props)\r\n\r\n```",
      "state": "closed",
      "author": "Panczo",
      "author_type": "User",
      "created_at": "2024-07-21T22:49:07Z",
      "updated_at": "2024-09-03T18:15:59Z",
      "closed_at": "2024-09-03T18:15:59Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1520/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1520",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1520",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:27.175138",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @Panczo Good suggestion, please feel free to work on it.",
          "created_at": "2024-08-02T13:48:29Z"
        }
      ]
    },
    {
      "issue_number": 1759,
      "title": "memory/memory_graph.py is always set to use OpenAI",
      "body": "### 🐛 Describe the bug\n\nIn ```mem0/memory/main_graph.py``` line 11:\r\n\r\nclient = OpenAI()\r\n\r\nIt is always set to use OpenAI models(also, hardcoded :  self.model_name = \"gpt-4o-2024-08-06\", line 48).\r\n\r\nIt would be nice if mem0 also added other models from ```mem0.llms``` like groq.",
      "state": "closed",
      "author": "SwastikGorai",
      "author_type": "User",
      "created_at": "2024-08-27T10:51:00Z",
      "updated_at": "2024-09-03T17:49:44Z",
      "closed_at": "2024-09-03T17:49:44Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1759/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "prateekchhikara"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1759",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1759",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:27.433867",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Hi @SwastikGorai thanks for highlighting this issue. We will pick this task and add custom LLM support for graph memory.",
          "created_at": "2024-08-28T18:05:21Z"
        },
        {
          "author": "prateekchhikara",
          "body": "Hi @SwastikGorai we have integrated the support for other LLMs as well. Checkout our updated documentation: https://docs.mem0.ai/open-source/graph_memory/overview",
          "created_at": "2024-08-30T23:07:38Z"
        },
        {
          "author": "prateekchhikara",
          "body": "@SwastikGorai, I am closing this issue as it is fixed.",
          "created_at": "2024-09-03T17:49:44Z"
        }
      ]
    },
    {
      "issue_number": 1770,
      "title": "Inconsistency in capitalizations",
      "body": "# Description\r\nIn the **tests** folder, **test_memory.py** file, it seems like there are some grammatical mistakes on lines 45 and 51. The error is very minor because \"italian\" and \"indian\" are not capitalized; however, in line 60, for instance, \"John Doe\" is capitalized.\r\n\r\n## Screenshot\r\n![image](https://github.com/user-attachments/assets/a4a4cd1f-f3ba-4410-98b1-2a1ee6dcdf3e)\r\n\r\n\r\n",
      "state": "closed",
      "author": "ALIAL28",
      "author_type": "User",
      "created_at": "2024-08-28T23:51:29Z",
      "updated_at": "2024-08-29T18:36:03Z",
      "closed_at": "2024-08-29T18:36:02Z",
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1770/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Jai0401"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1770",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1770",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:27.670617",
      "comments": [
        {
          "author": "prateekchhikara",
          "body": "Thanks @ALIAL28 we will fix this\r\n",
          "created_at": "2024-08-28T23:52:40Z"
        },
        {
          "author": "Jai0401",
          "body": "@Dev-Khant  Should I raise the PR to close this issue?",
          "created_at": "2024-08-29T11:31:17Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Sure @Jai0401 Feel free to work on this.",
          "created_at": "2024-08-29T17:58:22Z"
        }
      ]
    },
    {
      "issue_number": 1761,
      "title": "Data sources on embedchain.ai",
      "body": "### 🚀 The feature\n\nHello everyone,\r\n\r\nFirst of all, I want to thank you for the incredible work you are doing with Embedchain. I noticed that connections to MySQL and PostgreSQL data sources are already supported, as mentioned on the following page: https://docs.embedchain.ai/components/data-sources/overview.\r\n\r\nWould it be possible to also add support for Microsoft SQL Server? This would provide greater flexibility and meet the needs of many users working with this database.\r\n\r\nThank you in advance for your attention and support!\r\n\r\nBest regards,\n\n### Motivation, pitch\n\nI'm working on a chatbot connected to MSSQL, and I would like to make the Microsoft SQL Server database accessible or to be possible on: https://docs.embedchain.ai/components/data-sources/overview",
      "state": "open",
      "author": "Rostaing",
      "author_type": "User",
      "created_at": "2024-08-27T14:38:26Z",
      "updated_at": "2024-08-29T09:40:32Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1761/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1761",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1761",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:28.909084",
      "comments": []
    },
    {
      "issue_number": 1733,
      "title": "adding same document multiple times should reject that in search level",
      "body": "### 🚀 The feature\n\n**How Its Working Currently** Right now If I am adding same document twice its first searching memories and then updating, adding or deleting memory.\r\n\r\n**How It Should be** There should be a layer at embedding search level so it reject the duplicate document to save llm cost.\n\n### Motivation, pitch\n\nThere are times when duplicate documents are uploaded by user so I dont want to send that document to llm so cost can be saved.",
      "state": "open",
      "author": "munjalmukul",
      "author_type": "User",
      "created_at": "2024-08-22T07:26:00Z",
      "updated_at": "2024-08-28T13:00:37Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1733/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1733",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1733",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.107060",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "@Dev-Khant I am working on this enhancement, can you assign me this this issue? Looking forward to share the PR soon.",
          "created_at": "2024-08-28T11:56:04Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Sure @NavyaAlapati13, Thanks for working on it.",
          "created_at": "2024-08-28T13:00:32Z"
        }
      ]
    },
    {
      "issue_number": 1740,
      "title": "Unable to setup PGVector vector store as per documentation",
      "body": "### 🐛 Describe the bug\r\n\r\nPedantic validation fails when trying to instantiate a memory using PGVector.\r\nThe following is probably the easiest way to reproduce cleanly:\r\n```python\r\nfrom mem0.vector_stores.configs import VectorStoreConfig\r\n\r\nvector_store_config = VectorStoreConfig(\r\n    provider=\"pgvector\",\r\n    config={\r\n        \"dbname\": \"test\",\r\n        \"user\": \"test\",\r\n        \"password\": \"test\",\r\n        \"host\": \"test\",\r\n        \"port\": 1234,\r\n    },\r\n)\r\n```\r\nwhich leads to:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/ggozad/dev/open-source/mem0/test.py\", line 3, in <module>\r\n    vector_store_config = VectorStoreConfig(\r\n                          ^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/ggozad/dev/open-source/mem0/.venv/lib/python3.12/site-packages/pydantic/main.py\", line 193, in __init__\r\n    self.__pydantic_validator__.validate_python(data, self_instance=self)\r\npydantic_core._pydantic_core.ValidationError: 1 validation error for VectorStoreConfig\r\n  Value error, Extra fields not allowed: path. Please input only the following fields: dbname, host, collection_name, user, password, embedding_model_dims, port [type=value_error, input_value={'dbname': 'test', 'user'...'path': '/tmp/pgvector'}, input_type=dict]\r\n    For further information visit https://errors.pydantic.dev/2.8/v/value_error```\r\n\r\nIt seems that instead of a `PGVectorConfig` a `QdrantConfig` is instantiated being the default provider.",
      "state": "closed",
      "author": "ggozad",
      "author_type": "User",
      "created_at": "2024-08-23T08:47:25Z",
      "updated_at": "2024-08-27T11:27:02Z",
      "closed_at": "2024-08-27T11:27:01Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1740/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1740",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1740",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.309274",
      "comments": [
        {
          "author": "zacrafidi",
          "body": "Similar error on my end when trying to connect to my pgvector store (via supabase), the error I get is: \r\n\r\nValidationError: 1 validation error for MemoryConfig\r\nvector_store\r\n  Value error, Extra fields not allowed: path. Please input only the following fields: embedding_model_dims, host, dbname, p",
          "created_at": "2024-08-23T09:07:05Z"
        },
        {
          "author": "zacrafidi",
          "body": "i made these changes locally and it started working. Changed:\r\n\r\nif \"path\" not in config:\r\n            config[\"path\"] = f\"/tmp/{provider}\"\r\n\r\nwith: \r\n\r\n# Only add 'path' for providers that are not 'pgvector'\r\n        if provider != 'pgvector' and \"path\" not in config:\r\n            config[\"path\"] = f",
          "created_at": "2024-08-23T09:44:55Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this as #1703 fixes the issue. Feel free to open it if there's still problem with it.",
          "created_at": "2024-08-27T11:27:02Z"
        }
      ]
    },
    {
      "issue_number": 1734,
      "title": "Does the llm not support models on hugging face (open source)?",
      "body": "### 🚀 The feature\n\nDoes the llm not support models on hugging face (open source)?\n\n### Motivation, pitch\n\nDoes the llm not support models on hugging face (open source)?",
      "state": "open",
      "author": "bank010",
      "author_type": "User",
      "created_at": "2024-08-22T09:20:55Z",
      "updated_at": "2024-08-25T10:49:46Z",
      "closed_at": null,
      "labels": [
        "question",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1734/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1734",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1734",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.606668",
      "comments": [
        {
          "author": "roshanr11",
          "body": "tldr - yes, huggingface models are now supported with LiteLLM integration.\r\n\r\n---\r\n\r\nBased on the docs right now, looks like there's support for embedding models: https://docs.mem0.ai/components/embedders/models/huggingface#hugging-face. \r\n\r\n---\r\n\r\nHowever, from twitter: https://x.com/taranjeetio/st",
          "created_at": "2024-08-24T07:55:45Z"
        }
      ]
    },
    {
      "issue_number": 1736,
      "title": " Failed to add batch due to a bad request: Object of type function is not JSON serializable",
      "body": "### 🐛 Describe the bug\n\n🐛 Describe the bug\r\n\r\nI get an error when calling the add method:\r\n Failed to add batch due to a bad request: Object of type function is not JSONserializable\r\n\r\nI use the code from the example https://github.com/mem0ai/mem0/tree/main/embedchain/examples/api_server\r\n\r\nlaunched in docker\r\n\r\nOS: Ubuntu 24.04 LTS (GNU/Linux 6.8.0-41-generic x86_64)\r\nDocker version 27.1.2, build d01f264\r\n\r\n![изображение](https://github.com/user-attachments/assets/410c3feb-c613-46f7-a57d-49fdac617f7f)\r\n\r\nCould there be a problem related to OpenAI?\r\n\r\nThe error does not change if I intentionally specify an invalid OPENAI_API_KEY\r\n\r\nBut my key is definitely working. On the same server, other projects using OpenAI are working fine",
      "state": "open",
      "author": "olegius88",
      "author_type": "User",
      "created_at": "2024-08-22T14:17:40Z",
      "updated_at": "2024-08-25T10:48:56Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1736/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1736",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1736",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.826881",
      "comments": []
    },
    {
      "issue_number": 1739,
      "title": "Add support for different Graph Databases",
      "body": "### 🚀 The feature\n\nLangchain supports many different Graphstores including FalkorDB.\r\nCan the Graphstore be configurable? \n\n### Motivation, pitch\n\nIt will extend the support for different Graph Databases allow deploying Mem0 with more than just Neo4J",
      "state": "open",
      "author": "gkorland",
      "author_type": "User",
      "created_at": "2024-08-22T20:04:01Z",
      "updated_at": "2024-08-25T10:48:37Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1739/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1739",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1739",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.826899",
      "comments": []
    },
    {
      "issue_number": 1681,
      "title": "DOC: Incorrect Vector Store Provider Name in Documentation - Should be 'chromadb' Instead of 'chroma'",
      "body": "### Issue with current documentation:\n\n### Bug Report: Incorrect Vector Store Provider Name in Documentation\r\n\r\n**Description:**\r\nThe Mem0 documentation lists `chroma` as a supported vector store provider, but the correct provider name is `chromadb`. This discrepancy causes a `ValueError` when trying to configure Mem0 with `chroma`.\r\n\r\n**Steps to Reproduce:**\r\n1. Follow the [Mem0 documentation](https://docs.mem0.ai/components/vectordb#chroma) to configure Mem0 with `chroma` as the vector store provider.\r\n2. Run the script to initialize Mem0.\r\n\r\n**Expected Behavior:**\r\nMem0 should initialize successfully with `chroma` as the vector store provider.\r\n\r\n**Actual Behavior:**\r\nA `ValueError` is raised indicating that `chroma` is an unsupported vector store provider.\r\n\r\n**Error Message:**\r\n```\r\nValueError: Unsupported VectorStore provider: chroma\r\n```\r\n\r\n**Proposed Solution:**\r\nUpdate the documentation to use the correct provider name `chromadb`.\r\n\r\n**Environment:**\r\n- Mem0 version: 0.1.120\r\n- Python version: 3.10\r\n- Operating System: [Mac OSX Sonoma 14.5 (23F79)]\r\n- Mac M3 Max Pro\r\n\r\n**Additional Context:**\r\nHere is the relevant section of the configuration that causes the error:\r\n```python\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"./chroma_langchain_db\"\r\n        }\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"test\"\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"test\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nChanging `chroma` to `chromadb` resolves the issue:\r\n```python\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"chromadb\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"./chroma_langchain_db\"\r\n        }\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"test\"\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"test\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThank you for addressing this issue!",
      "state": "closed",
      "author": "jameshgrn",
      "author_type": "User",
      "created_at": "2024-08-12T02:03:51Z",
      "updated_at": "2024-08-20T10:45:46Z",
      "closed_at": "2024-08-20T10:45:46Z",
      "labels": [
        "bug",
        "documentation"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1681/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1681",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1681",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:29.826914",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @jameshgrn, This issue is fixed in the latest version. Please install that try it out again.\r\n\r\nLet me know if you still face any issues!",
          "created_at": "2024-08-12T10:37:08Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as it has been fixed. Feel free to reopen if issue still persists.",
          "created_at": "2024-08-20T10:45:46Z"
        }
      ]
    },
    {
      "issue_number": 1648,
      "title": "memory.add is bug",
      "body": "### 🐛 Describe the bug\n\ndef add(\r\n        self,\r\n        data,\r\n        user_id=None,\r\n        agent_id=None,\r\n        run_id=None,\r\n        metadata=None,\r\n        filters=None,\r\n        prompt=None,\r\n    ):\r\n\r\n\r\n        existing_memories = [\r\n            MemoryItem(\r\n                id=mem.id,\r\n                score=mem.score,\r\n                metadata=mem.payload,\r\n                memory=mem.payload[\"data\"],\r\n            )\r\n            for mem in existing_memories\r\n        ]\r\n        serialized_existing_memories = [\r\n            item.model_dump(include={\"id\", \"text\", \"score\"})\r\n            for item in existing_memories\r\n        ]\r\n\r\nThere is a bug here：\r\nmemory=mem.payload[\"data\"],\r\nitem.model_dump(include={\"id\", \"text\", \"score\"})",
      "state": "closed",
      "author": "cxycxm",
      "author_type": "User",
      "created_at": "2024-08-06T02:29:11Z",
      "updated_at": "2024-08-20T10:45:11Z",
      "closed_at": "2024-08-20T10:45:11Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1648/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1648",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1648",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:30.009965",
      "comments": []
    },
    {
      "issue_number": 1682,
      "title": "The local vector database configuration does not allow customizing the collection_name through the settings.",
      "body": "### 🐛 Describe the bug\n\n错误：当我使用自己部署在服务器的 qdrant 时，无法自定义配置 collection_name\r\nError: When using my self-hosted Qdrant on the server, I am unable to customize the configuration for the collection_name.\r\n\r\nexample：\r\n```\r\nfrom mem0 import Memory\r\nMEM0_CONFIG = {\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"msw_mem0_test\",\r\n            \"host\": \"<qdrant server ip>\",\r\n            \"port\": 6333,\r\n        }\r\n    },\r\n}\r\nmemory = Memory.from_config(MEM0_CONFIG)\r\nmemory.add(\"小马，3岁\", user_id=\"test_1\")\r\n```\r\nerror info：\r\n```\r\nqdrant_client.http.exceptions.UnexpectedResponse: Unexpected Response: 404 (Not Found)\r\nRaw response content:\r\nb'{\"status\":{\"error\":\"Not found: Collection `mem0` doesn\\'t exist!\"},\"time\":0.000013824}'\r\n```\r\n\r\nreason：\r\n```\r\nclass Memory(MemoryBase):\r\n    def __init__(self, config: MemoryConfig = MemoryConfig()):\r\n        self.config = config\r\n        self.embedding_model = EmbedderFactory.create(self.config.embedder.provider)\r\n        self.vector_store = VectorStoreFactory.create(self.config.vector_store.provider, self.config.vector_store.config)\r\n        self.llm = LlmFactory.create(self.config.llm.provider, self.config.llm.config)\r\n        self.db = SQLiteManager(self.config.history_db_path)\r\n        self.collection_name = self.config.vector_store.config.collection_name if \"collection_name\" in self.config.vector_store.config else \"mem0\"\r\n        \r\n        capture_event(\"mem0.init\", self)\r\n\r\n错误点：\r\nself.collection_name = self.config.vector_store.config.collection_name if \"collection_name\" in self.config.vector_store.config else \"mem0\"\r\n```\r\n\r\nfix:\r\n```\r\nSolution 1：\r\nself.collection_name = self.config.vector_store.config.collection_name if hasattr(self.config.vector_store.config, \"collection_name\") else \"mem0\"\r\n\r\nSolution 2:\r\nclass QdrantConfig:\r\n    def __contains__(self, key):\r\n        return hasattr(self, key)\r\n```",
      "state": "closed",
      "author": "WiSmile",
      "author_type": "User",
      "created_at": "2024-08-12T08:37:03Z",
      "updated_at": "2024-08-19T06:08:10Z",
      "closed_at": "2024-08-19T06:08:10Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1682/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1682",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1682",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:30.009989",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @WiSmile Please feel free to make a PR for this. Thanks!",
          "created_at": "2024-08-12T10:33:12Z"
        }
      ]
    },
    {
      "issue_number": 1671,
      "title": "How to use custom OLLAMA created model?",
      "body": "I already have a custom model built using OLLAMA's modelfile which pulls LLAMA3.1 and adds custom system prompt and template to it.\r\n\r\nHow do I use this model?\r\n\r\nIf I provide the name of this model in the config as shown below, it tries to fetch from the OLLAMA instead of picking up from the locally present version.\r\n\r\n```\r\nllm:\r\n  provider: ollama\r\n  config:\r\n    model: 'Custom:0.1.0'\r\n    temperature: 0.5\r\n    top_p: 1\r\n    stream: True\r\n    base_url: 'http://localhost:11434'\r\nembedder:\r\n  provider: ollama\r\n  config:\r\n    model: mxbai-embed-large\r\n    base_url: 'http://localhost:11434'\r\n\r\n```\r\n\r\nWhat is the right way to perform this action? Cannot find anything from the documentation. Perhaps I could write its documentation once I find the answer.",
      "state": "closed",
      "author": "Japkeerat",
      "author_type": "User",
      "created_at": "2024-08-08T18:13:45Z",
      "updated_at": "2024-08-14T17:50:10Z",
      "closed_at": "2024-08-14T17:50:10Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1671/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1671",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1671",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:30.209989",
      "comments": [
        {
          "author": "mikkothegeeko",
          "body": "I have the same issue.",
          "created_at": "2024-08-08T19:00:03Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @Japkeerat @mbayabo I tried using base `llama3.1:8b` which got downloaded for first time and then it used fetched from local itself.\r\n\r\nCan you please share more detail on the issue or you can take a look at [code](https://github.com/mem0ai/mem0/blob/main/mem0/llms/ollama.py#L20) and raise a PR ",
          "created_at": "2024-08-09T11:11:52Z"
        },
        {
          "author": "Japkeerat",
          "body": "Found the issue on my end, apologies.",
          "created_at": "2024-08-10T03:44:23Z"
        },
        {
          "author": "SamuelDevdas",
          "body": "Use this config template and make required changes according to your models:\r\n\r\nconfig = {\r\n    \"vector_store\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"host\": \"localhost\",\r\n            \"port\": 6333,\r\n            \"embedding_model_dim",
          "created_at": "2024-08-12T22:39:11Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as problem is fixed. Please feel free to reopen if there's any problem regarding this.",
          "created_at": "2024-08-14T17:50:10Z"
        }
      ]
    },
    {
      "issue_number": 1528,
      "title": "How do you tell who the extracted memories (facts, preferences, etc.) belong to?",
      "body": "For example, in a companion app, the user (alice) says to the assistant (bob)：\"Yesterday my good friend jack said that he didn't like playing football, but his father enrolled him in a football training class. It bothered him a lot.\"\r\n\r\nFor this sentence, the memory extracted might be: \"don't like playing football \",\" attended a football training class \" or something like this。\r\nHowever, these memories, which should belong to the third party \"jack\", will be remembered by alice on the spot in this project.\r\nHow to solve this problem?",
      "state": "open",
      "author": "littttttlebird",
      "author_type": "User",
      "created_at": "2024-07-22T06:46:13Z",
      "updated_at": "2024-08-14T17:45:47Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1528/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1528",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1528",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.198668",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @littttttlebird Great question, I tried the same prompt with Mem0 platform as it solves the exact problem you talked about. It will remember that we are talking about `jack` here. So here you can keep `user_id` as alice.\r\n\r\nHere are the memories created for it:\r\n\r\n<img width=\"596\" alt=\"Screensho",
          "created_at": "2024-08-02T13:55:27Z"
        },
        {
          "author": "littttttlebird",
          "body": "Awesome, I asked this question based on this line in the prompt:\r\n“- Don't remember the user/agent details provided. Only remember the facts, preferences, and memories.\"\r\nIt looks like the third party information in the conversation is interpreted as fact, not user detail.",
          "created_at": "2024-08-14T03:34:29Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> Awesome, I asked this question based on this line in the prompt: “- Don't remember the user/agent details provided. Only remember the facts, preferences, and memories.\" It looks like the third party information in the conversation is interpreted as fact, not user detail.\r\n\r\nYes you are correct but",
          "created_at": "2024-08-14T17:45:46Z"
        }
      ]
    },
    {
      "issue_number": 1700,
      "title": "Unable to configure custom embedding dimension for ChromaDB backend, resulted into embedding size mismatch",
      "body": "### 🐛 Describe the bug\r\n\r\nAccording to the [documentation](https://docs.mem0.ai/components/vectordbs/config), all other vector db backends have a parameter called `embedding_model_dims` while [ChromaDB](https://docs.mem0.ai/components/vectordbs/dbs/chroma) has not. It is hardcoded into 1536 and results into the following issue.\r\n\r\nCode:\r\n\r\n```python\r\nimport os\r\n\r\nos.environ['OPENAI_API_KEY'] = 'dummykey'\r\n\r\nfrom mem0 import Memory\r\n\r\nconfig = {\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"mxbai-embed-large\",\r\n        }\r\n    },\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"mistral:v0.3\",\r\n            \"temperature\": 0.5,\r\n            \"max_tokens\": 2000,\r\n        }\r\n    },\r\n    \"vector_store\": {\r\n        \"provider\": \"chroma\",\r\n        \"config\": {\r\n            \"collection_name\": \"test\",\r\n            \"path\": \"test_db\",\r\n        }\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\n\r\nuploaded_memory = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"alice\", metadata={\"category\": \"hobbies\"}) # {\"message\": \"ok\"}\r\n\r\nm.get_all() # exception here\r\n```\r\n\r\nException:\r\n\r\n```\r\n*** chromadb.errors.InvalidDimensionException: Embedding dimension 1536 does not match collection dimensionality 1024\r\n```",
      "state": "closed",
      "author": "James4Ever0",
      "author_type": "User",
      "created_at": "2024-08-14T08:56:55Z",
      "updated_at": "2024-08-14T14:14:48Z",
      "closed_at": "2024-08-14T14:14:48Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1700/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1700",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1700",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.399226",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @James4Ever0 Thank you for pointing out this issue. I have made the fix, so feel free to install the latest version for the package and see if works.\r\n\r\nLet me know once you have tested or if you still face any issues.",
          "created_at": "2024-08-14T09:34:58Z"
        },
        {
          "author": "James4Ever0",
          "body": "Upgraded to version 0.0.19 and the issue has been fixed. Thank you.",
          "created_at": "2024-08-14T14:14:48Z"
        }
      ]
    },
    {
      "issue_number": 1688,
      "title": "Missing param and return types in Chroma and Qdrant vector stores",
      "body": "### 🚀 The feature\r\n\r\nThe Qdrant and Chroma vector store files are missing parameter types and return types for the functions. It's a non breaking change which will increase code clairty.\r\n\r\n### Motivation, pitch\r\n\r\nTo increase the code readabliliy and clarity, and maintain coding standards.",
      "state": "closed",
      "author": "NavyaAlapati13",
      "author_type": "User",
      "created_at": "2024-08-12T19:27:10Z",
      "updated_at": "2024-08-13T19:46:56Z",
      "closed_at": "2024-08-13T19:46:56Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1688/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1688",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1688",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.589993",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "I will share a PR soon for this. \r\n@Dev-Khant can you please assign me this issue?",
          "created_at": "2024-08-12T19:29:40Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @NavyaAlapati13 thanks for picking this up! I'll assign it to you.",
          "created_at": "2024-08-12T19:31:22Z"
        }
      ]
    },
    {
      "issue_number": 1626,
      "title": "Feature Request: Configurable Embedding Model",
      "body": "### 🚀 The feature\n\nAllow users to specify the embedding model of their choice through a configuration parameter.\n\n### Motivation, pitch\n\nThe current implementation of the repository supports multiple embedders, but the embedding model to be used is still hardcoded. Since the embedding model is hardcoded, it kind of limits what we can do with the repo. \r\n\r\nBy allowing users to pick their own embedding model, we can make the repo way more flexible and useful for different needs. This change will let users experiment with different models and find the best fit for their specific tasks. Plus, it makes the repo more adaptable and fun to use. Let's make this happen and give everyone the freedom to choose the best embedding model for their projects!\r\n\r\n",
      "state": "closed",
      "author": "kmitul",
      "author_type": "User",
      "created_at": "2024-08-01T05:19:15Z",
      "updated_at": "2024-08-12T09:39:19Z",
      "closed_at": "2024-08-12T09:39:19Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1626/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1626",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1626",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.775999",
      "comments": []
    },
    {
      "issue_number": 1623,
      "title": "can not save vector in local disk when set path",
      "body": "### 🐛 Describe the bug\n\n![image](https://github.com/user-attachments/assets/465eafda-722d-4452-840f-3d9be6cbd9d5)\r\nIn theory, qdrant can achieve persistent storage, but currently it seems that the default metajson does not have an option to support it.\r\nhttps://qdrant.tech/documentation/concepts/storage/\r\n![image](https://github.com/user-attachments/assets/5e2d530d-eb5e-40ee-974b-90fd5ba86ec1)\r\n",
      "state": "closed",
      "author": "zhurou603",
      "author_type": "User",
      "created_at": "2024-07-31T12:08:52Z",
      "updated_at": "2024-08-12T09:38:45Z",
      "closed_at": "2024-08-12T09:38:45Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1623/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1623",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1623",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.776026",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "Hey @zhurou603 I want to work on this issue, can you please provide more info.",
          "created_at": "2024-08-04T12:07:02Z"
        },
        {
          "author": "zhurou603",
          "body": "> Hey @zhurou603 I want to work on this issue, can you please provide more info.\r\nbut i got nothing in local disk.\r\n![image](https://github.com/user-attachments/assets/f92aa826-1138-4d0a-a908-b70b72219208)\r\n![image](https://github.com/user-attachments/assets/c9c8b9a5-4f08-4971-b878-9760e15df6c0)\r\nth",
          "created_at": "2024-08-05T12:50:52Z"
        },
        {
          "author": "NavyaAlapati13",
          "body": "@zhurou603 I need more clarity. Can you please explain more clearly what is your expected outcome?",
          "created_at": "2024-08-08T19:41:32Z"
        },
        {
          "author": "EasonHuangkkq",
          "body": "#I got the same Issue\r\n\r\n```python\r\nfrom mem0 import Memory\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"ollama\",\r\n        \"config\": {\r\n            \"model\": \"llama3.1:70b\",\r\n        }\r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"ollama\",\r\n    },\r\n    \"vector_store\": {\r\n    \"provider\": \"qdrant",
          "created_at": "2024-08-09T12:27:02Z"
        }
      ]
    },
    {
      "issue_number": 119,
      "title": "Getting \"No data found\" in all of my pdf files",
      "body": "Hello!\r\n\r\n I seem to have a problem and I don't know where is the problem... \r\n When I run the readme everything checks out, the pdf of naval is readed and chunked... however whenever I use one of my pdfs it seems I get this error saying that there is no data\r\n\r\nThe pdf is here https://evi.ams3.cdn.digitaloceanspaces.com/CHATPOC/job_example.pdf \r\n\r\nIt is a pdf that I created from a google docs file so I know for a fact that is not an scanned copy or whatever, it should be able to read... \r\n\r\n",
      "state": "open",
      "author": "kpatron",
      "author_type": "User",
      "created_at": "2023-07-01T23:46:00Z",
      "updated_at": "2024-08-08T14:35:06Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/119/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/119",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/119",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:32.941435",
      "comments": [
        {
          "author": "cachho",
          "body": "Can you post the exact error?",
          "created_at": "2023-07-02T08:20:59Z"
        },
        {
          "author": "kpatron",
          "body": "> \r\n\r\nYes, here it is... \r\n File \"C:\\MAMP\\htdocs\\embedchain\\index.py\", line 9, in <module>\r\n    chat_poc.add(\"pdf_file\", \"https://evi.ams3.cdn.digitaloceanspaces.com/CHATPOC/job_example.pdf\")\r\n  File \"C:\\Users\\mocte\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache",
          "created_at": "2023-07-03T16:20:02Z"
        },
        {
          "author": "taranjeet",
          "body": "Checked this issue now. Its still occuring.",
          "created_at": "2023-08-12T04:17:42Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @kpatron Can you share the PDF link again, the previously shared URL is not working anymore.",
          "created_at": "2024-06-02T05:29:15Z"
        },
        {
          "author": "kstan79",
          "body": "ya. i tested cant read too",
          "created_at": "2024-08-08T14:35:05Z"
        }
      ]
    },
    {
      "issue_number": 125,
      "title": "Add support for Supabase as vector database ",
      "body": "- My wishlist: Save the vectors to a DB like Firebase/Supabase. Allow for API querying of the final model. And most importantly a FE that works with EC\r\n- Opened on behalf of discord user ashris, [message link](https://discord.com/channels/1121119078191480945/1121119078858358846/1125456532620976208)",
      "state": "open",
      "author": "sahilyadav902",
      "author_type": "User",
      "created_at": "2023-07-04T06:21:09Z",
      "updated_at": "2024-08-08T11:26:01Z",
      "closed_at": null,
      "labels": [
        "hacktoberfest"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/125/reactions",
        "total_count": 4,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 4,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/125",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/125",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.170336",
      "comments": [
        {
          "author": "slavakurilyak",
          "body": "Related to https://github.com/mem0ai/mem0/pull/1324",
          "created_at": "2024-08-07T14:55:46Z"
        }
      ]
    },
    {
      "issue_number": 1651,
      "title": "Can't get useful result after indexing a github repo",
      "body": "### 🐛 Describe the bug\n\nI can't get useful result after indexing a github repo \r\n```\r\napp.add(\"repo:geekan/MetaGPT type:repo\", data_type=\"github\", loader=loader)\r\n\r\nresult, citations = app.query(\"Could you give me quickstart example for using metagpt\", citations=True)\r\n#or try this one\r\n#result, citations = app.query(\"how to write a new agent? Could you give me sample code?\", citations=True)\r\n\r\n\r\nresult\r\n```\r\nresult is bad.\r\nIn contrast,search in https://docs.mem0.ai/ and https://docs.embedchain.ai/ yields very good no-hallucination result,\r\nhow do I achieve that? ",
      "state": "open",
      "author": "femto",
      "author_type": "User",
      "created_at": "2024-08-06T11:03:53Z",
      "updated_at": "2024-08-06T11:16:33Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1651/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1651",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1651",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.390729",
      "comments": []
    },
    {
      "issue_number": 1603,
      "title": "Support OpenAI-compatible API request",
      "body": "### 🚀 The feature\n\nSupport OpenAI-compatible API request like OpenRouter, instead of openai models only.\n\n### Motivation, pitch\n\nNot convenient to transfer different models.",
      "state": "closed",
      "author": "liangDarwin2",
      "author_type": "User",
      "created_at": "2024-07-29T07:24:54Z",
      "updated_at": "2024-08-03T17:21:04Z",
      "closed_at": "2024-08-03T17:21:04Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1603/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1603",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1603",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.390750",
      "comments": []
    },
    {
      "issue_number": 1580,
      "title": "Azure OpenAI LLM not working",
      "body": "### 🐛 Describe the bug\n\nThe [mem0 documentation](https://docs.mem0.ai/llms#openai-azure) says to use litellm config for integrating Azure OpenAI LLMs. But the current implementation of LiteLLM does not support Azure OpenAI deployments with custom deployment names. When attempting to use a deployment name that is not listed in the model_prices_and_context_window.json file, an exception is thrown. [Link to the JSON file](https://github.com/BerriAI/litellm/blob/main/model_prices_and_context_window.json)\r\n\r\nHere's the code to reproduce the error.\r\n(deployment name redacted for privacy)\r\n\r\n```python\r\nimport os\r\nimport dotenv\r\nfrom mem0 import Memory\r\ndotenv.load_dotenv()\r\n\r\nconfig = {\r\n    \"llm\": {\r\n        \"provider\": \"litellm\",\r\n        \"config\": {\r\n            \"model\": \"azure/gpt-4o-custom-deployment\",\r\n        }  \r\n    },\r\n    \"embedder\": {\r\n        \"provider\": \"huggingface\",\r\n    }\r\n}\r\n\r\nm = Memory.from_config(config)\r\nresult = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\nprint(result)\r\n```\r\n\r\n\r\nHere's the error message: \r\n(env paths are redacted for privacy)\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nException                                 Traceback (most recent call last)\r\n/tmp/ipykernel_171823/3167584660.py in ?()\r\n     26     }\r\n     27 }\r\n     28 \r\n     29 m = Memory.from_config(config)\r\n---> 30 result = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\r\n     31 print(result)\r\n\r\n./venv/lib/python3.10/site-packages/mem0/memory/main.py in ?(self, data, user_id, agent_id, run_id, metadata, filters, prompt)\r\n    139             filters[\"run_id\"] = metadata[\"run_id\"] = run_id\r\n    140 \r\n    141         if not prompt:\r\n    142             prompt = MEMORY_DEDUCTION_PROMPT.format(user_input=data, metadata=metadata)\r\n--> 143         extracted_memories = self.llm.generate_response(\r\n    144             messages=[\r\n    145                 {\r\n    146                     \"role\": \"system\",\r\n\r\n./venv/lib/python3.10/site-packages/mem0/llms/litellm.py in ?(self, messages, response_format, tools, tool_choice)\r\n     63 \r\n     64         Returns:\r\n     65             str: The generated response.\r\n     66         \"\"\"\r\n---> 67         if not litellm.supports_function_calling(self.config.model):\r\n     68             raise ValueError(f\"Model '{self.config.model}' in litellm does not support function calling.\")\r\n     69 \r\n     70         params = {\r\n\r\n./venv/lib/python3.10/site-packages/litellm/utils.py in ?(model)\r\n   4202         if model_info.get(\"supports_function_calling\", False):\r\n   4203             return True\r\n   4204         return False\r\n   4205     else:\r\n-> 4206         raise Exception(\r\n   4207             f\"Model not in model_prices_and_context_window.json. You passed model={model}.\"\r\n   4208         )\r\n\r\nException: Model not in model_prices_and_context_window.json. You passed model=azure/gpt-4o-custom-deployment\r\n\r\n```",
      "state": "closed",
      "author": "kmitul",
      "author_type": "User",
      "created_at": "2024-07-25T05:20:16Z",
      "updated_at": "2024-08-03T15:01:45Z",
      "closed_at": "2024-08-03T15:01:44Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1580/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1580",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1580",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.390760",
      "comments": []
    },
    {
      "issue_number": 1599,
      "title": "User id of memory is missing after updated",
      "body": "### 🐛 Describe the bug\n\nI was trying to run the code from tutorial : https://docs.mem0.ai/quickstart.\r\nThe result by m.update is None instead of dict in the tutorial.\r\n\r\nI was also unable to search the updated memory of Alice (I think is due to the missing user id)\r\n<img width=\"1070\" alt=\"Screenshot 2024-07-28 at 5 30 52 PM\" src=\"https://github.com/user-attachments/assets/e7819e14-d9d8-4dc6-8e22-3d84433bf384\">\r\n",
      "state": "closed",
      "author": "marcuslaw0074",
      "author_type": "User",
      "created_at": "2024-07-28T09:37:06Z",
      "updated_at": "2024-08-02T18:28:29Z",
      "closed_at": "2024-08-02T18:28:29Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1599/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1599",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1599",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.390771",
      "comments": [
        {
          "author": "marcuslaw0074",
          "body": "Btw Im using Groq API, Qdrant and mem0ai=0.0.9",
          "created_at": "2024-07-28T09:39:45Z"
        },
        {
          "author": "NavyaAlapati13",
          "body": "Hey, I will work on this issue and raise a PR soon. \r\n@Dev-Khant can you please assigne this to me?",
          "created_at": "2024-07-28T18:40:51Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Yes sure @NavyaAlapati13, feel free to work on this.",
          "created_at": "2024-07-28T18:53:30Z"
        }
      ]
    },
    {
      "issue_number": 1515,
      "title": "[Mem0] Langchain model integration",
      "body": "### 🚀 The feature\r\n\r\nWould be great to have a langchain integration!\r\nWhy?\r\nIs great to use official library/clients but at the same time I don't want to create 300 objects for different library for the same llm/embedder provider! \r\n\r\nLangchain provide 3 simple methods (`invoke` for llm and  `embed_query` or `embed_documents` for embedders) to interact with the model.\r\n\r\nIf likes, i would create a PR with a preview of what discuss!\r\n\r\nGreat work btw <3\r\n\r\n### Motivation, pitch\r\n\r\nI want to integrate the mem0 library in a project where we use langchain (unfortunately XD). At the moment, the only way is to extract config.\r\n",
      "state": "open",
      "author": "valentimarco",
      "author_type": "User",
      "created_at": "2024-07-20T17:52:15Z",
      "updated_at": "2024-08-02T17:15:54Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "question"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1515/reactions",
        "total_count": 6,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 4,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1515",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1515",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.656693",
      "comments": [
        {
          "author": "AIWithShrey",
          "body": "I was looking into the same thing and found nothing on Mem0 integration with LangChain.\n\nI think it'd be very useful and convenient to have this feature.",
          "created_at": "2024-07-22T03:02:41Z"
        },
        {
          "author": "biniyam69",
          "body": "I think this issue belongs in langchain repo",
          "created_at": "2024-07-22T09:34:48Z"
        },
        {
          "author": "valentimarco",
          "body": "> I think this issue belongs in langchain repo\r\n\r\nThe request is to integrate langchain models as mem0 model category, not integrate mem0 as langchain package...",
          "created_at": "2024-07-22T17:18:51Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @valentimarco The reason for not using langchain here is we solely don't want to depend upon it but instead use libraries from the LLM and Vectordb providers. As by doing this we have complete flexibility on using the core features.\r\n\r\nSo can you please let us know what exact issues do you have ",
          "created_at": "2024-08-02T13:46:41Z"
        },
        {
          "author": "valentimarco",
          "body": "> Hey @valentimarco The reason for not using langchain here is we solely don't want to depend upon it but instead use libraries from the LLM and Vectordb providers. As by doing this we have complete flexibility on using the core features.\r\n> \r\n> So can you please let us know what exact issues do you",
          "created_at": "2024-08-02T17:15:53Z"
        }
      ]
    },
    {
      "issue_number": 1610,
      "title": "Ruff failling for pytests in CI ",
      "body": "### 🐛 Describe the bug\n\nThis command `poetry run ruff .` is failing in CI tests.",
      "state": "closed",
      "author": "Dev-Khant",
      "author_type": "User",
      "created_at": "2024-07-30T06:10:05Z",
      "updated_at": "2024-08-02T14:22:12Z",
      "closed_at": "2024-08-02T14:22:12Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1610/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "NavyaAlapati13"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1610",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1610",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:33.989927",
      "comments": [
        {
          "author": "NavyaAlapati13",
          "body": "I will work on this issue and raise a PR for it, @Dev-Khant can you please assign this to me",
          "created_at": "2024-07-30T18:12:41Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Sure @NavyaAlapati13 please feel free to work on it.",
          "created_at": "2024-07-30T18:13:46Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as the fix has been implemented. ",
          "created_at": "2024-08-02T14:22:12Z"
        }
      ]
    },
    {
      "issue_number": 1586,
      "title": "Integrate Portkey LLM Gateway",
      "body": "### 🚀 The feature\n\nIntegrate Portkey\n\n### Motivation, pitch\n\nPortkey exposes a standardized OpenAI like interface and allows users to switch between LLM providers with ease, this reduces code redundancy in Mem0 and makes user experience better. The gateway is free to use and has no limits in the free plan to use as a gateway",
      "state": "open",
      "author": "narengogi",
      "author_type": "User",
      "created_at": "2024-07-26T06:12:54Z",
      "updated_at": "2024-08-02T14:20:21Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1586/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1586",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1586",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.203849",
      "comments": []
    },
    {
      "issue_number": 1582,
      "title": "how the memory adaptive learn or forget ability realize",
      "body": "i could not find how memory adaptive learn or forget ability realized in the code. would you mind suggest where the relevant code is?",
      "state": "open",
      "author": "sparksparkspark",
      "author_type": "User",
      "created_at": "2024-07-25T08:22:20Z",
      "updated_at": "2024-08-02T14:20:03Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1582/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1582",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1582",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.203871",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hey @sparksparkspark You can find it here https://github.com/mem0ai/mem0/blob/main/mem0/memory/main.py#L121.\r\n\r\nWe use tools to determine whether to update or delete old relevant memories related to new query.",
          "created_at": "2024-08-02T14:19:57Z"
        }
      ]
    },
    {
      "issue_number": 1545,
      "title": "When I tried the demo, I entered \"tools\" into OpenAI, but the result returned did not include \"tools\", and as a result, it was not inserted into the database. What should I do?",
      "body": "### 🐛 Describe the bug\n\n![image](https://github.com/user-attachments/assets/530ef4dd-9d94-407a-9688-09dbe54ffb08)\r\n",
      "state": "open",
      "author": "kShines",
      "author_type": "User",
      "created_at": "2024-07-23T06:52:25Z",
      "updated_at": "2024-08-02T14:05:13Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1545/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1545",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1545",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.395968",
      "comments": [
        {
          "author": "youyouye",
          "body": "same problem...",
          "created_at": "2024-07-24T17:16:30Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hey @kShines Currently we only use the predefined tools present [here](https://github.com/mem0ai/mem0/blob/main/mem0/llms/utils/tools.py). \r\n\r\nMay I please ask what is the need to passing custom tools here.",
          "created_at": "2024-08-02T14:04:38Z"
        }
      ]
    },
    {
      "issue_number": 1523,
      "title": "The feature About the Adaptive Personalization",
      "body": "### 🚀 The feature\n\nHow to use mem0 to have both incentives and punishments for memory, aiming for continuous improvement based on interactions.\r\n\r\n\n\n### Motivation, pitch\n\nI am exploring a reward-and-punishment system for long-term memory storage to help me achieve more accurate recall.",
      "state": "open",
      "author": "wuguobin123",
      "author_type": "User",
      "created_at": "2024-07-22T03:20:58Z",
      "updated_at": "2024-08-02T13:49:09Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "question"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1523/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1523",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1523",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.586392",
      "comments": []
    },
    {
      "issue_number": 1500,
      "title": "release graph-based Retrieval-Augmented Generation (RAG) system upgrade version",
      "body": "### 🚀 The feature\n\nrelease graph-based Retrieval-Augmented Generation (RAG) system （better than graphRAG）upgrade version\r\nADD https://github.com/opendatalab/PDF-Extract-Kit\n\n### Motivation, pitch\n\ngraph-based Retrieval-Augmented Generation (RAG) system\r\n\r\nMAKE  LOCAL RAG  system better！",
      "state": "open",
      "author": "tqangxl",
      "author_type": "User",
      "created_at": "2024-07-19T06:28:11Z",
      "updated_at": "2024-08-02T13:41:44Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1500/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1500",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1500",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.586415",
      "comments": [
        {
          "author": "deshraj",
          "body": "Thanks for opening this issue @tqangxl. Graph-RAG is on our roadmap already and we will push it soon. ",
          "created_at": "2024-07-19T06:59:14Z"
        }
      ]
    },
    {
      "issue_number": 1499,
      "title": "Can't make example work",
      "body": "### 🐛 Describe the bug\r\n\r\nCan't make example(the basic example on Readme) work,\r\nm.add returns None memory id, causing \r\n```result = m.update(memory_id=\"m1\", data=\"Likes to play tennis on weekends\")``` fail.\r\ntracked thru for calling,\r\n```\r\ntools = [ADD_MEMORY_TOOL, UPDATE_MEMORY_TOOL, DELETE_MEMORY_TOOL]\r\n        response = self.llm.generate_response(messages=messages, tools=tools)\r\n        tool_calls = response[\"tool_calls\"]\r\n```\r\nthis llm returns UPDATE_MEMORY_TOOL instead, which should be ADD_MEMORY_TOOL, so I don't have\r\nmemory_id",
      "state": "open",
      "author": "femto",
      "author_type": "User",
      "created_at": "2024-07-19T06:04:17Z",
      "updated_at": "2024-08-02T13:41:17Z",
      "closed_at": null,
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1499/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1499",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1499",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:34.807689",
      "comments": [
        {
          "author": "deshraj",
          "body": "Thanks for opening the issue @femto. We don't return the memory_id intentionally after the `m.add()` call since previous related memories may be updated/deleted instead of adding a new one. Hence, it is not possible to return just a single memory_id here. \r\n\r\nPlease let us know if you have some othe",
          "created_at": "2024-07-19T06:58:36Z"
        },
        {
          "author": "femto",
          "body": "if `m.add()` may sometimes updated/delete existing memory, then it's reasonably for currently returning value.\r\nBut I'm reporting a bug that after calling `m.add()`\r\n```\r\nresult = m.add(\"I am working on improving my tennis skills. Suggest some online courses.\", user_id=\"alice\", metadata={\"category\":",
          "created_at": "2024-07-19T07:38:33Z"
        },
        {
          "author": "silentlit",
          "body": "The `m.add` call `llm.generate_response`, and the `memory_id` in `response[\"tool_calls\"]` is `'1'`. So there is an error in qdrant: `{\"status\":{\"error\":\"Format error in JSON body: value 1 is not a valid point ID, valid values are either an unsigned integer or a UUID at line 1 column 53\"},\"time\":0.0}",
          "created_at": "2024-07-31T02:39:25Z"
        },
        {
          "author": "silentlit",
          "body": "In `Memory.add` I add `tmp_list` and `tmp_set` to control the `function_to_call`.\r\n`tmp_list` to append the not None `function_result` for `memory_id `.\r\n`tmp_set` to continue the same `function_args['data']`",
          "created_at": "2024-07-31T03:03:12Z"
        }
      ]
    },
    {
      "issue_number": 1471,
      "title": "AWS Bedrock Embedder",
      "body": "### 🚀 The feature\r\n\r\nSimilar to AWS Bedrock llm, AWS Bedrock embedder should be made available.  Some packages, like crewAI, just use embedchain app as a memory feature and only needs the embedder.\r\n\r\n### Motivation, pitch\r\n\r\nCurrently, embedchain does not have aws_bedrock embedder.  Only the llm is available for AWS Bedrock.  Requesting this feature as our team needs it as a dependency when using Bedrock with crewAI.",
      "state": "closed",
      "author": "andrewghlee",
      "author_type": "User",
      "created_at": "2024-07-12T00:29:20Z",
      "updated_at": "2024-08-01T17:56:31Z",
      "closed_at": "2024-08-01T17:56:31Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1471/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1471",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1471",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:36.692066",
      "comments": [
        {
          "author": "hung-phan",
          "body": "I make a duplicate integration here https://github.com/embedchain/embedchain/pull/1472 but also update LLM code",
          "created_at": "2024-07-12T09:09:47Z"
        },
        {
          "author": "brycecf",
          "body": "This is causing an issue for us as a downstream dependency in `crewai`.  \r\n\r\nWith two open and unreviewed PRs addressing this, any idea when they will be reviewed @Dev-Khant?",
          "created_at": "2024-07-17T14:13:34Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@brycecf Sorry for the delay here as we were busy with integrating Mem0. We will review these PRs on priority.\r\n\r\nMay I ask what problem are you facing in `crewai` because of this issue?",
          "created_at": "2024-07-17T15:17:01Z"
        },
        {
          "author": "andrewghlee",
          "body": "@Dev-Khant `crewAI` has a [memory](https://docs.crewai.com/core-concepts/Memory/) feature that depends on `embedchain`'s App, specifically the `embedder` is used to maintain the memory within a crew.  Currently, this memory feature becomes unusable if AWS Bedrock embedding models are used, since AWS",
          "created_at": "2024-07-24T14:06:54Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@andrewghlee Thanks for explaining the issue with `crewai`, I'll review the PR soon and let you know.",
          "created_at": "2024-07-25T14:42:45Z"
        }
      ]
    },
    {
      "issue_number": 1422,
      "title": "when something goes wrong with creating the embeddings after adding a PDF, it doesn't give an error, but no embeddings are added/",
      "body": "### 🐛 Describe the bug\n\nI used a MTEB huggingface embedding model ([Alibaba-NLP](https://huggingface.co/Alibaba-NLP)\r\n/\r\n[gte-large-en-v1.5](https://huggingface.co/Alibaba-NLP/gte-large-en-v1.5)) I get this as an erratic situation, without an obvious error.\r\nINFO:     Started server process [339843]\r\nINFO:     Waiting for application startup.\r\nINFO:     Application startup complete.\r\n ○ Compiling / ...\r\n ✓ Compiled / in 1629ms (637 modules)\r\n ✓ Compiled in 138ms (313 modules)\r\n ✓ Compiled /admin/data/add in 395ms (743 modules)\r\n(node:339731) [DEP0060] DeprecationWarning: The `util._extend` API is deprecated. Please use Object.assign() instead.\r\n(Use `node --trace-deprecation ...` to show where the warning was created)\r\nFailed to proxy http://127.0.0.1:8000/api/v1/admin/data_sources Error: socket hang up\r\n    at Socket.socketCloseListener (node:_http_client:475:25)\r\n    at Socket.emit (node:events:532:35)\r\n    at TCP.<anonymous> (node:net:338:12)\r\n    at TCP.callbackTrampoline (node:internal/async_hooks:130:17) {\r\n  code: 'ECONNRESET'\r\n}\r\nError: socket hang up\r\n    at Socket.socketCloseListener (node:_http_client:475:25)\r\n    at Socket.emit (node:events:532:35)\r\n    at TCP.<anonymous> (node:net:338:12)\r\n    at TCP.callbackTrampoline (node:internal/async_hooks:130:17) {\r\n  code: 'ECONNRESET'\r\n}\r\n ✓ Compiled /_error in 320ms (912 modules)\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                 | 0/21 [00:00<?, ?it/s]\r\nInserting batches in chromadb:   0%|                                                                                                                                                  | 0/8 [00:00<?, ?it/s]\r\nINFO:     127.0.0.1:37692 - \"POST /api/v1/admin/data_sources HTTP/1.1\" 201 Created\r\n",
      "state": "open",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-13T11:47:21Z",
      "updated_at": "2024-07-23T22:03:58Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1422/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1422",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1422",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:36.886977",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@jonabert, can you please check and verify whether you are getting answers related to context by querying the app or not?",
          "created_at": "2024-06-13T12:15:05Z"
        },
        {
          "author": "jonabert",
          "body": "can you be more specific in what I shall test? I'm using the full-stack example",
          "created_at": "2024-06-13T13:40:36Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> can you be more specific in what I shall test? I'm using the full-stack example\r\n\r\nSure, here can check that after adding your data, when you query your bot are you getting relevant answers? I mean answers around the context of your data source.",
          "created_at": "2024-06-13T15:54:45Z"
        }
      ]
    },
    {
      "issue_number": 1202,
      "title": "Explore openrouter ai integration",
      "body": "### 🚀 The feature\n\n* integration with OpenRouter AI\n\n### Motivation, pitch\n\n<img width=\"596\" alt=\"Screenshot 2024-01-22 at 1 42 13 PM\" src=\"https://github.com/embedchain/embedchain/assets/4302268/ab32dee2-7943-446c-a98c-bd9e7574a829\">\r\nvia: https://twitter.com/gaurav_dhiman/status/1749546127320621368",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-22T21:42:33Z",
      "updated_at": "2024-07-22T04:32:53Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "help wanted"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1202/reactions",
        "total_count": 7,
        "+1": 7,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1202",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1202",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:37.081445",
      "comments": []
    },
    {
      "issue_number": 1505,
      "title": "Remove useless packages when pip it",
      "body": "### 🐛 Describe the bug\n\nI have seen that poetry configures the dependency of several models, I believe that the user will only use one model when using, hope to change the package to delayed import, judge the user to use the corresponding model, install the required package.\r\n\r\nLogic that needs updating:\r\n- Go llm dependent unless necessary\r\n- At the code level, determine the model used by the user, and then delay the import of the corresponding model dependency. If the user does not install, an error is reported to prompt the user to install.\r\n\r\nDoing so will make the whole package lighter.\r\n\r\n![image](https://github.com/user-attachments/assets/f47aa6df-2679-465a-bbfb-0d811c4738ca)\r\n",
      "state": "closed",
      "author": "Undertone0809",
      "author_type": "User",
      "created_at": "2024-07-19T18:51:35Z",
      "updated_at": "2024-07-20T05:19:16Z",
      "closed_at": "2024-07-20T05:19:16Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1505/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1505",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1505",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:37.081489",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hi @Undertone0809, Thanks for the suggestion. This was planned to be removed as we would have many LLM and VectorDB integrations.\r\n\r\nSo we will work on it soon and remove it from core dependencies.",
          "created_at": "2024-07-19T19:12:11Z"
        }
      ]
    },
    {
      "issue_number": 1479,
      "title": "Issue on docs - Function calling",
      "body": "Function calling requires more detail especially relating to using other LLMs that support function calling. Maybe a seperate page for function calling. Path: /components/llms",
      "state": "open",
      "author": "augmentedstartups",
      "author_type": "User",
      "created_at": "2024-07-15T09:09:47Z",
      "updated_at": "2024-07-19T06:36:10Z",
      "closed_at": null,
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1479/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1479",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1479",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:37.306374",
      "comments": [
        {
          "author": "deshraj",
          "body": "Hey @augmentedstartups, thanks for opening the issue. Can you please clarify more about what is the issue exactly? ",
          "created_at": "2024-07-19T06:36:09Z"
        }
      ]
    },
    {
      "issue_number": 489,
      "title": "DOC: Add beginner tutorial",
      "body": "### Issue with current documentation:\n\nSection in the docs which gives an end to end walkthrough of embedchain. It should be written in mind keeping in mind a user who  has basic knowledge of python.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-27T01:41:37Z",
      "updated_at": "2024-07-18T18:27:51Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/489/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/489",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/489",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:37.515339",
      "comments": [
        {
          "author": "Shady2kOver",
          "body": "I feel like the documentation at the moment is extremely well-written and beginner-friendly, could you give an example of what you'd change in any random block out of the docs , I could work on this.",
          "created_at": "2023-09-22T15:36:49Z"
        },
        {
          "author": "ashanviii",
          "body": "Hey @taranjeet  I'd like to work on this issue. If it's still unassigned, could you please assign it to me?",
          "created_at": "2024-05-23T20:26:25Z"
        },
        {
          "author": "Ektamd02",
          "body": "Hey @taranjeet, Can you please assign me this issue? ",
          "created_at": "2024-07-18T18:27:50Z"
        }
      ]
    },
    {
      "issue_number": 1466,
      "title": "Calling multiple functions openai",
      "body": "### 🚀 The feature\n\n```\r\ndef multiply(a: int, b: int) -> int:\r\n    \"\"\"Multiply two integers together.\r\n\r\n    Args:\r\n        a: First integer\r\n        b: Second integer\r\n    \"\"\"\r\n    return a * b\r\n\r\ndef add(a: int, b: int) -> int:\r\n    \"\"\"Add two integers together.\r\n\r\n    Args:\r\n        a: First integer\r\n        b: Second integer\r\n    \"\"\"\r\n    return a + b\r\n\r\nllm = OpenAILlm(tools=[multiply, add])\r\napp = App(llm=llm)\r\n```\r\n\n\n### Motivation, pitch\n\nit would be great if we could provide option of multiple functions",
      "state": "open",
      "author": "inderpreetsingh01",
      "author_type": "User",
      "created_at": "2024-07-07T15:29:15Z",
      "updated_at": "2024-07-17T12:56:32Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1466/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1466",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1466",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:39.488890",
      "comments": [
        {
          "author": "SGA-pranamika-pandey",
          "body": "Hi All,\r\nI'm new to this project and would love to contribute. May I understand more about this issue please?\r\nIs this the parallel function calling feature of Open AI LLM as described here: https://platform.openai.com/docs/guides/function-calling/parallel-function-calling?\r\n\r\nThanks! ",
          "created_at": "2024-07-17T12:56:31Z"
        }
      ]
    },
    {
      "issue_number": 1239,
      "title": "How to add arguments \"trust_remote_code\": \"True\" to hugginface model? ",
      "body": "### 🚀 The feature\n\nI wanted to test the local llm and embedder and below is my config, and I did some tracing, and i could not find how to add such argument \"trust_remote_code\": \"True\"  to it . below is my config yaml, could you help?\r\n\r\n```\r\nllm:\r\n  provider: huggingface\r\n  config:\r\n    model: 'openbmb/MiniCPM-2B-sft-bf16'\r\n    top_p: 0.8\r\nembedder:\r\n  provider: huggingface\r\n  config:\r\n    model: 'nomic-ai/nomic-embed-text-v1'\r\n```\r\n\n\n### Motivation, pitch\n\nLet me know if there is a way to expand such easier either like model_kwargs: {trust_remote_code: True} to you class? ",
      "state": "closed",
      "author": "cabisarri",
      "author_type": "User",
      "created_at": "2024-02-05T16:33:32Z",
      "updated_at": "2024-07-11T06:43:28Z",
      "closed_at": "2024-07-11T06:43:28Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1239/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1239",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1239",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:44.675102",
      "comments": [
        {
          "author": "syddharth",
          "body": "Were you able to solve this?",
          "created_at": "2024-04-17T20:19:06Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as #1450 adds the functionality to pass model_kwargs for HF model.",
          "created_at": "2024-07-11T06:43:28Z"
        }
      ]
    },
    {
      "issue_number": 1269,
      "title": "  AttributeError: type object 'App' has no attribute 'from_config'",
      "body": "\r\nNot being able to load custom configurations .\r\n\r\napp = App.from_config('config.yaml')\r\n\r\nAttributeError: type object 'App' has no attribute 'from_config'\r\n\r\n",
      "state": "closed",
      "author": "srj-krishna",
      "author_type": "User",
      "created_at": "2024-02-17T06:47:40Z",
      "updated_at": "2024-07-11T06:41:07Z",
      "closed_at": "2024-07-11T06:41:07Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1269/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1269",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1269",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:44.893471",
      "comments": [
        {
          "author": "deshraj",
          "body": "@srj-krishna can you please clarify which embedchain version you are using?\r\n\r\nYou can check the version with \r\n\r\n```python\r\nimport embedchain\r\nprint(embedchain.__version__)\r\n```",
          "created_at": "2024-02-17T10:09:39Z"
        },
        {
          "author": "srj-krishna",
          "body": "I am using version 0.0.27 which is specified in requirements.txt file.\r\nI have been getting this error while trying to deploy on streamlit using github. \r\nHowever the app works fine while testing on Github codespaces and only shows the error on interacting with the deployed app.\r\n\r\nI also got anothe",
          "created_at": "2024-02-17T10:43:11Z"
        },
        {
          "author": "pratikdel04",
          "body": "Use Python 3.10 or above it works fine for it, and upgrade embedchain",
          "created_at": "2024-03-13T09:23:32Z"
        },
        {
          "author": "pratikkotian04",
          "body": "Facing Same issue. Using Latest Version of embedchain with streamlit",
          "created_at": "2024-04-26T06:01:50Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @srj-krishna @pratikkotian04  Please try using python >= 3.10 and latest embedchain version. Let us know if it still doesn't work.",
          "created_at": "2024-06-15T11:01:16Z"
        }
      ]
    },
    {
      "issue_number": 1359,
      "title": "Query returns prompt, context and answer",
      "body": "### 🐛 Describe the bug\n\nUsing the provided huggingface example, query is returning not only the answer but the context and prompt",
      "state": "open",
      "author": "leo-goss",
      "author_type": "User",
      "created_at": "2024-05-06T01:46:22Z",
      "updated_at": "2024-07-11T06:40:31Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1359/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1359",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1359",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:45.100896",
      "comments": [
        {
          "author": "avp1598",
          "body": "Yes any fixes for this please?",
          "created_at": "2024-05-21T13:57:39Z"
        },
        {
          "author": "parshvadaftari",
          "body": "@leo-goss Are you talking about LLM, Embedder or something else. Could you please provide full context?",
          "created_at": "2024-07-11T06:40:30Z"
        }
      ]
    },
    {
      "issue_number": 1274,
      "title": "PDF File requires extra dependencies. Install with pip install --upgrade \"embedchain[dataloaders]\"",
      "body": "### 🐛 Describe the bug\n\n(c2) C:\\Users\\harsh.padaliya\\Desktop\\custom_writeups_project>python try_rag.py\r\n2024-02-19 15:32:19,557 - 14132 - add_config.py-add_config:30 - WARNING: min_chunk_size 0 should be greater than chunk_overlap 100, otherwise it is redundant.\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\harsh.padaliya\\Desktop\\custom_writeups_project\\try_rag.py\", line 79, in <module>\r\n    app.add(r\"\\data\\xdtb.pdf\", data_type='pdf_file')\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\site-packages\\embedchain\\embedchain.py\", line 200, in add\r\n    data_formatter = DataFormatter(data_type, config, loader, chunker)\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\site-packages\\embedchain\\data_formatter\\data_formatter.py\", line 34, in __init__\r\n    self.loader = self._get_loader(data_type=data_type, config=config.loader, loader=loader)\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\site-packages\\embedchain\\data_formatter\\data_formatter.py\", line 90, in _get_loader\r\n    loader_class: type = self._lazy_load(loaders[data_type])\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\site-packages\\embedchain\\data_formatter\\data_formatter.py\", line 40, in _lazy_load\r\n    module = import_module(module_path)\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1050, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1027, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 688, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 883, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\n  File \"C:\\Users\\harsh.padaliya\\AppData\\Local\\anaconda3\\envs\\c2\\lib\\site-packages\\embedchain\\loaders\\pdf_file.py\", line 6, in <module>\r\n    raise ImportError(\r\nImportError: PDF File requires extra dependencies. Install with `pip install --upgrade \"embedchain[dataloaders]\"`\r\n",
      "state": "closed",
      "author": "meru2024",
      "author_type": "User",
      "created_at": "2024-02-19T10:05:59Z",
      "updated_at": "2024-07-11T06:39:41Z",
      "closed_at": "2024-07-11T06:39:41Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1274/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1274",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1274",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:45.302486",
      "comments": [
        {
          "author": "AnniePachecoJ",
          "body": "Hello, I just wanted to add that I am getting a similar error, but with postgres. I am using docker and I fixed this error adding : \r\n`RUN /py/bin/pip install embedchain && \\\r\n    /py/bin/pip install --upgrade 'embedchain[postgres]'`\r\nHowever, I when I called app.query(\"what ever question\") I am get",
          "created_at": "2024-02-26T21:02:46Z"
        },
        {
          "author": "erasherra",
          "body": "I got similar error with embedchain also after running the 'pip install --upgrade \"embedchain[dataloaders]\"' command however it seems that the embedchain is using langchain-community version 0.0.20 which seems to cause the problem. I downgraded the langchain-community package to version 0.0.19 (pip ",
          "created_at": "2024-02-29T11:28:35Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@meru2024 Here you need to install extra packages for PDF file loader using this command `pip install --upgrade \"embedchain[dataloaders]\"`",
          "created_at": "2024-06-10T17:17:48Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@AnaArkus Can you please share the complete code like what's the data source and which model are you using?",
          "created_at": "2024-06-10T17:19:06Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as we have removed `[dataloader]` from poetry. Please use `make install_all` to install all the required packages for dataloaders.",
          "created_at": "2024-07-11T06:39:41Z"
        }
      ]
    },
    {
      "issue_number": 734,
      "title": "Follow snake case convention in folder vectordb",
      "body": "### 🐛 Describe the bug\n\nLocated at  embedchain/config/vectordb\r\n\r\nIt should be vector_db.\r\n\r\nThis task will involve changing the relevant imports everywhere and making sure that tests pass and nothing breaks.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-30T07:07:18Z",
      "updated_at": "2024-07-08T23:01:18Z",
      "closed_at": "2024-07-08T23:01:18Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/734/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/734",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/734",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:45.540881",
      "comments": [
        {
          "author": "Psudopodiya",
          "body": "How do i test it out some way to run the code ?\r\nPlus do you need it for only the folder name or for all the classes within (even tough the issue says \"in the folder\" , i feel like asking this)",
          "created_at": "2023-09-30T07:35:01Z"
        },
        {
          "author": "Prikshit7766",
          "body": "@Psudopodiya \r\nAre you currently working on this task, or should I go ahead and start making the necessary changes?",
          "created_at": "2023-09-30T09:09:40Z"
        },
        {
          "author": "Psudopodiya",
          "body": "> @Prikshit7766 \r\nSure go ahead with this one. Sorry do not have time for it right now",
          "created_at": "2023-09-30T11:03:40Z"
        },
        {
          "author": "shubham1234098",
          "body": "hello can i contribute on it??\r\n",
          "created_at": "2023-10-07T09:20:21Z"
        }
      ]
    },
    {
      "issue_number": 1455,
      "title": "OpenAI embeder from langchain has more options than chroma",
      "body": "### 🐛 Describe the bug\n\nWe should be importing the embedder for openai from langchain not chromadb -\r\nhttps://github.com/embedchain/embedchain/blob/main/embedchain/embedder/openai.py#L4\r\n\r\n[Openai](https://python.langchain.com/v0.2/docs/integrations/text_embedding/openai/) vs [chromadb funciton ](https://github.com/chroma-core/chroma/blob/9f79843f0bebd4c6c3908387303b4d98e4f66a3e/chromadb/utils/embedding_functions/openai_embedding_function.py#L9)\r\n\r\nIt gives us more flexibility to call the openai embedding functionality over current implementation of chroma - especially http proxy settings.",
      "state": "open",
      "author": "PranavPuranik",
      "author_type": "User",
      "created_at": "2024-06-30T15:54:00Z",
      "updated_at": "2024-07-07T22:27:24Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1455/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1455",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1455",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:45.774688",
      "comments": [
        {
          "author": "tanmaysankhe",
          "body": "I will work on this.",
          "created_at": "2024-06-30T16:02:53Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@tanmaysankhe Feel free to work on this.",
          "created_at": "2024-07-01T04:30:24Z"
        },
        {
          "author": "SumantxD",
          "body": "@Dev-Khant can you review my PR #1468",
          "created_at": "2024-07-07T22:27:23Z"
        }
      ]
    },
    {
      "issue_number": 574,
      "title": ":tokyo_tower:  Feature request: OpenAI tokens usage information returned in add and query methods.",
      "body": "### 🚀 The feature\n\nI was looking at docs and previous issues but couldn't find any information about consumed OpenAI tokens.\r\nAccording to the OpenAI documentation, they return following information in they response:\r\n\r\n```json\r\n  \"usage\": {\r\n    \"prompt_tokens\": 5,\r\n    \"completion_tokens\": 7,\r\n    \"total_tokens\": 12\r\n  }\r\n```\r\n\r\nIt'd be very useful to have such information, as right now I cannot track/measure programmatically consumed OpenAI tokens.\r\nSo I imagine that if I'll put some option to query or add config, data about usage will be returned in the response, something like below:\r\n\r\n```python\r\nresult = naval_chat_bot.add(\"https://www.youtube.com/watch?v=3qHkcs3kG44\", config=add_config)\r\nresult['source'] => some source id\r\nresult['usage'] => usage data info\r\n\r\nresult = test_chat_bot.query('some happy little query', )\r\nresult['response_message'] => 'generated response'\r\nresult['usage'] => usage data info\r\n```\r\n\r\nIt can be even simplified using some kind of proxy flag, so the whole OpenAI response will be returned.\n\n### Motivation, pitch\n\nI'm working on a web app, where each user can have his own sources db. I don't want to force someone to put/use his own OpenAI api key, instead I want to control user tokens usage programmatically. ",
      "state": "closed",
      "author": "Panczo",
      "author_type": "User",
      "created_at": "2023-09-06T20:13:44Z",
      "updated_at": "2024-07-07T17:41:04Z",
      "closed_at": "2024-07-04T18:40:57Z",
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/574/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/574",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/574",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.004537",
      "comments": [
        {
          "author": "cachho",
          "body": "Good idea, this should definitely be on the list of things to add, however this isn't a quick thing to introduce so I must ask for some patience. thanks.",
          "created_at": "2023-09-11T06:55:49Z"
        },
        {
          "author": "Panczo",
          "body": "Hi @cachho any news about this feature?",
          "created_at": "2024-03-17T16:58:59Z"
        },
        {
          "author": "Panczo",
          "body": ":+1: ",
          "created_at": "2024-07-07T17:41:03Z"
        }
      ]
    },
    {
      "issue_number": 853,
      "title": "Retrieve token usage from LLMs requests",
      "body": "### 🚀 The feature\n\nRetrieve the token usage from LLMs requests like prompt, completion, and total number of tokens. Currently embedchain only returns the raw message from LLMs.\n\n### Motivation, pitch\n\nSince many paid LLMs charge by token usage, it is hard to predict and calculate the costs of using embedchain with a LLM like OpenAI. We might need to calculate costs per customer, for example, and better control the usage of product.",
      "state": "closed",
      "author": "fabioferreira3",
      "author_type": "User",
      "created_at": "2023-10-26T10:38:47Z",
      "updated_at": "2024-07-04T19:18:56Z",
      "closed_at": "2024-07-04T19:18:56Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/853/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/853",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/853",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.181407",
      "comments": [
        {
          "author": "jrobertogram",
          "body": "Up",
          "created_at": "2024-01-01T16:29:31Z"
        },
        {
          "author": "taranjeet",
          "body": "hey @jrobertogram thanks for highlighting this. We will get back shortly here.",
          "created_at": "2024-01-01T16:32:07Z"
        }
      ]
    },
    {
      "issue_number": 1380,
      "title": "How can i set trust_remote_code = True ?",
      "body": "### 🐛 Describe the bug\n\nI want to use nomic-embed-text-v1 model from huggingface. When I add it the app gives me following error:\r\n\r\n`ValueError: Loading nomic-ai/nomic-embed-text-v1 requires you to execute the configuration file in that repo on your local machine. Make sure you have read the code there to avoid malicious use, then set the option trust_remote_code=True to remove this error.`\r\n\r\n\r\nAfter researching about this online, I got to know that I need to add trust_remote_code to True when initializing the SentenceTransformer. I believe embedchain uses this class internally but do we have config to set trust_remote_code on higher level?",
      "state": "closed",
      "author": "vivek9patel",
      "author_type": "User",
      "created_at": "2024-06-01T11:18:23Z",
      "updated_at": "2024-06-29T19:37:32Z",
      "closed_at": "2024-06-29T19:37:32Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1380/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1380",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1380",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.370323",
      "comments": [
        {
          "author": "PranavPuranik",
          "body": "I will pick this up... ",
          "created_at": "2024-06-28T23:23:56Z"
        },
        {
          "author": "PranavPuranik",
          "body": "Hi @vivek9patel ,\r\n\r\nUpgrade to the latest version and pass this to your config once my PR is merged - \r\n\r\n```\r\nembedder:\r\n  provider: huggingface\r\n  config:\r\n    model: 'nomic-ai/nomic-embed-text-v1'\r\n    model_kwargs:\r\n      trust_remote_code: True\r\n```",
          "created_at": "2024-06-29T01:06:01Z"
        }
      ]
    },
    {
      "issue_number": 1375,
      "title": "TypeError: unhashable type: 'list'",
      "body": "### 🐛 Describe the bug\n\nI just wanna run the example of PDF file chatbot below.\r\n```python\r\nfrom embedchain import App\r\napp = App()\r\n\r\n# Add Next.JS Website and docs\r\napp.add(\"https://nextjs.org/sitemap.xml\", data_type=\"sitemap\")\r\n\r\n# Add Next.JS Forum data\r\napp.add(\"https://nextjs-forum.com/sitemap.xml\", data_type=\"sitemap\")\r\n```\r\n\r\nError occured like this:\r\n```shell\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[1], [line 1](vscode-notebook-cell:?execution_count=1&line=1)\r\n----> [1](vscode-notebook-cell:?execution_count=1&line=1) from embedchain import App\r\n      [2](vscode-notebook-cell:?execution_count=1&line=2) app = App()\r\n      [4](vscode-notebook-cell:?execution_count=1&line=4) # Add Next.JS Website and docs\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python39\\site-packages\\embedchain\\__init__.py:5\r\n      [1](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/__init__.py:1) import importlib.metadata\r\n      [3](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/__init__.py:3) __version__ = importlib.metadata.version(__package__ or __name__)\r\n----> [5](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/__init__.py:5) from embedchain.app import App  # noqa: F401\r\n      [6](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/__init__.py:6) from embedchain.client import Client  # noqa: F401\r\n      [7](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/__init__.py:7) from embedchain.pipeline import Pipeline  # noqa: F401\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python39\\site-packages\\embedchain\\app.py:16\r\n     [12](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:12) from embedchain.cache import (Config, ExactMatchEvaluation,\r\n     [13](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:13)                               SearchDistanceEvaluation, cache,\r\n     [14](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:14)                               gptcache_data_manager, gptcache_pre_function)\r\n     [15](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:15) from embedchain.client import Client\r\n---> [16](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:16) from embedchain.config import AppConfig, CacheConfig, ChunkerConfig\r\n     [17](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:17) from embedchain.core.db.database import get_session, init_db, setup_engine\r\n     [18](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/app.py:18) from embedchain.core.db.models import DataSource\r\n\r\nFile ~\\AppData\\Roaming\\Python\\Python39\\site-packages\\embedchain\\config\\__init__.py:3\r\n      [1](https://file+.vscode-resource.vscode-cdn.net/d%3A/Code/dive_into_llm/~/AppData/Roaming/Python/Python39/site-packages/embedchain/config/__init__.py:1) # flake8: noqa: F401\r\n...\r\n--> [215](file:///D:/ProgramData/Anaconda3/envs/aigc/lib/typing.py:215) all_params = set(params)\r\n    [216](file:///D:/ProgramData/Anaconda3/envs/aigc/lib/typing.py:216) if len(all_params) < len(params):\r\n    [217](file:///D:/ProgramData/Anaconda3/envs/aigc/lib/typing.py:217)     new_params = []\r\n\r\nTypeError: unhashable type: 'list'\r\n```\r\n\r\nHow can I fix this problem?",
      "state": "open",
      "author": "wbzhang233",
      "author_type": "User",
      "created_at": "2024-05-27T08:06:48Z",
      "updated_at": "2024-06-28T22:50:56Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1375/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1375",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1375",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.557963",
      "comments": [
        {
          "author": "PranavPuranik",
          "body": "Hi @wbzhang233, I could not replicate this... could you please upgrade to the latest version of embedchain and re-try?\r\n\r\nPlease let me know you config if error persists. ",
          "created_at": "2024-06-28T22:50:55Z"
        }
      ]
    },
    {
      "issue_number": 1427,
      "title": "AzureOpenAI embedder should have a separate file...",
      "body": "### 🐛 Describe the bug\n\nOffshoot of #1347, AzureOpenAI should have a separate file under embedders. \r\n\r\nChange the strategy dictionary as well. ",
      "state": "closed",
      "author": "PranavPuranik",
      "author_type": "User",
      "created_at": "2024-06-18T04:06:30Z",
      "updated_at": "2024-06-26T17:58:13Z",
      "closed_at": "2024-06-26T17:58:13Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1427/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1427",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1427",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.741601",
      "comments": [
        {
          "author": "vatsalrathod16",
          "body": "I can work on this.",
          "created_at": "2024-06-18T04:24:55Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@vatsalrathod16 Please feel free to work on this.",
          "created_at": "2024-06-19T17:23:01Z"
        }
      ]
    },
    {
      "issue_number": 1373,
      "title": "Lots of deprecation warnings",
      "body": "### 🐛 Describe the bug\r\n\r\nRunning the latest version of embedchain generates lots of deprecation warnings.\r\n\r\n```\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `AzureOpenAIEmbeddings` was deprecated in LangChain 0.0.9 and will be removed in 0.3.0. An updated version of the class exists in the langchain-openai package and should be used instead. To use it run `pip install -U langchain-openai` and import as `from langchain_openai import AzureOpenAIEmbeddings`.\r\n  warn_deprecated(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/embeddings/azure_openai.py:113: UserWarning: As of openai>=1.0.0, Azure endpoints should be specified via the `azure_endpoint` param not `openai_api_base` (or alias `base_url`). Updating `openai_api_base` from https://instance.openai.azure.com to https://instance.openai.azure.com/openai.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/embeddings/azure_openai.py:120: UserWarning: As of openai>=1.0.0, if `deployment` (or alias `azure_deployment`) is specified then `openai_api_base` (or alias `base_url`) should not be. Instead use `deployment` (or alias `azure_deployment`) and `azure_endpoint`.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/embeddings/azure_openai.py:128: UserWarning: As of openai>=1.0.0, if `openai_api_base` (or alias `base_url`) is specified it is expected to be of the form https://example-resource.azure.openai.com/openai/deployments/example-deployment. Updating https://instance.openai.azure.com to https://instance.openai.azure.com/openai.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `AzureChatOpenAI` was deprecated in LangChain 0.0.10 and will be removed in 0.3.0. An updated version of the class exists in the langchain-openai package and should be used instead. To use it run `pip install -U langchain-openai` and import as `from langchain_openai import AzureChatOpenAI`.\r\n  warn_deprecated(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/chat_models/azure_openai.py:167: UserWarning: As of openai>=1.0.0, Azure endpoints should be specified via the `azure_endpoint` param not `openai_api_base` (or alias `base_url`). Updating `openai_api_base` from https://instance.openai.azure.com to https://instance.openai.azure.com/openai.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/chat_models/azure_openai.py:174: UserWarning: As of openai>=1.0.0, if `deployment_name` (or alias `azure_deployment`) is specified then `openai_api_base` (or alias `base_url`) should not be. Instead use `deployment_name` (or alias `azure_deployment`) and `azure_endpoint`.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_community/chat_models/azure_openai.py:182: UserWarning: As of openai>=1.0.0, if `openai_api_base` (or alias `base_url`) is specified it is expected to be of the form https://example-resource.azure.openai.com/openai/deployments/example-deployment. Updating https://instance.openai.azure.com to https://instance.openai.azure.com/openai.\r\n  warnings.warn(\r\n/Users/userabc/Library/Python/3.9/lib/python/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The method `BaseChatModel.__call__` was deprecated in langchain-core 0.1.7 and will be removed in 0.3.0. Use invoke instead.\r\n  warn_deprecated(\r\n```",
      "state": "closed",
      "author": "denaha",
      "author_type": "User",
      "created_at": "2024-05-22T14:20:43Z",
      "updated_at": "2024-06-24T17:55:39Z",
      "closed_at": "2024-06-24T17:55:39Z",
      "labels": [
        "bug",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1373/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1373",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1373",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.976431",
      "comments": []
    },
    {
      "issue_number": 1442,
      "title": "LLM is not able to fetch and respond to `text` data type",
      "body": "I supplied it with my cover letter saved with `.txt` format in the same.\r\nFor eg:\r\nHere was the only time I had mentioned language in my cover letter\r\n![image](https://github.com/embedchain/embedchain/assets/84353445/c720a57c-6aed-4a83-a369-38e38828ee37)\r\nand here is the response I got:\r\n![image](https://github.com/embedchain/embedchain/assets/84353445/5d1577e2-0f41-4a37-92f7-43b1a4fde698)\r\n",
      "state": "open",
      "author": "nikhilsharma26500",
      "author_type": "User",
      "created_at": "2024-06-22T18:13:41Z",
      "updated_at": "2024-06-24T07:45:05Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1442/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1442",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1442",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:46.976456",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hi @nikhilsharma26500 It seems to have been working for me. Please can you try installing the latest version of embedchain and try being more specific with your query?\r\n\r\nLet me know if this helps or you can share the code and the file here.",
          "created_at": "2024-06-24T07:45:02Z"
        }
      ]
    },
    {
      "issue_number": 1026,
      "title": "httpx.ConnectError: [Errno 101] Network is unreachable",
      "body": "### 🐛 Describe the bug\n\nhttpx.ConnectError: [Errno 101] Network is unreachable",
      "state": "closed",
      "author": "xxm1668",
      "author_type": "User",
      "created_at": "2023-12-19T01:41:31Z",
      "updated_at": "2024-06-21T18:15:28Z",
      "closed_at": "2024-06-21T18:15:28Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1026/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1026",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1026",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:47.186072",
      "comments": [
        {
          "author": "xxm1668",
          "body": "![截图 2023-12-19 09-43-32](https://github.com/embedchain/embedchain/assets/129041904/b04adb9a-038e-4e17-8014-d696a5162f17)\r\n",
          "created_at": "2023-12-19T01:44:24Z"
        },
        {
          "author": "deshraj",
          "body": "Thanks for opening the issue @xxm1668   \n\nCan you please post the full error traceback so that we can help you better? ",
          "created_at": "2023-12-19T02:53:36Z"
        },
        {
          "author": "xxm1668",
          "body": "vpn开着就可以了，但是不支持Vllm服务",
          "created_at": "2023-12-19T03:20:33Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing the issue as the problem is not clear. Please feel free to open it again if needed.",
          "created_at": "2024-06-21T18:15:28Z"
        }
      ]
    },
    {
      "issue_number": 812,
      "title": "NodeJS TypeError: First parameter has member 'readable' that is not a ReadableStream.",
      "body": "### 🐛 Describe the bug\n\nI'm trying to create a bot using Node 18+ (I tried multiple versions), but receive the following error:\r\n\r\n`node_modules/openai/node_modules/web-streams-polyfill/dist/polyfill.js:362\r\n            throw new TypeError(context + \" is not a ReadableStream.\");\r\n                  ^\r\nTypeError: First parameter has member 'readable' that is not a ReadableStream`\r\n\r\nI installed using npm i embedchain --save\r\n\r\nThe code I'm using:\r\n\r\n`const dotenv = require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst { App } = require(\"embedchain\");\r\n\r\nasync function askBot() {\r\n    const myBot = await App();\r\n\r\n    const myPrompt = \"Who where his parents, and how old was he?\";\r\n    const res = await myBot.query(myPrompt);\r\n\r\n    console.log(res);\r\n}\r\n\r\naskBot();`",
      "state": "closed",
      "author": "poetsmeniet",
      "author_type": "User",
      "created_at": "2023-10-17T14:03:39Z",
      "updated_at": "2024-06-21T18:12:37Z",
      "closed_at": "2024-06-21T18:12:37Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/812/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/812",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/812",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:47.380727",
      "comments": [
        {
          "author": "poetsmeniet",
          "body": "I don't know why the code block is messed up, sorry",
          "created_at": "2023-10-17T14:04:25Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as EmbedchainJS is no longer available.",
          "created_at": "2024-06-21T18:12:37Z"
        }
      ]
    },
    {
      "issue_number": 577,
      "title": "Python CI/CD should not run for changes in embedchain-js folder",
      "body": "### 🚀 The feature\n\nWe merged [embedchainjs](https://github.com/embedchain/embedchainjs) into this repo.\r\nCI/CD of python repo should not run for changes in embedchain-js folder.\n\n### Motivation, pitch\n\nbetter CI",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-07T00:22:26Z",
      "updated_at": "2024-06-21T18:08:33Z",
      "closed_at": "2024-06-21T18:08:33Z",
      "labels": [
        "medium"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/577/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dtee1"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/577",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/577",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:47.575966",
      "comments": [
        {
          "author": "dtee1",
          "body": "Interested ",
          "created_at": "2023-09-15T15:41:26Z"
        },
        {
          "author": "cachho",
          "body": "> Interested\r\n\r\ngo ahead. ",
          "created_at": "2023-09-15T16:12:11Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as EmbedchainJS is no longer available.",
          "created_at": "2024-06-21T18:08:33Z"
        }
      ]
    },
    {
      "issue_number": 396,
      "title": "feature request: Multiple \"Brains\" like Quivr.",
      "body": "### 🚀 The feature\n\nThe ability to silo documents to a namespace. Quivr calls this a brain. \n\n### Motivation, pitch\n\nTo keep documentation silod. This may later allow role-base access control to data silos. \n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n- Upload Topic A documents to a namespace called Topic A.\r\n- Upload Topic B documents to a namespace called Topic B.\r\n- AI should only have context for the current namespace. \r\n- Each Brain can use a different GPT key.\r\n- Each Brain can use a different temperature.\r\n- Each Brain can use a different token count.\r\n- Eventually, RBAC could be added to allow multi-user with different privileges.",
      "state": "closed",
      "author": "funkytaco",
      "author_type": "User",
      "created_at": "2023-08-03T02:40:59Z",
      "updated_at": "2024-06-21T18:05:19Z",
      "closed_at": "2024-06-21T18:05:19Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/396/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/396",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/396",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:47.749323",
      "comments": [
        {
          "author": "cachho",
          "body": "#310 is a PR we're working on that implements this. Except for the settings, you will have to manage those yourself, but that's not too hard.",
          "created_at": "2023-08-03T06:05:32Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as it has been fixed.",
          "created_at": "2024-06-21T18:05:19Z"
        }
      ]
    },
    {
      "issue_number": 301,
      "title": "Update docs to make it easier to customize the app",
      "body": "### 🚀 The feature\r\n\r\nThis is a running issue to update the doc and make it easy for everyone to learn and understand the framework.\r\n\r\n- add details about .online\r\n- how can we change the max_tokens?\r\n- how can we use hugging face embeddings (https://github.com/embedchain/embedchain/issues/62)\r\n- how can we use gpt-4 model (https://github.com/embedchain/embedchain/issues/73)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-17T16:55:22Z",
      "updated_at": "2024-06-21T18:00:58Z",
      "closed_at": "2024-06-21T18:00:58Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/301/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "taranjeet"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/301",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/301",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:47.966254",
      "comments": [
        {
          "author": "taranjeet",
          "body": "From #263 \r\n\r\ni think this should be doable using config now. just that we need to update documentation where we can mention \"gpt-4\" as the model.",
          "created_at": "2023-07-20T06:37:17Z"
        },
        {
          "author": "taranjeet",
          "body": "Update docs about:\r\n\r\nInitConfig: Server and Port\r\nQueryConfig: Number of documents\r\n\r\nFrom: #299 ",
          "created_at": "2023-07-20T06:38:13Z"
        },
        {
          "author": "taranjeet",
          "body": "Update docs about:\r\n\r\nApp Types: PersonOpenSourceApp\r\n\r\nFrom #299 ",
          "created_at": "2023-07-20T06:38:29Z"
        },
        {
          "author": "taranjeet",
          "body": "Moreover, looks like the \"Vector Database\" section only contains the ElasticSearch but Embedchain also supports chroma. We would like to show Chroma as well in the \"Vector Database\" section.",
          "created_at": "2023-08-16T16:52:17Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as documentation changes are done.",
          "created_at": "2024-06-21T18:00:58Z"
        }
      ]
    },
    {
      "issue_number": 269,
      "title": "[Bug] Incomplete read Error",
      "body": "I am running on Python 3.11.3 on Windows OS. \r\n\r\n```python\r\nfrom embedchain import OpenSourceApp\r\n\r\nchat_bot= OpenSourceApp()\r\n\r\nchat_bot.add_local(\"pdf_file\", \"C:\\\\ChatGPT\\\\test_embedchain\\\\content\\\\20060103.pdf\")\r\n\r\nchat_bot.query(\"Hi\")\r\n```\r\n\r\nThis is a simple test program and it throws out error - requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(877595012 bytes read, 1050851196 more expected)', IncompleteRead(877595012 bytes read, 1050851196 more expected))\r\n\r\nI guessed that probably it is trying to download gpt4all and fail\r\n<img width=\"952\" alt=\"Screenshot 2023-07-15 Embedchain\" src=\"https://github.com/embedchain/embedchain/assets/88419852/7aa2dc65-5336-452f-943b-1fa43dd98f51\">\r\ned due to internet connection, so i ran again and it failed again with exact same error. My internet connection is stable. I am attaching the error screenshot below",
      "state": "closed",
      "author": "Divyansh-2021",
      "author_type": "User",
      "created_at": "2023-07-14T20:14:05Z",
      "updated_at": "2024-06-21T17:56:44Z",
      "closed_at": "2024-06-21T17:56:43Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/269/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/269",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/269",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.145362",
      "comments": [
        {
          "author": "cachho",
          "body": "I'm not on windows, can you test with an online PDF? Pdf loader is an online loader, not a local one.\r\n\r\nHowever, you should be able to load local urls, but I'm not sure you can reference files like that. I think the syntax would be ``file://...` - open your file in chrome and you should see it.",
          "created_at": "2023-07-14T21:53:06Z"
        },
        {
          "author": "Divyansh-2021",
          "body": "> I'm not on windows, can you test with an online PDF? Pdf loader is an online loader, not a local one.\r\n> \r\n> However, you should be able to load local urls, but I'm not sure you can reference files like that. I think the syntax would be ``file://...` - open your file in chrome and you should see i",
          "created_at": "2023-07-17T04:54:51Z"
        },
        {
          "author": "cachho",
          "body": "It clearly says that this is an issue with the filepath. We're going to have to test this on Windows.",
          "created_at": "2023-07-17T06:32:32Z"
        },
        {
          "author": "cachho",
          "body": "In the meantime, I suggest you upload your PDF file somewhere on the internet, unless it's really secret. I think you can even use github for that.",
          "created_at": "2023-07-17T06:34:01Z"
        },
        {
          "author": "sahilyadav902",
          "body": "I tried running it on Windows with both absolute and relative file paths, even with spaces in between file and folder names, and it works for me.\r\n\r\n```python\r\nnaval_chat_bot = App()\r\n# naval_chat_bot = OpenSourceApp()\r\n\r\nnaval_chat_bot.add_local(\"pdf_file\", \"C:\\\\chat gpt\\\\naval ravikant.pdf\")\r\nnava",
          "created_at": "2023-07-18T13:08:07Z"
        }
      ]
    },
    {
      "issue_number": 240,
      "title": "[Feature Request] Add support for reading audio URL (podcast/music/mp3)",
      "body": "I'm currently manually loading, chunking, and writing buffers for mp3 files retrieved via RSS urls. Would be great to use the abstractions from embedchain to just call `.add(\"audio_url\",\"https://mypodcasthost.com/mypodcast/myepisode.mp3\")`",
      "state": "closed",
      "author": "heaversm",
      "author_type": "User",
      "created_at": "2023-07-11T17:45:47Z",
      "updated_at": "2024-06-21T17:54:19Z",
      "closed_at": "2024-06-21T17:54:19Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/240/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/240",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/240",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.320164",
      "comments": [
        {
          "author": "cachho",
          "body": "How do you want to convert to chunkable text?",
          "created_at": "2023-07-11T19:05:24Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @heaversm, we have the capability to process audio files that can accept both a file path and an audio URL. Check out the documentation here: https://docs.embedchain.ai/components/data-sources/audio.",
          "created_at": "2024-06-21T17:54:19Z"
        }
      ]
    },
    {
      "issue_number": 197,
      "title": "Custom Model / GPT4all model.",
      "body": "Hey @taranjeet I loved embedchain and wanted to use it in one of my projects. I wanted to use my custom model / GPT4All models, do you have any documentation related to it?\r\nCurrent default model is all-MiniLM-L6-v2\r\n- discord message link: https://discord.com/channels/1121119078191480945/1121119078858358846/1127139683953025094",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-08T08:51:33Z",
      "updated_at": "2024-06-21T17:51:51Z",
      "closed_at": "2024-06-21T17:51:51Z",
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/197/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/197",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/197",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.506498",
      "comments": [
        {
          "author": "TomasTomecek",
          "body": "I second this ask. Unfortunately all-MiniLM-L6-v2 can only work with 256 tokens which is fairly limiting. GPT4All's default embedding model (ggml-all-MiniLM-L6-v2-f16) can do even several k so it would be amazing to use it.\r\n\r\n```\r\n    raise RepositoryNotFoundError(message, response) from e\r\nhugging",
          "created_at": "2023-10-02T09:14:04Z"
        },
        {
          "author": "nav9",
          "body": "Using embedChain with GPT4All is something I'm looking forward to as well.",
          "created_at": "2023-10-13T18:17:13Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as GPT4All functionality is more robust now and can handle different models. Please feel free to open this issue again if there's still a problem.",
          "created_at": "2024-06-21T17:51:51Z"
        }
      ]
    },
    {
      "issue_number": 186,
      "title": "Slow response for OpenSourceApp() [cpu]",
      "body": "It takes a very long time to get the response with OpenSourceApp from embedchain==0.0.17, around 100 secs, is this normal?\r\n\r\n\r\n\r\n![image](https://github.com/embedchain/embedchain/assets/31437758/bbd31836-c7dd-419e-aed8-c8f229edd0cd)\r\n\r\n\r\n\r\n\r\n\r\n",
      "state": "closed",
      "author": "PaulCristina",
      "author_type": "User",
      "created_at": "2023-07-07T16:48:16Z",
      "updated_at": "2024-06-21T17:47:25Z",
      "closed_at": "2024-06-21T17:47:25Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/186/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/186",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/186",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.742644",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as `OpenSourceApp` is no longer available.",
          "created_at": "2024-06-21T17:47:25Z"
        }
      ]
    },
    {
      "issue_number": 141,
      "title": "Add support for scanned image pdf file",
      "body": "- opened on behalf of [twitter user kidgpt](https://twitter.com/kidgpt/status/1676583356904144896)",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-05T13:52:53Z",
      "updated_at": "2024-06-21T17:45:17Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "new-data-source",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/141/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/141",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/141",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.959988",
      "comments": []
    },
    {
      "issue_number": 55,
      "title": "Access Paid / login or gated content",
      "body": "some web pages are need login or paid,need curl to get content.i can create a PR",
      "state": "closed",
      "author": "guaguaguaxia",
      "author_type": "User",
      "created_at": "2023-06-25T03:21:08Z",
      "updated_at": "2024-06-21T17:43:31Z",
      "closed_at": "2024-06-21T17:43:31Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/55/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/55",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/55",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:48.960006",
      "comments": [
        {
          "author": "cachho",
          "body": "You might have to use a combination of requests, beautiful soup and the text data-type for the time being.",
          "created_at": "2023-07-10T14:53:06Z"
        },
        {
          "author": "cachho",
          "body": "Unless you are offering to take your time to do this, then of course that PR would be welcome.",
          "created_at": "2023-07-10T14:53:43Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Closing this issue as it's not needed as of now.",
          "created_at": "2024-06-21T17:43:31Z"
        }
      ]
    },
    {
      "issue_number": 690,
      "title": "Add support for lance db as vector database",
      "body": "### 🚀 The feature\n\n- add a new vector database\r\n- https://lancedb.com/\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:10:10Z",
      "updated_at": "2024-06-21T15:59:23Z",
      "closed_at": "2024-06-21T15:59:23Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/690/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/690",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/690",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:49.132174",
      "comments": [
        {
          "author": "SudhanshuJoshi09",
          "body": "Hey @taranjeet, Can I pick up this issue ? ",
          "created_at": "2023-10-03T10:27:42Z"
        },
        {
          "author": "shubham1234098",
          "body": "i am working on it 👍👍\r\n",
          "created_at": "2023-10-07T09:40:14Z"
        },
        {
          "author": "BlacPharaoh",
          "body": "Can I pick up this issue?\r\n\r\n",
          "created_at": "2023-10-07T18:03:39Z"
        }
      ]
    },
    {
      "issue_number": 1434,
      "title": "huggingface endpoint URL not implemented for embedder part of the config.yaml ",
      "body": "### 🐛 Describe the bug\n\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/schema.py\", line 409, in validate\r\n    raise SchemaError([message] + x.autos, [e.format(data) if e else None] + x.errors)\r\nschema.SchemaError: Key 'embedder' error:\r\nKey 'config' error:\r\nWrong key 'endpoint' in {'model': 'mixedbread-ai/mxbai-embed-large-v1', 'endpoint': 'https://api-inference.huggingface.co/models/mixedbread-ai/mxbai-embed-large-v1'}\r\nd\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-19T19:17:48Z",
      "updated_at": "2024-06-21T15:57:22Z",
      "closed_at": "2024-06-21T15:57:22Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1434/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1434",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1434",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:49.353276",
      "comments": []
    },
    {
      "issue_number": 1347,
      "title": "AzureOpenAI features not supported and are hard coded",
      "body": "### 🐛 Describe the bug\n\nIn the documentation and the code base there seems to be a discrepancy. In the documentation, it says to use the following environment variables while using AzureOpenAI services, but the name of the environment variables differs. Secondly, I was looking at the source code and it seems that the api version was hard coded. It would be nice to pull the from yaml config. Thirdly, I couldn't see the embedder for AzureOpenAI in the source code.\r\nThank you!",
      "state": "closed",
      "author": "neilbhutada",
      "author_type": "User",
      "created_at": "2024-04-28T03:14:10Z",
      "updated_at": "2024-06-17T15:47:29Z",
      "closed_at": "2024-06-17T15:47:29Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1347/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1347",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1347",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:49.353298",
      "comments": [
        {
          "author": "pratikkotian04",
          "body": "Facing same issue",
          "created_at": "2024-04-30T05:00:35Z"
        },
        {
          "author": "denaha",
          "body": "I was able to load the version from the YAML config, in the latest version, below an example how it worked.\r\n\r\n`os.environ[\"OPENAI_API_VERSION\"] = \"2024-02-01\"`",
          "created_at": "2024-05-22T19:37:27Z"
        },
        {
          "author": "PranavPuranik",
          "body": "I will take this up ",
          "created_at": "2024-06-12T02:53:17Z"
        },
        {
          "author": "PranavPuranik",
          "body": "@neilbhutada \r\n\r\nMy PR will fix the mismatch in the documentation for azure openai environment variables, and let you add `api_version` from the config.\r\n\r\nAzure OpenAI embedder is already present in the [code](https://github.com/embedchain/embedchain/blob/main/embedchain/embedder/openai.py#L23) and",
          "created_at": "2024-06-17T05:06:31Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@PranavPuranik Thanks for working on this. Yes, I agree that we should put `azure_openai` embedder in a different. \r\nThanks for opening a PR, I'll review it.",
          "created_at": "2024-06-17T09:16:35Z"
        }
      ]
    },
    {
      "issue_number": 212,
      "title": "[Feature] Add `wikipedia` as a `data_type`",
      "body": "Allow using `wikipedia` python library to parse Wikipedia pages more effectively.",
      "state": "closed",
      "author": "ianupamsingh",
      "author_type": "User",
      "created_at": "2023-07-10T08:59:27Z",
      "updated_at": "2024-06-17T09:20:23Z",
      "closed_at": "2024-06-17T09:20:23Z",
      "labels": [
        "enhancement",
        "good first issue",
        "new-data-source",
        "easy"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/212/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/212",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/212",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:49.645148",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Will have to close this as it has become stale and wikipedia can be handled by using `web_page` as the data type.",
          "created_at": "2024-06-17T09:20:23Z"
        }
      ]
    },
    {
      "issue_number": 385,
      "title": "feature request: youtube video in other language",
      "body": "### 🚀 The feature\n\nBeing able to use the \"youtube_video\" format in other language like for example 'French'. \r\nToday is not working when you put the link of a french youtube video.\r\nMaybe there is a way to define the target language for youtube audio transcription (using Langchain behind) but I've not found any mention about this in the documentation. \r\n\n\n### Motivation, pitch\n\nBe able to use the 'youtube_video' option with youtube video links not in English (by default) \n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "sinecode59",
      "author_type": "User",
      "created_at": "2023-07-31T09:10:30Z",
      "updated_at": "2024-06-14T06:02:38Z",
      "closed_at": "2024-06-14T06:02:38Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/385/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/385",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/385",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:51.727828",
      "comments": [
        {
          "author": "cachho",
          "body": "So you want it to be in a language that's not actually spoken in the video, you want to be able to choose from one of the available subtitles. Do I understand that correctly?",
          "created_at": "2023-08-02T17:32:13Z"
        },
        {
          "author": "avri-schneider",
          "body": "@cachho currently only `en` language is supported. `YoutubeLoader.from_youtube_url()` allows passing additional parameters (e.g., `language`), which currently `YoutubeVideoLoader.load_data()` doesn't pass, thus [.from_youtube_url()](https://github.com/langchain-ai/langchain/blob/733367b7954b9bb6c89b",
          "created_at": "2024-02-27T18:33:18Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @avri-schneider, thanks for reporting the issue. We would appreciate if you can put up a fix for this. Thanks! ",
          "created_at": "2024-02-27T18:34:41Z"
        },
        {
          "author": "avri-schneider",
          "body": "Hey @deshraj [the fix](https://github.com/embedchain/embedchain/pull/774) is there (provided by [Akemid](https://github.com/Akemid)), just needs to be merged, but [stalled](https://github.com/embedchain/embedchain/pull/774#issuecomment-1867537387) due to conflics :-/",
          "created_at": "2024-02-27T18:37:47Z"
        },
        {
          "author": "deshraj",
          "body": "Ah nice, thanks for bringing to my attention. Will review and merge shortly. ",
          "created_at": "2024-02-27T18:39:02Z"
        }
      ]
    },
    {
      "issue_number": 1419,
      "title": "obvious characters that are very common on huggingface not allowed",
      "body": "### 🐛 Describe the bug\n\n/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `HuggingFaceHub` was deprecated in LangChain 0.0.21 and will be removed in 0.3.0. Use HuggingFaceEndpoint instead.\r\n  warn_deprecated(\r\nError during chat: 1 validation error for HuggingFaceHub\r\n__root__\r\n  Repo id must use alphanumeric chars or '-', '_', '.', '--' and '..' are forbidden, '-' and '.' cannot start or end the name, max length is 96: 'Mistral-7B-v0.1:latest'. (type=value_error.hfvalidation)\r\n\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-12T19:16:56Z",
      "updated_at": "2024-06-13T13:40:57Z",
      "closed_at": "2024-06-13T13:40:57Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1419/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1419",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1419",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:51.983353",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@jonabert Please can you try upgrading huggingface_hub `pip install --upgrade huggingface_hub` and let us know if it works?",
          "created_at": "2024-06-13T11:50:57Z"
        },
        {
          "author": "jonabert",
          "body": "works",
          "created_at": "2024-06-13T13:40:57Z"
        }
      ]
    },
    {
      "issue_number": 1405,
      "title": "Issue on docs",
      "body": "Path: /examples/whatsapp_bot\r\n\r\nbelow is the code that returns this error\r\nerror:\r\n\r\npython -m embedchain.bots.whatsapp --port 5555\r\n<frozen runpy>:128: RuntimeWarning: 'embedchain.bots.whatsapp' found in sys.modules after import of package 'embedchain.bots', but prior to execution of 'embedchain.bots.whatsapp'; this may result in unpredictable behaviour\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/bots/whatsapp.py\", line 83, in <module>\r\n    start_command()\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/bots/whatsapp.py\", line 78, in start_command\r\n    whatsapp_bot = WhatsAppBot()\r\n                   ^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/bots/whatsapp.py\", line 25, in __init__\r\n    super().__init__()\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/bots/base.py\", line 15, in __init__\r\n    self.app = App(config=AppConfig(), llm=OpenAILlm(), db=ChromaDB(), embedding_model=OpenAIEmbedder())\r\n                                           ^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/llm/openai.py\", line 24, in __init__\r\n    super().__init__(config=config)\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/llm/base.py\", line 28, in __init__\r\n    self.memory = ChatHistory()\r\n                  ^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/memory/base.py\", line 16, in __init__\r\n    self.db_session = get_session()\r\n                      ^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/core/db/database.py\", line 84, in get_session\r\n    return database_manager.get_session()\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/core/db/database.py\", line 40, in get_session\r\n    raise RuntimeError(\"Session factory is not initialized. Call setup_engine() first.\")\r\nRuntimeError: Session factory is not initialized. Call setup_engine() first.\r\n\r\n\r\ncode:\r\n\r\nimport argparse\r\nimport importlib\r\nimport logging\r\nimport signal\r\nimport sys\r\n\r\nfrom embedchain.helpers.json_serializable import register_deserializable\r\n\r\nfrom .base import BaseBot\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\n@register_deserializable\r\nclass WhatsAppBot(BaseBot):\r\n    def __init__(self):\r\n        try:\r\n            self.flask = importlib.import_module(\"flask\")\r\n            self.twilio = importlib.import_module(\"twilio\")\r\n        except ModuleNotFoundError:\r\n            raise ModuleNotFoundError(\r\n                \"The required dependencies for WhatsApp are not installed. \"\r\n                'Please install with `pip install --upgrade \"embedchain[whatsapp]\"`'\r\n            ) from None\r\n        super().__init__()\r\n\r\n    def handle_message(self, message):\r\n        if message.startswith(\"add \"):\r\n            response = self.add_data(message)\r\n        else:\r\n            response = self.ask_bot(message)\r\n        return response\r\n\r\n    def add_data(self, message):\r\n        data = message.split(\" \")[-1]\r\n        try:\r\n            self.add(data)\r\n            response = f\"Added data from: {data}\"\r\n        except Exception:\r\n            logger.exception(f\"Failed to add data {data}.\")\r\n            response = \"Some error occurred while adding data.\"\r\n        return response\r\n\r\n    def ask_bot(self, message):\r\n        try:\r\n            response = self.query(message)\r\n        except Exception:\r\n            logger.exception(f\"Failed to query {message}.\")\r\n            response = \"An error occurred. Please try again!\"\r\n        return response\r\n   def start(self, host=\"0.0.0.0\", port=5000, debug=True):\r\n        app = self.flask.Flask(__name__)\r\n\r\n        def signal_handler(sig, frame):\r\n            logger.info(\"\\nGracefully shutting down the WhatsAppBot...\")\r\n            sys.exit(0)\r\n\r\n        signal.signal(signal.SIGINT, signal_handler)\r\n\r\n        @app.route(\"/chat\", methods=[\"POST\"])\r\n        def chat():\r\n            incoming_message = self.flask.request.values.get(\"Body\", \"\").lower()\r\n            response = self.handle_message(incoming_message)\r\n            twilio_response = self.twilio.twiml.messaging_response.MessagingResponse()\r\n            twilio_response.message(response)\r\n            return str(twilio_response)\r\n\r\n        app.run(host=host, port=port, debug=debug)\r\n\r\n\r\ndef start_command():\r\n    parser = argparse.ArgumentParser(description=\"EmbedChain WhatsAppBot command line interface\")\r\n    parser.add_argument(\"--host\", default=\"0.0.0.0\", help=\"Host IP to bind\")\r\n    parser.add_argument(\"--port\", default=5000, type=int, help=\"Port to bind\")\r\n    args = parser.parse_args()\r\n\r\n    whatsapp_bot = WhatsAppBot()\r\n    whatsapp_bot.start(host=args.host, port=args.port)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    start_command()\r\n\r\n\r\n\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-10T15:14:29Z",
      "updated_at": "2024-06-13T13:39:44Z",
      "closed_at": "2024-06-13T13:39:44Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1405/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1405",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1405",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.201324",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Hi @jonabert This PR #1401 will fix this issue.",
          "created_at": "2024-06-10T17:10:33Z"
        }
      ]
    },
    {
      "issue_number": 1417,
      "title": "huggingface download is not working properly in the full stack example, mean pooling not working",
      "body": "### 🐛 Describe the bug\n\n2024-06-12 20:20:12,332 - 126680270657344 - SentenceTransformer.py-SentenceTransformer:1298 - WARNING: No sentence-transformers model found with name nvidia/NV-Embed-v1:latest. Creating a new one with mean pooling.\r\nTraceback (most recent call last):\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/utils/hub.py\", line 399, in cached_file\r\n    resolved_file = hf_hub_download(\r\n                    ^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/huggingface_hub/utils/_validators.py\", line 106, in _inner_fn\r\n    validate_repo_id(arg_value)\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/huggingface_hub/utils/_validators.py\", line 160, in validate_repo_id\r\n    raise HFValidationError(\r\nhuggingface_hub.errors.HFValidationError: Repo id must use alphanumeric chars or '-', '_', '.', '--' and '..' are forbidden, '-' and '.' cannot start or end the name, max length is 96: 'nvidia/NV-Embed-v1:latest'.\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"/home/jonathan/programming/langer/kk/embedchain/my-app/api/main.py\", line 6, in <module>\r\n    from routes.admin import chat_history, data_sources, vector_stores\r\n  File \"/home/jonathan/programming/langer/kk/embedchain/my-app/api/routes/admin/chat_history.py\", line 5, in <module>\r\n    ec_app = App.from_config(config_path=\"/home/jonathan/config.yaml\")\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/app.py\", line 388, in from_config\r\n    embedding_model = EmbedderFactory.create(\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/factory.py\", line 81, in create\r\n    return embedder_class(config=embedder_config_class(**config_data))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/embedder/huggingface.py\", line 14, in __init__\r\n    embeddings = HuggingFaceEmbeddings(model_name=self.config.model)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/langchain_community/embeddings/huggingface.py\", line 72, in __init__\r\n    self.client = sentence_transformers.SentenceTransformer(\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/SentenceTransformer.py\", line 298, in __init__\r\n    modules = self._load_auto_model(\r\n              ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/SentenceTransformer.py\", line 1312, in _load_auto_model\r\n    transformer_model = Transformer(\r\n                        ^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/models/Transformer.py\", line 52, in __init__\r\n    config = AutoConfig.from_pretrained(model_name_or_path, **config_args, cache_dir=cache_dir)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/models/auto/configuration_auto.py\", line 934, in from_pretrained\r\n    config_dict, unused_kwargs = PretrainedConfig.get_config_dict(pretrained_model_name_or_path, **kwargs)\r\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/configuration_utils.py\", line 632, in get_config_dict\r\n    config_dict, kwargs = cls._get_config_dict(pretrained_model_name_or_path, **kwargs)\r\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/configuration_utils.py\", line 689, in _get_config_dict\r\n    resolved_config_file = cached_file(\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-12T18:23:33Z",
      "updated_at": "2024-06-13T13:39:28Z",
      "closed_at": "2024-06-13T13:39:28Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1417/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1417",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1417",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.378388",
      "comments": []
    },
    {
      "issue_number": 1412,
      "title": "bad request error when using GET query method of rest-api docker",
      "body": "\t\r\n\r\nError: Bad Request\r\nResponse body\r\n\r\n{\r\n  \"detail\": \"Error occurred: App.from_config() got an unexpected keyword argument 'config_path'\"\r\n}\r\n![image](https://github.com/embedchain/embedchain/assets/5072157/15e0d72c-2800-4fe7-b741-123e881bdb8e)\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-11T17:08:36Z",
      "updated_at": "2024-06-13T13:35:44Z",
      "closed_at": "2024-06-13T13:35:44Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1412/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1412",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1412",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.378406",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@jonabert Please try upgrading embedchain to the latest version. Let us know if it doesn't work.",
          "created_at": "2024-06-13T11:46:22Z"
        }
      ]
    },
    {
      "issue_number": 1418,
      "title": "HF_HUB_CACHE not present (see error message)",
      "body": "### 🐛 Describe the bug\n\nDone in 0.13s.\r\n✅ UI server started successfully.\r\nyarn run v1.22.22\r\n$ next dev\r\n   ▲ Next.js 14.1.0\r\n   - Local:        http://localhost:3000\r\n   - Environments: .env.local\r\n\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"/home/jonathan/programming/langer/kk/embedchain/my-app/api/main.py\", line 6, in <module>\r\n    from routes.admin import chat_history, data_sources, vector_stores\r\n  File \"/home/jonathan/programming/langer/kk/embedchain/my-app/api/routes/admin/chat_history.py\", line 5, in <module>\r\n    ec_app = App.from_config(config_path=\"/home/jonathan/config.yaml\")\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/app.py\", line 388, in from_config\r\n    embedding_model = EmbedderFactory.create(\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/factory.py\", line 81, in create\r\n    return embedder_class(config=embedder_config_class(**config_data))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/embedchain/embedder/huggingface.py\", line 14, in __init__\r\n    embeddings = HuggingFaceEmbeddings(model_name=self.config.model)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/langchain_community/embeddings/huggingface.py\", line 64, in __init__\r\n    import sentence_transformers\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/__init__.py\", line 7, in <module>\r\n    from sentence_transformers.cross_encoder.CrossEncoder import CrossEncoder\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/cross_encoder/__init__.py\", line 1, in <module>\r\n    from .CrossEncoder import CrossEncoder\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/sentence_transformers/cross_encoder/CrossEncoder.py\", line 12, in <module>\r\n    from transformers import AutoConfig, AutoModelForSequenceClassification, AutoTokenizer, is_torch_npu_available\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/__init__.py\", line 26, in <module>\r\n    from . import dependency_versions_check\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/dependency_versions_check.py\", line 16, in <module>\r\n    from .utils.versions import require_version, require_version_core\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/utils/__init__.py\", line 63, in <module>\r\n    from .hub import (\r\n  File \"/home/jonathan/anaconda3/envs/embedch/lib/python3.12/site-packages/transformers/utils/hub.py\", line 96, in <module>\r\n    PYTORCH_PRETRAINED_BERT_CACHE = os.getenv(\"PYTORCH_PRETRAINED_BERT_CACHE\", constants.HF_HUB_CACHE)\r\n                                                                               ^^^^^^^^^^^^^^^^^^^^^^\r\nAttributeError: module 'huggingface_hub.constants' has no attribute 'HF_HUB_CACHE'\r\n ✓ Ready in 2.2s\r\n",
      "state": "closed",
      "author": "jonabert",
      "author_type": "User",
      "created_at": "2024-06-12T18:39:40Z",
      "updated_at": "2024-06-13T13:35:18Z",
      "closed_at": "2024-06-13T13:35:18Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1418/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1418",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1418",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.582014",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@jonabert Can you please try `pip install --upgrade huggingface_hub`, let us know if it works?",
          "created_at": "2024-06-13T11:40:32Z"
        },
        {
          "author": "jonabert",
          "body": "works",
          "created_at": "2024-06-13T13:35:18Z"
        }
      ]
    },
    {
      "issue_number": 1335,
      "title": "Audio Files",
      "body": "### 🚀 The feature\n\nOverview\r\nThe Voice-Interactive Transcription and Query (VITQ) System is a revolutionary feature designed to seamlessly integrate with Embedchain, enhancing its capabilities by allowing direct interaction with audio content. This system transforms audio files (e.g., MP3, WAV) into transcribed text and makes this text interactable via a sophisticated Language Model (LLM) for question answering (Q&A) purposes. It bridges the gap between auditory content and textual analysis, enabling users to extract insights, search for information, and interact with audio files as they would with a text document.\r\n\r\nKey Features\r\nAudio to Text Transcription: Automatically converts audio files into accurate, searchable text transcripts, using advanced speech recognition technology.\r\n\r\nLanguage Model Integration: Employs a state-of-the-art LLM to process the transcribed text, allowing users to ask questions and receive answers directly from the content of the audio file.\r\n\r\nHigh Accuracy and Speed: Utilizes cutting-edge algorithms to ensure high transcription accuracy and fast processing times, making the system efficient and user-friendly.\r\n\r\nSeamless Embedchain Integration: Designed as a plug-and-play feature for Embedchain, ensuring easy installation and compatibility with existing projects.\r\n\r\nOpen Source and Community-Driven: As part of the open-source Embedchain project, VITQ benefits from continuous improvement and innovation driven by the community.\r\n\r\nUse Cases\r\nEducational Content: Students and educators can query lecture recordings or educational podcasts for specific information, enhancing learning and research.\r\n\r\nBusiness Meetings: Professionals can transcribe meetings and interact with the content to find discussions on particular topics, decisions made, and action items.\r\n\r\nPodcasts and Interviews: Journalists, researchers, and the general public can extract information from interviews and podcasts without listening to the entire recording.\r\n\r\nAccessibility: Makes audio content more accessible to individuals with hearing impairments or those who prefer reading over listening.\r\n\r\nTechnical Overview\r\nInput Compatibility: Accepts a wide range of audio file formats, including MP3 and WAV.\r\n\r\nSpeech Recognition Engine: Leverages an advanced speech-to-text engine for accurate transcription.\r\n\r\nLLM Processing: Integrates with a powerful LLM for efficient and accurate text-based querying.\r\n\r\nUser Interface: Offers a user-friendly interface for uploading audio files, viewing transcripts, and interacting with the LLM.\r\n\r\nAPI Access: Provides API endpoints for automating transcription and queries, facilitating integration with other applications and services.\r\n\r\nConclusion\r\nThe Voice-Interactive Transcription and Query System is more than just a feature; it's a gateway to unlocking the full potential of audio content. By combining the convenience of text with the richness of audio, we're not just enhancing the Embedchain project; we're redefining the way we interact with information in the digital age. Join us in this exciting journey and be a part of the future today.\n\n### Motivation, pitch\n\nMotivation Pitch:\r\n\r\nIn today's rapidly evolving digital landscape, the power of voice is undeniable. From voice assistants to podcasts, the spoken word has become a key medium for communication and information sharing. However, the wealth of knowledge and insights contained within audio files remains largely untapped, locked behind the barrier of format. This is where our groundbreaking feature comes into play. Imagine being able to interact with audio content as easily as you would with a text document, extracting information, asking questions, and even conducting in-depth analysis. This is not just an enhancement; it's a revolution. By integrating this feature into Embedchain, we're not just upgrading a tool; we're transforming the way we access and interact with information. We're bridging the gap between the audio and text worlds, unlocking a universe of possibilities for developers, researchers, and content creators alike. Join us as we make this vision a reality, and turn the spoken word into an accessible, interactive treasure trove of knowledge.",
      "state": "closed",
      "author": "Praj-17",
      "author_type": "User",
      "created_at": "2024-04-04T20:35:11Z",
      "updated_at": "2024-06-12T17:26:00Z",
      "closed_at": "2024-06-12T17:26:00Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1335/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1335",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1335",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.764550",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@deshraj Can we add this? I could get started working on it. we can take reference of [marvin](https://github.com/PrefectHQ/marvin)",
          "created_at": "2024-04-12T10:53:54Z"
        },
        {
          "author": "Praj-17",
          "body": "Hi I just got to know , Google [Gemini](https://deepmind.google/technologies/gemini/#introduction) and [AudioGPT](https://github.com/AIGC-Audio/AudioGPT/blob/main/run.md) Some free (not sure if opensource) tools that already implement the same.",
          "created_at": "2024-04-13T03:23:13Z"
        }
      ]
    },
    {
      "issue_number": 1156,
      "title": "Add support for json mode for OpenAI LLMs",
      "body": "### 🚀 The feature\n\nRequested by a user on slack: \r\n\r\n<img width=\"497\" alt=\"Screenshot 2024-01-11 at 12 58 28 AM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/b0d9f92d-d7de-496e-8925-d7cb1d77574e\">\r\n\r\nhttps://embedchain.slack.com/archives/C05RG7CJKC6/p1704906334878579\r\n\r\nDocs: https://community.openai.com/t/how-do-i-use-the-new-json-mode/475890\n\n### Motivation, pitch\n\nProvide support for all features offered by OpenAI llms.",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2024-01-10T19:29:58Z",
      "updated_at": "2024-06-11T18:20:05Z",
      "closed_at": "2024-06-11T18:20:05Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1156/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1156",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1156",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:52.980151",
      "comments": [
        {
          "author": "Praj-17",
          "body": "Hi is this implemented, yet? I would want to implement it if it is not done.",
          "created_at": "2024-02-18T10:26:36Z"
        },
        {
          "author": "hardik1408",
          "body": "@deshraj can I try implementing this issue?",
          "created_at": "2024-03-12T13:06:02Z"
        }
      ]
    },
    {
      "issue_number": 1069,
      "title": "Add txt file as the new data loader",
      "body": "### 🚀 The feature\n\nThere should be a data loader to read txt files\n\n### Motivation, pitch\n\nSupport wider category of data",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-12-28T14:47:36Z",
      "updated_at": "2024-06-11T06:04:03Z",
      "closed_at": "2024-06-11T06:04:03Z",
      "labels": [
        "documentation",
        "new-data-source",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1069/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1069",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1069",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:53.197513",
      "comments": [
        {
          "author": "eren-darici",
          "body": "Hey! I think somebody already added.",
          "created_at": "2024-01-04T23:55:48Z"
        },
        {
          "author": "Dev-Khant",
          "body": "It's already added https://github.com/embedchain/embedchain/blob/main/embedchain/loaders/text_file.py.\r\nDocumentation is remaining.",
          "created_at": "2024-06-02T09:07:13Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Fixed here #1410 ",
          "created_at": "2024-06-11T06:04:03Z"
        }
      ]
    },
    {
      "issue_number": 1338,
      "title": "Getting Input validation error while using \"Chat\" function of embedchain",
      "body": "### 🐛 Describe the bug\n\nHere is my code which is producing the error.\r\n```\r\nimport os\r\nfrom embedchain import App\r\n\r\n# Replace this with your OpenAI key\r\nos.environ[\"OPENAI_API_KEY\"] = \"sk-AFj3XbMaBfuTjzAsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n\r\napp = App()\r\napp.add(\"https://www.forbes.com/profile/elon-musk\")\r\napp.add(\"https://en.wikipedia.org/wiki/Elon_Musk\")\r\napp.query(\"What is the net worth of Elon Musk today?\")\r\n\r\nanswer, sources = app.chat(\"What is the net worth of Elon?\", citations=True)\r\nprint(answer)\r\nprint(sources)\r\n```\r\nWhen I am using the `chat()` method to query from data source then throwing an error of rate limit as here : \r\n`'Request too large for gpt-3.5-turbo in organization org-PzDzUDWjyxxxxxxxxxxxxxxxx on tokens per min (TPM): Limit 40000, Requested 55065. The input or output tokens must be reduced in order to run successfully.`\r\n\r\nThis same error is not produced while using `search()` or `query()` function for query from data source.\r\n\r\nHere is full log:\r\nFile \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python312\\site-packages\\openai\\_base_client.py\", line 1013, in _request\r\n    raise self._make_status_error_from_response(err.response) from None\r\nopenai.RateLimitError: Error code: 429 - {'error': {'message': 'Request too large for gpt-3.5-turbo in organization org-PzDzUDWjyxxxxxxxxxxxxx on tokens per min (TPM): Limit 40000, Requested 55065. The input or output tokens must be \r\nreduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more. You can increase your rate limit by adding a payment method to your account at https://platform.openai.com/account/billing.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}\r\n",
      "state": "closed",
      "author": "mdevs7",
      "author_type": "User",
      "created_at": "2024-04-13T16:09:39Z",
      "updated_at": "2024-06-10T17:24:54Z",
      "closed_at": "2024-06-10T17:24:53Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1338/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1338",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1338",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:53.371232",
      "comments": [
        {
          "author": "LeonieFreisinger",
          "body": "@mdevs7 Have you solved the error yet? \r\nI ran your code but did not run into an error. \r\nIn case it still occurs, have you updated to the latest embedchain and openai version? ",
          "created_at": "2024-04-28T22:46:13Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@mdevs7 Closing this issue as it's not faced in the latest embedchain version and it looks like issue is more related to your Openai API limits.\r\nThis might help you: https://community.openai.com/t/rate-limit-error-tier-2-account-rate-limit-issues-with-gpt-3-5-turbo/577906/4",
          "created_at": "2024-06-10T17:24:53Z"
        }
      ]
    },
    {
      "issue_number": 1280,
      "title": "Session factory is not initialized",
      "body": "### 🐛 Describe the bug\n\nI try to use App.from_config(config={...}), and I got this issue:\r\n\r\nRuntimeError: Session factory is not initialized. Call setup_engine() first.\r\n\r\nIs there any setting I missed? I run on local MacBook, and the version of embedchain is 0.1.83",
      "state": "open",
      "author": "westonli-thu",
      "author_type": "User",
      "created_at": "2024-02-22T02:29:40Z",
      "updated_at": "2024-06-10T17:14:16Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1280/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1280",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1280",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:53.615330",
      "comments": [
        {
          "author": "deshraj",
          "body": "Thanks for reporting @westonli-thu. I am looking into this issue now. ",
          "created_at": "2024-02-22T07:14:09Z"
        },
        {
          "author": "deshraj",
          "body": "@westonli-thu can you please share the code that you are trying to use? ",
          "created_at": "2024-02-22T07:38:57Z"
        },
        {
          "author": "deshraj",
          "body": "I tried to reproduce the issue on Google colab but it seems to be working fine. See Colab: https://colab.research.google.com/drive/1NMkAxTdHj-G4epFb9I6fMFX8tVPL7tn5?usp=sharing\r\n\r\nCode below:\r\n\r\n```python\r\nimport os\r\n\r\nos.environ['OPENAI_API_KEY'] = 'sk-xxx'\r\n\r\nfrom embedchain import App\r\n\r\n\r\nconfig",
          "created_at": "2024-02-22T07:42:28Z"
        },
        {
          "author": "Omotade-MY",
          "body": "I am have a similar error\r\n\r\n\r\nhere is all I did\r\n\r\n```python\r\nfrom embedchain.config import BaseLlmConfig\r\nfrom embedchain.llm.openai import OpenAILlm\r\nfrom embedchain import App\r\nfrom dotenv import load_dotenv\r\n_ = load_dotenv()\r\nbase_llm_config = BaseLlmConfig(prompt=prompt)\r\nllm = OpenAILlm(conf",
          "created_at": "2024-04-01T09:35:40Z"
        },
        {
          "author": "Dev-Khant",
          "body": "This PR #1401 should fix this issue.",
          "created_at": "2024-06-10T17:14:15Z"
        }
      ]
    },
    {
      "issue_number": 1369,
      "title": "ImportError: cannot import name 'MessageContentText' from 'openai.types.beta.threads'",
      "body": "### 🐛 Describe the bug\n\n### Issue: ImportError with OpenAI Version > 1.13.4\r\n\r\n#### Description:\r\nWhen using OpenAI version > 1.13.4 in pip dependencies, the following error occurs:\r\n\r\n```\r\nImportError: cannot import name 'MessageContentText' from 'openai.types.beta.threads'\r\n```\r\n\r\nThis error arises because `MessageContentText` is not present in `openai.types.beta.threads`.\r\n\r\n#### Steps to Reproduce:\r\n1. Use OpenAI assistants.\r\n2. Import `OpenAIAssistant` using:\r\n   ```python\r\n   from embedchain.store.assistants import OpenAIAssistant\r\n   ```\r\n3. The error mentioned above will be triggered.\r\n\r\nPlease ensure the OpenAI version in your dependencies is <= 1.13.4 to avoid this issue.",
      "state": "closed",
      "author": "utkarsh27a",
      "author_type": "User",
      "created_at": "2024-05-16T13:33:14Z",
      "updated_at": "2024-06-08T17:07:53Z",
      "closed_at": "2024-06-08T17:07:53Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1369/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1369",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1369",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:53.790588",
      "comments": [
        {
          "author": "jstnmthw",
          "body": "It looks like they changed up the typing to do unions of Image and Text on `MessageContent`\r\n\r\nYou can take a look at these types: MessageContent and TextContentBlock\r\n\r\n```\r\nfrom openai.types.beta.threads.message_content import MessageContent\r\nfrom openai.types.beta.threads.text_content_block impor",
          "created_at": "2024-05-23T10:52:07Z"
        }
      ]
    },
    {
      "issue_number": 776,
      "title": "Bug: Vector DB Query methods should take in a string and not list[str] for input_query argument",
      "body": "### 🐛 Describe the bug\n\nFor all the vectordb classes (<[embedchain/vectordb/...>]), the `query` function argument is a bit out of place. The argument `input_query` should be a string, but is instead a list of strings, impacting the readability of the code. ",
      "state": "closed",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-10-07T16:46:53Z",
      "updated_at": "2024-06-07T16:15:42Z",
      "closed_at": "2024-06-07T16:15:42Z",
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/776/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/776",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/776",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:53.991842",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Can I pick this up? @rupeshbansal ",
          "created_at": "2023-10-09T04:17:00Z"
        }
      ]
    },
    {
      "issue_number": 193,
      "title": "Update stale doc strings",
      "body": "In embedchain/embedchain.py, there are some doc strings which have become stale. Eg\r\n\r\n```\r\nclass App(EmbedChain):\r\n    \"\"\"\r\n    The EmbedChain app.\r\n    Has two functions: add and query.\r\n\r\n    adds(data_type, url): adds the data from the given URL to the vector db.\r\n    query(query): finds answer to the given query using vector database and LLM.\r\n    dry_run(query): test your prompt without consuming tokens.\r\n    \"\"\"\r\n```\r\n\r\nThis issue is about going through all the doc strings in this file and updating/improving all the doc strings.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-08T04:36:05Z",
      "updated_at": "2024-06-05T17:44:10Z",
      "closed_at": "2024-06-05T17:44:10Z",
      "labels": [
        "documentation",
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/193/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/193",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/193",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.239527",
      "comments": [
        {
          "author": "rajveer43",
          "body": "would like to work on this\r\n",
          "created_at": "2023-08-31T10:41:35Z"
        }
      ]
    },
    {
      "issue_number": 467,
      "title": "feat request: include metadata in prompt - add links to prompt to show references",
      "body": "### 🚀 The feature\n\nIs there a plan to provide links from which embedded chunk was given?\r\nIt would make the response better as we could reference and show the links in response as well.\r\nI saw internally in embeddings_queue we do store the link in metadata\n\n### Motivation, pitch\n\nI am creating a bot for content written from writers and want to show original posts in the bot response.",
      "state": "open",
      "author": "ishaan1995",
      "author_type": "User",
      "created_at": "2023-08-23T13:33:49Z",
      "updated_at": "2024-06-04T03:20:47Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/467/reactions",
        "total_count": 6,
        "+1": 6,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/467",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/467",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.435846",
      "comments": [
        {
          "author": "cachho",
          "body": "including meta_data is definitely on the roadmap, in more capabilities than this.\r\n\r\nI can't speak for an ETA.",
          "created_at": "2023-08-24T21:14:07Z"
        },
        {
          "author": "cachho",
          "body": "If anyone implements this, please add a template variable and make it configurable as such. ",
          "created_at": "2023-08-30T12:35:23Z"
        },
        {
          "author": "justinlevi",
          "body": "Would love to try this framework out, but this is currently a deal breaker for me. ",
          "created_at": "2023-08-30T14:45:40Z"
        },
        {
          "author": "denisj",
          "body": "> If anyone implements this, please add a template variable and make it configurable as such.\r\n\r\n@cachho Why do you mean by template variable?\r\n\r\nCould it be something like query and query_with_metadata?",
          "created_at": "2023-09-29T13:03:46Z"
        },
        {
          "author": "smach",
          "body": "> Would love to try this framework out, but this is currently a deal breaker for me.\r\n\r\nAgree! Users need the ability to see original document chunks  in order to check for accuracy (as well as possibly learn more about their question). Embedchain looks very useful , but I won't deploy RAG apps inte",
          "created_at": "2024-01-15T14:35:04Z"
        }
      ]
    },
    {
      "issue_number": 1144,
      "title": "Add support for providing different base url for OpenAI llm and embedding model",
      "body": "### 🚀 The feature\n\nRequested by user San Nguyen on Discord: https://discord.com/channels/1121119078191480945/1125758905310519327/1193453420921765888\r\n\r\n<img width=\"787\" alt=\"Screenshot 2024-01-08 at 11 47 07 PM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/f1ca9698-5981-4867-8f63-30c6ad4f3f08\">\r\n\n\n### Motivation, pitch\n\nIt is possible that the embedding model might be running on different OpenAI account than that of LLM. Hence, we want to add support for configurable base url for both llm and embedding model. ",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2024-01-08T18:18:51Z",
      "updated_at": "2024-06-03T17:02:37Z",
      "closed_at": "2024-06-03T17:02:36Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1144/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1144",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1144",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.644609",
      "comments": [
        {
          "author": "deshraj",
          "body": "This is fixed. Hence closing the issue. Please feel free to reopen if doesn't work.",
          "created_at": "2024-06-03T17:02:36Z"
        }
      ]
    },
    {
      "issue_number": 1368,
      "title": "Add the feature to have custom config ",
      "body": "### 🚀 The feature\n\nAdd support for validating and accepting custom config class schema \n\n### Motivation, pitch\n\nCurrently, there is very less support for custom config classes, however, we can not fully generalised that all provider or object will have same configurations. There could be additonal configs or may be same configs but names might be changes. \r\n\r\nOne way to solve this is to inherit from the `BaseConfigClass` and then make a custom config class. However, the schema validation code does not supports validating custom config. \r\n",
      "state": "open",
      "author": "Anindyadeep",
      "author_type": "User",
      "created_at": "2024-05-16T11:48:45Z",
      "updated_at": "2024-06-02T09:49:51Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1368/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1368",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1368",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.842907",
      "comments": []
    },
    {
      "issue_number": 1366,
      "title": "Add PremAI Python SDK",
      "body": "### 🚀 The feature\n\nAdd the integration of premai python sdk so that developers can run embedchain using premai. \n\n### Motivation, pitch\n\n[Prem AI](https://premai.io/) is a generative AI platform that lets developers seamlessly integrate generative AI solutions (LLM generation, fine-tuning, RAGs, etc) in best way possible.\r\n\r\nThis issue proposes to add it inside the dspy modules.",
      "state": "open",
      "author": "Anindyadeep",
      "author_type": "User",
      "created_at": "2024-05-15T11:41:30Z",
      "updated_at": "2024-06-02T09:49:27Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1366/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1366",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1366",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.842928",
      "comments": []
    },
    {
      "issue_number": 1333,
      "title": "Unable to install embedchain on manjaro",
      "body": "### 🐛 Describe the bug\n\n```bash\r\nsudo pacman -Syu python-embedchain\r\n```\r\ntried the above code.\r\n\r\n```bash\r\nerror: target not found: python-embedchain\r\n```\r\nerror received. \r\nlooks like pacman cannot identify embedchain as a python package",
      "state": "open",
      "author": "hardik1408",
      "author_type": "User",
      "created_at": "2024-03-30T22:33:37Z",
      "updated_at": "2024-06-02T09:40:11Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1333/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1333",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1333",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:54.842938",
      "comments": [
        {
          "author": "peterj",
          "body": "I don't think the embedchain package is published to AUR (as it probably can't be published to the official Manjaro repo). You could try git cloning the repo and building/install it directly.",
          "created_at": "2024-04-10T22:20:48Z"
        }
      ]
    },
    {
      "issue_number": 1328,
      "title": "[qdrant] is not a valid point ID, valid values are either an unsigned in",
      "body": "### 🐛 Describe the bug\r\n* macbook pro m2pro\r\n* embedchain    0.1.98\r\n* Python 3.12.2\r\n\r\n\r\n```python\r\nimport os\r\n\r\nfrom embedchain import App\r\n\r\nos.environ[\"OPENAI_API_KEY\"] = \"xxx\"\r\nos.environ[\"QDRANT_URL\"] = \"xxx\"\r\nos.environ[\"QDRANT_API_KEY\"] = \"xxx\"\r\n\r\nconfig = {\r\n    \"vectordb\": {\r\n        \"provider\": \"qdrant\",\r\n        \"config\": {\r\n            \"collection_name\": \"my_qdrant_index\"\r\n        },\r\n    }\r\n}\r\n\r\napp = App.from_config(config=config)\r\napp.add(\"https://www.forbes.com/profile/elon-musk\")\r\n\r\n\r\n```\r\n\r\n```\r\nAdding data in batches:   0%|          | 0/1 [00:01<?, ?it/s]\r\nFailed to add batch due to a bad request: Unexpected Response: 400 (Bad Request)\r\nRaw response content:\r\nb'{\"status\":{\"error\":\"Format error in JSON body: value default-app-id--a2bfb0ef8be8b851f353cb52bc2cbd0b3bb649a7c4499c1404c8098b2c819157 is not a valid point ID, valid values are either an unsigned in ...'\r\nSuccessfully saved https://www.forbes.com/profile/elon-musk (DataType.WEB_PAGE). New chunks count: 0\r\n\r\n```\r\n\r\n<img width=\"1369\" alt=\"image\" src=\"https://github.com/embedchain/embedchain/assets/16333372/4c15dafc-4d5f-4e67-b95e-1ab33a864e5a\">\r\n\r\n\r\n[ id  string uuid\r\nType, used for specifying point ID in user interface](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/upsert_points)\r\n\r\n[chunk_id](https://github.com/embedchain/embedchain/blob/85ec61335a1e9e0b0f4313f5dd67242be08c0a5a/embedchain/chunkers/base_chunker.py#L55)\r\n\r\n",
      "state": "open",
      "author": "JerryJiangjjw",
      "author_type": "User",
      "created_at": "2024-03-21T15:51:15Z",
      "updated_at": "2024-06-02T09:37:33Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1328/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1328",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1328",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.076186",
      "comments": []
    },
    {
      "issue_number": 1291,
      "title": "Try to share app.config.id with two programs with no success with huggingface (embedchain 0.1.88)",
      "body": "### 🐛 Describe the bug\n\nI try to share documents with no success with huggingface\r\n\r\niwprog.yaml:\r\n```\r\napp:\r\n  config:\r\n    id: 'my-appli-1'\r\nllm:\r\n  provider: huggingface\r\n  config:\r\n    model: 'mistralai/Mistral-7B-Instruct-v0.2'\r\n    top_p: 0.5\r\n\r\nembedder:\r\n  provider: huggingface\r\n  config:\r\n    model: 'sentence-transformers/all-mpnet-base-v2'\r\n\r\nvectordb:\r\n  provider: chroma\r\n  config:\r\n    collection_name: 'program-collection'\r\n    dir: dbprog\r\n    allow_reset: true\r\n```\r\naddpdf.py:\r\n```\r\nimport os\r\nos.environ[\"HUGGINGFACE_ACCESS_TOKEN\"] = \"hf_token\"\r\n\r\nfrom embedchain import App\r\napp = App.from_config(\"iwprog.yaml\")\r\n\r\napp.reset()\r\nPDF_FILE =  os.path.join(os.getcwd(), 'mypdf.pdf')\r\napp.add(PDF_FILE)\r\n```\r\nAll is ok to read pdf\r\n\r\nprog3.chat.py:\r\n```\r\nimport os\r\nos.environ[\"HUGGINGFACE_ACCESS_TOKEN\"] = \"hf_token\"\r\n\r\nfrom embedchain import App\r\n\r\napp = App.from_config(config={\r\n  \"app\": {\r\n    \"config\": {\r\n      # this will persist and load data from app1 session\r\n      \"id\": \"my-appli-1\",\r\n    }\r\n  }\r\n})\r\n\r\nwhile True:\r\n    user_input = input(\"Enter your question (type 'exit' to quit): \")\r\n\r\n    # Break the loop if the user types 'exit'\r\n    if user_input.lower() in ['q', 'exit', 'quit']:\r\n        break\r\n\r\n    # Process the input and provide a response\r\n    response = app.chat(user_input)\r\n    print(response)\r\n```\r\n\r\nI have an error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"E:\\pythonProjects\\ec_programs\\prog3.chat.py\", line 10, in <module>\r\n    app = App.from_config(config={\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\pythonProjects\\ec_programs\\.venv\\Lib\\site-packages\\embedchain\\app.py\", line 394, in from_config\r\n    embedding_model = EmbedderFactory.create(\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\pythonProjects\\ec_programs\\.venv\\Lib\\site-packages\\embedchain\\factory.py\", line 75, in create\r\n    return embedder_class(config=embedder_config_class(**config_data))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"E:\\pythonProjects\\ec_programs\\.venv\\Lib\\site-packages\\embedchain\\embedder\\openai.py\", line 19, in __init__\r\n    api_key = self.config.api_key or os.environ[\"OPENAI_API_KEY\"]\r\n                                     ~~~~~~~~~~^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen os>\", line 685, in __getitem__\r\nKeyError: 'OPENAI_API_KEY'\r\n```\r\n",
      "state": "open",
      "author": "PhilFlash",
      "author_type": "User",
      "created_at": "2024-02-28T21:14:06Z",
      "updated_at": "2024-06-02T09:34:21Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1291/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1291",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1291",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.076205",
      "comments": []
    },
    {
      "issue_number": 1285,
      "title": "Add support to pass Callback Handlers",
      "body": "### 🚀 The feature\n\nLangchain supports callbacks to be passed to the function invoking the LLM. Support passing these to Langchain.\n\n### Motivation, pitch\n\nThis allows tools like Chainlit to display step by step outputs.\r\n\r\n```\r\n@cl.on_message\r\nasync def on_message(message: cl.Message):\r\n    runnable = cl.user_session.get(\"runnable\")  # type: Runnable\r\n\r\n    msg = cl.Message(content=\"\")\r\n\r\n    async for chunk in runnable.astream(\r\n        {\"question\": message.content},\r\n        config=RunnableConfig(callbacks=[cl.LangchainCallbackHandler()]),\r\n    ):\r\n        await msg.stream_token(chunk)\r\n\r\n    await msg.send()\r\n   ```",
      "state": "open",
      "author": "ramnathv",
      "author_type": "User",
      "created_at": "2024-02-26T05:14:11Z",
      "updated_at": "2024-06-02T09:33:59Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1285/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1285",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1285",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.076211",
      "comments": [
        {
          "author": "deshraj",
          "body": "Thank you for opening this issue, @ramnathv! We're looking into it. 🌟\r\n\r\nIf you're interested, we'd welcome your contribution on this. Feel free to ask for any guidance you need.\r\n\r\nHappy coding! 🚀",
          "created_at": "2024-02-27T18:42:28Z"
        }
      ]
    },
    {
      "issue_number": 1271,
      "title": "DOC: Following Quick Start and Im facing a lot of issues",
      "body": "### Issue with current documentation:\r\n\r\nHaving a very buggy experience, \r\n\r\nTried following Mistral-\r\n```\r\nimport os\r\n\r\nhf_token = \"api_key\"\r\nos.environ[\"HUGGINGFACE_ACCESS_TOKEN\"] = hf_token\r\n\r\nfrom embedchain import App\r\n\r\napp = App.from_config(\"mistral.yaml\")\r\napp.add(\"https://www.forbes.com/profile/elon-musk\")\r\napp.add(\"https://en.wikipedia.org/wiki/Elon_Musk\")\r\napp.query(\"What is the net worth of Elon Musk today?\")\r\n# Answer: The net worth of Elon Musk today is $258.7 billion.\r\n\r\n```\r\nResponse - \r\n\r\n```\r\n\"\\n  Use the following pieces of context to answer the query at the end.\\n  If you don't know the answer, just say that you don't know, don't try to make up an answer.\\n\\n  billion as of December 2023[update], according to the Bloomberg Billionaires Index, and $182.6 billion according to Forbes, primarily from his ownership stakes in Tesla and SpaceX.[5][6][7] A member of the wealthy South African Musk family, Elon was born in Pretoria and briefly attended the University of Pretoria before immigrating to Canada at age 18, acquiring citizenship through his Canadian-born mother. Two years later, he matriculated at Queen's University at Kingston in Canada. Musk later transferred to the University of Pennsylvania, and received bachelor's degrees in economics and physics. He moved to California in 1995 to attend Stanford University, but dropped out after two days and, with his brother Kimbal, co-founded online city guide software company Zip2. The startup was acquired by Compaq for $307 million in 1999, and, that same year Musk co-founded X.com, a direct bank. X.com merged with Confinity in 2000 to form PayPal. In October 2002, eBay acquired PayPal for $1.5 billion, and that same year, with $100 million of the money he made, Musk founded SpaceX, a spaceflight services company. In 2004, he became an early investor in electric vehicle manufacturer Tesla Motors, Inc. (now Tesla, Inc.). He became its chairman and product architect, assuming the position of CEO in 2008. In 2006, Musk helped create SolarCity, a solar-energy company that was acquired by Tesla in 2016 and became Tesla Energy. In 2013, he proposed a hyperloop high-speed vactrain transportation system. In 2015, he co-founded OpenAI, a nonprofit artificial intelligence research company. The following year, Musk co-founded Neuralink—a neurotechnology company developing brain–computer interfaces—and the Boring Company, a tunnel construction company. In 2022, he acquired Twitter for $44 billion. He subsequently merged the company into newly created X Corp. and rebranded the service as X the following year. In March 2023, he founded xAI, an artificial intelligence company. Musk has | landed.[313][314][315] This led to Musk banning the ElonJet account on Twitter, as well as the accounts of journalists that posted stories regarding the incident, including Donie O'Sullivan, Keith Olbermann, and journalists from The New York Times, The Washington Post, CNN, and The Intercept.[316] Musk equated the reporting to doxxing.[317] Police do not believe there is a link between the account and alleged stalker.[318] Musk later took a Twitter poll on whether the journalists' accounts should be reinstated, which resulted in reinstating the accounts.[319] Wealth Net worth Musk's net worth from 2013 to 2023 as estimated by Forbes magazine Musk made $175.8 million when PayPal was sold to eBay in October 2002.[320] He was first listed on the Forbes Billionaires List in 2012, with a net worth of $2 billion.[321] At the start of 2020, Musk had a net worth of $27 billion.[322] By the end of the year his net worth had increased by $150 billion, mostly driven by his ownership of around 20% of Tesla stock.[323] During this period, Musk's net worth was often volatile. For example, it dropped $16.3 billion on September 8, the largest single-day plunge in Bloomberg Billionaires Index's history at the time.[324] In November of that year, Musk passed Facebook co-founder Mark Zuckerberg to become the third-richest person in the world; a week later he passed Microsoft co-founder Bill Gates to become the second-richest.[325] In January 2021, Musk, with a net worth of $185 billion, surpassed Amazon founder Jeff Bezos to become the richest person in the world.[326] Bezos reclaimed the top spot the following month.[327] On September 27, 2021, after Tesla stock surged, Forbes announced that Musk had a net worth of over $200 billion, and was the richest person in the world.[328] In November 2021, Musk became the first person to have a net worth of more than $300 billion.[329] On December 30, 2022, it was reported that Musk had lost $200 billion from his net worth due to declining | Elon Musk PROFILEElon MuskCEO, Tesla$205.2BReal Time Net Worthas of 2/17/24Reflects change since 5 pm ET of prior trading day. 2 in the world todayPhoto by Martin Schoeller for ForbesAbout Elon MuskElon Musk cofounded six companies, including electric car maker Tesla, rocket producer SpaceX and tunneling startup Boring Company.He owns about 21% of Tesla between stock and options, but has pledged more than half his shares as collateral for personal loans of up to $3.5 billion.SpaceX, founded in 2002, is worth nearly $150 billion after a $750 million tender offer in June 2023; it nearly quintupled its value in four years.Boring Company, which aims to defeat traffic, raised $675 million in April 2022 at a $5.7 billion valuation.Twitter's board agreed to sell the company to Musk for $44 billion in April 2022, after he disclosed a 9.1% stake and threatened a hostile takeover.The deal closed in October 2022 after Musk tried to back out and Twitter sued. Musk owns an estimated 74% of the company, which is now called X.Wealth HistoryHOVER TO REVEAL NET WORTH BY YEARForbes Lists 1Forbes 400 (2023)The Richest Person In Every State (2023) 2Billionaires (2023) 1Innovative Leaders (2019) 25Powerful People (2018) 12Richest In Tech (2017)Global Game Changers (2016)More ListsPersonal StatsAge52Source of WealthTesla, SpaceX, Self MadeSelf-Made Score8Philanthropy Score1ResidenceAustin, TexasCitizenshipUnited StatesMarital StatusSingleChildren11EducationBachelor of Arts/Science, University of PennsylvaniaDid you knowMusk, who says he's worried about population collapse, has ten children with three women, including triplets and two sets of twins.As a kid in South Africa, Musk taught himself to code; he sold his first game, Blastar, for about $500.In Their Own WordsI operate on the physics approach to analysis. You boil things down to the first principles or fundamental truths in a particular area and then you reason up from there.Elon MuskRelated People & CompaniesPeter\\n\\n  Query: What is the net worth of Elon Musk today?\\n\\n  Helpful Answer:\\n  Elon Musk's net worth today is $205.2 billion, according to Forbes.\\n\\n  Detailed Answer:\\n  According to the most recent data from Forbes, Elon Musk's net worth is $205.2 billion as of February 17, 2024. This reflects a change since the previous trading day. Musk's net worth is primarily derived from his ownership stakes in Tesla and SpaceX. He owns about 21% of Tesla between stock and options, but has pledged more than half his shares as collateral for personal loans of up to $3.5 billion. SpaceX, founded in 2002, is worth nearly $150 billion after a $750 million tender offer in June 2023, and Boring Company, which aims to defeat traffic, raised $675 million in April 2022 at a $5.7 billion valuation. Twitter's board agreed to sell the company to Musk for $44 billion in April 2022, and the deal closed in October 2022. Musk owns an estimated 74% of the company, which is now called X. Musk's net worth has been volatile in recent years, with significant gains and losses driven by the performance of Tesla stock. In November 2021, Musk became the first person to have a net worth of more than $300 billion. However, his net worth declined significantly in late 2022 due to declining stock prices.\"\r\n\r\n```\r\nThis is basically the input to the LLM, why am I get this as an response\r\n\r\n\r\n\r\n\r\nI tried using the OpenAI version and these results - \r\n```\r\nimport os\r\n# replace this with your OpenAI key\r\nos.environ[\"OPENAI_API_KEY\"] = \"API_KEY\"\r\n\r\nfrom embedchain import App\r\napp = App()\r\napp.add(\"https://www.forbes.com/profile/elon-musk\")\r\napp.add(\"https://en.wikipedia.org/wiki/Elon_Musk\")\r\napp.query(\"What is the net worth of Elon Musk today?\")\r\n\r\n```\r\n\r\nI got this error - \r\n\r\n```\r\nInvalidDimensionException: Embedding dimension 1536 does not match collection dimensionality 768. This is commonly a side-effect when an embedding function, different from the one used to add the embeddings, is used to retrieve an embedding from the database.\r\n\r\n```",
      "state": "open",
      "author": "VIGNESHinZONE",
      "author_type": "User",
      "created_at": "2024-02-17T18:38:19Z",
      "updated_at": "2024-06-02T09:31:43Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1271/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1271",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1271",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.273147",
      "comments": [
        {
          "author": "VIGNESHinZONE",
          "body": "To reproduce the error, Im using `Python 3.9.18`, `embedchain 0.1.80`\r\n",
          "created_at": "2024-02-17T18:39:43Z"
        },
        {
          "author": "deshraj",
          "body": "Thanks for reporting the issue @VIGNESHinZONE. \r\n\r\nSeems like this is happening due to the mismatch between the dimensions of embedding models used for open source and OpenAI embedding model. \r\n\r\nYou can resolve this issue by changing the way you import the OpenAI based app like this:\r\n\r\n```python\r\n",
          "created_at": "2024-02-17T18:47:05Z"
        },
        {
          "author": "VIGNESHinZONE",
          "body": "@deshraj thanks for the quick response, but im getting new error - \r\n\r\n```\r\nSchemaWrongKeyError: Wrong keys 'collection_name', 'id' in {'collection_name': 'openai-model', 'id': 'my-app-id'}\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n```\r\n\r\nHope I'm not missing anything",
          "created_at": "2024-02-17T18:51:44Z"
        },
        {
          "author": "deshraj",
          "body": "Ah my bad. Here is the correct code:\r\n\r\n```python\r\nfrom embedchain import App\r\n\r\nconfig = {\r\n    \"app\": {\r\n        \"config\": {\r\n            \"collection_name\": \"openai-model\",\r\n            \"id\": \"my-app-id\"\r\n        },\r\n    }\r\n}\r\n\r\napp = App.from_config(config=config)\r\napp.add(\"https://www.forbes.com",
          "created_at": "2024-02-17T18:54:13Z"
        },
        {
          "author": "deshraj",
          "body": "Can you try to remove the `db/` directory and try again? I will look into how to resolve this properly later today. ",
          "created_at": "2024-02-17T19:07:24Z"
        }
      ]
    },
    {
      "issue_number": 1270,
      "title": "Integrate Infinity Framework for Enhanced Embedding Inference Speed",
      "body": "### 🚀 The feature\n\nI propose the integration of the [Infinity framework](https://github.com/michaelfeil/infinity) into embedchain to significantly speed up embedding inference. Infinity is a pure Python framework designed to enhance the efficiency of embedding computations. \n\n### Motivation, pitch\n\nInfinity uses techniques such as dynamic batching, flash-attention2, faster/parallel tokenization, torch compile, and optimal use of fp16 precision. The integration of Infinity aims to provide a substantial improvement in inference speed and efficiency. \r\n\r\nhttps://github.com/langchain-ai/langchain/pull/17671\r\nhttps://github.com/langchain-ai/langchain/pull/13928\r\n",
      "state": "open",
      "author": "michaelfeil",
      "author_type": "User",
      "created_at": "2024-02-17T06:54:59Z",
      "updated_at": "2024-06-02T09:31:05Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1270/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1270",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1270",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.443821",
      "comments": []
    },
    {
      "issue_number": 1235,
      "title": "Allow LLMs other than GPT4 to be used for eval",
      "body": "### 🚀 The feature\n\nRight now eval is done using GPT4 model.\r\nCan we use any open source model to do the same?\r\n\n\n### Motivation, pitch\n\nfrom slack user Bojan Jakimovski\r\n<img width=\"384\" alt=\"Screenshot 2024-02-01 at 7 40 58 PM\" src=\"https://github.com/embedchain/embedchain/assets/4302268/6c50fbaf-a027-47ea-b694-e27d18d72174\">\r\n",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-02-02T03:41:19Z",
      "updated_at": "2024-06-02T09:22:09Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1235/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1235",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1235",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.443843",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@taranjeet @deshraj Can I start working on this and any idea which open-source model should we here first?",
          "created_at": "2024-03-15T14:10:08Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @deshraj @taranjeet Any update on this?",
          "created_at": "2024-03-23T02:48:22Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, feel free to work on it. ",
          "created_at": "2024-04-16T05:02:17Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> Yes, feel free to work on it.\r\n\r\n@deshraj I wanted to ask you which open-source model should we add first?",
          "created_at": "2024-04-18T09:25:43Z"
        }
      ]
    },
    {
      "issue_number": 1229,
      "title": "Reduce Dimensions of new OpenAI embedding models is not working",
      "body": "### 🐛 Describe the bug\n\nI noticed that support for new OpenAI embedding models such as text-embedding-3-small and text-embedding-3-large are added. They have an ability to reduce the output dimensions from default ones i.e 1536. I want to reduce the embedding dimensions to 1024 but seems like vector_dimension parameter is getting setup instead of dimensions parameter  in OpenAIEmbedder class. I have below Yaml file:\r\n\r\n```\r\nvectordb:\r\n  provider: elasticsearch\r\n  config:\r\n    collection_name: 'collection_name'\r\n    es_url: ['es_host']\r\n    http_auth:\r\n      - id\r\n      - password\r\n    verify_certs: false\r\n\r\nembedder:\r\n  provider: openai\r\n  config:\r\n    model: 'text-embedding-3-small'\r\n    vector_dimension: 1024\r\n```\r\n\r\nAbove is giving me error when adding data in elastic: 'error': {'type': 'mapper_parsing_exception', 'reason': 'failed to parse', 'caused_by': {'type': 'illegal_argument_exception', 'reason': 'Field [embeddings] of type [dense_vector] of doc has exceeded the number of dimensions [1024] defined in mapping'}}",
      "state": "open",
      "author": "ad3sai",
      "author_type": "User",
      "created_at": "2024-01-29T17:19:03Z",
      "updated_at": "2024-06-02T09:21:22Z",
      "closed_at": null,
      "labels": [
        "bug",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1229/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1229",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1229",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.654752",
      "comments": [
        {
          "author": "deshraj",
          "body": "Hey @ad3sai, thanks for creating the issue. Based on the error message, seems like you were using the index with a different embedding size earlier. You can check if the size of `embedding` field in your elasticsearch index was set to 1024 or not by doing API call here: https://www.elastic.co/guide/",
          "created_at": "2024-01-29T17:53:46Z"
        },
        {
          "author": "ad3sai",
          "body": "Hey @deshraj Thank you for your reply. I got it working by creating a custom class for OpenAIEmbeddingFunction from chromadb.utils.embedding_function. Seems like dimensions parameter is not being added while creating the embeddings and due to which it ends up creating embeddings with default dimensi",
          "created_at": "2024-01-29T18:07:15Z"
        }
      ]
    },
    {
      "issue_number": 1201,
      "title": "last sync status failed",
      "body": "Hello Embedchain team,\r\nI am facing issue while creating a pipeline. The last sync status is showing failed. Please let me know how to proceed",
      "state": "open",
      "author": "rathamrita",
      "author_type": "User",
      "created_at": "2024-01-22T17:01:05Z",
      "updated_at": "2024-06-02T09:16:23Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1201/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1201",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1201",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:55.851076",
      "comments": [
        {
          "author": "deven298",
          "body": "Hey @rathamrita, Are you using Embedchain platform?",
          "created_at": "2024-01-23T04:17:23Z"
        },
        {
          "author": "rathamrita",
          "body": "Hello, yes I am using it.\r\n\r\nOn Tue, Jan 23, 2024, 09:47 Deven Patel ***@***.***> wrote:\r\n\r\n> Hey @rathamrita <https://github.com/rathamrita>, Are you using Embedchain\r\n> platform?\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/embedchain/embedchain/issues/1201#iss",
          "created_at": "2024-01-23T04:18:42Z"
        },
        {
          "author": "deven298",
          "body": "We are not actively maintaining the Embedchain platform for now. But almost all the functionalities are available in our open source package. Please try to build your RAG app using our python package. You can find the docs here - https://docs.embedchain.ai/get-started/quickstart\r\n\r\nFeel free to reac",
          "created_at": "2024-01-23T04:47:21Z"
        }
      ]
    },
    {
      "issue_number": 1193,
      "title": "Implement batching embedding api call to avoid rate limit",
      "body": "### 🚀 The feature\n\nthere is pr which adds support for this. But the PR is very old and a lot of the logic has changed.\r\nSo opening this issue to track this feature.\r\n\r\nhttps://github.com/embedchain/embedchain/pull/429\n\n### Motivation, pitch\n\nmakes it very easy to manage embeddings.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-19T06:14:56Z",
      "updated_at": "2024-06-02T09:15:39Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1193/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1193",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1193",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.074377",
      "comments": []
    },
    {
      "issue_number": 1167,
      "title": "Add support for Anyscale endpoints",
      "body": "### 🚀 The feature\n\nRequested by a user on Discord:\r\n\r\n<img width=\"786\" alt=\"Screenshot 2024-01-12 at 9 42 01 PM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/19b98ed7-bae1-44d5-8de1-62dedd1e5733\">\r\n\r\n\r\n- Discord link: https://discord.com/channels/1121119078191480945/1125758905310519327/1195257282821369867\r\n- Anyscale blog: https://www.anyscale.com/blog/anyscale-endpoints-json-mode-function-calling-new-models-llama-guard-and-mistral-7b-openorca\n\n### Motivation, pitch\n\nAnyscale is being used by many users now and we would like to support these users. ",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2024-01-12T16:13:04Z",
      "updated_at": "2024-06-02T09:15:06Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1167/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1167",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1167",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.074398",
      "comments": [
        {
          "author": "satvik314",
          "body": "Thanks for creating this issue! Can support for pplx-api also be added? \r\n\r\nI feel the implementation should be straight forward given both anyscale and pplx-api are OpenAI compatible.",
          "created_at": "2024-01-14T16:39:45Z"
        },
        {
          "author": "deltawi",
          "body": "Can't this be done through the `Custom Endpoint Config` ? I tried with this : \r\n```yaml\r\nllm:\r\n  provider: huggingface\r\n  config:\r\n    endpoint: https://api.endpoints.anyscale.com/v1\r\n    model_kwargs:\r\n      model: mistralai/Mixtral-8x7B-Instruct-v0.1\r\n```\r\n\r\nStarting the app with : \r\n```python\r\nap",
          "created_at": "2024-01-16T05:38:37Z"
        },
        {
          "author": "satvik314",
          "body": "The provider should be \"openai\" - since Anyscale offers OpenAI compatible endpoints",
          "created_at": "2024-01-16T06:25:33Z"
        }
      ]
    },
    {
      "issue_number": 1124,
      "title": "Nice elonmusk bot, but make him current: Please also support RAG for social media such as twitter ",
      "body": "### 🚀 The feature\n\nHey, Since you have elonmusk as your main readme example, please have that example also include social media such as   twitter.com and instagram.com (etc)\r\n\r\n```\r\nimport os\r\nfrom embedchain import Pipeline as App\r\n\r\n# Create a bot instance\r\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR API KEY\"\r\nelon_bot = App()\r\n\r\n# Embed online resources\r\nelon_bot.add(\"https://en.wikipedia.org/wiki/Elon_Musk\")\r\nelon_bot.add(\"https://www.forbes.com/profile/elon-musk\")\r\n\r\n# Query the bot\r\nelon_bot.query(\"What's the latest with Elon Musk?\") \r\n\r\n```\r\n\r\n```\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/test_embedchain.py\", line 11, in <module>\r\n    elon_bot.add(\"https://www.x.com/elonmusk\")\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/embedchainenv/lib/python3.9/site-packages/embedchain/embedchain.py\", line 198, in add\r\n    documents, metadatas, _ids, new_chunks = self._load_and_embed(\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/embedchainenv/lib/python3.9/site-packages/embedchain/embedchain.py\", line 363, in _load_and_embed\r\n    embeddings_data = chunker.create_chunks(loader, src, app_id=app_id, config=add_config.chunker)\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/embedchainenv/lib/python3.9/site-packages/embedchain/chunkers/base_chunker.py\", line 31, in create_chunks\r\n    data_result = loader.load_data(src)\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/embedchainenv/lib/python3.9/site-packages/embedchain/loaders/web_page.py\", line 26, in load_data\r\n    response.raise_for_status()\r\n  File \"/Users/mbp16_2022_m1max/MyTests/python/embedchainenv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://twitter.com/elonmusk\r\n```\n\n### Motivation, pitch\n\nNice elonmusk bot, but make him current: Please also support RAG for social media such as twitter etc",
      "state": "open",
      "author": "yosun",
      "author_type": "User",
      "created_at": "2024-01-07T00:00:22Z",
      "updated_at": "2024-06-02T09:14:37Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1124/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1124",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1124",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.274943",
      "comments": [
        {
          "author": "deshraj",
          "body": "Hello @yosun, thank you for raising this issue. Your suggestion to include social media platforms like Instagram and X (substitute for Twitter) in our elonmusk bot example is insightful. However, integrating these platforms have limitations on how much data you can fetch but this definitely doable. ",
          "created_at": "2024-01-07T07:01:44Z"
        }
      ]
    },
    {
      "issue_number": 1114,
      "title": "Neo4j support",
      "body": "### 🚀 The feature\n\nhave you thought about using Neo4j as a vector store and knowledge graph for RAG?\r\n\n\n### Motivation, pitch\n\nhttps://twitter.com/higherselfai/status/1742881970676183363",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-04T14:32:39Z",
      "updated_at": "2024-06-02T09:11:56Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1114/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1114",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1114",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.476146",
      "comments": []
    },
    {
      "issue_number": 1104,
      "title": "1-click install in Pinokio for Private AI",
      "body": "### 🚀 The feature\n\n1 click install in Pinokio for Private AI\n\n### Motivation, pitch\n\nSource: https://twitter.com/MrAI3D/status/1742225219593388437",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-02T16:51:14Z",
      "updated_at": "2024-06-02T09:11:24Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1104/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1104",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1104",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.476166",
      "comments": []
    },
    {
      "issue_number": 1091,
      "title": "Add support to implement HYDE retrieval strategy in embedchain",
      "body": "### 🚀 The feature\n\nHYDE is one of the well known retrieval strategies used for retrieval. More details about HYDE can be found in [this paper](https://arxiv.org/abs/2212.10496).\r\n\r\nWe need to implement HYDE as a retrieval strategy in HYDE and then figure out the best possible and simplest interface to be exposed in embedchain\n\n### Motivation, pitch\n\nIncreasing the retrieval strategies makes it more configurable for the end user to choose strategies as per their usecase.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-12-30T18:21:48Z",
      "updated_at": "2024-06-02T09:09:00Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "hard"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1091/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1091",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1091",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.476173",
      "comments": [
        {
          "author": "bioshazard",
          "body": "Definitely interested in seeing more papers implemented as simple to use strategies or chainable pipeline in this project. Haven't seen any projects deliver SOTA RAG pipeline building blocks like that yet and embedchain is my current favorite interface otherwise.",
          "created_at": "2024-02-08T14:57:05Z"
        }
      ]
    },
    {
      "issue_number": 417,
      "title": "feature request: txt loader",
      "body": "### 🚀 The feature\n\nimplement #89 the right way.\r\n\r\nAdd a loader to embed local files.\n\n### Motivation, pitch\n\nThis is a simple function that should be provided.\n\n### Alternatives\n\nAlternatively\r\n\r\n```python\r\nwith open(path) as f:\r\n    for line in f.read_lines():\r\n        app.add(\"text\", line)\r\n```\r\n\r\nisn't a lot of code.\r\n\r\nThis gives you control whether you want to read the whole file at once, or like I did, line by line.\n\n### Additional context\n\n* I think `txt` is to close to `text`, `file` would be more descriptive\r\n* with that being said, file implies that all files could be read, when it's only text. So what do we call it?\r\n* as mentioned, how do we read the whole file at once or line by line, depending on the type of document one or the other might be required.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-09T17:56:23Z",
      "updated_at": "2024-06-02T09:06:00Z",
      "closed_at": "2024-06-02T09:06:00Z",
      "labels": [
        "documentation",
        "enhancement",
        "new-data-source"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/417/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/417",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/417",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.663530",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Is this needed @cachho. Because I see the support for `text` in local_data_types.",
          "created_at": "2023-09-14T06:44:09Z"
        },
        {
          "author": "taranjeet",
          "body": "@deshraj see if we need this?",
          "created_at": "2023-12-14T08:51:11Z"
        }
      ]
    },
    {
      "issue_number": 1004,
      "title": "Limiting Data Row Count in Each Request When Using Embedding Models to Avoid Batch Size Errors",
      "body": "### 🚀 The feature\n\nWhen using embedding models, how can we limit the number of data rows in each call to the backend model? Some models impose limitations on the number of rows per request\r\n\n\n### Motivation, pitch\n\nexceeding which can lead to errors such as:\r\n```\r\n message: batch size is invalid, it should not be larger than 25.: payload.input.contents\r\n```",
      "state": "open",
      "author": "xu-xiang",
      "author_type": "User",
      "created_at": "2023-12-12T16:23:35Z",
      "updated_at": "2024-06-02T09:04:45Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1004/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1004",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1004",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.828930",
      "comments": []
    },
    {
      "issue_number": 929,
      "title": "Data source information is lost for a parent URL upon providing child URL",
      "body": "### 🐛 Describe the bug\r\n\r\nI'm using the Embedchain Demo in a Colab notebook, for prototyping against our spirits-related data set. I'm encountering an issue where the information on a parent product page is being \"forgotten\" by the bot, after adding child pages of the parent. In this case, I'm testing against our site product URLs.\r\n\r\nFirst I add our parent product page for information on a spirit:\r\n```python\r\ndistiller_bot = App()\r\ndistiller_bot.add(\"https://distiller.com/spirits/blanton-s-original-single-barrel\")\r\n```\r\n\r\nUpon querying for information on the spirit, I receive an accurate response:\r\n\r\n```python\r\ndistiller_bot.query(\"What can you tell me about Blanton's Original Single Barrel, and what do the reviews say?\")\r\n```\r\n\r\n**Output:**\r\n>> Blanton's Original Single Barrel is a bourbon whiskey that was first produced in 1984 by Master Distiller Elmer T Lee. It is named after Colonel Albert Blanton, who had a long career in the whiskey industry. Blanton's is known for being the first mass-produced single-barrel bourbon. As for the reviews, the community rating for Blanton's Original Single Barrel is 4.29 out of 5 stars, based on a total review count of 11,882. Unfortunately, the specific details of the reviews are not provided, so we cannot provide any further information about what the reviews say.\r\n\r\nThis all checks out; the parent page has these details and the ratings overviews.\r\n\r\n\r\nThen, I add the child page for user reviews to the data sources:\r\n\r\n```python\r\ndistiller_bot.add(\"https://distiller.com/spirits/blanton-s-original-single-barrel/tastes?require_note=true\")\r\n```\r\n\r\nUpon making the same query:\r\n\r\n```python\r\ndistiller_bot.query(\"What can you tell me about Blanton's Original Single Barrel, and what do the reviews say?\")\r\n```\r\n\r\nI get the following **Output**:\r\n\r\n>>  Based on the given context, Blanton's Original Single Barrel is a type of whiskey. The reviews mention that it has a sweet taste with a light nose and a fast finish. The flavors of cinnamon and vanilla are also mentioned. The price is stated as 13.0 USD per pour. However, there is no additional details about Blanton's Original Single Barrel.\r\n\r\n\r\n1 ) `\"However, there is no additional details about Blanton's Original Single Barrel\"` is consistent for each re-test on above scenario.\r\n\r\n2 ) Changing the order of the data source additions does _not_ matter.\r\n\r\n3 ) Does not seem to be related to config settings (.yaml)\r\n```yaml\r\napp:\r\n  config:\r\n    id: 'distiller-bot'\r\nllm:\r\n  provider: openai\r\n  config:\r\n    model: 'gpt-3.5-turbo'\r\n    temperature: 0.5\r\n    max_tokens: 1000\r\n    top_p: 1\r\n    stream: false\r\n```\r\n\r\n4 ) I've tried multiple iterations and samples for URLs, etc.\r\n\r\n\r\nIs there something I'm not considering?",
      "state": "open",
      "author": "kendistiller",
      "author_type": "User",
      "created_at": "2023-11-09T22:48:14Z",
      "updated_at": "2024-06-02T08:59:19Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/929/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/929",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/929",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.828956",
      "comments": []
    },
    {
      "issue_number": 894,
      "title": "Log about whether telemetry is on/off while creating an app",
      "body": "### 🚀 The feature\n\nWe want to let users know whether their usage pattern is anonymously sent to enable transparency and build trust. \n\n### Motivation, pitch\n\nMake embedchain package more transparent. ",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-11-02T00:12:10Z",
      "updated_at": "2024-06-02T08:57:03Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/894/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/894",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/894",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.828964",
      "comments": []
    },
    {
      "issue_number": 881,
      "title": "Create a ton of code samples which doesn't depend on paid LLMs",
      "body": "### 🚀 The feature\n\n- It could be nice to see the full stack code samples using the open source dependencies like vector databases, embeddings, LLMs etc. \r\n- Come up with the fully configurable or plug and play open source options\r\n- Build documentations for configuring and using various dependencies or accomplishing the applications.\r\n- Drive things based on the use-cases. It's good to see use-case driven code samples.\n\n### Motivation, pitch\n\nOpen source being the key motivation, it's good to see a ton of code samples around it. ",
      "state": "open",
      "author": "ranjancse26",
      "author_type": "User",
      "created_at": "2023-10-31T13:44:56Z",
      "updated_at": "2024-06-02T08:55:05Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/881/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/881",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/881",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:56.828970",
      "comments": []
    },
    {
      "issue_number": 858,
      "title": "An instance of Chroma already exists for db:8000 with different settings",
      "body": "### 🐛 Describe the bug\n\nAfter moving from 0.4.14 to .0.4.15, I see this error all the time when I try to connect to DB in my celery workers.\r\n\r\nchroma 0.4.15\r\nchromadb 0.4.15\r\npython 3.11\r\ndocker-compose\r\n\r\n```\r\napi_1            | INFO:     192.168.32.8:58518 - \"GET /api/v1/queries?question=Did%20ukraine%20on%20war?&call_gpt=false&collection_name=cp_137 HTTP/1.0\" 500 Internal Server Error\r\napi_1            | ERROR:    Exception in ASGI application\r\napi_1            | Traceback (most recent call last):\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 98, in receive\r\napi_1            |     return self.receive_nowait()\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 93, in receive_nowait\r\napi_1            |     raise WouldBlock\r\napi_1            | anyio.WouldBlock\r\napi_1            | \r\napi_1            | During handling of the above exception, another exception occurred:\r\napi_1            | \r\napi_1            | Traceback (most recent call last):\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 78, in call_next\r\napi_1            |     message = await recv_stream.receive()\r\napi_1            |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/streams/memory.py\", line 118, in receive\r\napi_1            |     raise EndOfStream\r\napi_1            | anyio.EndOfStream\r\napi_1            | \r\napi_1            | During handling of the above exception, another exception occurred:\r\napi_1            | \r\napi_1            | Traceback (most recent call last):\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 426, in run_asgi\r\napi_1            |     result = await app(  # type: ignore[func-returns-value]\r\napi_1            |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py\", line 84, in __call__\r\napi_1            |     return await self.app(scope, receive, send)\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/fastapi/applications.py\", line 1115, in __call__\r\napi_1            |     await super().__call__(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/applications.py\", line 122, in __call__\r\napi_1            |     await self.middleware_stack(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 184, in __call__\r\napi_1            |     raise exc\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 162, in __call__\r\napi_1            |     await self.app(scope, receive, _send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 108, in __call__\r\napi_1            |     response = await self.dispatch_func(request, call_next)\r\napi_1            |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/app/project/__init__.py\", line 30, in add_no_cache_header\r\napi_1            |     response = await call_next(request)\r\napi_1            |                ^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 84, in call_next\r\napi_1            |     raise app_exc\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/base.py\", line 70, in coro\r\napi_1            |     await self.app(scope, receive_or_disconnect, send_no_error)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/cors.py\", line 83, in __call__\r\napi_1            |     await self.app(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\r\napi_1            |     raise exc\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\r\napi_1            |     await self.app(scope, receive, sender)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\r\napi_1            |     raise e\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\r\napi_1            |     await self.app(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 718, in __call__\r\napi_1            |     await route.handle(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 276, in handle\r\napi_1            |     await self.app(scope, receive, send)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/routing.py\", line 66, in app\r\napi_1            |     response = await func(request)\r\napi_1            |                ^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/fastapi/routing.py\", line 274, in app\r\napi_1            |     raw_response = await run_endpoint_function(\r\napi_1            |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/fastapi/routing.py\", line 193, in run_endpoint_function\r\napi_1            |     return await run_in_threadpool(dependant.call, **values)\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/starlette/concurrency.py\", line 41, in run_in_threadpool\r\napi_1            |     return await anyio.to_thread.run_sync(func, *args)\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/to_thread.py\", line 33, in run_sync\r\napi_1            |     return await get_asynclib().run_sync_in_worker_thread(\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 877, in run_sync_in_worker_thread\r\napi_1            |     return await future\r\napi_1            |            ^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 807, in run\r\napi_1            |     result = context.run(func, *args)\r\napi_1            |              ^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/app/project/queries/routes.py\", line 18, in query\r\napi_1            |     embedchain_app = create_embedchain_app(collection_name)\r\napi_1            |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/app/embedchain_app/__init__.py\", line 37, in create_embedchain_app\r\napi_1            |     db = ChromaDB(\r\napi_1            |          ^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/embedchain/vectordb/chroma.py\", line 60, in __init__\r\napi_1            |     self.client = chromadb.Client(self.settings)\r\napi_1            |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/chromadb/__init__.py\", line 190, in Client\r\napi_1            |     return ClientCreator(tenant=tenant, database=database, settings=settings)\r\napi_1            |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/chromadb/api/client.py\", line 133, in __init__\r\napi_1            |     super().__init__(settings=settings)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/chromadb/api/client.py\", line 36, in __init__\r\napi_1            |     SharedSystemClient._create_system_if_not_exists(self._identifier, settings)\r\napi_1            |   File \"/usr/local/lib/python3.11/site-packages/chromadb/api/client.py\", line 55, in _create_system_if_not_exists\r\napi_1            |     raise ValueError(\r\napi_1            | ValueError: An instance of Chroma already exists for db:8000 with different settings\r\n```",
      "state": "open",
      "author": "denisj",
      "author_type": "User",
      "created_at": "2023-10-27T08:41:44Z",
      "updated_at": "2024-06-02T08:47:14Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/858/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/858",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/858",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:58.648478",
      "comments": []
    },
    {
      "issue_number": 854,
      "title": "Hability to embed docx or pdf files from public Google drive links",
      "body": "### 🚀 The feature\n\nEmbed docx or pdf files from public Google drive links.\n\n### Motivation, pitch\n\nCurrently, it's not possible to embed a Google Drive file, even with public permissions. For example:\r\n\r\nTrying to embed a Google Doc file providing a Google Drive link throws an error:\r\n\r\n\"Failed to add docx. File is not a zip file.\"\r\n\r\nOr when trying to embed a PDF file from a Google Drive link:\r\n\r\n\"Failed to add pdf_file. Error: Stream has ended unexpectedly.\"",
      "state": "open",
      "author": "fabioferreira3",
      "author_type": "User",
      "created_at": "2023-10-26T12:28:02Z",
      "updated_at": "2024-06-02T08:46:46Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/854/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/854",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/854",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:58.648503",
      "comments": [
        {
          "author": "sidmohanty11",
          "body": "Yup, would love to see this feature!",
          "created_at": "2023-10-26T15:18:03Z"
        },
        {
          "author": "deven298",
          "body": "Its coming soon ⏳",
          "created_at": "2023-10-27T06:01:04Z"
        },
        {
          "author": "vishutupili",
          "body": "I'd like to work on this issue. Could you please assign it to me?",
          "created_at": "2023-12-09T17:48:07Z"
        }
      ]
    },
    {
      "issue_number": 839,
      "title": "[Bug]: docx loader erroring out when trying to add docx files",
      "body": "### 🐛 Describe the bug\n\n```File [~/Downloads/autogen/lib/python3.11/site-packages/embedchain/embedchain.py:336](https://file+.vscode-resource.vscode-cdn.net/Users/home/Downloads/~/Downloads/autogen/lib/python3.11/site-packages/embedchain/embedchain.py:336), in EmbedChain.load_and_embed(self, loader, chunker, src, metadata, source_id, dry_run)\r\n    333 app_id = self.config.id if self.config is not None else None\r\n    335 # Create chunks\r\n--> 336 embeddings_data = chunker.create_chunks(loader, src, app_id=app_id)\r\n    337 # spread chunking results\r\n    338 documents = embeddings_data[\"documents\"]\r\n\r\nFile [~/Downloads/autogen/lib/python3.11/site-packages/embedchain/chunkers/base_chunker.py:26](https://file+.vscode-resource.vscode-cdn.net/Users/home/Downloads/~/Downloads/autogen/lib/python3.11/site-packages/embedchain/chunkers/base_chunker.py:26), in BaseChunker.create_chunks(self, loader, src, app_id)\r\n     24 chunk_ids = []\r\n...\r\n-> 1369     raise BadZipFile(\"File is not a zip file\")\r\n   1370 if self.debug > 1:\r\n   1371     print(endrec)\r\n\r\nBadZipFile: File is not a zip file```",
      "state": "open",
      "author": "legaltextai",
      "author_type": "User",
      "created_at": "2023-10-23T13:50:18Z",
      "updated_at": "2024-06-02T08:45:05Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/839/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/839",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/839",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:58.832701",
      "comments": [
        {
          "author": "deven298",
          "body": "@legaltextai Can you provide more information? What is the line of code that is throwing the error, what are you trying to achieve and the source url you are trying to add (if possible)?",
          "created_at": "2023-10-25T15:06:36Z"
        },
        {
          "author": "deshraj",
          "body": "Can confirm this issue. I was able to reproduce this on my side. ",
          "created_at": "2023-10-25T17:16:23Z"
        }
      ]
    },
    {
      "issue_number": 640,
      "title": "Adding Tags to add(doc_url, tags=[\"wikipedia\", \"subject1\"]) and query(tags_to_include=[\"wikipedia\"])",
      "body": "### 🚀 The feature\r\n\r\nEnable setting tags with resources added via .add(..., tags=[]), so that when querying via .query(..., include_tags=[], exclude_tags=[]) we can include/exclude specific tags, or global search when no tags are specified\r\n\r\n### Motivation, pitch\r\n\r\nWhen adding a lot of resources on different subjects and sources, when querying it could be important to be able to focus on some subjects or exclude some sources depending on usage even if it semantically close to the query",
      "state": "open",
      "author": "doxav",
      "author_type": "User",
      "created_at": "2023-09-19T15:39:29Z",
      "updated_at": "2024-06-02T08:39:53Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/640/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/640",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/640",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.057426",
      "comments": []
    },
    {
      "issue_number": 142,
      "title": "feature request: add support for plain text documents, word documents, RTF",
      "body": "- opened on behalf of [twitter user Singh316Singh](https://twitter.com/Singh316Singh/status/1676599116292341761)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-05T14:36:07Z",
      "updated_at": "2024-06-02T07:10:01Z",
      "closed_at": "2024-06-02T07:10:01Z",
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/142/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/142",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/142",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.057445",
      "comments": [
        {
          "author": "taranjeet",
          "body": "word docs support is already added by @sahilyadav902 ",
          "created_at": "2023-07-06T15:55:46Z"
        },
        {
          "author": "cachho",
          "body": "Yes, and plain text loading is one of these things. Realitically, you will get better results if you load the file yourself, and then embed it with `add`, using the `text` loader. Because that gives you the choice to decide whether you want to split lines or do the chunker do the work on the whole f",
          "created_at": "2023-08-04T10:58:00Z"
        },
        {
          "author": "deshraj",
          "body": "We support the first two document types i.e plain text and word documents. Will close the issue for now since no one has requested for rtf format after 2023. ",
          "created_at": "2024-06-02T07:09:58Z"
        }
      ]
    },
    {
      "issue_number": 393,
      "title": "thoughts: wording - data type, data source, format, data formats, what are we calling them?",
      "body": "### 🐛 Describe the bug\n\nall the names in the titles are used somewhere in our code, github or documentation. I can only imagine this is confusing for new users. We should decide on a name. Ideas welcome.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-02T22:24:40Z",
      "updated_at": "2024-06-02T07:08:59Z",
      "closed_at": "2024-06-02T07:08:59Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/393/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/393",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/393",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.248104",
      "comments": [
        {
          "author": "deshraj",
          "body": "This issue is not relevant anymore hence closing it.",
          "created_at": "2024-06-02T07:08:57Z"
        }
      ]
    },
    {
      "issue_number": 750,
      "title": "Add Confluence and Jira as a data source",
      "body": "### 🚀 The feature\n\nThe .add function that ingests a wide variety of data and facilitates inclusion into a vector database could use the Atlassian library to ingest Jira and Confluence data.\n\n### Motivation, pitch\n\nMany companies utilize Atlassian products, Confluence and jira power every level of the corporate world.  This would allow faster and more efficient ingestion of projects, program,  and sprint data for summarization.",
      "state": "open",
      "author": "RJTabassi",
      "author_type": "User",
      "created_at": "2023-10-01T06:10:37Z",
      "updated_at": "2024-06-02T07:03:12Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/750/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/750",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/750",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.445441",
      "comments": []
    },
    {
      "issue_number": 668,
      "title": "Dropbox folder/instance as a data source",
      "body": "### 🚀 The feature\r\n\r\nRather than adding one document at a time, enable the bot to ingest an entire Dropbox folder or directory structure.\r\n\r\n\r\n\r\n### Motivation, pitch\r\n\r\nOften times, the knowledge on which you want to train the bot is already curated. Pointing it to that repository rather than having to manually enter the URL of each and every file will save a lot of setup time and as well as make supporting more dynamic knowledge bases easier - you don't have to have a preconceived notion of how the knowledge is divided and across which files.",
      "state": "closed",
      "author": "leifjerami",
      "author_type": "User",
      "created_at": "2023-09-26T03:15:11Z",
      "updated_at": "2024-06-02T07:00:08Z",
      "closed_at": "2024-06-02T07:00:08Z",
      "labels": [
        "new-data-source",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/668/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/668",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/668",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.445464",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Closing because `dropbox` dataloader currently accepts folders or directory as input https://docs.embedchain.ai/components/data-sources/dropbox",
          "created_at": "2024-06-02T07:00:08Z"
        }
      ]
    },
    {
      "issue_number": 645,
      "title": "Prioritize documents",
      "body": "### 🚀 The feature\n\nWe would like to add a metadata or tags that will describe the documents priority. Higher numbers could mean higher priority.\r\nSo when making a query to the DB, the documents (chunks) with higher priority will be returned first.\n\n### Motivation, pitch\n\nWe are working on indexing URLs that can be found in tweets or mastodon statuses. And sometimes the content of the status could be more interesting as the content of the web page. So we would like to tell the query to get the content of the statuses first in such a case.",
      "state": "open",
      "author": "denisj",
      "author_type": "User",
      "created_at": "2023-09-21T15:12:13Z",
      "updated_at": "2024-06-02T06:57:56Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/645/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/645",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/645",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.660702",
      "comments": []
    },
    {
      "issue_number": 622,
      "title": "bug: `docs_site` loader does not work",
      "body": "### 🐛 Describe the bug\n\nTest code:\r\n\r\n```python\r\nfrom embedchain import App\r\nfrom embedchain.config import ChromaDbConfig, AppConfig\r\n\r\napp = App(AppConfig(log_level=\"DEBUG\"),chromadb_config=ChromaDbConfig(chroma_settings={\"allow_reset\": True}))\r\napp.db.reset()\r\napp.add(\"https://docs.zextras.com/carbonio-ce/html/general.html#what-is-product\")\r\n```",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-15T13:22:39Z",
      "updated_at": "2024-06-02T06:54:36Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/622/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/622",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/622",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.660724",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@deshraj @cachho Here when I checked for our docs it worked because `quickstart` was present in all_urls that are fetched in `_get_child_links_recursive()` of `docs_site_loader.py`.\r\n\r\n![image](https://github.com/embedchain/embedchain/assets/57898986/8000f71d-4052-46ae-bdad-1f6c50483558)\r\n\r\nBut for ",
          "created_at": "2023-09-18T09:27:20Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @deshraj @cachho any update on this?",
          "created_at": "2023-09-29T06:40:06Z"
        }
      ]
    },
    {
      "issue_number": 619,
      "title": "Can not process realistic documentation sties like docker API",
      "body": "### 🐛 Describe the bug\n\nwith the code below, I am trying to get some knowledge from the docker API documentation site `https://docs.docker.com/engine/api/`  and it has the error, and same if I added the documentation of embedchain itself `https://docs.embedchain.ai` and it would says that the maximum recursion stack depth reached\r\n```python\r\nfrom embedchain import App\r\n\r\nweb_bot = App()\r\n\r\n# Embed Online Resources\r\nweb_bot.add(\"https://docs.docker.com/engine/api/\")\r\nresponse = web_bot.query(\"how to use docker api to create a container\")\r\nprint(response)\r\n```\r\n\r\n```shell\r\nTraceback (most recent call last):\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/src/main.py\", line 12, in <module>\r\n    web_bot.add(\"https://docs.docker.com/engine/api/\")\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/embedchain/embedchain.py\", line 184, in add\r\n    documents, metadatas, _ids, new_chunks = self.load_and_embed_v2(\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/embedchain/embedchain.py\", line 455, in load_and_embed_v2\r\n    self.db.add(documents=documents, metadatas=metadatas, ids=ids)\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/embedchain/vectordb/chroma.py\", line 126, in add\r\n    self.collection.add(documents=documents, metadatas=metadatas, ids=ids)\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/chromadb/api/models/Collection.py\", line 99, in add\r\n    self._client._add(ids, self.id, embeddings, metadatas, documents)\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/chromadb/api/segment.py\", line 247, in _add\r\n    self._validate_embedding_record(coll, r)\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/chromadb/api/segment.py\", line 537, in _validate_embedding_record\r\n    self._validate_dimension(collection, len(record[\"embedding\"]), update=True)\r\n  File \"/Users/ezhou2/Desktop/erik-llm-playground/venv/lib/python3.9/site-packages/chromadb/api/segment.py\", line 552, in _validate_dimension\r\n    raise InvalidDimensionException(\r\nchromadb.errors.InvalidDimensionException: Embedding dimension 1 does not match collection dimensionality 1536\r\n\r\n```",
      "state": "open",
      "author": "erikatlassian",
      "author_type": "User",
      "created_at": "2023-09-14T06:23:02Z",
      "updated_at": "2024-06-02T06:53:16Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/619/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/619",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/619",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:51:59.822611",
      "comments": [
        {
          "author": "deshraj",
          "body": "Seems like automatically resolving the data_type is not working well here. I was able to make it work using the `data_type='web_page'` in this case.\r\n\r\n\r\nSee updated code below:\r\n\r\n```python\r\nfrom embedchain import App\r\nweb_bot = App()\r\nweb_bot.add(\"https://docs.docker.com/engine/api/\", data_type=\"w",
          "created_at": "2023-09-14T06:36:39Z"
        },
        {
          "author": "deshraj",
          "body": "@cachho I think we should just fix this natively in the package, right?",
          "created_at": "2023-09-14T06:37:18Z"
        },
        {
          "author": "cachho",
          "body": "@deshraj we must have the `docs_site` loader for a reason. That was used instead of the web page. I think the type detection is working as intended.\r\n\r\nThe question is why the docs site isn't working.",
          "created_at": "2023-09-14T07:43:53Z"
        },
        {
          "author": "cachho",
          "body": "This error `chromadb.errors.InvalidDimensionException: Embedding dimension 1 does not match collection dimensionality 1536` sounds like you might have to reset your database. Can you try that? Just delete the `db` folder. If it still appears we have to investigate. But usually these kind of errors c",
          "created_at": "2023-09-14T07:45:00Z"
        },
        {
          "author": "cachho",
          "body": "Opened #622 to track the issue with `docs_site`.\r\n\r\nYour issue is a different one @erikatlassian - it has to do with vector dimensions. Did you manage to resolve it by resetting the db? Then I will close this.",
          "created_at": "2023-09-15T13:25:28Z"
        }
      ]
    },
    {
      "issue_number": 610,
      "title": "bug: `query` knows and uses `history` from `chat`",
      "body": "### 🐛 Describe the bug\n\nIf you use the chat method, the history is stored persistently in the `Llm` app-subclass. If `query` is used in the same script after `chat`, it also uses that history, because it assumes that you set this as custom history, which is supported behavior.\r\n\r\nI'm really not sure how to fix this, other than splitting `history` in to `history` and `custom_history`. \r\n\r\nIf we just said that we only want to support history that's added directly as an argument to the `query` method, we'd probably have to:\r\n1. serialize it\r\n2. save the serial\r\n3. delete the history\r\n4. replace it with the history from arguments\r\n5. restore the saved serial after the method run\r\n\r\nThis adds complexity and makes it slower. We also couldn't use the `app.llm.set_history` method anymore, this method is really good for managing custom history. So splitting into `history` and `custom_history` seems like the better option.\r\n\r\nOpen for suggestions.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-13T07:08:01Z",
      "updated_at": "2024-06-02T06:52:49Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/610/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/610",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/610",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:00.063715",
      "comments": [
        {
          "author": "mtsoltan",
          "body": "I think the offered option makes a lot of sense. However, `history` (without any adjectives) is a bit ambiguous since contrast has to be made with `custom_history` to understand what's going on. I'd go for `chat_history` and `query_history` instead, which clearly shows the intent of which method it ",
          "created_at": "2023-09-19T00:40:06Z"
        }
      ]
    },
    {
      "issue_number": 591,
      "title": "feature request: Update Documents",
      "body": "### 🚀 The feature\n\nWe should allow for a consistent way to update documents. I guess this could be through an id or through matching source. We have to decide for a method.\r\n\r\nOpened on behalf of Slack user jan zamoyski (https://embedchain.slack.com/archives/C05RG7CJKC6/p1694415423682619)\n\n### Motivation, pitch\n\n-",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-11T13:27:42Z",
      "updated_at": "2024-06-02T06:52:28Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/591/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/591",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/591",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:00.283625",
      "comments": [
        {
          "author": "Panczo",
          "body": "Actually, I'd be useful to be able do a full CRUD actions for some knowledge source.\r\nRight now we can add and read(through query method) so the only missing bit is update and destroy.\r\n@cachho in your opinion, is there an easy way to implement delete action as well?",
          "created_at": "2023-09-14T20:36:17Z"
        },
        {
          "author": "CryptVenture",
          "body": "I index codebases into embedchain - would be a great addition to be able to remove / delete data from files that have been deleted in the codebase. Or reindex files that have been altered. Is this a possibility?\r\n",
          "created_at": "2024-01-02T02:11:52Z"
        }
      ]
    },
    {
      "issue_number": 523,
      "title": "Feature request: full Notion instance as a data source",
      "body": "### 🚀 The feature\n\nSimilar to sitemap and code documentation website, point the bot to an entire Notion instance as a data source \n\n### Motivation, pitch\n\ntyping each page url by hand is incredibly cumbersome ",
      "state": "closed",
      "author": "itamargo",
      "author_type": "User",
      "created_at": "2023-09-01T00:03:14Z",
      "updated_at": "2024-06-02T06:48:38Z",
      "closed_at": "2024-06-02T06:47:23Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/523/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/523",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/523",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:00.511130",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Hey @itamargo , thanks for opening this issue. Agree here.\r\nDo you want to help us build this?\r\n\r\nHappy to help you setup the repo for development or anything else.\r\n\r\nLet me know.",
          "created_at": "2023-09-01T00:04:45Z"
        },
        {
          "author": "itamargo",
          "body": "Hey Taranjeet,\r\n\r\nI wish I could. Only created Feature Requests for things that I know are\r\nabove my current level of expertise.\r\nI'm more of a scripter than a developer, so using this library is roughly\r\nmy limit :)\r\n\r\nItamar\r\n\r\nOn Thu, Aug 31, 2023 at 5:04 PM Taranjeet Singh ***@***.***>\r\nwrote:\r\n",
          "created_at": "2023-09-01T00:12:39Z"
        },
        {
          "author": "Dev-Khant",
          "body": "`Notion` as data source is added https://docs.embedchain.ai/components/data-sources/notion",
          "created_at": "2024-06-02T06:47:23Z"
        }
      ]
    },
    {
      "issue_number": 524,
      "title": "Feature request: Slack channel/instance as a data source",
      "body": "### 🚀 The feature\n\nProvide the ability to point the bot to an entire Slack instance or a specific Slack channel as a data source\n\n### Motivation, pitch\n\nAs much as we'd like it to not be true, in many organizations, Slack unintentionally ends up becoming the system of record for some knowledge. Being able to include it as a data source for the bot will unlock the creation of richer, more knowledgable experience",
      "state": "closed",
      "author": "itamargo",
      "author_type": "User",
      "created_at": "2023-09-01T00:03:18Z",
      "updated_at": "2024-06-02T06:48:12Z",
      "closed_at": "2024-06-02T06:48:11Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/524/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/524",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/524",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:00.720336",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "`Slack` as data source has been added https://docs.embedchain.ai/components/data-sources/slack",
          "created_at": "2024-06-02T06:48:11Z"
        }
      ]
    },
    {
      "issue_number": 573,
      "title": "Cloud data storage support for embedding",
      "body": "### 🚀 The feature\n\nWe have pdf and videos stored on Google Firebase, can we have a feature that gets the data from firebase for embedding and get the answers for various types of content like pdf, video, audio content\n\n### Motivation, pitch\n\nThis feature will significantly help to reuse the content (video, audio, pdfs etc) already stored on Google Cloud. ",
      "state": "open",
      "author": "themayakumari",
      "author_type": "User",
      "created_at": "2023-09-06T18:59:05Z",
      "updated_at": "2024-06-02T06:45:20Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/573/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/573",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/573",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:00.941538",
      "comments": [
        {
          "author": "cachho",
          "body": "Does firebase give you a direct link for each file? Is it publicly accessible?",
          "created_at": "2023-09-10T22:56:14Z"
        },
        {
          "author": "themayakumari",
          "body": "Yes, we do get direct link of each file. But thinking if we can folder access so that multiple files can be used.ThanksOn Sep 10, 2023, at 3:56 PM, cachho ***@***.***> wrote:﻿\r\nDoes firebase give you a direct link for each file? Is it publicly accessible?\r\n\r\n—Reply to this email directly, view it on",
          "created_at": "2023-09-11T17:48:59Z"
        }
      ]
    },
    {
      "issue_number": 555,
      "title": "Wechat bot example",
      "body": "### 🚀 The feature\n\nWechat bot example\n\n### Motivation, pitch\n\nhttps://discord.com/channels/1121119078191480945/1121119078858358846/1148487237621776414",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-05T05:47:15Z",
      "updated_at": "2024-06-02T06:44:24Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/555/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/555",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/555",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.144233",
      "comments": []
    },
    {
      "issue_number": 505,
      "title": "Support for other languages",
      "body": "### 🚀 The feature\n\nIs there support for other languages? Like Spanish, Portuguese, and Russian?\n\n### Motivation, pitch\n\nExpand the use base of embedchain.",
      "state": "open",
      "author": "FrancyJGLisboa",
      "author_type": "User",
      "created_at": "2023-08-29T11:19:33Z",
      "updated_at": "2024-06-02T06:41:39Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/505/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/505",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/505",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.144256",
      "comments": [
        {
          "author": "cachho",
          "body": "Hey, I haven't tried it, but I'd be surprised if OpenAI's `text-embedding-ada-002` embedding model can't embed in other languages. ChatGPT can obviously then process your embeddings in other languages.\r\n\r\nGPT4ALL probably too. \r\n\r\nEmbedchain has no part in this, we just put everything together.\r\n\r\nH",
          "created_at": "2023-08-29T17:36:36Z"
        }
      ]
    },
    {
      "issue_number": 480,
      "title": "Feature Request: Add support for Palm LLM Models/Embeddings",
      "body": "### 🚀 The feature\n\nBard and Palm are now GA, would be nice to add support for it, both for LLM and the Embedding generation.\r\n\r\nhttps://developers.generativeai.google/products/palm\n\n### Motivation, pitch\n\nThough Google has not started to rollout its API Key yet to everyone, the APIs are now public. I expect a good userbase would want to try out palm for their benchmarks, and this will make their life easier :)",
      "state": "open",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-08-25T05:19:46Z",
      "updated_at": "2024-06-02T06:40:25Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/480/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/480",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/480",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.309011",
      "comments": [
        {
          "author": "ravigithubshankar",
          "body": "API key is generated!",
          "created_at": "2023-09-15T06:07:27Z"
        }
      ]
    },
    {
      "issue_number": 472,
      "title": "bug: no matches found: embedchain[community]",
      "body": "### 🐛 Describe the bug\n\nLooks like the community edition can't be installed for some people.\r\n\r\n`no matches found: embedchain[community]`\r\n\r\nThis happened to discord user andyy with z shell.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-24T21:12:28Z",
      "updated_at": "2024-06-02T06:39:32Z",
      "closed_at": "2024-06-02T06:39:32Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/472/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/472",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/472",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.505305",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Closing this issue since there is no community edition right now.",
          "created_at": "2024-06-02T06:39:32Z"
        }
      ]
    },
    {
      "issue_number": 267,
      "title": "File names are inconsistent",
      "body": "config folder contains file name in camel case convention\r\nloaders contains file name in snake case.\r\n\r\nwe should formalize a style and then format / rename everything accordingly.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-14T15:52:11Z",
      "updated_at": "2024-06-02T06:08:35Z",
      "closed_at": "2024-06-02T06:08:35Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/267/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/267",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/267",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.681392",
      "comments": [
        {
          "author": "cachho",
          "body": "I think the convention of config is called PascalCase. As far as I know (the reason I did it) class names and the  names of the files containing just a class should be in CamelCase. So loaders should be adjusted.\r\n\r\nTests can't be adjusted because they need to be prefixed with test_",
          "created_at": "2023-07-14T21:59:38Z"
        },
        {
          "author": "rachittshah",
          "body": "@taranjeet would you suggest a refactor of functions as well to improve test coverage?\r\n\r\nHappy to pick this up!",
          "created_at": "2023-07-18T06:38:15Z"
        },
        {
          "author": "taranjeet",
          "body": "I think we can skip refactoring functions in test coverage.\r\nbut we can pick up the rest.\r\nlets first close how the file name, module name and class should be? \r\n\r\nlike for module name we are using _, i think we should avoid that.\r\n\r\n@rachittshah : do you want to take a lead in documenting everythin",
          "created_at": "2023-07-18T19:41:24Z"
        },
        {
          "author": "rachittshah",
          "body": "@taranjeet yes, I'd love to lead the docs. I've been a doc writer for GSoD. Let me take notes and share it in the issue on the approach we can take.",
          "created_at": "2023-07-31T14:47:02Z"
        },
        {
          "author": "taranjeet",
          "body": "Hi @rachittshah : checking if you are working on this?",
          "created_at": "2023-08-12T04:41:56Z"
        }
      ]
    },
    {
      "issue_number": 154,
      "title": "Persist chat history",
      "body": "https://github.com/embedchain/embedchain/pull/150#issuecomment-1623178555",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-06T08:10:50Z",
      "updated_at": "2024-06-02T05:44:03Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/154/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/154",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/154",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.888438",
      "comments": []
    },
    {
      "issue_number": 153,
      "title": "Make chat history user specific",
      "body": "https://github.com/embedchain/embedchain/pull/150#issuecomment-1623178555",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-06T08:10:37Z",
      "updated_at": "2024-06-02T05:43:47Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/153/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/153",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/153",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.888459",
      "comments": []
    },
    {
      "issue_number": 97,
      "title": "Query over multiple name sources",
      "body": "add support for https://www.youtube.com/watch?v=Ix9WIZpArm0",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-29T09:14:01Z",
      "updated_at": "2024-06-02T05:26:11Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/97/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/97",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/97",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.888467",
      "comments": []
    },
    {
      "issue_number": 50,
      "title": "Add support for summarization",
      "body": "- Since the data is splitted in chunks, is it possible to implement a summarize function?\r\n- opened on behalf of discord user edo, [message link](https://discord.com/channels/1121119078191480945/1121119078858358846/1122046901907357736)",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-24T06:54:18Z",
      "updated_at": "2024-06-02T05:16:44Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy",
        "size:M"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/50/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/50",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/50",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:01.888474",
      "comments": [
        {
          "author": "edops1",
          "body": "Hi! \r\nI'll try to explain the context where I would use the tool.\r\nFor work I write a lot of interviews (for TV or podcasts). I would like to upload a varied documents about a character (interviews from youtube, books, articles). Then I would ask for these things:\r\n- the summary of all the documents",
          "created_at": "2023-06-26T12:40:28Z"
        },
        {
          "author": "edops1",
          "body": "Hi, I was reading the documentation of langchain and found this document:\r\n\r\nVector store-augmented text generation\r\nhttps://python.langchain.com/docs/modules/chains/additional/vector_db_text_generation\r\n\r\nIs this something that can also be implemented in embedchain?\r\n\r\nSince documents (pdf, web pag",
          "created_at": "2023-06-28T12:27:04Z"
        },
        {
          "author": "sv-ochis",
          "body": "any updates on this ?",
          "created_at": "2024-01-05T09:16:15Z"
        }
      ]
    },
    {
      "issue_number": 83,
      "title": "feature request: Add New Format \"Image\"",
      "body": "Embedchain will parse uploaded images, extract text information and embed. \r\nEx, Screenshot of a book chapter.\r\n\r\nThe parser package should be configurable, the default should be opensource.",
      "state": "closed",
      "author": "sandeepscet",
      "author_type": "User",
      "created_at": "2023-06-27T13:39:40Z",
      "updated_at": "2024-06-02T05:05:39Z",
      "closed_at": "2024-06-02T05:05:39Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/83/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/83",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/83",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:02.077717",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Image data loader is added.  [Doc](https://docs.embedchain.ai/components/data-sources/image)",
          "created_at": "2024-06-02T05:05:39Z"
        }
      ]
    },
    {
      "issue_number": 797,
      "title": "Speed up test execution",
      "body": "### 🚀 The feature\n\nCurrently, running tests take around 3-4 mins which is quite long and the duration is going to grow only as we add more tests.  We want to reduce the time it takes to run tests by using the `pytest-xdist` package in the test env.\n\n### Motivation, pitch\n\nSpeed up tests significantly.",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-10-12T21:21:29Z",
      "updated_at": "2024-05-28T15:33:11Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue",
        "help wanted",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 5,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/797/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/797",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/797",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:02.256877",
      "comments": [
        {
          "author": "deshraj",
          "body": "Sure @tomas1161 please feel free to work on this issue. ",
          "created_at": "2023-10-13T17:23:20Z"
        },
        {
          "author": "anusha-shekhar",
          "body": "Hi, I'd like to work on this issue; could you assign it to me?",
          "created_at": "2023-12-09T16:31:45Z"
        },
        {
          "author": "razelos",
          "body": "Hey, is this still an issue that needs fixing? Would love to work on it, thanks! @deshraj ",
          "created_at": "2024-05-28T15:33:09Z"
        }
      ]
    },
    {
      "issue_number": 381,
      "title": "refactor required: metadata",
      "body": "### 🐛 Describe the bug\n\nMetadata is zipped and unzipped and loop through multiple times, and different stuff is added to it at different points. This can't be the best way. \r\n\r\nWhat needs to be done?\r\n\r\n1. understand the current situation\r\n2. refactor it\r\n\r\nOpen for contributions",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-27T16:43:33Z",
      "updated_at": "2024-05-23T20:28:14Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/381/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/381",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/381",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:02.441432",
      "comments": [
        {
          "author": "jramine",
          "body": "I would like to work on this could you assign it to me ",
          "created_at": "2024-02-19T10:17:49Z"
        },
        {
          "author": "ashanviii",
          "body": "Hey @cachho  I'd like to work on this issue. If it's still unassigned, could you please assign it to me?",
          "created_at": "2024-05-23T20:28:13Z"
        }
      ]
    },
    {
      "issue_number": 1070,
      "title": "Improve logs which shows that same text/content exists and its chunking and embedding generation is skipped.",
      "body": "### 🐛 Describe the bug\n\nI am trying to add the same text to the app. But the logs are not clear. \r\nI checked the number of chunks, its one only. But the logs are not clear and it seems like the process is happening again.\r\n\r\nHere is the entire code to reproduce this\r\n\r\n\r\n```\r\nIn [2]: from embedchain import Pipeline as App\r\n\r\nIn [3]: app = App()\r\na\r\nIn [4]: app.add(\"Hello world\")\r\n2023-12-28 20:18:58,223 - root - ERROR - Insert valid string format of JSON.             Check the docs to see the supported formats - `https://docs.embedchain.ai/data-sources/json`\r\nInserting batches in chromadb: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.62it/s]\r\nSuccessfully saved Hello world (DataType.TEXT). New chunks count: 1\r\nOut[4]: '3e25960a79dbc69b674cd4ec67a72c62'\r\n\r\nIn [5]: app.add(\"Hello world\")\r\n2023-12-28 20:19:05,516 - root - ERROR - Insert valid string format of JSON.             Check the docs to see the supported formats - `https://docs.embedchain.ai/data-sources/json`\r\nInserting batches in chromadb:   0%|                                                                                                                        | 0/1 [00:00<?, ?it/s]2023-12-28 20:19:06,016 - chromadb.segment.impl.vector.local_persistent_hnsw - WARNING - Add of existing embedding ID: bb8c7577-2af3-4fd6-8221-e607cf96396e--34193c37dfc2c2e7a8d7c3391bf59eb497ae5ec7e0362a3865dec9ae2af63c05\r\n2023-12-28 20:19:06,017 - chromadb.segment.impl.metadata.sqlite - WARNING - Insert of existing embedding ID: bb8c7577-2af3-4fd6-8221-e607cf96396e--34193c37dfc2c2e7a8d7c3391bf59eb497ae5ec7e0362a3865dec9ae2af63c05\r\nInserting batches in chromadb: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.99it/s]\r\nSuccessfully saved Hello world (DataType.TEXT). New chunks count: 0\r\nOut[5]: '3e25960a79dbc69b674cd4ec67a72c62'\r\n\r\nIn [6]: app.db.count()\r\nOut[6]: 1\r\n```",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-12-28T14:51:44Z",
      "updated_at": "2024-04-14T13:03:11Z",
      "closed_at": null,
      "labels": [
        "easy"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1070/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1070",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1070",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:02.665756",
      "comments": [
        {
          "author": "Esparon1",
          "body": "Hi @taranjeet can I try working on this ? ",
          "created_at": "2024-04-14T13:03:10Z"
        }
      ]
    },
    {
      "issue_number": 677,
      "title": "Rename vectordbs/BaseConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\n\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.\r\n\r\n## Example\r\n\r\n### Accepted file name\r\nthis_file_name_is_accepted.py\r\n\r\n### Not accepted file name(s)\r\nThis_File_Name_Is_Not_Accepted.py\r\nTHIS_FILE_NAME_IS_NOT_ACCEPTED.py",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T06:00:54Z",
      "updated_at": "2024-03-30T11:33:26Z",
      "closed_at": "2023-09-27T16:08:44Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/677/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/677",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/677",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:02.847902",
      "comments": [
        {
          "author": "taranjeet",
          "body": "@dev-ayush69 : just assigned it you. Please feel free to pick it up.",
          "created_at": "2023-09-27T03:54:33Z"
        },
        {
          "author": "taranjeet",
          "body": "@dev-ayush69 : can you make one comment here? without the comment, I cannot assign it you (some github logic)",
          "created_at": "2023-09-27T03:55:28Z"
        },
        {
          "author": "ghost",
          "body": "Sure @taranjeet ",
          "created_at": "2023-09-27T04:41:38Z"
        },
        {
          "author": "taranjeet",
          "body": "Assigned it to you @dev-ayush69 ",
          "created_at": "2023-09-27T05:09:50Z"
        }
      ]
    },
    {
      "issue_number": 676,
      "title": "Rename vectordbs/AddConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\n\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.\r\n\r\n## Example\r\n\r\n### Accepted file name\r\nthis_file_name_is_accepted.py\r\n\r\n### Not accepted file name(s)\r\nThis_File_Name_Is_Not_Accepted.py\r\nTHIS_FILE_NAME_IS_NOT_ACCEPTED.py",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T06:00:21Z",
      "updated_at": "2024-03-30T11:33:26Z",
      "closed_at": "2023-09-27T16:08:43Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/676/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/676",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/676",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:03.010901",
      "comments": [
        {
          "author": "ghost",
          "body": "Hi @taranjeet . I would like to take up this issue. Can you pls assign me this issue and also #677 ?",
          "created_at": "2023-09-26T18:18:35Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @dev-ayush69 , just assigned it to you.",
          "created_at": "2023-09-26T18:29:15Z"
        }
      ]
    },
    {
      "issue_number": 629,
      "title": "refactor: remove `load_and_embed` v1 method from `embedchain` class",
      "body": "### 🐛 Describe the bug\n\n* remove the v1 method which is unused",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-17T18:58:04Z",
      "updated_at": "2024-03-30T11:33:26Z",
      "closed_at": "2023-09-26T23:28:50Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/629/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/629",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/629",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:03.278349",
      "comments": [
        {
          "author": "ghost",
          "body": "Can I pick this issue up @cachho ?",
          "created_at": "2023-09-18T16:21:07Z"
        },
        {
          "author": "cachho",
          "body": "> Can I pick this issue up @cachho ?\r\n\r\nabsolutely ",
          "created_at": "2023-09-18T21:00:11Z"
        }
      ]
    },
    {
      "issue_number": 120,
      "title": "feature request: Reddit Post data type",
      "body": "Should be the post only, but optionally also the comments. That's the reason the web page format won't cut it. \r\n\r\nI think for small quantities, the reddit API can be used without auth, we could leave auth up to the user via env vars.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-02T08:42:29Z",
      "updated_at": "2024-03-15T02:37:44Z",
      "closed_at": null,
      "labels": [
        "new-data-source"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/120/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/120",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/120",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:03.539096",
      "comments": [
        {
          "author": "slavakurilyak",
          "body": "Reddit has [70+ million daily users](https://www.demandsage.com/reddit-statistics/) as of 2024 and contains incredible amount of data\r\n\r\nAnyone interested to add this data source to `embedchain`?",
          "created_at": "2024-03-15T02:37:42Z"
        }
      ]
    },
    {
      "issue_number": 796,
      "title": "Add support for OpenAI function calling",
      "body": "### 🚀 The feature\n\nUsers have requested this feature where they want to do OpenAI function calling using Embedchain. See request here: \r\n\r\n<img width=\"647\" alt=\"Screenshot 2023-10-12 at 10 27 25 AM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/fcf002d7-cd6e-4e49-92f9-60c768098b49\">\r\n\n\n### Motivation, pitch\n\nThis is going to be really useful for devs who are using OpenAI LLMs so we should add support for it. ",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-10-12T17:28:03Z",
      "updated_at": "2024-02-12T01:58:13Z",
      "closed_at": "2024-02-12T01:58:12Z",
      "labels": [
        "enhancement",
        "medium",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/796/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/796",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/796",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:05.640968",
      "comments": [
        {
          "author": "ShatilKhan",
          "body": "Hi @deshraj , can you provide some guidance on how to achieve this?\r\nI'd like to work on this",
          "created_at": "2023-10-14T06:44:57Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Can I pick this up @deshraj?",
          "created_at": "2023-10-14T07:07:24Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, go for it. ",
          "created_at": "2023-10-14T07:08:18Z"
        },
        {
          "author": "Adity20",
          "body": "Hi, Can you assign this issue to me \r\n",
          "created_at": "2023-10-14T19:07:41Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Can you give more context on it @deshraj?\r\nDo we create a separate class for it or add it in `OpenAILlm`",
          "created_at": "2023-10-15T09:25:48Z"
        }
      ]
    },
    {
      "issue_number": 695,
      "title": "Add support for FAISS as vector database",
      "body": "### 🚀 The feature\n\nhttps://faiss.ai/index.html\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:18:36Z",
      "updated_at": "2024-01-30T18:21:04Z",
      "closed_at": null,
      "labels": [
        "hacktoberfest"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/695/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/695",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/695",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:05.835573",
      "comments": [
        {
          "author": "Hrishikesh332",
          "body": "I would like to work on the issue, I have previously worked on the faiss as vector databases for RAG. Could you please specify the requirements needed like whether the integration of embedchain is needed or the notebook/app code is expected.\r\n\r\nIt would be really great to contribute into this",
          "created_at": "2023-09-27T09:26:45Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @Hrishikesh332 , thats great. Looking for integration in the package, like we have other vector db integrated.\r\n",
          "created_at": "2023-09-27T16:17:08Z"
        },
        {
          "author": "deshraj",
          "body": "Hey @Hrishikesh332, are you still interested in working on this issue? If not, we can assign this to someone else. ",
          "created_at": "2024-01-30T18:21:04Z"
        }
      ]
    },
    {
      "issue_number": 1204,
      "title": "Change link to slack everywhere in the docs",
      "body": "### 🐛 Describe the bug\n\nIn docs, we are just a join.slack.com link. It gets expired time to time and we have to manage the updates everywhere.\r\nSo we have created a link at root domain https://embedchain.ai/slack\r\n\r\nThis task is about replacing all the slack link with above mentioned link. https://embedchain.ai/slack",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2024-01-23T02:31:28Z",
      "updated_at": "2024-01-23T04:54:58Z",
      "closed_at": "2024-01-23T04:54:57Z",
      "labels": [
        "easy"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1204/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1204",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1204",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:06.025158",
      "comments": []
    },
    {
      "issue_number": 687,
      "title": "Support AWS bedrock LLM",
      "body": "### 🚀 The feature\n\nhttps://python.langchain.com/docs/integrations/platforms/aws\n\n### Motivation, pitch\n\n* We need to support more llms so that users have the flexibility of choosing whatever LLM they want to use.\r\n* Langchain provides a standard interface for llms. This helps in better code maintenance and also helps in better observability.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:28:14Z",
      "updated_at": "2024-01-21T08:39:10Z",
      "closed_at": "2024-01-21T08:39:10Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/687/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/687",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/687",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:06.025179",
      "comments": [
        {
          "author": "KapilM26",
          "body": "@taranjeet please assign this to me",
          "created_at": "2023-10-03T13:45:05Z"
        },
        {
          "author": "krrishdholakia",
          "body": "Hey @taranjeet @KapilM26 @sidmohanty11 you can do this with ChatLiteLLM in Langchain \r\n\r\n```python\r\nfrom langchain.chat_models import ChatLiteLLM\r\nfrom langchain.schema import AIMessage, HumanMessage, SystemMessage\r\n\r\nchat = ChatLiteLLM(model=\"bedrock/anthropic.claude-v2\")\r\n\r\nmessages = [\r\n    Human",
          "created_at": "2023-10-21T23:08:05Z"
        }
      ]
    },
    {
      "issue_number": 1027,
      "title": "Support LLMs from vllm",
      "body": "Add support for loading LLM models from vllm package: https://github.com/vllm-project/vllm",
      "state": "closed",
      "author": "xxm1668",
      "author_type": "User",
      "created_at": "2023-12-19T02:07:29Z",
      "updated_at": "2024-01-09T12:08:55Z",
      "closed_at": "2024-01-09T12:08:54Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1027/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1027",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1027",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:06.222584",
      "comments": [
        {
          "author": "deshraj",
          "body": "Hey @xxm1668, we don't yet have support for models from vllm but it should be easy to add. We can prioritize it for you. ",
          "created_at": "2023-12-19T04:25:43Z"
        }
      ]
    },
    {
      "issue_number": 1133,
      "title": "Add support for Hugging Face Inference Endpoint as LLM",
      "body": "### 🚀 The feature\n\nRequested by Rami on Embedchain slack. Link: https://embedchain.slack.com/archives/C05RG7CJKC6/p1704630024321719\r\n\r\n<img width=\"869\" alt=\"Screenshot 2024-01-07 at 9 43 29 PM\" src=\"https://github.com/embedchain/embedchain/assets/2945708/b6d76ac0-488a-44e5-afe1-adc51512353b\">\r\n\n\n### Motivation, pitch\n\nMotivation is to provide support for different LLM providers possible. ",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2024-01-07T16:13:57Z",
      "updated_at": "2024-01-08T18:20:05Z",
      "closed_at": "2024-01-08T18:20:05Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1133/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1133",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1133",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:06.407400",
      "comments": [
        {
          "author": "mae5357",
          "body": "Hey @deshraj! I would be interested in this. Would you want a new llm class, or to modify HuggingFaceLlm()?",
          "created_at": "2024-01-08T13:05:16Z"
        },
        {
          "author": "deshraj",
          "body": "Thanks a lot for offering help. ❤️\n\nYeah we want to add support in the existing class where the user can pass the inference endpoint and other params (optional). \n\nLet me know if you have any other questions. ",
          "created_at": "2024-01-08T13:16:36Z"
        }
      ]
    },
    {
      "issue_number": 433,
      "title": "Add chat endpoint in the api server example",
      "body": "### 🚀 The feature\n\n- add chat endpoint in the api server\n\n### Motivation, pitch\n\nthis completes the entire api server for a user and they can know try both chat and query\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-12T00:01:36Z",
      "updated_at": "2024-01-07T11:01:28Z",
      "closed_at": "2024-01-07T11:01:27Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/433/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/433",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/433",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:08.441159",
      "comments": [
        {
          "author": "pcha07",
          "body": "hi could you please provide more information i am interested in this issue and would like to contribute.",
          "created_at": "2023-08-18T21:59:43Z"
        },
        {
          "author": "taranjeet",
          "body": "Sure, we have added an example of api server in the repo here: https://github.com/embedchain/embedchain/tree/main/examples/api_server\r\n\r\nIt has query endpoint. We need to expose chat endpoint in the api.",
          "created_at": "2023-08-18T22:05:46Z"
        },
        {
          "author": "taranjeet",
          "body": "@pcha07 : added details in the above comment. let me know if you have any doubt.",
          "created_at": "2023-08-18T22:06:06Z"
        },
        {
          "author": "BattiniSandeep",
          "body": "Is this issue resolved?\r\n",
          "created_at": "2023-09-28T19:18:10Z"
        },
        {
          "author": "PatelKeviin",
          "body": "I believe this should be closed as I can see a `chat` endpoint being exposed in the `api_server.py` example file. :)\r\n\r\n<img width=\"773\" alt=\"image\" src=\"https://github.com/embedchain/embedchain/assets/42174390/70c68472-de9e-4ac2-b4d3-2d39fe4c5093\">\r\n",
          "created_at": "2023-11-26T02:16:07Z"
        }
      ]
    },
    {
      "issue_number": 710,
      "title": "Use app.db.count() instead of app.count()",
      "body": "### 🐛 Describe the bug\r\n\r\nFollowing code snippet gives a warning\r\n\r\n```\r\nfrom embedchain import App\r\napp = App()\r\napp.count()\r\n[root] [WARNING] DEPRECATION WARNING: Please use `app.db.count()` instead of `app.count()`.\r\n```\r\n\r\nCount function counts the number of chunks in the database. We need to update and fix this warning.\r\n",
      "state": "closed",
      "author": "Lato-Masi",
      "author_type": "User",
      "created_at": "2023-09-27T05:09:15Z",
      "updated_at": "2024-01-07T09:48:46Z",
      "closed_at": "2024-01-05T08:21:51Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/710/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "infinite-wait",
        "th-shristi"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/710",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/710",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:08.668878",
      "comments": [
        {
          "author": "th-shristi",
          "body": "Can I work on this issue? ",
          "created_at": "2023-09-27T08:38:14Z"
        },
        {
          "author": "Lato-Masi",
          "body": "> Can I work on this issue?\r\n\r\ngo for it, the change is very easy.",
          "created_at": "2023-09-27T14:34:06Z"
        },
        {
          "author": "taranjeet",
          "body": "@th-shristi : assigned it to you.",
          "created_at": "2023-09-27T16:13:04Z"
        },
        {
          "author": "th-shristi",
          "body": "in which file this code exist? @taranjeet can you drop the path?",
          "created_at": "2023-09-30T20:30:27Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @th-shristi , \r\nso you will have to remove the function `count()` located in `embedchain/embedchain.py`.\r\nYou will have to make sure that everything works after removing this function - all tests, code should work.",
          "created_at": "2023-10-01T00:55:15Z"
        }
      ]
    },
    {
      "issue_number": 525,
      "title": "Feature request: Google drive folder/instance as a data source",
      "body": "### 🚀 The feature\n\nRather than adding one document at a time, enable the bot to ingest an entire google folder or directory structure\n\n### Motivation, pitch\n\noften times, the knowledge on which you want to train the bot is already curated, Pointing it to that repository rather than having to manually enter the URL of each and every file will save a lot of setup time and as well as make supporting more dynamic knowledge bases easier - you don't have to have a preconceived notion of how the knowledge is divided and across which files. ",
      "state": "closed",
      "author": "itamargo",
      "author_type": "User",
      "created_at": "2023-09-01T00:03:22Z",
      "updated_at": "2024-01-05T06:16:02Z",
      "closed_at": "2024-01-05T06:16:02Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/525/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "JoeSL"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/525",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/525",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:08.886056",
      "comments": [
        {
          "author": "cefege",
          "body": "Yes, that would be very usefull.",
          "created_at": "2023-09-26T09:51:27Z"
        },
        {
          "author": "JoeSL",
          "body": "Hello, if no one is working on it I would love to! @cachho ",
          "created_at": "2023-12-10T15:39:45Z"
        },
        {
          "author": "taranjeet",
          "body": "hey @JoeSL , just assigned it to you.",
          "created_at": "2023-12-11T11:40:17Z"
        }
      ]
    },
    {
      "issue_number": 1090,
      "title": "Add support to add youtube video where transcript is not available",
      "body": "### 🚀 The feature\n\nWe need to improve our support for youtube video data loader to embed even those videos where transcript is not available.\r\nIn the current loader, then transcript is not available, we should use a transcription model to generate the transcript and then embed it as usual. \n\n### Motivation, pitch\n\nThis increases the catalog of data loaders that embedchain supports and make it accessible to a wide set of audience.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-12-30T18:18:46Z",
      "updated_at": "2023-12-30T18:18:47Z",
      "closed_at": null,
      "labels": [
        "new-data-source"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1090/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1090",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1090",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:09.075936",
      "comments": []
    },
    {
      "issue_number": 1071,
      "title": "All the warnings and error message should following a convention in terms of style and tone",
      "body": "### 🐛 Describe the bug\n\nEach warning and error message should follow a particular tone and style. \r\n\r\nEg:\r\n`Doc content has not changed. Skipping creating chunks and embeddings` can be `There is no change in data source content, so skipping its chunk creation and embedding generation.`\r\n\r\n[github commit guideliens](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) are a good starting point to refer.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-12-28T15:09:01Z",
      "updated_at": "2023-12-29T14:28:09Z",
      "closed_at": null,
      "labels": [
        "easy"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/1071/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/1071",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/1071",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:09.075954",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Also if somebody is picking up this task, best way would to create a list of all such strings at one place, and then parallely figure out the best writing style.\r\nOnce the writing style and list is closed, then one should start with the implementation.",
          "created_at": "2023-12-28T15:10:28Z"
        }
      ]
    },
    {
      "issue_number": 375,
      "title": "bug: AppConfig `id` is not working as intended.",
      "body": "### 🐛 Describe the bug\n\nThis could very well have to do with the new Chroma.\r\n\r\n**Delete your db folder**. Run this test script.\r\n\r\n```\r\nfrom embedchain import App\r\nfrom embedchain.config import AppConfig\r\n\r\nconfig = AppConfig(id=\"1\")\r\nelon_musk_bot = App(config=config)\r\n\r\n# Embed Online Resources\r\nelon_musk_bot.add(\"web_page\", \"https://en.wikipedia.org/wiki/Elon_Musk\")\r\n\r\nresponse = elon_musk_bot.query(\"How many companies does Elon Musk run?\", dry_run=True)\r\nprint(response)\r\n```\r\n\r\nIt looks like it works as intended.\r\n\r\n```\r\nERROR:chromadb.telemetry.posthog:Failed to send telemetry event client_start: module 'chromadb' has no attribute 'get_settings'\r\nERROR:chromadb.telemetry.posthog:Failed to send telemetry event collection_add: module 'chromadb' has no attribute 'get_settings'\r\nSuccessfully saved https://en.wikipedia.org/wiki/Elon_Musk. New chunks count: 361\r\n\r\n  Use the following pieces of context to answer the query at the end.\r\n  If you don't know the answer, just say that you don't know, don't try to make up an answer.\r\n\r\n  In popular culture Elon Musk Ludicrous Power Play \"Members Only\" \"The Platonic Permutation\" \"The Musk Who Fell to Earth\" \"One Crew over the Crewcoo's Morty\" Elon Musk's Crash Course Related Boring Test Tunnel Hyperloop Musk family Musk vs. Zuckerberg SolarCity Tesla Roadster in space TSLAQ Twitter Files 2022 Twitter suspensions vte Elon Reeve Musk (/ˈiːlɒn/ EE-lon; born June 28, 1971) is a business magnate and investor. He is the founder, chairman, CEO, and chief technology officer of SpaceX;\r\n\r\n  Query: How many companies does Elon Musk run?\r\n\r\n  Helpful Answer:\r\n\r\n```\r\n\r\nNow change the id to `config = AppConfig(id=\"2\")`.\r\n\r\nExpected behavior: It should not find the existing embeddings, because the existing embeddings are filtered with the where clause in the `add` method.\r\n\r\nActual behavior:\r\n\r\n```\r\nERROR:chromadb.telemetry.posthog:Failed to send telemetry event client_start: module 'chromadb' has no attribute 'get_settings'\r\n# these 4 lines 361 times\r\nWARNING:chromadb.segment.impl.vector.local_persistent_hnsw:Add of existing embedding ID: c871e6271355a2148e2cbdf84fbcd8861832fc56a10b166e4170fb66268e93a1\r\nWARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: c871e6271355a2148e2cbdf84fbcd8861832fc56a10b166e4170fb66268e93a1\r\n# these 4 lines 361 times\r\nERROR:chromadb.telemetry.posthog:Failed to send telemetry event collection_add: module 'chromadb' has no attribute 'get_settings'\r\nSuccessfully saved https://en.wikipedia.org/wiki/Elon_Musk. New chunks count: 0\r\n\r\n  Use the following pieces of context to answer the query at the end.\r\n  If you don't know the answer, just say that you don't know, don't try to make up an answer.\r\n\r\n  \r\n\r\n  Query: How many companies does Elon Musk run?\r\n\r\n  Helpful Answer:\r\n```\r\n\r\nIt looks like chroma has internal deduplication, so no new chunks are added. But because the where clause is using the id, no context is received.\r\n\r\nI also got it to actually error when changing ids, but I can't reproduce this\r\n\r\n\r\n**This means we need to rethink, if two id's cant have the same embeddings, if there's any use to having this functionality, or if it's better to remove it and rely on collections.**\r\n\r\ntagging @shashank42 because you originally implemented this in #189.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-27T12:07:02Z",
      "updated_at": "2023-12-23T15:53:05Z",
      "closed_at": "2023-12-23T15:53:05Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/375/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/375",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/375",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:09.438970",
      "comments": [
        {
          "author": "taranjeet",
          "body": "`AppConfig` is deprecated, so closing this issue now.",
          "created_at": "2023-12-23T15:53:05Z"
        }
      ]
    },
    {
      "issue_number": 363,
      "title": "bug: chromadb error while adding file",
      "body": "### 🐛 Describe the bug\r\n\r\n```\r\n--- Logging error ---\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\db\\mixins\\embeddings_queue.py\", line 263, in _notify_one\r\n    sub.callback([embedding])\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_persistent_hnsw.py\", line 210, in _write_records\r\n    self._ensure_index(len(records), len(record[\"embedding\"]))\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_hnsw.py\", line 205, in _ensure_index\r\n    self._init_index(dim)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_persistent_hnsw.py\", line 157, in _init_index\r\n    index.init_index(\r\nTypeError: init_index(): incompatible function arguments. The following argument types are supported:\r\n    1. (self: hnswlib.Index, max_elements: int, M: int = 16, ef_construction: int = 200, random_seed: int = 100, allow_replace_deleted: bool = False) -> None\r\n\r\nInvoked with: <hnswlib.Index(space='l2', dim=384)>; kwargs: max_elements=1000, ef_construction=100, M=16, is_persistent_index=True, persistence_location='db\\\\3f7b5db5-57f5-4bb3-af49-9e020de70739'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 1083, in emit\r\n    msg = self.format(record)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 927, in format\r\n    return fmt.format(record)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 663, in format\r\n    record.message = record.getMessage()\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 367, in getMessage\r\n...\r\nlogger.error(\r\nMessage: 'Exception occurred invoking consumer for subscription 21ed8025-5ae8-47b0-b225-18a08636094dto topic persistent://default/default/618da312-a3c3-41bd-b3e9-e9bb75b1ce8b for embedding id a1558dcb760eb504a9344634d22ecc90d00d9fcf12623b0ae0fa5085a22c2768 '\r\nArguments: (TypeError(\"init_index(): incompatible function arguments. The following argument types are supported:\\n    1. (self: hnswlib.Index, max_elements: int, M: int = 16, ef_construction: int = 200, random_seed: int = 100, allow_replace_deleted: bool = False) -> None\\n\\nInvoked with: <hnswlib.Index(space='l2', dim=384)>; kwargs: max_elements=1000, ef_construction=100, M=16, is_persistent_index=True, persistence_location='db\\\\\\\\3f7b5db5-57f5-4bb3-af49-9e020de70739'\"),)\r\n--- Logging error ---\r\nOutput is truncated. View as a [scrollable element](command:cellOutput.enableScrolling?a2eae853-401c-477e-ab2f-3ed3921ad812) or open in a [text editor](command:workbench.action.openLargeOutput?a2eae853-401c-477e-ab2f-3ed3921ad812). Adjust cell output [settings](command:workbench.action.openSettings?%5B%22%40tag%3AnotebookOutputLayout%22%5D)...\r\nSuccessfully saved https://www.rogers.com/cms/pdf/en/Consumer_SUG_V20.pdf. New chunks count: 200\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\db\\mixins\\embeddings_queue.py\", line 263, in _notify_one\r\n    sub.callback([embedding])\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_persistent_hnsw.py\", line 210, in _write_records\r\n    self._ensure_index(len(records), len(record[\"embedding\"]))\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_hnsw.py\", line 205, in _ensure_index\r\n    self._init_index(dim)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\segment\\impl\\vector\\local_persistent_hnsw.py\", line 157, in _init_index\r\n    index.init_index(\r\nTypeError: init_index(): incompatible function arguments. The following argument types are supported:\r\n    1. (self: hnswlib.Index, max_elements: int, M: int = 16, ef_construction: int = 200, random_seed: int = 100, allow_replace_deleted: bool = False) -> None\r\n\r\nInvoked with: <hnswlib.Index(space='l2', dim=384)>; kwargs: max_elements=1000, ef_construction=100, M=16, is_persistent_index=True, persistence_location='db\\\\3f7b5db5-57f5-4bb3-af49-9e020de70739'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 1083, in emit\r\n    msg = self.format(record)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 927, in format\r\n    return fmt.format(record)\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 663, in format\r\n    record.message = record.getMessage()\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\logging\\__init__.py\", line 367, in getMessage\r\n    msg = msg % self.args\r\n...\r\n  File \"c:\\Users\\yuncheng.liang\\Anaconda3\\lib\\site-packages\\chromadb\\db\\mixins\\embeddings_queue.py\", line 266, in _notify_one\r\n    logger.error(\r\nMessage: 'Exception occurred invoking consumer for subscription 21ed8025-5ae8-47b0-b225-18a08636094dto topic persistent://default/default/618da312-a3c3-41bd-b3e9-e9bb75b1ce8b for embedding id 6a0c886d51ac939eba5a8d308cd6bf6430f7370120814606863b447cce5687f4 '\r\n**Arguments: (TypeError(\"init_index(): incompatible function arguments. The following argument types are supported:\\n    1. (self: hnswlib.Index, max_elements: int, M: int = 16, ef_construction: int = 200, random_seed: int = 100, allow_replace_deleted: bool = False) -> None\\n\\nInvoked with: <hnswlib.Index(space='l2', dim=384)>; kwargs: max_elements=1000, ef_construction=100, M=16, is_persistent_index=True, persistence_location='db\\\\\\\\3f7b5db5-57f5-4bb3-af49-9e020de70739'\"),)**\r\n```",
      "state": "closed",
      "author": "YunchengLiang",
      "author_type": "User",
      "created_at": "2023-07-24T14:52:44Z",
      "updated_at": "2023-12-23T15:47:28Z",
      "closed_at": "2023-12-23T15:47:27Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 11,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/363/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/363",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/363",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:09.661951",
      "comments": [
        {
          "author": "YunchengLiang",
          "body": "This is the latest release 0.0.30",
          "created_at": "2023-07-24T14:53:20Z"
        },
        {
          "author": "cachho",
          "body": "Can you provide your code to reproduce?",
          "created_at": "2023-07-25T08:05:41Z"
        },
        {
          "author": "YunchengLiang",
          "body": "> Can you provide your code to reproduce?\r\n\r\nYes for sure!\r\n\r\n```python\r\nfrom embedchain import OpenSourceApp\r\nchat_bot = OpenSourceApp()\r\n\r\nfrom transformers import AutoTokenizer, AutoModel\r\ntokenizer = AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\r\ndef huggingface_tokeniz",
          "created_at": "2023-07-25T14:52:07Z"
        },
        {
          "author": "cachho",
          "body": "I can't reproduce. It works for me.\r\n\r\n```python3\r\ndef use_pysqlite3():\r\n    \"\"\"\r\n    Swap std-lib sqlite3 with pysqlite3.\r\n    \"\"\"\r\n    import subprocess\r\n    import sys\r\n\r\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"pysqlite3-binary\"])\r\n\r\n    __import__(\"pysqlite3\")\r\n    sy",
          "created_at": "2023-07-25T16:10:26Z"
        },
        {
          "author": "YunchengLiang",
          "body": "> I can't reproduce. It works for me.\r\n> \r\n> ```python\r\n> def use_pysqlite3():\r\n>     \"\"\"\r\n>     Swap std-lib sqlite3 with pysqlite3.\r\n>     \"\"\"\r\n>     import subprocess\r\n>     import sys\r\n> \r\n>     subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"pysqlite3-binary\"])\r\n> \r\n>     __impo",
          "created_at": "2023-07-25T16:51:55Z"
        }
      ]
    },
    {
      "issue_number": 98,
      "title": "IndexError: list index out of range",
      "body": "The Package was working fine with me few days ago, However after deleting DB and creating it again, I am having the below issue. \r\n\r\nNo matter what prompt, I tried it throws same error. \r\n\r\nFile \"/mnt/c/Users/User/Documents/python_projects/embedchain-streamlit-app/.venv/lib/python3.10/site-packages/streamlit/runtime/scriptrunner/script_runner.py\", line 552, in _run_script\r\n    exec(code, module.__dict__)\r\nFile \"/mnt/c/Users/User/Documents/python_projects/embedchain-streamlit-app/demo_app/main.py\", line 116, in <module>\r\n    assistant_response = response_embedchain(user_input)\r\nFile \"/mnt/c/Users/User/Documents/python_projects/embedchain-streamlit-app/demo_app/main.py\", line 28, in response_embedchain\r\n    response = naval_chat_bot.query(query)\r\nFile \"/mnt/c/Users/User/Documents/python_projects/embedchain-streamlit-app/.venv/lib/python3.10/site-packages/embedchain/embedchain.py\", line 224, in query\r\n    context = self.retrieve_from_database(input_query)\r\nFile \"/mnt/c/Users/User/Documents/python_projects/embedchain-streamlit-app/.venv/lib/python3.10/site-packages/embedchain/embedchain.py\", line 185, in retrieve_from_database\r\n    content = result_formatted[0][0].page_content",
      "state": "closed",
      "author": "amjadraza",
      "author_type": "User",
      "created_at": "2023-06-29T09:48:40Z",
      "updated_at": "2023-12-23T15:39:30Z",
      "closed_at": "2023-12-23T15:39:29Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/98/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/98",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/98",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:09.933655",
      "comments": [
        {
          "author": "xumeng",
          "body": "I copy the code file and database files, and it report same error.",
          "created_at": "2023-06-30T02:17:09Z"
        },
        {
          "author": "cachho",
          "body": "When you initialize the application, what does it say how many embeddings it found? Usually, this error indicates that there was no embedding found for your query. From my experience, this happens when the database got wiped for some reason (at this point I can't say why that happens). Maybe it coul",
          "created_at": "2023-07-01T12:36:22Z"
        },
        {
          "author": "amjadraza",
          "body": "It takes some time to get the Embeddings ready. Probably, we should add some await message before we can send the request.",
          "created_at": "2023-07-02T04:12:17Z"
        },
        {
          "author": "cachho",
          "body": "> It takes some time to get the Embeddings ready. Probably, we should add some await message before we can send the request.\r\n\r\nI noticed that too, that it seems to be asyncronous. Maybe, if we return the values (#109) it forces python to wait? I don't know where the async part comes in (most likely",
          "created_at": "2023-07-02T08:30:45Z"
        },
        {
          "author": "taranjeet",
          "body": "THis issue has not been reported for the past few weeks. so closing this.\r\nfeel free to reopen it.",
          "created_at": "2023-12-23T15:39:29Z"
        }
      ]
    },
    {
      "issue_number": 51,
      "title": "Add support to load codebase",
      "body": "- Thanks, Such a handy repo! Loving the user-friendly API. Can't wait to see it support a whole codebase(just like other types of documents) in the future：）\r\n- opened on behalf of twitter user ericman65204539, [tweet](https://twitter.com/ericman65204539/status/1672530139878682624)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-24T12:41:52Z",
      "updated_at": "2023-12-23T15:37:52Z",
      "closed_at": "2023-12-23T15:37:52Z",
      "labels": [
        "new-data-source",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/51/reactions",
        "total_count": 4,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 4,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/51",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/51",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:10.171542",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Support for [loading code repo](https://docs.embedchain.ai/components/data-sources/github) exists.\r\nClosing this issue.",
          "created_at": "2023-12-23T15:37:52Z"
        }
      ]
    },
    {
      "issue_number": 877,
      "title": "Sitemap loader doesn't work with local files",
      "body": "### 🐛 Describe the bug\n\nCurrently, the sitemap loader only works with urls and not with file present on a local filesystem. We want to add support for it like all other data loaders which support both loading from a url and loading from local file system.\r\n\r\nIssue was reported here on slack community: https://embedchain.slack.com/archives/C05RG7CJKC6/p1698393783510609",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-10-30T22:11:43Z",
      "updated_at": "2023-12-23T05:26:34Z",
      "closed_at": "2023-12-23T05:26:34Z",
      "labels": [
        "bug",
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/877/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/877",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/877",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:10.362122",
      "comments": [
        {
          "author": "vishutupili",
          "body": "Hi, I would like to work on this issue. Could you please assign me to it.",
          "created_at": "2023-12-09T16:30:19Z"
        }
      ]
    },
    {
      "issue_number": 810,
      "title": "Add support for Ollama",
      "body": "### 🚀 The feature\n\nWe want to add support for LLMs and embedding models through Langchain.\r\n\r\nYou can find the Ollama docs in Langchain here: https://python.langchain.com/docs/integrations/llms/ollama\n\n### Motivation, pitch\n\nRequested on twitter: https://twitter.com/Blaq_Mo/status/1713899522399580335",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-10-16T23:02:07Z",
      "updated_at": "2023-12-21T23:40:02Z",
      "closed_at": "2023-12-21T23:40:02Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 15,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/810/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "SrijanSahaySrivastava"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/810",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/810",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:10.531321",
      "comments": [
        {
          "author": "rsato10",
          "body": "Hello, can I work on issue #810.\r\n",
          "created_at": "2023-10-17T23:26:33Z"
        },
        {
          "author": "deshraj",
          "body": "> Hello, can I work on issue #810.\n> \n> \n\n@rsato10 sure, go for it. ",
          "created_at": "2023-10-18T00:12:53Z"
        },
        {
          "author": "SrijanSahaySrivastava",
          "body": "may i please work on it? i have some plans laid out for it\r\n",
          "created_at": "2023-10-22T13:56:52Z"
        },
        {
          "author": "deshraj",
          "body": "@rsato10 are you working on this issue? If not, we will assign it to @SrijanSahaySrivastava",
          "created_at": "2023-10-26T05:42:06Z"
        },
        {
          "author": "rsato10",
          "body": "@deshraj Sorry, I've been having midterms. So you can assign it to @SrijanSahaySrivastava. When I have free time could I contribute on other issues?",
          "created_at": "2023-10-26T05:44:55Z"
        }
      ]
    },
    {
      "issue_number": 300,
      "title": "bug: Reset destroys app instance",
      "body": "### 🐛 Describe the bug\r\n\r\nWhen you use the `reset` method, the app instance is destroyed. It should be automatically reinitialized within the method, so that you can just keep using the app.\r\n\r\nNot really a bug in the true sense, as it's not unexpected behavior.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-17T16:47:28Z",
      "updated_at": "2023-12-17T19:09:14Z",
      "closed_at": "2023-12-17T19:09:14Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/300/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/300",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/300",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:12.519594",
      "comments": [
        {
          "author": "jonasiwnl",
          "body": "PR opened (#319)",
          "created_at": "2023-07-19T03:34:42Z"
        },
        {
          "author": "taranjeet",
          "body": "Closing this as the PR is merged.\r\nthanks for opening the issue.",
          "created_at": "2023-12-17T19:09:12Z"
        }
      ]
    },
    {
      "issue_number": 683,
      "title": "Support gpt4all integration via langchain",
      "body": "### 🚀 The feature\n\nCurrent gpt4all integration is barebones and doesn't use langchain.\r\nlangchain provides a unified interface.\r\nhttps://python.langchain.com/docs/integrations/providers/gpt4all\n\n### Motivation, pitch\n\n* When we move to using gpt4all via langchain, our users can use langsmith for observability.\r\n* Standard interface for llm helps in better code maintenance ",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:21:20Z",
      "updated_at": "2023-12-15T04:46:08Z",
      "closed_at": "2023-12-15T04:46:08Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/683/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "ShivamMenda"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/683",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/683",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:12.747833",
      "comments": [
        {
          "author": "ShivamMenda",
          "body": "@taranjeet I want to work on this feature, using langchain we can import it and I can use it to generate output. But I'm unsure how to integrate it with a large-scale project like this one. Is there any way you could guide me or explain the integration process so that I can contribute?",
          "created_at": "2023-09-26T18:35:50Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @ShivamMenda , sure.\r\nYou can go through all the files in \r\nhttps://github.com/embedchain/embedchain/tree/main/embedchain/llm\r\nto understand how each llm is integrated.\r\n\r\nYou can look at https://github.com/embedchain/embedchain/blob/main/embedchain/llm/vertex_ai.py for example to learn more abo",
          "created_at": "2023-09-26T20:08:37Z"
        },
        {
          "author": "ShivamMenda",
          "body": "@taranjeet Sure thanks. I'll try it out.",
          "created_at": "2023-09-27T03:40:28Z"
        },
        {
          "author": "ShivamMenda",
          "body": "@taranjeet added the integration. Please do check it out.",
          "created_at": "2023-10-02T10:55:39Z"
        },
        {
          "author": "taranjeet",
          "body": "this is already live. Closing this.",
          "created_at": "2023-12-15T04:46:08Z"
        }
      ]
    },
    {
      "issue_number": 665,
      "title": "Rename apps/Llama2App.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:59:19Z",
      "updated_at": "2023-12-15T04:45:16Z",
      "closed_at": "2023-12-15T04:45:16Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/665/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Agnik7"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/665",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/665",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:12.965888",
      "comments": [
        {
          "author": "Agnik7",
          "body": "Hi! I am participating in Hacktoberfest and would like to work on this issue. Kindly assign this to me.",
          "created_at": "2023-09-27T00:46:27Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @Agnik7 , just assigned it to you.",
          "created_at": "2023-09-27T01:32:58Z"
        },
        {
          "author": "Agnik7",
          "body": "Hey @taranjeet I am on a Windows system. Could you kindly guide me how I can run the linter and code formatter?",
          "created_at": "2023-09-30T04:44:54Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @Agnik7 , see if following helps\r\n\r\nhttps://docs.embedchain.ai/contribution/dev\r\nhttps://stackoverflow.com/a/16963660/2534102",
          "created_at": "2023-09-30T05:15:18Z"
        },
        {
          "author": "Agnik7",
          "body": "Hi @taranjeet yeah, those resources helped a lot!!!",
          "created_at": "2023-09-30T05:54:49Z"
        }
      ]
    },
    {
      "issue_number": 661,
      "title": "Rename models/VectorDatabases.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:56:53Z",
      "updated_at": "2023-12-15T04:44:43Z",
      "closed_at": "2023-12-15T04:44:43Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/661/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/661",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/661",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:13.191189",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet working on it.",
          "created_at": "2023-09-27T04:16:42Z"
        },
        {
          "author": "PatelKeviin",
          "body": "This issue should be closed as it was merged a while ago?",
          "created_at": "2023-11-26T01:54:25Z"
        },
        {
          "author": "taranjeet",
          "body": "thanks @PatelKeviin . closing this ",
          "created_at": "2023-12-15T04:44:43Z"
        }
      ]
    },
    {
      "issue_number": 664,
      "title": "Rename apps/CustomApp.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:58:46Z",
      "updated_at": "2023-12-15T04:44:21Z",
      "closed_at": "2023-12-15T04:44:21Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/664/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "subhajit20"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/664",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/664",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:13.429481",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet  can I work on this?",
          "created_at": "2023-09-26T06:19:37Z"
        },
        {
          "author": "taranjeet",
          "body": "Sure, just assigned it to you.",
          "created_at": "2023-09-26T06:45:36Z"
        }
      ]
    },
    {
      "issue_number": 388,
      "title": "docs: AppConfig id setting is not documented",
      "body": "### 🐛 Describe the bug\n\ntitle",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-02T19:43:54Z",
      "updated_at": "2023-12-14T08:58:01Z",
      "closed_at": "2023-12-14T08:58:00Z",
      "labels": [
        "documentation",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/388/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/388",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/388",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:13.625652",
      "comments": [
        {
          "author": "taranjeet",
          "body": "this is not needed now as we have YAML config where setting app id is fairly clear.",
          "created_at": "2023-12-14T08:58:00Z"
        }
      ]
    },
    {
      "issue_number": 446,
      "title": "Get meta data stored in vector db",
      "body": "### 🚀 The feature\n\nseems there is no way to get meta info stored in vector db, in certain case we may need to get the information, eg. doc url etc.\n\n### Motivation, pitch\n\nI store doc urls in meta, but now there is no way to retrieve them.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "open",
      "author": "nj9106",
      "author_type": "User",
      "created_at": "2023-08-15T06:13:11Z",
      "updated_at": "2023-12-14T08:52:44Z",
      "closed_at": null,
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/446/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/446",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/446",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:13.808980",
      "comments": [
        {
          "author": "cachho",
          "body": "What's the problem you want to solve? You want to get all documents back, that have a certain metadata? And you just want the documents, without using them in an LLM context?",
          "created_at": "2023-08-15T08:55:54Z"
        },
        {
          "author": "nj9106",
          "body": "We have a QA knowledge base, each QA has a URL that can access it, get the embeddings of these questions, store the embeddings to vectorDB together with summaries of the answers ( got from LLM ) and URLs of the QAs, the summaries and URLs are stored in meta data. Later uses ask questions and we sear",
          "created_at": "2023-08-16T05:32:40Z"
        },
        {
          "author": "cachho",
          "body": "I have a QnA site too. I store the QnA pairs in a database, then I have an API to request them.\r\n\r\nThen I get iterate over the list of QnA pairs and add them to the vector database with the `add` function. Then the customer uses the `query` function.",
          "created_at": "2023-08-17T13:09:21Z"
        },
        {
          "author": "cachho",
          "body": "I understand that you attach a URL metadata to each embedding, and you want to retrieve it together with the answer to the query function. This is in fact not supported currently.\r\n\r\nIt is possible, as seen in the chroma docs: https://docs.trychroma.com/reference/Collection#query, with the `include`",
          "created_at": "2023-08-17T13:16:24Z"
        },
        {
          "author": "nj9106",
          "body": "Ｉsee, thanks a lot for your answers!",
          "created_at": "2023-08-18T01:39:40Z"
        }
      ]
    },
    {
      "issue_number": 18,
      "title": "Feature Request - Add DataFrames (Spark or Pandas) as Sources",
      "body": "Currently, `embedchain` allows the addition of various types of data sources such as YouTube videos, PDF files, and web pages to be processed and used in the application. This feature request proposes to extend this functionality to include DataFrames, specifically those from the Spark or Pandas libraries, as potential data sources.\r\n\r\nDataFrames are a commonly used data structure for handling and manipulating data in Python, especially in data science and machine learning applications. They are particularly effective when dealing with large, structured datasets, which can include text data.\r\n\r\nThe ability to use DataFrames as a source of data would add a significant amount of flexibility to `embedchain`, as users could directly input their preprocessed and transformed data into the application. This could be beneficial in scenarios where the data is already available in a DataFrame format, such as when it has been preprocessed or transformed as part of a larger data pipeline.\r\n\r\nThe implementation of this feature would involve adding a new method to the `App` class (or modifying the existing `.add()` method) that accepts a DataFrame and its format (Spark or Pandas) as arguments. The method would then handle the loading of the data from the DataFrame into the application in the appropriate format, ready to be processed and used in the application.\r\n\r\nThis feature would increase the flexibility and usefulness of `embedchain`, making it more applicable to a wider range of scenarios and use-cases, and potentially attracting a broader user base. It would also align well with common data science workflows, which often involve the use of DataFrames for data manipulation and analysis.\r\n\r\nPlease consider adding this feature in a future update of `embedchain`.",
      "state": "open",
      "author": "big-analytics",
      "author_type": "User",
      "created_at": "2023-06-21T20:00:07Z",
      "updated_at": "2023-12-14T08:35:57Z",
      "closed_at": null,
      "labels": [
        "new-data-source",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/18/reactions",
        "total_count": 6,
        "+1": 6,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/18",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/18",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:13.994125",
      "comments": [
        {
          "author": "cachho",
          "body": "with today's addition of local sources, qna pairs and presumably text, we've come a lot closer to providing this functionality.",
          "created_at": "2023-06-23T15:37:33Z"
        },
        {
          "author": "cachho",
          "body": "as far as my understanding goes, a dataframe is just a 2d table. Can we directly pass that to the vector database or does it have to be a string?\r\n\r\nDo you have an example how you would process that with regular ChatGPT? Like for my QnA pair PR, it's a originally a tuple, but we transform it to matc",
          "created_at": "2023-06-23T15:41:21Z"
        },
        {
          "author": "taranjeet",
          "body": "cc @deshraj ",
          "created_at": "2023-12-14T08:35:56Z"
        }
      ]
    },
    {
      "issue_number": 860,
      "title": "Resetting a db collection doesn't remove previous source hashes",
      "body": "### 🐛 Describe the bug\n\nWhen deleting a collection with App().db.client.delete_collection(collection_name), the source hashes are not removed from the database, which means you're unable to re-add the same source again.\r\n\r\nFor example:\r\n\r\n- User adds a source URL using App().add('source_url').\r\n- User deletes the collection where the source was indexed.\r\n- User tries to re-add/index the same source again.\r\n- Since the source hash is still present, it will skip the embedding and won't index this source.\r\n\r\nI'm not an experienced Python developer but I believe that's where this skip occurs:\r\n\r\nembedchain.py - Lines 218 - 230\r\n```\r\n# `source_hash` is the md5 hash of the source argument\r\n        hash_object = hashlib.md5(str(source).encode(\"utf-8\"))\r\n        source_hash = hash_object.hexdigest()\r\n\r\n        # Check if the data hash already exists, if so, skip the addition\r\n        self.cursor.execute(\r\n            \"SELECT 1 FROM data_sources WHERE hash = ? AND pipeline_id = ?\", (source_hash, self.config.id)\r\n        )\r\n        existing_data = self.cursor.fetchone()\r\n\r\n        if existing_data:\r\n            print(f\"Data with hash {source_hash} already exists. Skipping addition.\")\r\n            return source_hash\r\n```\r\n\r\n",
      "state": "closed",
      "author": "fabioferreira3",
      "author_type": "User",
      "created_at": "2023-10-27T23:45:13Z",
      "updated_at": "2023-12-13T16:35:08Z",
      "closed_at": "2023-12-13T16:35:08Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/860/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/860",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/860",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:14.173479",
      "comments": [
        {
          "author": "taranjeet",
          "body": "hey @fabioferreira3 thanks for opening the issue. \r\n@sidmohanty11 : assigning this to you.",
          "created_at": "2023-12-13T04:31:59Z"
        },
        {
          "author": "deshraj",
          "body": "This issue is already resolved btw. Hence, closing it.",
          "created_at": "2023-12-13T16:35:08Z"
        }
      ]
    },
    {
      "issue_number": 246,
      "title": "feature request: Add support for OpenAI function calling",
      "body": "OpenAI provides a feature called function calling, which when provided function signatures for downstream functions can provide response in the format that can be used by that function. https://openai.com/blog/function-calling-and-other-api-updates",
      "state": "open",
      "author": "aaishikdutta",
      "author_type": "User",
      "created_at": "2023-07-12T05:55:03Z",
      "updated_at": "2023-12-09T14:50:41Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/246/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/246",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/246",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:14.373170",
      "comments": []
    },
    {
      "issue_number": 628,
      "title": "refactor: make it clear what methods are private",
      "body": "### 🚀 The feature\n\nFor intellisense to work efficiently, and for  anyone working on the package, it should be made clear what methods are private by prefixing them with `_`.\r\n\r\nPrivate methods are not to be used by endusers. In other programming languages you can actually protect them, in python you can only hope that users don't use them. The underscore moves the back in the intellisense suggestions.\r\n\r\nI think the worst offender is `retrieve from database`, the name suggests that it could be used in place of `query`, which it can't.\r\n\r\nThis goes for classes and files.\n\n### Motivation, pitch\n\nWe have more user exposed methods now, for instance app.serialize and app.deserialize.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-17T18:57:21Z",
      "updated_at": "2023-11-13T21:00:14Z",
      "closed_at": "2023-11-13T21:00:14Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/628/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/628",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/628",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.197293",
      "comments": [
        {
          "author": "taranjeet",
          "body": "@cachho : can you please list down what all methods should be private here?",
          "created_at": "2023-09-18T02:15:52Z"
        },
        {
          "author": "cachho",
          "body": "> @cachho : can you please list down what all methods should be private here?\r\n\r\nI mean at that point I might aswell add the underscore myself. The answer is all methods that are not to be used by end users, mainly those are \"intermediate\" methods that are called by other methods and can't be called",
          "created_at": "2023-09-20T06:28:50Z"
        },
        {
          "author": "taranjeet",
          "body": "The next action here is to figure out what all methods are private.\r\nThis issue is up for grab",
          "created_at": "2023-09-26T19:51:49Z"
        },
        {
          "author": "whitebeard10",
          "body": "can someone assign this to me , i would like to work on it",
          "created_at": "2023-10-05T08:34:20Z"
        }
      ]
    },
    {
      "issue_number": 711,
      "title": "Use app.db.reset() instead of app.reset()",
      "body": "### 🐛 Describe the bug\n\n\r\n🐛 Describe the bug\r\nFollowing code snippet gives a warning\r\n\r\n```\r\nfrom embedchain import App\r\napp = App()\r\napp.count()\r\n[root] DEPRECATION WARNING: Please use `app.db.reset()` instead of `App.reset()`.\r\n```\r\n\r\nreset function resets the database. \r\n\r\nWe should update code to fix the warning.\r\n\r\n",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-27T05:30:37Z",
      "updated_at": "2023-11-02T19:24:58Z",
      "closed_at": "2023-11-02T19:24:58Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/711/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "subhajit20"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/711",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/711",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.433284",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet  Hey should I change the following code to `return app.reset()` ?\r\nhttps://github.com/embedchain/embedchain/blob/70f2de4fd324fc7df8caef734554938115b78464/embedchain/embedchain.py#L552",
          "created_at": "2023-09-27T08:01:46Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @subhajit20 , thats almost right but will advice if you spend some more time in looking through the code and making sure that all the possible scenarios are covered. Making sure that tests don't break is one of the way. Other can be looking for instance of reset and then manually replicating the",
          "created_at": "2023-09-27T16:19:15Z"
        },
        {
          "author": "taranjeet",
          "body": "Let me know if you are working on this @subhajit20 . Will assign it to you.",
          "created_at": "2023-09-27T16:22:28Z"
        },
        {
          "author": "subhajit20",
          "body": "> Let me know if you are working on this @subhajit20 . Will assign it to you.\r\n\r\nWant to work on it.\r\nYou can assign it to me.",
          "created_at": "2023-09-27T16:27:11Z"
        },
        {
          "author": "taranjeet",
          "body": "@subhajit20 assigned it to you.",
          "created_at": "2023-09-27T17:06:38Z"
        }
      ]
    },
    {
      "issue_number": 846,
      "title": "[Bug] Remove the data duplication of the \"text\" field in metadata in vector databases",
      "body": "### 🐛 Describe the bug\n\nWe are duplicating the text field when the data is stored in the vector databases.  ",
      "state": "closed",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-10-25T16:47:03Z",
      "updated_at": "2023-11-01T20:46:48Z",
      "closed_at": "2023-11-01T20:46:48Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/846/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deven298"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/846",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/846",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.644927",
      "comments": []
    },
    {
      "issue_number": 481,
      "title": "DOC: Add explicit documentation for attributes of embedchain.py",
      "body": "### Issue with current documentation:\n\nThere are various member variables in embedchain.py like `user_asks`, `is_docs_site_instance`, `online`, which make sense in the context of the class, but is not easy to infer their existence reasoning just from the name. Would be nice to be verbose about their meaning via some comments\r\n\r\nExtending to this, would be nice to have a general norm for this project to have comment documentation for any attribute that gets added in the future.",
      "state": "open",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-08-25T06:24:35Z",
      "updated_at": "2023-10-28T13:22:08Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/481/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/481",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/481",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.644960",
      "comments": [
        {
          "author": "Chahbaz-Aman",
          "body": "Hi! I have been going through the commit history of this repo. I can take this up and update the comments as I go along.",
          "created_at": "2023-10-28T13:21:45Z"
        }
      ]
    },
    {
      "issue_number": 338,
      "title": "add support for email request",
      "body": "### 🚀 The feature\r\n\r\nFor emails, you should figure out how to import and understand .mbox files. Gmail allows you to export all your emails in one go and exports them in .mbox format\r\n\r\n### Motivation, pitch\r\n\r\n- opened on behalf of user Kushal from whatsapp\r\n\r\n### Alternatives\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-20T19:33:46Z",
      "updated_at": "2023-10-28T01:05:09Z",
      "closed_at": "2023-10-28T01:05:09Z",
      "labels": [
        "enhancement",
        "new-data-source",
        "medium"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/338/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/338",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/338",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.855950",
      "comments": []
    },
    {
      "issue_number": 842,
      "title": "Reset current collection only when `app.db.reset()` is called",
      "body": "### 🐛 Describe the bug\n\nCurrently, whenever someone calls the `app.db.reset()`, we delete all the collections from the vector database which is not ideal. We want to instead only delete the collection that the current app is created with. \r\n\r\nWe want to make sure that support for this is added in all the vector databases. \r\n\r\nIssue reported in our slack: https://embedchain.slack.com/archives/C05RG7CJKC6/p1697890507048149",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-10-23T19:46:25Z",
      "updated_at": "2023-10-25T17:22:21Z",
      "closed_at": "2023-10-25T17:22:21Z",
      "labels": [
        "bug",
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/842/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/842",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/842",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.855977",
      "comments": []
    },
    {
      "issue_number": 694,
      "title": "Add support for activeloop's deeplake as vector database",
      "body": "### 🚀 The feature\n\nhttps://github.com/activeloopai/deeplake/\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:17:49Z",
      "updated_at": "2023-10-24T11:31:54Z",
      "closed_at": null,
      "labels": [
        "hacktoberfest"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/694/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/694",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/694",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:16.855983",
      "comments": []
    },
    {
      "issue_number": 39,
      "title": "Add support for Pinecone as vector database",
      "body": "- Currently, is it possible to use embedchain with pinecone? If not, will it be possible in the future?\r\n- this issue is opened on behalf of discord user Hector, [message link](https://discord.com/channels/1121119078191480945/1121119078858358846/1121781306708213820)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-23T14:17:35Z",
      "updated_at": "2023-10-20T10:31:06Z",
      "closed_at": "2023-10-15T08:54:08Z",
      "labels": [
        "good first issue",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/39/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/39",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/39",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:18.641791",
      "comments": [
        {
          "author": "cachho",
          "body": "weaviate is another name that comes to mind. it's actually open source.",
          "created_at": "2023-06-23T15:33:42Z"
        },
        {
          "author": "jacob-dietle",
          "body": "I'm working on a PineconeDB class based on the BaseVectorDB class currently. I initially thought it would pretty straight forward to map pinecone logic to  the `_get_or_create_db`  and `_get_or_create_collection` methods but it seems like collections in Pinecone and Chroma differ slightly so I am st",
          "created_at": "2023-06-25T01:41:03Z"
        },
        {
          "author": "taranjeet",
          "body": "https://twitter.com/tricalt/status/1676999694096924686",
          "created_at": "2023-07-06T17:06:48Z"
        }
      ]
    },
    {
      "issue_number": 436,
      "title": "Add support for weaviate database",
      "body": "### 🚀 The feature\n\n- add weaviate\n\n### Motivation, pitch\n\n- increase the catalog of vector databases that we support.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-12T01:16:36Z",
      "updated_at": "2023-10-20T10:30:53Z",
      "closed_at": "2023-10-18T05:18:55Z",
      "labels": [
        "medium",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/436/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/436",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/436",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:18.892284",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Can I work on this? @taranjeet @cachho ",
          "created_at": "2023-09-06T05:34:59Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @Dev-Khant , yes please go ahead.",
          "created_at": "2023-09-11T16:11:25Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Alright",
          "created_at": "2023-09-12T06:53:07Z"
        }
      ]
    },
    {
      "issue_number": 511,
      "title": "feature request: add support for Image(s) as a new DataType",
      "body": "### 🚀 The feature\n\nUsecase\r\nA user should be able to **add** a directory/set of images to embedchain. Then for a given query, they should be able to find the most relevant image from this dataset\r\n\r\nTech nuances\r\n1. We can use CLIP : https://github.com/openai/CLIP to generate the embeddings and store it in the supplied vector db\r\n2. This will require us to create a new loader - ImagesLoader\r\n3. Will require a new Chunker: ImagesChunker\r\n4. When the user issues the query to search for the relevant result, we create the embeddings from the same CLIP model and search in the db. This means there is no usecase of having prompts and making it pass through the LLMs. As such, I propose a new [Interface](https://docs.embedchain.ai/advanced/interface_types) Type - search to be able to search for the most relevant results for a given query\r\n\r\nConcerns/Questions\r\n1. @taranjeet in one of our offline conversation you suggested the usage of CLIP and ocr-space. But given CLIP does a decent OCR as well, that can be skipped? I performed a bunch of experiments on CLIP and it seems to be doing a decent job on text images.\r\n2. The model from CLIP *ViT-B/32* is 320 MB. The model will be downloaded when the user attempts to add an image datatype\r\n3. Wondering how the chunk size/overlap decided for other datatypes?\r\n\n\n### Motivation, pitch\n\nWill help do context based searching on images, which can unlock several interesting usecases for the embedchain community.",
      "state": "closed",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-08-30T09:19:35Z",
      "updated_at": "2023-10-20T10:30:36Z",
      "closed_at": "2023-10-04T04:20:42Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/511/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/511",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/511",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.062447",
      "comments": []
    },
    {
      "issue_number": 112,
      "title": "Add support for Qdrant Vector Database",
      "body": "- https://github.com/qdrant/qdrant\r\n- Great performance: https://twitter.com/nirantk/status/1674110063286571008",
      "state": "closed",
      "author": "candidosales",
      "author_type": "User",
      "created_at": "2023-07-01T10:53:18Z",
      "updated_at": "2023-10-20T10:30:08Z",
      "closed_at": "2023-10-18T21:27:59Z",
      "labels": [
        "medium",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/112/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/112",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/112",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.062469",
      "comments": []
    },
    {
      "issue_number": 509,
      "title": "DOC: add example of azure openai ",
      "body": "### Issue with current documentation:\n\n- has anyone tried out the AZURE_OPENAI  connectivity via embedchain. I have corporate access to a private instance of OPENAI but having issues iconnecting via ian nternal bas_url  . Some examples on this would be helpful\r\n- opened on behalf of discord user [ashyadav](https://discord.com/channels/1121119078191480945/1121119078858358846/1146160113795727511)",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-29T19:21:23Z",
      "updated_at": "2023-10-16T20:31:58Z",
      "closed_at": "2023-10-16T20:31:58Z",
      "labels": [
        "documentation",
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/509/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/509",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/509",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.062486",
      "comments": [
        {
          "author": "taranjeet",
          "body": "this PR can be referred: https://github.com/embedchain/embedchain/pull/406",
          "created_at": "2023-08-29T19:21:56Z"
        }
      ]
    },
    {
      "issue_number": 692,
      "title": "Add support for zilliz as vector database",
      "body": "### 🚀 The feature\n\n- add new vector db https://zilliz.com/\n\n### Motivation, pitch\n\nThis gives more flexibility to the user to use any vector database of their own choice.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T20:12:29Z",
      "updated_at": "2023-10-11T20:17:34Z",
      "closed_at": "2023-10-11T20:17:34Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/692/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/692",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/692",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.229417",
      "comments": [
        {
          "author": "LuciAkirami",
          "body": "Hey @taranjeet , I would like to work on this, can I get started?",
          "created_at": "2023-10-02T16:54:53Z"
        }
      ]
    },
    {
      "issue_number": 698,
      "title": "Improve test coverage of embedchain/vectordb/elasticsearch.py",
      "body": "### 🚀 The feature\n\nAs per this coverage report, https://drive.google.com/file/d/1L8HMFafqvlysc6GWXG8sy4ErVuBusbZP/view\r\nthe current code coverage is low.\r\nWe need to improve it.\n\n### Motivation, pitch\n\nBetter code coverage makes development faster and helps in minimizing the errors.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T21:28:41Z",
      "updated_at": "2023-10-11T06:13:20Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/698/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/698",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/698",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.463272",
      "comments": [
        {
          "author": "Clement-Okolo",
          "body": "I would like to be assigned this issue",
          "created_at": "2023-10-11T06:13:20Z"
        }
      ]
    },
    {
      "issue_number": 685,
      "title": "Support Octo AI LLM via langchain",
      "body": "### 🚀 The feature\n\nhttps://python.langchain.com/docs/integrations/llms/octoai\n\n### Motivation, pitch\n\n* We need to support more llms so that users have the flexibility of choosing whatever LLM they want to use.\r\n* Langchain provides a standard interface for llms. This helps in better code maintenance and also helps in better observability.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:26:29Z",
      "updated_at": "2023-10-10T16:38:03Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/685/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "KapilM26"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/685",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/685",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.637512",
      "comments": [
        {
          "author": "KapilM26",
          "body": "can I work on this?",
          "created_at": "2023-09-28T00:13:40Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey yes, just assigned it to you @KapilM26 ",
          "created_at": "2023-09-28T00:15:22Z"
        },
        {
          "author": "BlacPharaoh",
          "body": "hey @taranjeet can this be assigned to me?\r\n",
          "created_at": "2023-10-08T21:30:07Z"
        },
        {
          "author": "BlacPharaoh",
          "body": "@taranjeet I will start working on this as well\r\n",
          "created_at": "2023-10-10T16:37:44Z"
        }
      ]
    },
    {
      "issue_number": 686,
      "title": "Support HF Hub and HF local pipeline via langchain",
      "body": "### 🚀 The feature\n\nhttps://python.langchain.com/docs/integrations/llms/huggingface_hub\r\nhttps://python.langchain.com/docs/integrations/llms/huggingface_pipelines\r\n\n\n### Motivation, pitch\n\n* We need to support more llms so that users have the flexibility of choosing whatever LLM they want to use.\r\n* Langchain provides a standard interface for llms. This helps in better code maintenance and also helps in better observability.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:27:25Z",
      "updated_at": "2023-10-09T19:15:24Z",
      "closed_at": "2023-10-09T19:15:24Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/686/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/686",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/686",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.845146",
      "comments": []
    },
    {
      "issue_number": 688,
      "title": "Support Jina AI LLM",
      "body": "### 🚀 The feature\n\nhttps://python.langchain.com/docs/integrations/providers/jina\n\n### Motivation, pitch\n\n* We need to support more llms so that users have the flexibility of choosing whatever LLM they want to use.\r\n* Langchain provides a standard interface for llms. This helps in better code maintenance and also helps in better observability.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:30:43Z",
      "updated_at": "2023-10-09T19:06:37Z",
      "closed_at": "2023-10-09T19:06:37Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/688/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/688",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/688",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:19.845171",
      "comments": [
        {
          "author": "shubhampal123",
          "body": "Can I work on this?",
          "created_at": "2023-10-02T15:01:06Z"
        }
      ]
    },
    {
      "issue_number": 697,
      "title": "Improve test coverage of embedchain/loaders/docs_site_loader.py",
      "body": "### 🚀 The feature\n\nAs per this coverage report, https://drive.google.com/file/d/1L8HMFafqvlysc6GWXG8sy4ErVuBusbZP/view\r\nthe current code coverage is low.\r\nWe need to improve it.\n\n### Motivation, pitch\n\nBetter code coverage makes development faster and helps in minimizing the errors.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T21:27:59Z",
      "updated_at": "2023-10-09T19:03:42Z",
      "closed_at": "2023-10-09T19:03:41Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/697/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/697",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/697",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.049049",
      "comments": []
    },
    {
      "issue_number": 777,
      "title": "Add Clip dependency",
      "body": "### 🐛 Describe the bug\n\nIn continuation to https://github.com/embedchain/embedchain/pull/766, add support for clip dependency via Sentence Transformers",
      "state": "closed",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-10-07T18:33:49Z",
      "updated_at": "2023-10-09T19:02:47Z",
      "closed_at": "2023-10-09T19:02:47Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/777/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/777",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/777",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.049070",
      "comments": []
    },
    {
      "issue_number": 783,
      "title": "DOC: Add documentation for a recently added arguments to the vectordb add and query methods",
      "body": "### Issue with current documentation:\n\nWe recently added 2 new arguments to the add and query method of the vectordbs, but they were not recorded in the documentation.",
      "state": "closed",
      "author": "rupeshbansal",
      "author_type": "User",
      "created_at": "2023-10-09T12:29:15Z",
      "updated_at": "2023-10-09T19:01:46Z",
      "closed_at": "2023-10-09T19:01:46Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/783/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rupeshbansal"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/783",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/783",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.049077",
      "comments": []
    },
    {
      "issue_number": 684,
      "title": "Support cohere integration via langchain",
      "body": "### 🚀 The feature\n\nhttps://python.langchain.com/docs/integrations/providers/cohere\n\n### Motivation, pitch\n\n* We need to support more llms so that users have the flexibility of choosing whatever LLM they want to use.\r\n* Langchain provides a standard interface for llms. This helps in better code maintenance and also helps in better observability.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T18:24:04Z",
      "updated_at": "2023-10-09T18:54:26Z",
      "closed_at": "2023-10-09T18:54:26Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/684/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "sidmohanty11"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/684",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/684",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.049083",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "@taranjeet Can I pick it up?\r\nHere we will have to create a `CohereApp`, right?",
          "created_at": "2023-09-29T06:46:02Z"
        },
        {
          "author": "sidmohanty11",
          "body": "Hello @taranjeet, can I please pick this up?",
          "created_at": "2023-10-01T05:35:29Z"
        }
      ]
    },
    {
      "issue_number": 667,
      "title": "Rename apps/PersonApp.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T00:00:11Z",
      "updated_at": "2023-10-09T15:14:29Z",
      "closed_at": "2023-10-09T15:14:29Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/667/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/667",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/667",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.279864",
      "comments": [
        {
          "author": "rabroldan",
          "body": "Hello can I take a shot at it and try doing this as my first issue?",
          "created_at": "2023-09-26T01:54:45Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey yeah, just assigned it to you.",
          "created_at": "2023-09-26T02:19:31Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @rabroldan , feel free to reach out if any doubts.",
          "created_at": "2023-09-27T16:24:23Z"
        },
        {
          "author": "taranjeet",
          "body": "this issue is up for grab",
          "created_at": "2023-09-30T04:26:39Z"
        },
        {
          "author": "Moracus",
          "body": "I'd like to take this issue and resolve it, if it's still up.",
          "created_at": "2023-09-30T08:14:40Z"
        }
      ]
    },
    {
      "issue_number": 700,
      "title": "Improve test coverage of package",
      "body": "### 🚀 The feature\n\nRan codecov locally and uploaded the report here: https://drive.google.com/file/d/1L8HMFafqvlysc6GWXG8sy4ErVuBusbZP/view\r\n\r\nThis will be a big issue where we will have to open the issue file wise.\r\n\r\nAlready opened #697 , #698 , #699 \n\n### Motivation, pitch\n\nBetter code coverage makes development faster and helps in minimizing the errors.",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T22:02:31Z",
      "updated_at": "2023-10-08T12:20:48Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/700/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/700",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/700",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.478135",
      "comments": [
        {
          "author": "ShatilKhan",
          "body": "Please assign",
          "created_at": "2023-10-08T12:20:48Z"
        }
      ]
    },
    {
      "issue_number": 658,
      "title": "Rename _ge_get_athrophic_answert_gpt4all_answer to _get_answer in vertex ai llm class",
      "body": "### 🐛 Describe the bug\n\nIn file https://github.com/embedchain/embedchain/blob/main/embedchain/llm/vertex_ai.py, rename _get_athrophic_answer to_get_answer.\r\n\r\nAlso make sure that everything related to this work and doesn't break.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:54:01Z",
      "updated_at": "2023-10-07T09:22:50Z",
      "closed_at": "2023-10-07T09:22:50Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/658/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "BattiniSandeep"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/658",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/658",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.673253",
      "comments": [
        {
          "author": "BattiniSandeep",
          "body": "Hi, Would like to work on this basic issue. thanks",
          "created_at": "2023-09-28T19:13:53Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @BattiniSandeep , assigned it to you.",
          "created_at": "2023-09-29T23:40:01Z"
        },
        {
          "author": "BattiniSandeep",
          "body": "Hi @taranjeet \r\n\r\n![image](https://github.com/embedchain/embedchain/assets/76659791/ce404401-daec-4961-a16f-4f0c25c7d926)\r\nGetting these errors while setting up the project. Unable to push the code after making the changes due to these error. \r\n\r\nAny idea why these error are showing up. \r\n\r\nthanks\r\n",
          "created_at": "2023-10-01T19:22:02Z"
        }
      ]
    },
    {
      "issue_number": 652,
      "title": "Unsupported data type: DataType.SITEMAP",
      "body": "According to [README](https://github.com/embedchain/embedchain#data-types-supported) sitemap is supported so I tried adding an online sitemap url as resource with \"sitemap\" as `data_type` but it resulted in an exception\r\n\r\n```\r\nimport os\r\nfrom embedchain import App\r\n\r\nos.environ[\"OPENAI_API_KEY\"] = \"MY API KEY\"\r\napp = App()\r\n\r\napp.add(\"https://www.databutton.io/sitemap.xml\", data_type=\"sitemap\")\r\n```\r\n\r\nit threw `ValueError`\r\n\r\n```\r\nFile ~/.pyenv/versions/3.8.10/lib/python3.8/site-packages/embedchain/data_formatter/data_formatter.py:90, in DataFormatter._get_chunker(self, data_type, config)\r\n     88     return chunker\r\n     89 else:\r\n---> 90     raise ValueError(f\"Unsupported data type: {data_type}\")\r\n\r\nValueError: Unsupported data type: DataType.SITEMAP\r\n``` ",
      "state": "closed",
      "author": "hussaintamboli",
      "author_type": "User",
      "created_at": "2023-09-25T11:35:21Z",
      "updated_at": "2023-10-06T23:24:16Z",
      "closed_at": "2023-10-06T23:24:16Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/652/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/652",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/652",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:20.954683",
      "comments": [
        {
          "author": "richawo",
          "body": "Hey, thanks for flagging this issue!\r\nJust took a look at this and implemented the fix.\r\n\r\ncc @taranjeet ",
          "created_at": "2023-10-01T21:50:19Z"
        }
      ]
    },
    {
      "issue_number": 714,
      "title": "Add support for xml file format",
      "body": "### 🚀 The feature\r\n\r\nWe need to support XML file format. So ideally the user should be able to do\r\n\r\n```\r\nfrom embedchain import App\r\n\r\napp = App()\r\n\r\napp.add(\"/path/to/my_xml_file.xml\") \r\n# or\r\napp.add(\"/path/to/my_xml_file.xml\", data_type=\"xml\")\r\n```\r\n\r\nThis will involve writing the logic to auto-detect that its an XML file, data loader, and data chunker. \r\n\r\n### Motivation, pitch\r\n\r\nMany structured documents are stored in XML format. Having an out of the box support for general XML files would be very helpful",
      "state": "closed",
      "author": "fredericcogny",
      "author_type": "User",
      "created_at": "2023-09-27T15:05:21Z",
      "updated_at": "2023-10-06T22:39:34Z",
      "closed_at": "2023-10-06T22:39:34Z",
      "labels": [
        "new-data-source",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/714/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/714",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/714",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:21.163177",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Thanks @fredericcogny for opening the issue.",
          "created_at": "2023-09-27T16:12:12Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Can I pick it up @taranjeet?",
          "created_at": "2023-09-29T06:41:26Z"
        }
      ]
    },
    {
      "issue_number": 699,
      "title": "Improve test coverage of embedchain/loaders/pdf_file.py",
      "body": "### 🚀 The feature\n\nAs per this coverage report, https://drive.google.com/file/d/1L8HMFafqvlysc6GWXG8sy4ErVuBusbZP/view\r\nthe current code coverage is low.\r\nWe need to improve it.\n\n### Motivation, pitch\n\nBetter code coverage makes development faster and helps in minimizing the errors.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T21:29:09Z",
      "updated_at": "2023-10-06T21:10:47Z",
      "closed_at": "2023-10-06T21:10:47Z",
      "labels": [
        "good first issue",
        "hacktoberfest"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/699/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/699",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/699",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:21.359402",
      "comments": []
    },
    {
      "issue_number": 432,
      "title": "Add Readme in Api Server example",
      "body": "### 🚀 The feature\n\n- add readme for api-server.\r\n    - add setup instructions\r\n    - explain each endpoint\r\n    - Curl call for each endpoint so that anyone can quickly try it out\r\n    - How to set OpenAI key in environment variables\r\n\n\n### Motivation, pitch\n\nImprove the example so that anyone can easily try it out.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-12T00:00:10Z",
      "updated_at": "2023-10-05T17:53:39Z",
      "closed_at": null,
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/432/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/432",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/432",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:21.359424",
      "comments": [
        {
          "author": "AshishKingdom",
          "body": "hello @taranjeet \r\nI want to work on this one. Please assign me this issue. ",
          "created_at": "2023-10-05T17:53:39Z"
        }
      ]
    },
    {
      "issue_number": 696,
      "title": "Setup codecov.io to measure test coverage",
      "body": "### 🚀 The feature\n\nWe need to setup codecov.io to measure code coverage.\r\n\n\n### Motivation, pitch\n\nAs the package is growing, we need to add test for each piece of code. For this we need to measure the coverage right now and then track it from here.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T21:18:26Z",
      "updated_at": "2023-09-30T18:26:51Z",
      "closed_at": "2023-09-30T18:26:51Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/696/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "morgoth9808"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/696",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/696",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:23.227633",
      "comments": [
        {
          "author": "morgoth9808",
          "body": "Hey @taranjeet  I want to work on this issue",
          "created_at": "2023-09-29T20:12:26Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @morgoth9808 , assigned it to you.",
          "created_at": "2023-09-29T20:13:43Z"
        },
        {
          "author": "morgoth9808",
          "body": "Hey @taranjeet can you tell me which method should i use to generate the test coverage file I have been using :\r\n```\r\ncoverage run -m pytest\r\n``` \r\nAnd its generating errors",
          "created_at": "2023-09-30T07:30:38Z"
        }
      ]
    },
    {
      "issue_number": 126,
      "title": "Fix: Update outdated OpenAI Model",
      "body": "- remove 0613 from model name in openAI model from the package as it will be deprecated",
      "state": "closed",
      "author": "sahilyadav902",
      "author_type": "User",
      "created_at": "2023-07-04T06:27:57Z",
      "updated_at": "2023-09-30T18:12:34Z",
      "closed_at": "2023-09-30T18:12:34Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/126/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/126",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/126",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:23.401011",
      "comments": [
        {
          "author": "taranjeet",
          "body": "we should fix this soon",
          "created_at": "2023-08-12T04:22:44Z"
        }
      ]
    },
    {
      "issue_number": 655,
      "title": "Rename _get_athrophic_answer to _get_answer in anthropic llm class",
      "body": "### 🐛 Describe the bug\n\nIn file https://github.com/embedchain/embedchain/blob/main/embedchain/llm/antrophic.py, rename _get_anthropic_answer to_get_answer.\r\n\r\nAlso make sure that everything related to this work and doesn't break.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:50:43Z",
      "updated_at": "2023-09-30T06:47:50Z",
      "closed_at": "2023-09-30T06:47:50Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/655/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "Rhythm-08"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/655",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/655",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:23.578471",
      "comments": [
        {
          "author": "Rhythm-08",
          "body": "Hello, @taranjeet I would like to solve this issue. ",
          "created_at": "2023-09-26T01:36:14Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @Rhythm-08 , sure assigned it to you.",
          "created_at": "2023-09-26T01:46:26Z"
        }
      ]
    },
    {
      "issue_number": 657,
      "title": "Rename _get_gpt4all_answer to _get_answer in gpt4all llm class",
      "body": "### 🐛 Describe the bug\n\nIn file https://github.com/embedchain/embedchain/blob/main/embedchain/llm/gpt4all.py, rename _get_gpt4all_answer to_get_answer.\r\n\r\nAlso make sure that everything related to this work and doesn't break.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:52:53Z",
      "updated_at": "2023-09-30T04:15:33Z",
      "closed_at": "2023-09-30T04:15:33Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/657/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/657",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/657",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:23.800585",
      "comments": []
    },
    {
      "issue_number": 637,
      "title": "bug: llama2 needs model assignment",
      "body": "### 🐛 Describe the bug\n\nJust like OpenAI or GPT4All, Llama2 apparently needs a model to work. It could also be an issue with Replicate as the provider.\r\n\r\n1. find out if this is a replicate or llama2 issue\r\n2. find a suitable model name\r\n3. set it as default in the Llama2 llm\r\n\r\n```\r\nFile \"pydantic/main.py\", line 341, in pydantic.main.BaseModel.init pydantic.error_wrappers.ValidationError: 1 validation error for Replicate model   none is not an allowed value (type=type_error.none.not_allowed) [15/Sep/2023 20:16:18] \"POST /bot-response/ HTTP/1.1\" 500 86328\r\n```\r\n\r\nOpen for community contributions.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-18T20:57:24Z",
      "updated_at": "2023-09-29T06:40:44Z",
      "closed_at": null,
      "labels": [
        "medium"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/637/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/637",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/637",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:23.800607",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "I'll check for it and see if I can do it.",
          "created_at": "2023-09-20T15:05:17Z"
        },
        {
          "author": "Dev-Khant",
          "body": "It's working for `Llama2App`. Where is it failing then?",
          "created_at": "2023-09-22T09:46:05Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Hi @cachho @deshraj Any update on this?",
          "created_at": "2023-09-29T06:40:43Z"
        }
      ]
    },
    {
      "issue_number": 656,
      "title": "Rename _get_azure_openai_answer to _get_answer in azure llm class",
      "body": "### 🐛 Describe the bug\n\n\r\nIn file https://github.com/embedchain/embedchain/blob/main/embedchain/llm/azure_openai.py, rename _get_azure_openai_answer to_get_answer.\r\n\r\nAlso make sure that everything related to this work and doesn't break.\r\n\r\n",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:52:00Z",
      "updated_at": "2023-09-28T18:43:51Z",
      "closed_at": "2023-09-28T18:43:51Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/656/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/656",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/656",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.003762",
      "comments": []
    },
    {
      "issue_number": 672,
      "title": "Rename config/apps/BaseAppConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T05:23:35Z",
      "updated_at": "2023-09-28T06:51:00Z",
      "closed_at": "2023-09-28T06:51:00Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/672/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "KapilM26"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/672",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/672",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.003783",
      "comments": [
        {
          "author": "KapilM26",
          "body": "done here: https://github.com/embedchain/embedchain/pull/689",
          "created_at": "2023-09-26T19:37:43Z"
        }
      ]
    },
    {
      "issue_number": 659,
      "title": "Rename models/EmbeddingFunctions.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\n\nlisted file nam should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:56:03Z",
      "updated_at": "2023-09-28T06:05:11Z",
      "closed_at": "2023-09-28T06:05:11Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/659/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/659",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/659",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.193227",
      "comments": [
        {
          "author": "OsamaNabih",
          "body": "Hey there, I'm interested in this issue\r\nI made this https://github.com/embedchain/embedchain/pull/669 PR as a draft\r\nI'm having some issues running tests after making the change.\r\nAny hints?\r\n",
          "created_at": "2023-09-26T03:49:09Z"
        }
      ]
    },
    {
      "issue_number": 718,
      "title": "DOC: Add link to slack",
      "body": "### Issue with current documentation:\n\nIn the [documentation], add link to slack in the top nav bar and footer.\r\n\r\nLink to slack: https://join.slack.com/t/embedchain/shared_invite/zt-22uwz3c46-Zg7cIh5rOBteT_xe1jwLDw\r\n\r\nRefer mintlify documentation for information regarding how to add link in top nav bar and footer\r\n\r\n- https://mintlify.com/docs/settings/ctas-footers\r\n\r\nIdeally `topbarLinks` and `footerSocials` key in `mint.json` should be updated along side other needed changes. ",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-28T00:30:38Z",
      "updated_at": "2023-09-28T06:03:34Z",
      "closed_at": "2023-09-28T06:02:34Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/718/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/718",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/718",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.370109",
      "comments": [
        {
          "author": "malik-vishu",
          "body": "@taranjeet Can you assign this to me?",
          "created_at": "2023-09-28T02:18:01Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @malik-vishu : I just saw your comment and till then the PR was already raised and merged. You can pick up other issues There are a lot of issues that need help.\r\n\r\n@Tushar-kalsi : thanks ",
          "created_at": "2023-09-28T06:03:34Z"
        }
      ]
    },
    {
      "issue_number": 660,
      "title": "Rename models/Providers.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:56:26Z",
      "updated_at": "2023-09-27T16:25:31Z",
      "closed_at": "2023-09-27T16:25:31Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/660/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "subhajit20"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/660",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/660",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.558923",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet one thing, here the name should be like this -> small letter `P` -> `p` only right?",
          "created_at": "2023-09-27T04:49:11Z"
        },
        {
          "author": "taranjeet",
          "body": "yes, small p",
          "created_at": "2023-09-27T04:50:01Z"
        }
      ]
    },
    {
      "issue_number": 662,
      "title": "Rename models/VectorDimensions.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:57:14Z",
      "updated_at": "2023-09-27T16:25:18Z",
      "closed_at": "2023-09-27T16:25:18Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/662/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/662",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/662",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.765069",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet  done it.",
          "created_at": "2023-09-27T04:41:24Z"
        }
      ]
    },
    {
      "issue_number": 663,
      "title": "Rename apps/App.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:58:28Z",
      "updated_at": "2023-09-27T16:24:41Z",
      "closed_at": "2023-09-27T16:24:41Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/663/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/663",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/663",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.974647",
      "comments": []
    },
    {
      "issue_number": 673,
      "title": "Rename config/apps/CustomAppConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T05:24:00Z",
      "updated_at": "2023-09-27T16:23:51Z",
      "closed_at": "2023-09-27T16:23:50Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/673/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/673",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/673",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:24.974669",
      "comments": [
        {
          "author": "haseeb-xd",
          "body": "Can I work on this for hacktoberfest?",
          "created_at": "2023-09-26T12:11:27Z"
        },
        {
          "author": "KapilM26",
          "body": "Done here: https://github.com/embedchain/embedchain/pull/680",
          "created_at": "2023-09-26T14:16:29Z"
        }
      ]
    },
    {
      "issue_number": 674,
      "title": "Rename config/apps/OpenSourceAppConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T05:24:31Z",
      "updated_at": "2023-09-27T16:23:27Z",
      "closed_at": "2023-09-27T16:23:27Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/674/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "subhajit20"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/674",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/674",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:25.169041",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet want to work on this",
          "created_at": "2023-09-27T03:50:55Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @subhajit20 , just assigned it to you",
          "created_at": "2023-09-27T03:53:12Z"
        }
      ]
    },
    {
      "issue_number": 520,
      "title": "bug: doc loader - ModuleNotFoundError: No module named 'docx2txt'",
      "body": "### 🐛 Describe the bug\n\nreported by @arihantparsoya on discord.\r\n\r\n```\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/embedchain/loaders/docx_file.py\", line 11, in load_data\r\n    data = loader.load()\r\n           ^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/langchain/document_loaders/word_document.py\", line 51, in load\r\n    import docx2txt\r\nModuleNotFoundError: No module named 'docx2txt'\r\n```",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-31T07:13:58Z",
      "updated_at": "2023-09-26T20:30:39Z",
      "closed_at": "2023-09-26T20:30:39Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/520/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/520",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/520",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:25.393338",
      "comments": [
        {
          "author": "yalcindavid",
          "body": "pip install docx2txt\r\n?",
          "created_at": "2023-09-16T13:23:42Z"
        },
        {
          "author": "cachho",
          "body": "> pip install docx2txt ?\r\n\r\nOf course, but it would be nice to make it an embedchain dependency if it isn't yet",
          "created_at": "2023-09-19T07:21:48Z"
        }
      ]
    },
    {
      "issue_number": 671,
      "title": "Rename config/apps/AppConfig.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nListed file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-26T05:23:07Z",
      "updated_at": "2023-09-26T18:24:44Z",
      "closed_at": "2023-09-26T18:24:44Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/671/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "ShivamMenda"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/671",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/671",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:25.567251",
      "comments": [
        {
          "author": "ShivamMenda",
          "body": "@taranjeet I would like to try this out.",
          "created_at": "2023-09-26T16:17:49Z"
        },
        {
          "author": "taranjeet",
          "body": "Sure @ShivamMenda , just assigned it to you.",
          "created_at": "2023-09-26T17:14:12Z"
        }
      ]
    },
    {
      "issue_number": 666,
      "title": "Rename apps/OpenSourceApp.py to follow snake case convention",
      "body": "### 🐛 Describe the bug\r\n\r\nlisted file name should follow snake case convention.\r\nAlso handle the related imports of this file and make sure that everything works.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-25T23:59:44Z",
      "updated_at": "2023-09-26T17:14:38Z",
      "closed_at": "2023-09-26T06:18:05Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest",
        "hacktoberfest-accepted"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/666/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "subhajit20"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/666",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/666",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:25.889363",
      "comments": [
        {
          "author": "subhajit20",
          "body": "@taranjeet want to help.\r\nCould you assign it to me?",
          "created_at": "2023-09-26T04:56:57Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @subhajit20 , just assigned to you.",
          "created_at": "2023-09-26T05:21:36Z"
        }
      ]
    },
    {
      "issue_number": 539,
      "title": "DOC: Documentation for serialization / deserialization",
      "body": "### Issue with current documentation:\n\nre: #508",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-03T19:30:11Z",
      "updated_at": "2023-09-25T15:21:22Z",
      "closed_at": null,
      "labels": [
        "documentation",
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/539/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/539",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/539",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.122035",
      "comments": [
        {
          "author": "taranjeet",
          "body": "add a tutorial or in depth explanation: https://twitter.com/888surf/status/1698469983452344547\r\n\r\none great blog: https://medium.com/thoughts-on-machine-learning/embedchain-serialization-and-deserialization-of-bot-instances-and-usage-in-web-development-2ccfaf93c48",
          "created_at": "2023-09-04T06:14:36Z"
        },
        {
          "author": "Panczo",
          "body": "@fsndzomga \r\nDue to the paywall, [fsndzomga](https://github.com/fsndzomga) can you move this article to other website please? ",
          "created_at": "2023-09-05T20:19:17Z"
        },
        {
          "author": "Shady2kOver",
          "body": "![image](https://github.com/embedchain/embedchain/assets/67641632/cd7ff0ab-17d4-4e07-80e5-7bdaf5d22545)\r\n\r\nFsndzomga didn't define these functions anywhere separately in his bot class. \r\n\r\nThe methods in the actual code are serialize() and deserialize() respectively, am I getting something wrong?\r\n!",
          "created_at": "2023-09-25T15:21:22Z"
        }
      ]
    },
    {
      "issue_number": 633,
      "title": "Bump embedchain package version in full stack backend example",
      "body": "### 🐛 Describe the bug\n\nWe need to update the embedchain package version here.\r\n\r\nhttps://github.com/embedchain/embedchain/blob/main/examples/full_stack/backend/requirements.txt\r\n\r\n",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-18T02:11:58Z",
      "updated_at": "2023-09-24T16:53:08Z",
      "closed_at": "2023-09-24T16:53:08Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/633/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/633",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/633",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.332151",
      "comments": []
    },
    {
      "issue_number": 632,
      "title": "Bump embedchain package version in discord bot examples",
      "body": "### 🐛 Describe the bug\n\nWe need to update the embedchain package version here.\r\n\r\n\r\n\r\nhttps://github.com/embedchain/embedchain/blob/main/examples/discord_bot/requirements.txt",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-18T02:10:32Z",
      "updated_at": "2023-09-24T16:53:08Z",
      "closed_at": "2023-09-24T16:53:08Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/632/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/632",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/632",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.332171",
      "comments": []
    },
    {
      "issue_number": 631,
      "title": "Bump embedchain package version in api_server examples",
      "body": "### 🐛 Describe the bug\n\nWe need to update the embedchain package version here.\r\n\r\nhttps://github.com/embedchain/embedchain/blob/main/examples/api_server/requirements.txt",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-18T02:09:34Z",
      "updated_at": "2023-09-24T16:53:07Z",
      "closed_at": "2023-09-24T16:53:07Z",
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/631/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/631",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/631",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.332177",
      "comments": [
        {
          "author": "ghost",
          "body": "Hi @taranjeet. Can I pick up this issue and the others mentioned in #621 ?",
          "created_at": "2023-09-18T17:00:32Z"
        }
      ]
    },
    {
      "issue_number": 434,
      "title": "Add chat endpoint in the discord example",
      "body": "### 🚀 The feature\n\nAdd chat endpoint in the discord bot example like we have query endpoint\n\n### Motivation, pitch\n\nthis completes the entire experience for anyone to try out bot.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-12T00:28:17Z",
      "updated_at": "2023-09-24T16:50:01Z",
      "closed_at": "2023-09-24T16:50:01Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/434/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/434",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/434",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.542387",
      "comments": []
    },
    {
      "issue_number": 623,
      "title": "DOC: Add info about `csv` size limit (chunking/batching)",
      "body": "### Issue with current documentation:\n\nReference: #580",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-15T13:24:01Z",
      "updated_at": "2023-09-24T16:48:37Z",
      "closed_at": "2023-09-24T16:48:37Z",
      "labels": [
        "documentation",
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/623/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/623",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/623",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.542408",
      "comments": []
    },
    {
      "issue_number": 444,
      "title": "Set telemetry flag as a top level attribute on Emebdchain class",
      "body": "### 🚀 The feature\n\nRight now we have a telemetry flag called `collect_metrics`. It is available as a flag in the config.\r\nWe need to set it as a top level flag\r\n\r\n```\r\napp.collect_metrics = False/True\r\n```\n\n### Motivation, pitch\n\nthis enables anyone to easily toggle on/off the metrics\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-14T23:04:14Z",
      "updated_at": "2023-09-18T04:59:15Z",
      "closed_at": "2023-09-18T04:59:15Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/444/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/444",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/444",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.542417",
      "comments": [
        {
          "author": "taranjeet",
          "body": "@Dev-Khant : it will be there in both config and top level attribute.",
          "created_at": "2023-08-22T22:20:16Z"
        },
        {
          "author": "Dev-Khant",
          "body": "Yes, I understood it. Thanks",
          "created_at": "2023-08-23T00:57:45Z"
        }
      ]
    },
    {
      "issue_number": 485,
      "title": "Add contributor graph or widget in readme",
      "body": "### 🚀 The feature\n\n- add a contributor graph or widget in the readme like vuejs https://github.com/vuejs/vue\n\n### Motivation, pitch\n\nWe have got some really good contributions from contributors worldwide, so want to make it more evident on the readme.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-26T04:32:15Z",
      "updated_at": "2023-09-18T04:48:28Z",
      "closed_at": "2023-09-18T04:48:28Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/485/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/485",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/485",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.763392",
      "comments": [
        {
          "author": "josephchancey",
          "body": "Pull request open for this issue. If it is preferred to not use contrib.rocks as a solution then I can find alternatives. Thank you for your time! 😄 \r\n\r\nhttps://github.com/embedchain/embedchain/pull/495",
          "created_at": "2023-08-28T01:54:27Z"
        },
        {
          "author": "taranjeet",
          "body": "closing this as its addressed.",
          "created_at": "2023-09-18T04:48:27Z"
        }
      ]
    },
    {
      "issue_number": 541,
      "title": "DOC: `embedchain[extra]` in quotes",
      "body": "### Issue with current documentation:\n\nIt looks like zsh is not compatible without putting quotes.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-03T19:38:28Z",
      "updated_at": "2023-09-18T00:45:35Z",
      "closed_at": null,
      "labels": [
        "good first issue",
        "easy",
        "hacktoberfest"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/541/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/541",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/541",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:26.971685",
      "comments": [
        {
          "author": "taranjeet",
          "body": "There are various such instance in docs and code. We need to fix them soon.",
          "created_at": "2023-09-05T03:31:19Z"
        },
        {
          "author": "Rkejji",
          "body": "> There are various such instance in docs and code. We need to fix them soon.\r\n\r\nIndeed I have tried the CLI bellow using zsh: \r\n`pip install --upgrade embedchain`\r\n\r\nIt failed but this one worked\r\n`pip install --upgrade \"embedchain\" `\r\n\r\nI will fix it in #561 ",
          "created_at": "2023-09-05T15:07:36Z"
        }
      ]
    },
    {
      "issue_number": 608,
      "title": "feature request: `allow_reset` as a constructor argument for `ChromaDbConfig`",
      "body": "### 🚀 The feature\r\n\r\nCurrently we throw \r\n```\r\nValueError: For safety reasons, resetting is disabled.Please enable it by including `chromadb_settings={\"allow_reset\": True}` in your ChromaDbConfig`.\r\n```\r\n\r\nIt's debatable whether we need this safety mechanism at all.\r\n\r\nBut either way, allow_reset should be directly configurable under ChromaDbConfig, without the need to pass it as a dict in the \"advanced settings\".\r\n\r\nSo the task is to make this accessible from the ChromaDbConfig constructor.\r\n\r\nThis \r\n\r\n```python\r\napp = App(chromadb_config=ChromaDbConfig(chroma_settings={\"allow_reset\": True}))\r\n```\r\n\r\nshould turn into this\r\n\r\n```python\r\napp = App(chromadb_config=ChromaDbConfig(allow_reset=True))\r\n```\r\n\r\n### Motivation, pitch\r\n\r\nallow_reset should be directly configurable under ChromaDbConfig, without the need to pass it as a dict in the \"advanced settings\".",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-13T06:54:51Z",
      "updated_at": "2023-09-15T14:26:03Z",
      "closed_at": "2023-09-15T14:26:03Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/608/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/608",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/608",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:28.914107",
      "comments": [
        {
          "author": "Dev-Khant",
          "body": "Can I pick it up @cachho?",
          "created_at": "2023-09-13T12:15:58Z"
        },
        {
          "author": "cachho",
          "body": "> Can I pick it up @cachho?\r\n\r\nyes",
          "created_at": "2023-09-13T14:41:42Z"
        },
        {
          "author": "cachho",
          "body": "Just make sure to update the actual code, tests and the error message",
          "created_at": "2023-09-13T14:42:18Z"
        },
        {
          "author": "Dev-Khant",
          "body": "> Just make sure to update the actual code, tests and the error message\n\nYes",
          "created_at": "2023-09-13T15:30:49Z"
        }
      ]
    },
    {
      "issue_number": 603,
      "title": "Use app.db.count instead of app.count",
      "body": "### 🐛 Describe the bug\n\nGetting this warning when adding any data type. We need to fix this.\r\n```\r\n[WARNING] DEPRECATION WARNING: Please use `app.db.count()` instead of `app.count()`.\r\n```",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-12T23:39:20Z",
      "updated_at": "2023-09-15T02:39:59Z",
      "closed_at": "2023-09-15T02:39:59Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/603/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dtee1"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/603",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/603",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.147677",
      "comments": [
        {
          "author": "dtee1",
          "body": "Could you assign this to me?",
          "created_at": "2023-09-13T00:11:59Z"
        },
        {
          "author": "taranjeet",
          "body": "Sure, feel free to pick this up",
          "created_at": "2023-09-13T00:13:07Z"
        }
      ]
    },
    {
      "issue_number": 612,
      "title": "DOC: Update examples, tesla.com domain is not responsive",
      "body": "### Issue with current documentation:\n\nDoc examples using the tesla.com domain seem to be non-responsive, causing the app to hang up.\r\n\r\nI experienced this and so does another user on our discord, I think it's best if we swap them for another source.\r\n\r\nHaving a working readme example is crucial. ",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-13T08:36:44Z",
      "updated_at": "2023-09-14T03:27:43Z",
      "closed_at": "2023-09-14T03:27:43Z",
      "labels": [
        "documentation",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/612/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/612",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/612",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.330022",
      "comments": [
        {
          "author": "subhadip001",
          "body": "can i contribute here , it will be good for me as this will be my first osc to some good project",
          "created_at": "2023-09-13T11:34:04Z"
        },
        {
          "author": "cachho",
          "body": "> can i contribute here , it will be good for me as this will be my first osc to some good project\r\n\r\nabsolutely. Just find a good replacement and make sure to check readme and docs. ",
          "created_at": "2023-09-13T11:35:11Z"
        }
      ]
    },
    {
      "issue_number": 602,
      "title": "dont print the entire text when data type is text",
      "body": "### 🐛 Describe the bug\n\nWhen we are adding a data type \"text\", the entire text gets printed due to the below statement. \r\n\r\nwe can either skip printing text altogether or print part of it.\r\n\r\nprint(f\"All data from {src} already exists in the database.\")",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-12T19:17:04Z",
      "updated_at": "2023-09-13T20:36:24Z",
      "closed_at": "2023-09-13T20:36:24Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/602/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "dtee1"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/602",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/602",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.562890",
      "comments": [
        {
          "author": "dtee1",
          "body": "Could this be assigned to me?",
          "created_at": "2023-09-12T23:17:28Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @dtee1 welcome to embedchain.\r\nYeah sure. Just assigned.",
          "created_at": "2023-09-12T23:18:22Z"
        }
      ]
    },
    {
      "issue_number": 522,
      "title": "feature request: Smart embeddings database refresh",
      "body": "### 🚀 The feature\n\nCreate a way to refresh the embeddings database in a \"smart\" way - only updating/adding individual pages that have changed significantly or are new since the last run. \r\nFor example, when pointing to a site map - ignore all the pages that were already added to the embedding database and didn't change significantly (or at all). \n\n### Motivation, pitch\n\nWe're oftentimes working with dynamic knowledge bases that change on an ongoing basis. In large knowledge bases refreshing the embeddings database in a \"dumb\" way, assuming no prior, is costly both computationally and financially. Being able to selectively update only pages that significantly changed/were added since the last update will helping keeping the embeddings database up to date a non-issue",
      "state": "open",
      "author": "itamargo",
      "author_type": "User",
      "created_at": "2023-09-01T00:03:05Z",
      "updated_at": "2023-09-13T07:46:40Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/522/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/522",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/522",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.722148",
      "comments": [
        {
          "author": "Mark-Zeng",
          "body": "Hi @itamargo and @cachho, I was thinking about the very same feature the other day and wanted to know if I could work on this feature :)",
          "created_at": "2023-09-02T20:39:16Z"
        },
        {
          "author": "itamargo",
          "body": "I can't help with the coding, but can help with testing and documentation\r\n\r\nOn Sat, Sep 2, 2023, 1:39 PM Qihang ***@***.***> wrote:\r\n\r\n> Hi @itamargo <https://github.com/itamargo> and @cachho\r\n> <https://github.com/cachho>, I was thinking about the very same feature\r\n> the other day and wanted to k",
          "created_at": "2023-09-03T20:32:24Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @itamargo @Mark-Zeng : How are you?\r\nI am in the process of implementing above feature: https://github.com/embedchain/embedchain/pull/549\r\n\r\nCan you please block some here: https://cal.com/taranjeetio/ec . Let me know if the timings are not suitable. Will share something else.\r\n\r\nI want to under",
          "created_at": "2023-09-05T23:54:50Z"
        },
        {
          "author": "taranjeet",
          "body": "Closed #549. Working on https://github.com/embedchain/embedchain/pull/570",
          "created_at": "2023-09-06T00:11:59Z"
        },
        {
          "author": "Mark-Zeng",
          "body": "Hey @taranjeet , I booked a slot on your calendar to discuss this feature :) Looking forward to the discussion.",
          "created_at": "2023-09-06T03:29:25Z"
        }
      ]
    },
    {
      "issue_number": 399,
      "title": "feature request: `dry_run` for `add` method",
      "body": "### 🚀 The feature\n\nA dry run method on add could show the chunks. This way you can make sure loader and chunker work as intended.\n\n### Motivation, pitch\n\nThis way you have no cost when testing loaders.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\nIt could be implemented in a similar way to `query` and `chat` dry_run.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-03T08:31:02Z",
      "updated_at": "2023-09-12T03:50:33Z",
      "closed_at": "2023-09-12T03:50:33Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/399/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/399",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/399",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.916694",
      "comments": []
    },
    {
      "issue_number": 560,
      "title": "Discrepancy Between pip Library Version and GitHub Repository for LlmConfig Import",
      "body": "### 🐛 Describe the bug\r\n\r\nThere seems to be a discrepancy between the version of the package available on the pip library and the latest version on this GitHub repository. Specifically, the `LlmConfig import from embedchain.config` is failing on the pip version, but the GitHub repository suggests it should be present.\r\n\r\n**Reproduction of the error:**\r\n```\r\nfrom embedchain.config import LlmConfig \r\n```\r\n\r\n**Expected behavior**: Successful import of LlmConfig without any errors.\r\n\r\n**Actual behavior**:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/user/Code/experiment/embedchain_play/main.py\", line 6, in <module>\r\n    from embedchain.config import LlmConfig \r\nImportError: cannot import name 'LlmConfig' from 'embedchain.config' (/home/user/miniconda3/envs/embedchain/lib/python3.10/site-packages/embedchain/config/__init__.py)\r\n```\r\nI also noticed that the `base_llm_config.py` file seems to be missing from the llm directory in the pip library version.\r\n\r\nI've verified that this issue hasn't been reported previously by checking both existing and past issues.\r\n\r\nThank you for your attention to this matter!\r\n",
      "state": "closed",
      "author": "lianghsun",
      "author_type": "User",
      "created_at": "2023-09-05T10:59:20Z",
      "updated_at": "2023-09-10T22:53:41Z",
      "closed_at": "2023-09-10T22:53:41Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/560/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/560",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/560",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:29.916725",
      "comments": [
        {
          "author": "cachho",
          "body": "Hey, yeah we're about to release a new version for this. It's in the main branch but not in pypi. Tomorrow they should be in sync.",
          "created_at": "2023-09-05T14:28:39Z"
        },
        {
          "author": "cachho",
          "body": "And thanks for taking your time to check so thoroughly.",
          "created_at": "2023-09-05T14:30:12Z"
        },
        {
          "author": "Panczo",
          "body": "Thanks @cachho for quick answer, I have the same issue right now.",
          "created_at": "2023-09-05T21:46:07Z"
        },
        {
          "author": "agokrani",
          "body": "Hi @cachho, \r\n\r\nI also have the same issue for now. Can you please post how to build from source? When I do pip install . in the git repo, it gives following error: \r\n\r\nProcessing /home/aman/experiments/embedchain\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... e",
          "created_at": "2023-09-06T17:01:15Z"
        },
        {
          "author": "cachho",
          "body": "> I also have the same issue for now. Can you please post how to build from source?\r\n\r\n`poetry build`\r\n\r\n",
          "created_at": "2023-09-06T17:22:07Z"
        }
      ]
    },
    {
      "issue_number": 581,
      "title": "Add support for passing `history` in `LlmConfig` class",
      "body": "### 🚀 The feature\n\nFor production applications, it is not possible to keep and load the history from memory since the history can be really long. Moreover, it won't work for cases whenever someone has multiple instantiations of the embedchain App in production environment.\r\n\r\nIdeally, one should be able to do this:\r\n\r\n```python\r\nfrom embedchain.config import LlmConfig\r\n\r\n\r\nhistory = \"\"\"\r\nHuman: Hello!\r\nBot: Hello, how are you?\r\n\"\"\"\r\nconfig = LlmConfig(history=history, .....)\r\n\r\nquery = \"I am doing fine. How about yourself?\"\r\napp.query(query, config=config)\r\n```\r\n\r\n\n\n### Motivation, pitch\n\nThis feature will help embedchain to run in production environment without any issues. ",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-09-09T21:46:30Z",
      "updated_at": "2023-09-09T21:53:37Z",
      "closed_at": "2023-09-09T21:53:37Z",
      "labels": [
        "easy"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/581/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/581",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/581",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.123906",
      "comments": [
        {
          "author": "deshraj",
          "body": "Actually just realized that this not needed anymore since we can do:\r\n\r\n```python\r\n\r\nhistory = \"\"\"\r\nHuman: Hello!\r\nBot: Hello, how are you?\r\n\"\"\"\r\n\r\napp.llm.set_history(history)\r\n```\r\n",
          "created_at": "2023-09-09T21:53:37Z"
        }
      ]
    },
    {
      "issue_number": 553,
      "title": "Add --upgrade flag in front of all the pip install instances",
      "body": "### 🐛 Describe the bug\n\nAs we are rapidly developing our package, we want our users to be on the latest version so that they can avail all the functionalities.\r\nFor this we want to recommend to use `--upgrade` package when installing.\r\n\r\nOne such instance in readme.\r\n\r\n```\r\npip install --upgrade embedchain\r\n```\r\n\r\n\r\nWe want to update this everywhere. Example\r\n* replace\r\n```\r\npip install \"embedchain[poe]\"\r\n```\r\nwith\r\n```\r\npip install --upgrade \"embedchain[poe]\"\r\n```",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-09-05T03:42:32Z",
      "updated_at": "2023-09-09T10:51:43Z",
      "closed_at": "2023-09-08T02:42:56Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/553/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/553",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/553",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.313948",
      "comments": [
        {
          "author": "taranjeet",
          "body": "this includes both documentation and code related updates.",
          "created_at": "2023-09-05T03:42:53Z"
        }
      ]
    },
    {
      "issue_number": 87,
      "title": "[Feature Request] Add CSV or Google Sheets support",
      "body": null,
      "state": "closed",
      "author": "thanhvumsft",
      "author_type": "User",
      "created_at": "2023-06-28T00:48:02Z",
      "updated_at": "2023-09-05T08:18:05Z",
      "closed_at": "2023-09-05T08:18:05Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/87/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/87",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/87",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.490781",
      "comments": [
        {
          "author": "cachho",
          "body": "> I have that with privateGPT already, but it's not very good with csv files and is a bit slow perhaps. Can you beat it?\r\n> twitter: https://twitter.com/vagero4/status/1676978801383821312\r\n\r\n@taranjeet in #161 ",
          "created_at": "2023-07-10T14:25:25Z"
        }
      ]
    },
    {
      "issue_number": 395,
      "title": "Add support of where filter, so that user can filter documents accordingly.",
      "body": "### 🚀 The feature\n\nOften talked about, but still not part of our code base. \r\n\r\n\n\n### Motivation, pitch\n\n`where` filters can be used to filter the database, and give metadata a purpose.\r\n\r\nExample uses: \r\n- user specific embeddings\r\n- date filter\r\n- topic filtering\r\n- source filtering (only YT, only qna pairs etc.).\n\n### Alternatives\n\nAn alternative is using different collections, but that means if you have lots of duplicates you will have to store everything multiple times, so it's not a real alternative.\n\n### Additional context\n\nThere where filter should be implemented:\r\n* for query\r\n* for chat\r\n* in a new delete method\r\n\r\nIt should be part of the queryConfig.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-02T22:37:50Z",
      "updated_at": "2023-09-04T20:50:01Z",
      "closed_at": "2023-09-04T20:50:01Z",
      "labels": [
        "medium"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/395/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/395",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/395",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.677085",
      "comments": []
    },
    {
      "issue_number": 537,
      "title": "feature request: verbose version report",
      "body": "### 🚀 The feature\n\nWe should add a method to quickly report the version of\r\n\r\n* embedchain\r\n* chromadb\r\n* sqlite3 / pysqlite3\r\n* langchain (if we unpin the version)\r\n* anything else please add\r\n\r\nThis should be required in the issue template. \n\n### Motivation, pitch\n\nIt would help debugging as I keep having to ask the same questions.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-09-03T09:17:59Z",
      "updated_at": "2023-09-03T09:17:59Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/537/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/537",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/537",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.677113",
      "comments": []
    },
    {
      "issue_number": 506,
      "title": "ERROR: Cannot uninstall 'blinker'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.",
      "body": "### 🐛 Describe the bug\n\nwhen trying to pip install in google colab, get this error message:\r\n\r\nERROR: Cannot uninstall 'blinker'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.",
      "state": "closed",
      "author": "silvacarl2",
      "author_type": "User",
      "created_at": "2023-08-29T15:19:18Z",
      "updated_at": "2023-08-30T17:08:44Z",
      "closed_at": "2023-08-30T07:53:01Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/506/reactions",
        "total_count": 14,
        "+1": 13,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/506",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/506",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:30.677121",
      "comments": [
        {
          "author": "Viachek",
          "body": "Yes, I have the same error when trying to test in Colab",
          "created_at": "2023-08-29T21:56:19Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, I was able to reproduce this issue on colab. You can resolve the issue by doing something like this on colab notebook:\r\n\r\n```bash\r\n!pip3 install --ignore-installed embedchain\r\n```\r\n\r\nExample notebook I just created: \r\n https://colab.research.google.com/drive/1_RQ7gZkjR68ZRZhod5RkmWoRTkkX1udp#sc",
          "created_at": "2023-08-30T07:53:01Z"
        },
        {
          "author": "bgamazay",
          "body": "@deshraj \r\nThanks for your help.  However, looking at the debugging notebook you created, the first prompt seems to end with the below errors, which I am unable to resolve.  If I add in the code from the demo (with my API key) I get RateLimiteErrors\r\n\r\n`ERROR: pip's dependency resolver does not curr",
          "created_at": "2023-08-30T16:56:20Z"
        },
        {
          "author": "deshraj",
          "body": "You can ignore the warning I believe. This seems specific to the google colab and I don't see this issue on my mac. \n\nRegarding rate limiting, seems like you are using your openai api key too often. Might want to wait for sometime before retrying. ",
          "created_at": "2023-08-30T17:08:44Z"
        }
      ]
    },
    {
      "issue_number": 387,
      "title": "feature request: delete embeddings of specific datatype",
      "body": "### 🚀 The feature\n\nAllow to reset a datatype, e.g. `youtube_video` to specifically re-embed it with updated data or for any other reason.\n\n### Motivation, pitch\n\nThis allows more effective and economical retrains, when your embedding data has changed, without resetting the whole database. The benefit should be obvious, it saves processing power, time and tokens.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\nSince we add the data_type as a metadata tag, this should be pretty straightforward to implement. Call `collection.delete` with a `where` filter for the data_type",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-02T17:28:50Z",
      "updated_at": "2023-08-29T17:43:16Z",
      "closed_at": null,
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/387/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/387",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/387",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:32.654279",
      "comments": []
    },
    {
      "issue_number": 427,
      "title": "ImportError: cannot import name 'App' from 'embedchain'",
      "body": "HI~\r\nI use Python 3.11.3 run my test code, but I got this errer message.\r\n`from embedchain import App`\r\n`naval_chat_bot.add(\"web_page\", \"https://XXXXXX\")`\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py\", line 314, in _bootstrap      \r\n    self.run()\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\uvicorn\\_subprocess.py\", line 76, in subprocess_started\r\n    target(sockets=sockets)\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\uvicorn\\server.py\", line 61, in run\r\n    return asyncio.run(self.serve(sockets=sockets))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\asyncio\\runners.py\", line 190, in run\r\n    return runner.run(main)\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\asyncio\\runners.py\", line 118, in run\r\n    return self._loop.run_until_complete(task)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\asyncio\\base_events.py\", line 653, in run_until_complete  \r\n    return future.result()\r\n           ^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\uvicorn\\server.py\", line 68, in serve\r\n    config.load()\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\uvicorn\\config.py\", line 467, in load       \r\n    self.loaded_app = import_from_string(self.app)\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\uvicorn\\importer.py\", line 21, in import_from_string\r\n    module = importlib.import_module(module_str)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\importlib\\__init__.py\", line 126, in import_module        \r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<frozen importlib._bootstrap>\", line 1206, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1178, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1149, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 690, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 940, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\n  File \"D:\\SourceCode\\TEST\\linebot-embedchain-master\\main.py\", line 26, in <module>\r\n    from embedchain import App\r\nImportError: cannot import name 'App' from 'embedchain' (C:\\Users\\XXX\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\embedchain\\__init__.py)",
      "state": "closed",
      "author": "love2210",
      "author_type": "User",
      "created_at": "2023-08-11T05:37:04Z",
      "updated_at": "2023-08-29T17:42:21Z",
      "closed_at": "2023-08-29T17:42:20Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/427/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/427",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/427",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:32.654314",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Hey, can you please share more details?\r\n\r\ni tried the following code snippet and its working fine for me.\r\n\r\n```\r\nfrom embedchain import App\r\n\r\nnaval_chat_bot = App()\r\nnaval_chat_bot.add(\"web_page\", \"https://nav.al\")\r\n\r\n```",
          "created_at": "2023-08-11T06:24:54Z"
        },
        {
          "author": "taranjeet",
          "body": "hi @love2210 : let us know if you are still facing the issue?\r\nFeel free to close if this issue is resolved.",
          "created_at": "2023-08-12T01:22:11Z"
        },
        {
          "author": "cachho",
          "body": "Closing this, as we have no reproducible code.",
          "created_at": "2023-08-29T17:42:20Z"
        }
      ]
    },
    {
      "issue_number": 335,
      "title": "[Thoughts] Struggling with dependencies",
      "body": "### 🐛 Describe the bug\n\nSince the latest update, I've been struggling with dependencies.\r\n\r\n**We should generally question, whether we want to have all LLMs we use as a dependency. Right now embedchain is forcing me to install GPT4ALL, replicate, sentence transformers and openai, even if I'm using only one of them.**\r\n\r\nEspecially in a dockerized production environment, I don't need that. \r\n\r\n# Proposal\r\n\r\nIn my recent PRs, I used the following snippet. \r\n\r\n```python\r\ntry:\r\n    from gpt4all import GPT4All\r\nexcept ModuleNotFoundError:\r\n    raise ValueError(\r\n        \"The GPT4All python package is not installed. Please install it with `pip install GPT4All`\"\r\n    ) from None\r\n```\r\n\r\nwith this approach, users see an error message and can install the dependencies they need, while not installing everything they don't need\r\n\r\nQuestion: If we want to include all llms in the deps, because it means users have to type in one less command, is there a feasible way to publish a \"light\" package where the user installs the llm dependencies themself?\r\n\r\n# My problem and solution\r\n\r\nThis is the `requirements.txt` that does not work.\r\n```\r\nFlask==2.1.3\r\nFlask-Cors==3.0.8\r\nrequests==2.28.0\r\ngunicorn==20.1.0\r\nFlask-Caching==2.0.2 \r\nredis==4.4.2\r\nsupabase==1.0.3\r\nembedchain==0.0.26\r\n```\r\n\r\nThe only thing I changed was updating to the newest embedchain version.\r\n\r\nI fixed the problem by **removing** the following dependencies from embedchain's `setup.py`.\r\n\r\n```\r\n\"gpt4all\",\r\n \"sentence_transformers\",\r\n\"replicate==0.9.0\",\r\n\"duckduckgo-search==3.8.4\",\r\n```\r\nI kept `openai` because that's what I use, but you could remove that too.\r\n\r\nThen I built my own package with `python3 setup.py sdist` and put the local file in `requirements.txt`.\r\n\r\n\r\n",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-20T10:08:42Z",
      "updated_at": "2023-08-24T21:23:27Z",
      "closed_at": "2023-08-24T21:23:27Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/335/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/335",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/335",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:32.882152",
      "comments": [
        {
          "author": "cachho",
          "body": "Trying to let pip figure out all these dependencies took me:\r\n\r\n![image](https://github.com/embedchain/embedchain/assets/14180064/e6dc19c1-807b-43dc-9d26-a241a15001ec)\r\n",
          "created_at": "2023-07-20T10:11:06Z"
        },
        {
          "author": "cachho",
          "body": "This is the error btw.\r\n\r\n```\r\n#0 405.7 The conflict is caused by:\r\n#0 405.7     supabase 1.0.3 depends on httpx<0.24.0 and >=0.23.0\r\n#0 405.7     gotrue 1.0.1 depends on httpx<0.24.0 and >=0.23.0\r\n#0 405.7     postgrest 0.10.6 depends on httpx<0.24.0 and >=0.23.0\r\n#0 405.7     storage3 0.5.2 depend",
          "created_at": "2023-07-20T11:49:22Z"
        },
        {
          "author": "cachho",
          "body": "To make it clear, this isn't really an embedchain issue and could also be blamed on supabase, but if we keep our dependency footprint smaller we will run into fewer issues.",
          "created_at": "2023-07-20T12:11:37Z"
        },
        {
          "author": "Vasilije1990",
          "body": "I had the same issue with gpt4all. I support streamlining this. Also, running chromadb in docker was a pain",
          "created_at": "2023-07-20T13:53:22Z"
        }
      ]
    },
    {
      "issue_number": 392,
      "title": "refactor request: streamline dependencies",
      "body": "### 🐛 Describe the bug\n\nI have reported this in #335, on discord, and now it popped up again in #391.\r\n\r\n* dependencies are different in `setup.py` and `pyproject.toml`\r\n* should make all embedding and LLM models a requirement, when a user only has to use one app type? - or should it only be some, or none? Users could then install what they want to use.\r\n* when we make changes: how does it affect dev, CI/CD and tests? ",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-02T22:19:04Z",
      "updated_at": "2023-08-24T21:23:26Z",
      "closed_at": "2023-08-24T21:23:26Z",
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/392/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/392",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/392",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.070146",
      "comments": []
    },
    {
      "issue_number": 257,
      "title": "[Query] Is there a method for deleting docs/links/etc. in the vector database?",
      "body": "Is there a way to delete certain/all items (uploaded PDFs, YouTube links, etc.) in the vector database (besides the app.reset() function)?",
      "state": "closed",
      "author": "jessekirbs",
      "author_type": "User",
      "created_at": "2023-07-13T19:46:15Z",
      "updated_at": "2023-08-24T21:20:10Z",
      "closed_at": "2023-08-24T21:20:10Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/257/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/257",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/257",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.070283",
      "comments": [
        {
          "author": "cachho",
          "body": "It should be by using app.db_client and then Chroma's delete method that you can find in the chroma docs.",
          "created_at": "2023-07-13T22:00:09Z"
        },
        {
          "author": "cachho",
          "body": "but I also had the idea, which you probably want, to automatically add a metatag for the loader used. I will open an Issue for this.",
          "created_at": "2023-07-13T22:12:37Z"
        },
        {
          "author": "jessekirbs",
          "body": "Thanks, @cachho. Does embedchain automatically create and name a Chroma db collection when you add the first data? If so, what is the collection called? ",
          "created_at": "2023-07-13T23:43:49Z"
        },
        {
          "author": "cachho",
          "body": "> what is the collection called?\r\n\r\n`embedchain_store`\r\n\r\nhttps://github.com/embedchain/embedchain/blob/8f42ced9b590d30b3abf4303fda5a19e828cc41e/embedchain/vectordb/chroma_db.py#L47C15-L47C15",
          "created_at": "2023-07-14T00:11:29Z"
        },
        {
          "author": "cachho",
          "body": "Tracking this issue with #387. Closing this.",
          "created_at": "2023-08-24T21:20:10Z"
        }
      ]
    },
    {
      "issue_number": 223,
      "title": "[Query] Is it possible to create multiple instances and if so how to retrieve it ?",
      "body": "My requirement is as below\r\n\r\nI'd like to create separate bots for my YouTube links, Wikipedia links, Local PDFs. Am planning to index all the existing resources once and then later add new resources whenever available. \r\n\r\nHow to create multiple instances, update and retrieve records ?. Any help is appreciated.\r\n",
      "state": "closed",
      "author": "techguruagi",
      "author_type": "User",
      "created_at": "2023-07-11T08:47:53Z",
      "updated_at": "2023-08-24T21:19:05Z",
      "closed_at": "2023-08-24T21:19:04Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/223/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/223",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/223",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.285473",
      "comments": [
        {
          "author": "cachho",
          "body": "PR #189 implements this",
          "created_at": "2023-07-11T10:08:12Z"
        },
        {
          "author": "cachho",
          "body": "You can create multiple instances of the app class. With the collection name keyword they can use different collections of data. Where filtering can be improved definitely, but I think it's at a point where this ticket can be closed.",
          "created_at": "2023-08-24T21:19:05Z"
        }
      ]
    },
    {
      "issue_number": 168,
      "title": "[breaking change] Change the order of arguments in `.add()` function",
      "body": "Right now, add function is\r\n```\r\napp.add(\"data_type\", \"url\")\r\n```\r\n\r\nIn the future, we want to move to a point where we only give the URL and it automatically deduces the data type. \r\nThe first step towards this is updating the signature of add function.\r\n```\r\napp.add(\"url\", \"data_type\")\r\n```\r\n\r\nAlso the second `data_type` should be an optional or keyworded arg, so that later on it can be omitted. It can be a config also (cc @cachho )\r\n\r\nFor this, we should update the signature of add function, readme and replit. We can cover code and readme in this PR.\r\n\r\n### Deliverables\r\n\r\n- [ ] New signature for `.add()`\r\n    `.add(path, type=None)`\r\n    - Args:\r\n        - `path`: takes url, directory path or something else like s3 uri etc in future. We should parse the what the type of `path` is. Eg, determine whether it is a youtube video, url, pdf file etc.\r\n        - `type`: Optional for the user. This holds the type of the data that user is trying to input\r\n- [ ] Remove `.add_local()` function and merge that function inside the `.add()` only after changing the function signature\r\n- [ ] Update documentation and notebooks in the repository based on the above changes",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-06T19:04:46Z",
      "updated_at": "2023-08-16T20:18:25Z",
      "closed_at": "2023-08-16T20:18:25Z",
      "labels": [
        "enhancement",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 9,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/168/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/168",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/168",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.518933",
      "comments": [
        {
          "author": "cachho",
          "body": "Agreed.",
          "created_at": "2023-07-06T20:49:30Z"
        },
        {
          "author": "taranjeet",
          "body": "Lets revamp this `add` function as \r\n\r\n- Users can use this embed some data for their bot\r\n- Args:\r\n    - `path`: takes url, directory path or something else like s3 uri etc in future. We should parse the what the type of `path` is. Eg, determine whether it is a youtube video, url, pdf file etc.\r\n  ",
          "created_at": "2023-07-26T15:37:15Z"
        },
        {
          "author": "taranjeet",
          "body": "We will also have to update the docs, readme example.\r\nThis will be a breaking change.",
          "created_at": "2023-07-26T15:42:07Z"
        },
        {
          "author": "cachho",
          "body": "> * Returns id (we will generate the id as part of the ingestion. id will be md5)\r\n\r\nWhy not return a tuple of `(added_text, list_of_chunks)`. That way users can print their own status message, depending on whether they want to see the text or not, want to debug the chunking etc. This has been reque",
          "created_at": "2023-07-26T17:23:44Z"
        },
        {
          "author": "cachho",
          "body": "> * takes url, directory path or something else like s3 uri etc in future. We should parse the what the type of `path` is. Eg, determine whether it is a youtube video, url, pdf file etc.\r\n\r\nwhat's the goal here? Is this trying to unify `add` and `add_local`? Then I feel like `path` isn't describing ",
          "created_at": "2023-07-26T17:25:32Z"
        }
      ]
    },
    {
      "issue_number": 443,
      "title": "Add support to pass system prompt",
      "body": "### 🚀 The feature\n\nOpenAI supports passing system prompt. We need to add support for this in embedchain\n\n### Motivation, pitch\n\nSystem prompts help in better controlling the persona of the bot.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-14T22:58:45Z",
      "updated_at": "2023-08-16T19:57:03Z",
      "closed_at": "2023-08-16T19:57:03Z",
      "labels": [
        "easy"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/443/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/443",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/443",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.833699",
      "comments": []
    },
    {
      "issue_number": 445,
      "title": "Link development guidelines and documentation dev process in Readme",
      "body": "### 🚀 The feature\n\nWe need to link the following in the readme.\r\n\r\n* development guideline: https://docs.embedchain.ai/contribution/dev\r\n* docs setup guide: https://docs.embedchain.ai/contribution/docs\r\n\r\nIdeal section would be Contributing\r\n\r\n\n\n### Motivation, pitch\n\nMake it easier for anyone to contribute to the project\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-15T01:46:43Z",
      "updated_at": "2023-08-16T17:25:15Z",
      "closed_at": "2023-08-16T17:25:15Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/445/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/445",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/445",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.833720",
      "comments": []
    },
    {
      "issue_number": 321,
      "title": "[ux improvement]: Make file names consistent across the project",
      "body": "### 🚀 The feature\n\nNoticed that we have file names following the title casing (such as `AppConfig.py`) as well as snake casing (such as `data_formatter.py`) . We want to be more pythonic in this repository and follow snake case. \r\n\r\n### Deliverables\r\n\r\n- [ ] Change all title cased file names to snake case\r\n- [ ] Update the code paths everywhere\r\n- [ ] Update tests to make sure that they pass\r\n- [ ] Update docs in the `/docs` folder\n\n### Motivation, pitch\n\nMotivation is to keep the project file names consistent across the repo.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-19T08:02:49Z",
      "updated_at": "2023-08-12T04:45:07Z",
      "closed_at": "2023-08-12T04:45:07Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/321/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/321",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/321",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:33.833732",
      "comments": [
        {
          "author": "taranjeet",
          "body": "@rachittshah: Do you want to take this up? You commented about working on #267 , which is related to this. Let me know.\r\n",
          "created_at": "2023-07-20T06:35:27Z"
        },
        {
          "author": "rachittshah",
          "body": "@taranjeet would you recommend picking this over #267 ? ",
          "created_at": "2023-07-31T14:47:56Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @rachittshah , sure you can start with this.",
          "created_at": "2023-07-31T19:10:16Z"
        },
        {
          "author": "taranjeet",
          "body": "Closing this issue. Tracking everything in #267 ",
          "created_at": "2023-08-12T04:45:07Z"
        }
      ]
    },
    {
      "issue_number": 166,
      "title": "[BUG] Unable to instantiate model",
      "body": "I think Embedchan is promising and I am investing time to test it.\r\nI was able to install the package in a new environment and did succeed running a small test like this:\r\n```\r\nfrom embedchain import OpenSourceApp\r\nnaval_chat_bot = OpenSourceApp()\r\nnaval_chat_bot.add(\"youtube_video\", \"https://www.youtube.com/watch?v=3qHkcs3kG44\")\r\nnaval_chat_bot.add(\"pdf_file\", \"https://navalmanack.s3.amazonaws.com/Eric-Jorgenson_The-Almanack-of-Naval-Ravikant_Final.pdf\")\r\nnaval_chat_bot.add(\"web_page\", \"https://nav.al/feedback\")\r\nnaval_chat_bot.add(\"web_page\", \"https://nav.al/agi\")\r\nnaval_chat_bot.add(\"pdf_file\", \"testCV.pdf\")\r\nnaval_chat_bot.add_local(\"qna_pair\", (\"Who is Naval Ravikant?\", \"Naval Ravikant is an Indian-American entrepreneur and investor.\"))\r\n```\r\n**However, when I try to make a simple query like** \r\n\r\n```\r\nfrom embedchain import OpenSourceApp\r\nnaval_chat_bot = OpenSourceApp()\r\nprint(naval_chat_bot.query(\"What unique capacity does Naval argue humans possess when it comes to understanding explanations or concepts?\"))\r\n```\r\n\r\n**I got an error \"Unable to instantiate model\".**\r\n\r\nI tried reinstalling everything, clear local cache and search for an answer in all repo issues. None result!\r\n\r\nCan you please help?\r\n\r\nI am running locally in a MacMini 16Gb M2 Pro.\r\n\r\n\r\n\r\n\r\n",
      "state": "closed",
      "author": "fabianocastello",
      "author_type": "User",
      "created_at": "2023-07-06T17:54:55Z",
      "updated_at": "2023-08-12T04:33:01Z",
      "closed_at": "2023-08-12T04:33:01Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/166/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "taranjeet"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/166",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/166",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.056123",
      "comments": [
        {
          "author": "cachho",
          "body": "do I get that right? top works, bottom doesn't? Are you running a pip version or a clone from github? What version?",
          "created_at": "2023-07-06T18:14:40Z"
        },
        {
          "author": "fabianocastello",
          "body": "You got it right: top works, bottom does not.\r\nI am running locally and installed using \"pip install  embedchain\" in a brand new python env.",
          "created_at": "2023-07-06T18:34:26Z"
        },
        {
          "author": "nschantz21",
          "body": "I am having the same problem.\r\nfresh install.\r\nIt looks like the problem is coming from `gpt4all/llmodel_DO_NOT_MODIFY/build/libllmodel.dylib`\r\n\r\nI am getting an invalid model error when trying to load any gpt4all model\r\n\r\nRunning on Apple M1 Pro, Mac OS Monterey (12.6.7).\r\nembedchain 0.0.15\r\npython",
          "created_at": "2023-07-06T18:55:25Z"
        },
        {
          "author": "fabianocastello",
          "body": "> I am having the same problem. fresh install. It looks like the problem is coming from `gpt4all/llmodel_DO_NOT_MODIFY/build/libllmodel.dylib`\r\n> \r\n> I am getting an invalid model error when trying to load any gpt4all model\r\n> \r\n> Running on Apple M1 Pro, Mac OS Monterey (12.6.7). embedchain 0.0.15 ",
          "created_at": "2023-07-06T20:06:11Z"
        },
        {
          "author": "cachho",
          "body": "passing this to @taranjeet as he worked on introducing the open source model.",
          "created_at": "2023-07-06T20:48:19Z"
        }
      ]
    },
    {
      "issue_number": 101,
      "title": "Add support for recursive url loader",
      "body": "- https://twitter.com/attila_ibs/status/1673661554732986369",
      "state": "open",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-06-30T03:02:38Z",
      "updated_at": "2023-08-12T02:02:10Z",
      "closed_at": null,
      "labels": [
        "new-data-source",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/101/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/101",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/101",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.253806",
      "comments": [
        {
          "author": "cachho",
          "body": "this should probably have a nesting and/or total limit",
          "created_at": "2023-07-06T20:58:44Z"
        }
      ]
    },
    {
      "issue_number": 94,
      "title": "[feature] - Add Database, like SQL and SQLite3",
      "body": "Process a database as a data source",
      "state": "open",
      "author": "waelmansourx",
      "author_type": "User",
      "created_at": "2023-06-28T16:41:34Z",
      "updated_at": "2023-08-12T01:57:12Z",
      "closed_at": null,
      "labels": [
        "new-data-source",
        "medium"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/94/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/94",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/94",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.437082",
      "comments": [
        {
          "author": "cachho",
          "body": "I feel like that's taking it too far. There are infinite possibilities for the design of a database. Often times you have foreign keys, and the id that's used as a reference would mean nothing to the embedding algorithm. Is each row supposed to be treated as a document? Likely, but there will be oth",
          "created_at": "2023-07-01T12:29:48Z"
        }
      ]
    },
    {
      "issue_number": 76,
      "title": "[Feature Request] Auto-Detect data-type, make the it optional",
      "body": "First off... Great job!!! Simple and tight code. Much appreciate you making/sharing it. \r\n\r\nThere was one quick suggestion I had: In order to minimize boilerplate code, it would be good to modify the interface to make the `file_type` variable optional and detected based on the input content. If the variable is defined then the code would check the file to ensure that it is of the specified type. \r\n\r\nThis ease-of-life modification should be added early in development to minimize more extensive refactors down the line. \r\n\r\nBut I wholly understand if you have a different design goal for making this a required input. ",
      "state": "closed",
      "author": "ianderrington",
      "author_type": "User",
      "created_at": "2023-06-26T15:56:42Z",
      "updated_at": "2023-08-12T01:55:11Z",
      "closed_at": "2023-08-12T01:55:10Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/76/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/76",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/76",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.603773",
      "comments": [
        {
          "author": "cachho",
          "body": "Good suggestion, defnitely on the roadmap",
          "created_at": "2023-07-10T14:45:30Z"
        },
        {
          "author": "cachho",
          "body": "#380 will resolve this",
          "created_at": "2023-08-02T22:44:54Z"
        },
        {
          "author": "taranjeet",
          "body": "Closing this issue, since we are already tracking in #380 ",
          "created_at": "2023-08-12T01:55:10Z"
        }
      ]
    },
    {
      "issue_number": 27,
      "title": "Issue with get_openai_answer",
      "body": "max_tokens parameter being set to 1000 is an issue. With having multiple sources (with long urls) and larger webpages, this is quickly eaten up. When the token amount is exceeded no warning is given except from openAI.\r\n\r\nopenai.error.RateLimitError: The server had an error while processing your request. Sorry about that!\r\n\r\ndef get_openai_answer(self, prompt):\r\n        messages = []\r\n        messages.append({\r\n            \"role\": \"user\", \"content\": prompt\r\n        })\r\n        response = openai.ChatCompletion.create(\r\n            model=\"gpt-3.5-turbo-0613\",\r\n            messages=messages,\r\n            temperature=0,\r\n            max_tokens=1000,\r\n            top_p=1,\r\n        )\r\n        return response[\"choices\"][0][\"message\"][\"content\"]",
      "state": "closed",
      "author": "NSuer",
      "author_type": "User",
      "created_at": "2023-06-22T17:31:05Z",
      "updated_at": "2023-08-12T01:42:13Z",
      "closed_at": "2023-08-12T01:42:13Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/27/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/27",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/27",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.782514",
      "comments": [
        {
          "author": "cachho",
          "body": "Do you want it to be configurable/higher by default or do you want the error message to be clearer?",
          "created_at": "2023-06-23T16:34:24Z"
        },
        {
          "author": "NSuer",
          "body": "I think both would be beneficial. Of course have a default.",
          "created_at": "2023-06-25T21:38:27Z"
        },
        {
          "author": "Dev-Khant",
          "body": "@taranjeet @deshraj Can I pick this up if nobody is working on it?",
          "created_at": "2023-08-02T12:42:10Z"
        },
        {
          "author": "taranjeet",
          "body": "@Dev-Khant : this support is already there. You can use `QueryConfig`.\r\n\r\nAlso, I think we need to improve our docs to make it more clear to the user.\r\n\r\nClosing this issue. For docs thing, tracking in https://github.com/embedchain/embedchain/issues/301",
          "created_at": "2023-08-12T01:42:13Z"
        }
      ]
    },
    {
      "issue_number": 21,
      "title": "[Feature Request] Add ReliableGPT to handle errors",
      "body": "Hi @taranjeet, \r\n\r\nFacing issues with rate-limiting and context window limitations. \r\n\r\nWould recommend wrapping the openai base call with `reliableGPT`. \r\n\r\n```\r\nfrom reliablegpt import reliableGPT\r\nopenai.ChatCompletion.create = reliableGPT(openai.ChatCompletion.create, ...)\r\n```\r\n\r\nSource: https://github.com/BerriAI/reliableGPT",
      "state": "closed",
      "author": "krrishdholakia",
      "author_type": "User",
      "created_at": "2023-06-21T22:59:37Z",
      "updated_at": "2023-08-12T01:37:23Z",
      "closed_at": "2023-08-12T01:37:23Z",
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/21/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/21",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/21",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.964407",
      "comments": []
    },
    {
      "issue_number": 398,
      "title": "refactor request: `data_formatter.py` - refactor `_get_loader`",
      "body": "### 🐛 Describe the bug\n\nRefactor the `_get_loader` method to not instantiate all loaders in the dict. Do it exactly like it's done in the next method, `_get_chunker`. This will increase performance.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-08-03T08:14:39Z",
      "updated_at": "2023-08-12T00:02:41Z",
      "closed_at": "2023-08-12T00:02:41Z",
      "labels": [
        "good first issue",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/398/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/398",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/398",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.964429",
      "comments": []
    },
    {
      "issue_number": 19,
      "title": "Feature Request - Integrate Azure's OpenAI API as an Option",
      "body": "Currently, embedchain is designed to use OpenAI's API for creating embeddings and leveraging the power of GPT-3 for generating answers in the context of chatbots. This feature request proposes to include the option of using Azure's OpenAI API as an alternative.\r\n\r\nAzure, a comprehensive suite of cloud services offered by Microsoft, also provides an implementation of OpenAI API. Integration with Azure's OpenAI API would provide a choice to the users to select between OpenAI's original API and Azure's version based on their specific requirements and preferences.",
      "state": "closed",
      "author": "big-analytics",
      "author_type": "User",
      "created_at": "2023-06-21T20:03:39Z",
      "updated_at": "2023-08-11T06:28:43Z",
      "closed_at": "2023-08-11T06:28:43Z",
      "labels": [
        "enhancement",
        "new-data-source"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/19/reactions",
        "total_count": 6,
        "+1": 6,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/19",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/19",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:34.964437",
      "comments": [
        {
          "author": "xihuishawpy",
          "body": "Can modify the source code of the API configuration.",
          "created_at": "2023-06-29T16:09:02Z"
        },
        {
          "author": "aaishikdutta",
          "body": "@big-analytics @xihuishawpy please check the above PR, you can use Azure OpenAI as following:\r\n1) In addition to OpenAI key add API base in environment as : OPENAI_API_BASE\r\n2) add is_azure=True in InitConfig\r\n\r\nPlease test this out if you have Azure OpenAI keys",
          "created_at": "2023-07-17T13:28:35Z"
        },
        {
          "author": "taranjeet",
          "body": "this is addressed now. Closing the issue.",
          "created_at": "2023-08-11T06:28:43Z"
        }
      ]
    },
    {
      "issue_number": 386,
      "title": "feature request: add support for elasticsearch as a datasource",
      "body": "### 🚀 The feature\n\nDeliverables:\r\n\r\n- Add support for storing the data into elasticsearch\r\n- User will specify the db while instantiating the class. Eg:\r\n\r\n##### Using elasticsearch as a datasource\r\n```python\r\nfrom embedchain import App\r\n\r\napp = App(db=\"es\")\r\n```\r\n\r\n##### Using chroma as a datasource\r\n```python\r\nfrom embedchain import App\r\n\r\napp = App(db=\"chroma\")\r\n```\r\n\r\n- If no datasource is specified, we will default to chroma db by default\r\n- Make sure that `app.query()` works as intended and should return reasonable response\r\n\n\n### Motivation, pitch\n\nCurrently, embedchain only supports chroma db as the data source. We want to extend the support to have more vector databases. We want to start by adding support for elasticsearch.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-08-01T02:08:52Z",
      "updated_at": "2023-08-11T03:53:58Z",
      "closed_at": "2023-08-11T03:53:58Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/386/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "taranjeet"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/386",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/386",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:35.173291",
      "comments": [
        {
          "author": "cachho",
          "body": "I think we should rethink the whole database integration. Since we already have a `BaseVectorDb` class with subclasses, we should abstract where possible, and only expose streamlined, widely supported methods to the main class, such as `initialize`, `add` and `delete`, `reset`/`delete_all`, with fil",
          "created_at": "2023-08-02T17:31:20Z"
        }
      ]
    },
    {
      "issue_number": 26,
      "title": "Add support for Notion",
      "body": null,
      "state": "closed",
      "author": "supnim",
      "author_type": "User",
      "created_at": "2023-06-22T09:28:13Z",
      "updated_at": "2023-08-09T07:45:24Z",
      "closed_at": "2023-08-09T07:45:24Z",
      "labels": [
        "good first issue",
        "new-data-source",
        "medium"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/26/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/26",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/26",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:35.385351",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Notion has two types of pages - private and public.\r\nNotion is a personal CMS, so lets focus first on private pages.",
          "created_at": "2023-08-07T06:23:20Z"
        }
      ]
    },
    {
      "issue_number": 261,
      "title": "[Feature Request] Collection name everywhere",
      "body": "We have lots of users coming in, asking for ways to swap out embeddings for different use cases, while still keeping them. One simple methods are different collections, a feature supported by Chroma.\r\n\r\n**We should make it that all configs allow to specify a collection name, that is then used by Chroma**",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-14T00:14:23Z",
      "updated_at": "2023-08-09T07:38:37Z",
      "closed_at": "2023-08-09T07:38:37Z",
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/261/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/261",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/261",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:35.582062",
      "comments": [
        {
          "author": "jonasiwnl",
          "body": "What's the expected usage? Like this?\r\n```python3\r\nfrom embedchain import App\r\nfrom embedchain.vectordb.chroma_db import ChromaDB\r\n\r\n\r\ndb = ChromaDB(collection=\"collection1\")\r\nconfig = InitConfig(db=db)\r\n\r\napp = App(config)\r\n```\r\nI'd be willing to pick this up.",
          "created_at": "2023-07-17T15:07:00Z"
        },
        {
          "author": "deshraj",
          "body": "Great idea @cachho. ❤️",
          "created_at": "2023-07-17T15:09:41Z"
        },
        {
          "author": "cachho",
          "body": "> Great idea @cachho. ❤️\r\n\r\nIt's literally the feature you guys asked me to work on today.",
          "created_at": "2023-07-17T15:23:09Z"
        },
        {
          "author": "cachho",
          "body": "> I'd be willing to pick this up.\r\n\r\nWhen do you think you have time to work on it? I was going to tackle this, but I also got plenty of other open issues, but we need to get this done soon, so please let me know when we can expect it from you. Thanks for your contribution.\r\n\r\n> What's the expected ",
          "created_at": "2023-07-17T15:27:01Z"
        },
        {
          "author": "jonasiwnl",
          "body": "Okay, understood.\r\n\r\n> When do you think you have time to work on it?\r\n\r\nI can start on this feature later today. However, if you would rather do it, just let me know and I can find another issue to work on.",
          "created_at": "2023-07-17T15:56:55Z"
        }
      ]
    },
    {
      "issue_number": 218,
      "title": "[Bug] app.reset() Function Doesn't Exist",
      "body": "Trying to utilized the app.reset() function, but I get the following error:\r\n\r\n`AttributeError: 'App' object has no attribute 'reset'`\r\n\r\nAny suggestions would be greatly appreciated. Thanks!",
      "state": "closed",
      "author": "jessekirbs",
      "author_type": "User",
      "created_at": "2023-07-11T02:18:12Z",
      "updated_at": "2023-08-04T10:53:02Z",
      "closed_at": "2023-08-04T10:53:02Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 14,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/218/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/218",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/218",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:37.505102",
      "comments": [
        {
          "author": "ahnedeee",
          "body": "app should be the name of the instance of the App class",
          "created_at": "2023-07-11T05:52:55Z"
        },
        {
          "author": "ahnedeee",
          "body": "meaning if you have 'chat_bot = App()' you should do 'chat_bot.reset()' not 'app.reset()'",
          "created_at": "2023-07-11T05:53:48Z"
        },
        {
          "author": "jessekirbs",
          "body": "> meaning if you have 'chat_bot = App()' you should do 'chat_bot.reset()' not 'app.reset()'\r\n\r\nHey @ahnedeee - thanks for the response. That's what I did and the error was the one I listed above. Is it working for you?",
          "created_at": "2023-07-11T07:18:33Z"
        },
        {
          "author": "cachho",
          "body": "Please post the whole script and the output. Include `InitConfig(log_level=\"DEBUG\")`",
          "created_at": "2023-07-11T07:20:34Z"
        },
        {
          "author": "ahnedeee",
          "body": "> \r\n\r\nit works for me",
          "created_at": "2023-07-11T07:25:57Z"
        }
      ]
    },
    {
      "issue_number": 311,
      "title": "feature request: VS Code extension for code search",
      "body": "### 🚀 The feature\n\nVS Code searchbox does string matching. Maybe something better can be done using embedchain\n\n### Motivation, pitch\n\nI want to be able to search for meanings of code without knowing the exact variable names I'm looking for.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "open",
      "author": "shashank42",
      "author_type": "User",
      "created_at": "2023-07-18T13:35:34Z",
      "updated_at": "2023-08-04T10:51:58Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "hard"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/311/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/311",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/311",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:37.739658",
      "comments": [
        {
          "author": "taranjeet",
          "body": "This is a good issue @shashank42 . We are planning on releasing a broader set of templates and we will cover it there. Keeping it open for now. Will let you know when we pick. Meanwhile if you have any ideas or input or a PR, happy to chat and review.",
          "created_at": "2023-07-20T06:36:28Z"
        }
      ]
    },
    {
      "issue_number": 245,
      "title": "Setup Github CI for running unit tests and linter before merging PRs",
      "body": null,
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-12T04:21:29Z",
      "updated_at": "2023-08-02T17:38:29Z",
      "closed_at": "2023-08-02T17:38:29Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/245/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/245",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/245",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:37.918140",
      "comments": [
        {
          "author": "cachho",
          "body": "this has been implemented. closing.",
          "created_at": "2023-08-02T17:38:29Z"
        }
      ]
    },
    {
      "issue_number": 359,
      "title": "bug: unsatisfying results with `youtube_video` format",
      "body": "### 🚀 The feature\r\n\r\nI've tried `llm_bot.add(\"youtube_video\", \"https://www.youtube.com/watch?v=48h57PspBec\")`\r\n\r\nAnd the AI acted like it knew nothing about the videos when I queried. I'm not sure if I need to do anything else. I made sure the youtube-transcript-api was installed.\r\n\r\n### Motivation, pitch\r\n\r\nWhat does youtube_video do? \r\n\r\n### Alternatives\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_",
      "state": "closed",
      "author": "funkytaco",
      "author_type": "User",
      "created_at": "2023-07-24T01:00:08Z",
      "updated_at": "2023-08-02T17:33:53Z",
      "closed_at": "2023-08-02T17:33:53Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/359/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/359",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/359",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:38.097256",
      "comments": [
        {
          "author": "aaishikdutta",
          "body": "Hey @funkytaco can you check the query method with dry_run attribute as true and see what result is it printing? Also can you please share what kind of app you are instantiating with some code snippets? \r\nThanks!\r\n",
          "created_at": "2023-07-24T07:20:44Z"
        },
        {
          "author": "funkytaco",
          "body": "```python\r\n#stripping out the flask API stuff, but this is basically it\r\n\r\nfrom flask import Flask, request, jsonify\r\nfrom flask_cors import CORS\r\nfrom embedchain import App\r\nfrom dotenv import load_dotenv\r\nfrom urllib.parse import urlparse\r\nimport os\r\n\r\nload_dotenv()\r\n\r\napp = Flask(__name__)\r\nCORS(",
          "created_at": "2023-07-26T17:12:16Z"
        },
        {
          "author": "aaishikdutta",
          "body": "Not sure but by any chance did you delete the db folder that got created or the more practical thing that comes to my mind is that the add method is in different folder to the place where you call the query method. I know it sounds silly but that's the only way I could recreate the exact dry_run out",
          "created_at": "2023-07-26T17:59:15Z"
        },
        {
          "author": "cachho",
          "body": "closing this, please reopen if you find out how to make this reproducible so we can help you.",
          "created_at": "2023-08-02T17:33:53Z"
        }
      ]
    },
    {
      "issue_number": 272,
      "title": "[Bug] Hitting rate limit with bulk jobs (sitemap)",
      "body": "I got the following error when loading a sitemap with ~50 pages\r\n\r\n```\r\nopenai.error.RateLimitError: Rate limit reached for default-text-embedding-ada-002 in organization org-secret on tokens per min. Limit: 1000000 / min. Current: 1 / min. Contact us through our help center at help.openai.com if you continue to have issues.\r\n```\r\n\r\nLuckily this only cost 20 cents. You never know what's in those sitemaps.\r\n\r\nWe might have to add a delay to bulk jobs. The difficulty is that it can't be done in the loader, because they are not actually embedded there. It has to be done in a main class method, probably `load_and_embed`. ",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-14T22:57:52Z",
      "updated_at": "2023-08-02T17:24:33Z",
      "closed_at": null,
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 10,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/272/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/272",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/272",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:38.347835",
      "comments": [
        {
          "author": "aaishikdutta",
          "body": "Hi @cachho since we are looping over pages we can use the backoff method suggested here. https://platform.openai.com/docs/guides/rate-limits/retrying-with-exponential-backoff\r\n",
          "created_at": "2023-07-15T14:52:15Z"
        },
        {
          "author": "cachho",
          "body": "> Hi @cachho since we are looping over pages we can use the backoff method suggested here. https://platform.openai.com/docs/guides/rate-limits/retrying-with-exponential-backoff\r\n\r\nIf you know how to do it, go ahead :) That would be awesome, cause I just can't use the sitemap as it is.",
          "created_at": "2023-07-15T16:52:05Z"
        },
        {
          "author": "aaishikdutta",
          "body": "Can you pass me the sitemap, which was giving you rate limit?\r\n",
          "created_at": "2023-07-15T16:55:05Z"
        },
        {
          "author": "cachho",
          "body": "> Can you pass me the sitemap, which was giving you rate limit?\r\n\r\nsent you a dm on discord",
          "created_at": "2023-07-15T17:51:35Z"
        },
        {
          "author": "aaishikdutta",
          "body": "I tried adding the rate limiter, but it doesn't seem to work since chroma isn't iterating over our document array, it simply passes the entire array to the openai embedding endpoint. So the only way I see now is to batch our array -> add a delay after passing every batch",
          "created_at": "2023-07-17T08:39:33Z"
        }
      ]
    },
    {
      "issue_number": 114,
      "title": "[Feature Request] Prompt Customization",
      "body": "This is also part of #105, currently this is the prompt that's always used:\r\n\r\n```\r\nprompt = f\"\"\"Use the following pieces of context to answer the query at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\r\n        {context}\r\n        Query: {input_query}\r\n        Helpful Answer:\r\n        \"\"\"\r\n```\r\nthis should be customizable. I think everyone agrees. The question is whether it should be a class attribute of the app, or on a per question basis. ",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-01T12:54:58Z",
      "updated_at": "2023-08-02T17:18:08Z",
      "closed_at": "2023-08-02T17:18:08Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/114/reactions",
        "total_count": 4,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/114",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/114",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:38.580702",
      "comments": [
        {
          "author": "cachho",
          "body": "I would like to see #63 merged first, so we don't have a merge conflict. Then I can work on this.",
          "created_at": "2023-07-02T17:53:27Z"
        },
        {
          "author": "cachho",
          "body": "> The question is whether it should be a class attribute of the app, or on a per question basis.\r\n\r\nAlthough it does add more (optional) boilerplate, the per question basis allows for higher customization. Also, we have not thought of a way to implement \"global\" class attribute settings, so this als",
          "created_at": "2023-07-02T17:55:47Z"
        },
        {
          "author": "cachho",
          "body": "Waiting to see if we can merge #63, then this should be easy.",
          "created_at": "2023-07-06T20:54:34Z"
        }
      ]
    },
    {
      "issue_number": 351,
      "title": "[Clarification] Configure the chunking strategy / configure how many context to use when querying LLM?",
      "body": "Hi,\r\nwhile playing with your library, I've come with some question which would be quite useful to understand.\r\n\r\n1) Can we use custom text splitters from langchain library? where are different text splitters strategies and using recursive on is quite limited for more tricky task?\r\n2) What is the difference between `add_local ` and  `add` in terms of `text` formats? two methods which seems to do the same and are quite confusing for having two different names, I think one of it should be deprecated?\r\n3) Can we add verbosity paramater for `add` method? now when I add multiple text datasets into a loop, I get printed back the whole original text which makes make printout quite messy for big texts. Also it will be quite great to have a configuration to print how the original text was chunked based on chunking strategy. \r\n\r\n\r\n4) Is there any way to control when quering LLM how many context to give (I assume to configure the distance between vectors) ?",
      "state": "closed",
      "author": "vpinigin",
      "author_type": "User",
      "created_at": "2023-07-21T09:15:45Z",
      "updated_at": "2023-07-26T21:46:14Z",
      "closed_at": "2023-07-26T21:46:14Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/351/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/351",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/351",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:38.796739",
      "comments": [
        {
          "author": "cachho",
          "body": "> What is the difference between add_local  and add in terms of text formats? two methods which seems to do the same and are quite confusing for having two different names, I think one of it should be deprecated?\r\n\r\nIt's the same, the only difference is that the argument is called `url` or `content`",
          "created_at": "2023-07-21T09:45:25Z"
        },
        {
          "author": "cachho",
          "body": "This part `:param number_documents: Number of documents to pull from the database as context.` has been added back to the documentation. Closing this for now. Please reopen if you need more clarification.",
          "created_at": "2023-07-26T21:43:31Z"
        }
      ]
    },
    {
      "issue_number": 244,
      "title": "Add unit tests for apps and utility functions",
      "body": null,
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-12T04:20:49Z",
      "updated_at": "2023-07-26T21:44:57Z",
      "closed_at": "2023-07-26T21:44:56Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/244/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "cachho"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/244",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/244",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.004224",
      "comments": [
        {
          "author": "cachho",
          "body": "While this certainly isn't done, we have added testing capabilities and tests, and this issue isn't adding anything anymore. If there are certain parts of the app that need more tests, we should open concrete issues for them. closing this.",
          "created_at": "2023-07-26T21:44:56Z"
        }
      ]
    },
    {
      "issue_number": 256,
      "title": "Frontend Python or JS",
      "body": "Hello. Not an issue but a question. Love this. What does anyone recommend a front end for this and is it better to run this in js or python. I have a local python install for now but want to create some sort of gui front end. Am a very low coder so do you need an API or is there another way. Thanks\r\n",
      "state": "closed",
      "author": "mynumu",
      "author_type": "User",
      "created_at": "2023-07-13T16:11:01Z",
      "updated_at": "2023-07-26T08:58:10Z",
      "closed_at": "2023-07-26T08:58:10Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/256/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/256",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/256",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.183764",
      "comments": [
        {
          "author": "cachho",
          "body": "My experience (and I say that as a Flask Base contributor) is that Python in the browser is ways behind JS. \r\n\r\nI put my embedchain behind Flask with Gunicorn in the backend, and NextJS in the frontend. The chat window is based on https://github.com/zahidkhawaja/langchain-chat-nextjs but highly modi",
          "created_at": "2023-07-13T22:05:05Z"
        },
        {
          "author": "mynumu",
          "body": "Thanks for taking the time to reply. I will see if I can get the js template running. Do you have discord/other place to ask questions/community shares etc. thanks ",
          "created_at": "2023-07-14T18:53:29Z"
        },
        {
          "author": "taranjeet",
          "body": "Hey @mynumu : please find our discord here: https://discord.com/invite/6PzXDgEjG5",
          "created_at": "2023-07-14T18:54:40Z"
        }
      ]
    },
    {
      "issue_number": 370,
      "title": "feature request: recursive markdown filesystem loader",
      "body": "### 🚀 The feature\n\nA recursive loader, that loads markdown files (or other files, but right now I can't think of an example where it would be anything else).\n\n### Motivation, pitch\n\nLoad obsidian and other note taking apps.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\nCould be done through the text loader and chunker. I'm pretty sure we wouldn't have to sanitize it as markdown is understood by openai and other models.",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-26T08:56:53Z",
      "updated_at": "2023-07-26T08:57:12Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "new-data-source",
        "medium"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/370/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/370",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/370",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.418731",
      "comments": []
    },
    {
      "issue_number": 340,
      "title": "docs: documentation needs modification",
      "body": "### 🐛 Describe the bug\r\n\r\non this page https://docs.embedchain.ai/advanced/configuration    \r\nthe demo here needs to be modified:     \r\n\r\n```python\r\n# Example: define your own chunker config for `youtube_video`\r\nchunker_config = ChunkerConfig(chunk_size=1000, chunk_overlap=100, length_function=len)\r\nnaval_chat_bot.add(\"youtube_video\", \"https://www.youtube.com/watch?v=3qHkcs3kG44\", AddConfig(chunker=chunker_config))   `\r\n```\r\n\r\nit should be the following instead, else will not work as intended, thank you!   \r\n```python\r\nnaval_chat_bot.add(\"youtube_video\", \"https://www.youtube.com/watch?v=3qHkcs3kG44\", config=AddConfig(chunker=chunker_config))   \r\n```",
      "state": "closed",
      "author": "YunchengLiang",
      "author_type": "User",
      "created_at": "2023-07-20T20:41:34Z",
      "updated_at": "2023-07-24T15:05:02Z",
      "closed_at": "2023-07-24T15:05:02Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/340/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/340",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/340",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.418754",
      "comments": [
        {
          "author": "cachho",
          "body": "Yes, that's better, but it goes for the whole file. You can open a PR if you want.",
          "created_at": "2023-07-21T08:13:23Z"
        },
        {
          "author": "YunchengLiang",
          "body": "> Yes, that's better, but it goes for the whole file. You can open a PR if you want.\r\n\r\nthank you, i will open a pr then!",
          "created_at": "2023-07-21T13:04:21Z"
        }
      ]
    },
    {
      "issue_number": 251,
      "title": "[BUG] Chunker Config does not work as described in doc strings",
      "body": "My code\r\n\r\n```python\r\nfrom embedchain import App\r\nfrom embedchain.config import AddConfig, InitConfig\r\nfrom embedchain.config.AddConfig import ChunkerConfig\r\n\r\napp = App(config=InitConfig(log_level=\"DEBUG\"))\r\n\r\nchunker_config = ChunkerConfig(chunk_size=1, chunk_overlap=1, length_function=1)\r\nconfig = AddConfig(chunker_config)\r\napp.add(\"text\", \"lorem_ipsum\", config)\r\n```\r\n\r\nreturns\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 9, in <module>\r\n    app.add(\"text\", \"lorem_ipsum\", config)\r\n  File \"/home/c/code/embedchain/embedchain/embedchain.py\", line 53, in add\r\n    data_formatter = DataFormatter(data_type, config)\r\n  File \"/home/c/code/embedchain/embedchain/data_formatter/data_formatter.py\", line 26, in __init__\r\n    self.chunker = self._get_chunker(data_type, config.chunker)\r\n  File \"/home/c/code/embedchain/embedchain/data_formatter/data_formatter.py\", line 59, in _get_chunker\r\n    \"youtube_video\": YoutubeVideoChunker(config),\r\n  File \"/home/c/code/embedchain/embedchain/chunkers/youtube_video.py\", line 21, in __init__\r\n    text_splitter = RecursiveCharacterTextSplitter(**config)\r\nTypeError: ABCMeta object argument after ** must be a mapping, not ChunkerConfig\r\n```\r\n\r\nI think it's because it expects a dict but `ChunkerConfig` is a class.\r\nI'm not sure why `ChunkerConfig` should be a dict when everything else is a config class.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-12T19:25:46Z",
      "updated_at": "2023-07-21T09:40:57Z",
      "closed_at": "2023-07-21T09:40:57Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/251/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/251",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/251",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.652333",
      "comments": [
        {
          "author": "cachho",
          "body": "The readme example works\r\n\r\n\r\n```python\r\napp = App(config=InitConfig(log_level=\"DEBUG\"))\r\n\r\nadd_config = {\r\n        \"chunker\": {\r\n                \"chunk_size\": 1,\r\n                \"chunk_overlap\": 1,\r\n                \"length_function\": len,\r\n        }\r\n}\r\napp.add(\"text\", \"lorem ipsum\", AddConfig(**a",
          "created_at": "2023-07-12T19:28:59Z"
        }
      ]
    },
    {
      "issue_number": 334,
      "title": "[Bug] ModuleNotFoundError: No module named 'embedchain.apps'",
      "body": "### 🐛 Describe the bug\n\nIt seems that something was broken during yesterday update\r\n\r\n```\r\nfrom embedchain import OpenSourceApp\r\napp = OpenSourceApp()\r\n```\r\n\r\n`ModuleNotFoundError: No module named 'embedchain.apps'`",
      "state": "closed",
      "author": "vpinigin",
      "author_type": "User",
      "created_at": "2023-07-20T09:22:07Z",
      "updated_at": "2023-07-21T08:14:49Z",
      "closed_at": "2023-07-21T08:14:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/334/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/334",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/334",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:39.935155",
      "comments": [
        {
          "author": "cachho",
          "body": "Can't confirm. Can you make sure you're using the latest version?\r\n\r\nAre you cloning from github or using pip?",
          "created_at": "2023-07-20T09:40:46Z"
        },
        {
          "author": "vpinigin",
          "body": "I used it from pip in google colab with --upgrade flag",
          "created_at": "2023-07-20T09:43:44Z"
        },
        {
          "author": "vpinigin",
          "body": "checked the colab demo\r\nstill persist \r\n\r\n![image](https://github.com/embedchain/embedchain/assets/37476888/23c25459-4cb6-42e8-8de8-5511b275f6d1)\r\n",
          "created_at": "2023-07-20T09:45:34Z"
        },
        {
          "author": "cachho",
          "body": "![image](https://github.com/embedchain/embedchain/assets/14180064/b557899f-d2a1-498b-9a1a-f7e74dc3f700)\r\n\r\n@taranjeet looks like in the pip distribution, for some reason Apps is capitalized.",
          "created_at": "2023-07-20T10:20:25Z"
        },
        {
          "author": "Apicio",
          "body": "Any solution for this? I get the same error :(\r\n\r\nEDIT: I've renamed the folder as @cachho suggested, it worked lowering the \"A\" to \"a\"",
          "created_at": "2023-07-20T18:14:18Z"
        }
      ]
    },
    {
      "issue_number": 317,
      "title": "feature request: pass anything as metadata",
      "body": "### 🚀 The feature\n\nYou should be able to pass anything as metadata, through the input of a dict.\r\n\r\nThis applies to the `add` method mostly. This should be added to `AddConfig`.\r\n\r\nBut then you should also be able to filter the query with `where` from the `QueryConfig`.\n\n### Motivation, pitch\n\nLet's say you want to evaluate URLs, but one site is JS based so you use selenium to get the text and then load add it with the `text` datatype. Now it does not have the source metadata tag.\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-18T22:42:01Z",
      "updated_at": "2023-07-20T09:42:06Z",
      "closed_at": "2023-07-20T09:42:06Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/317/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/317",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/317",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:40.171242",
      "comments": [
        {
          "author": "aaishikdutta",
          "body": "hi @cachho, can you please provide detail? Also, I thought we had metadata parameter in add method that can take in a dict and it was added to the metadata generated by loaders. I guess it was this PR #253 ",
          "created_at": "2023-07-19T06:06:04Z"
        },
        {
          "author": "cachho",
          "body": "> hi @cachho, can you please provide detail? Also, I thought we had metadata parameter in add method that can take in a dict and it was added to the metadata generated by loaders. I guess it was this PR #253\r\n\r\nyou're right, looks like we already have this.",
          "created_at": "2023-07-20T09:42:06Z"
        }
      ]
    },
    {
      "issue_number": 299,
      "title": "Docs: Missing Parts since Upgrade",
      "body": "Since the update of the docs, we are missing a few points and chapters.\r\n\r\nHere's what I caught so far:\r\n\r\n* InitConfig: Server and Port\r\n* QueryConfig: Number of documents\r\n\r\nPlease comment with anything you see that's missing.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-17T16:08:30Z",
      "updated_at": "2023-07-20T06:38:41Z",
      "closed_at": "2023-07-20T06:38:41Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/299/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/299",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/299",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:40.366445",
      "comments": [
        {
          "author": "sahilyadav902",
          "body": "- App Types: PersonOpenSourceApp",
          "created_at": "2023-07-18T12:44:36Z"
        },
        {
          "author": "taranjeet",
          "body": "Added to #301 . Closing this one.",
          "created_at": "2023-07-20T06:38:41Z"
        }
      ]
    },
    {
      "issue_number": 263,
      "title": "docs: mention gpt-4",
      "body": "              @cachho : i think this should be doable using config now. just that we need to update documentation where we can mention \"gpt-4\" as the model.\r\n\r\n_Originally posted by @taranjeet in https://github.com/embedchain/embedchain/issues/100#issuecomment-1630961887_\r\n            ",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-14T08:59:02Z",
      "updated_at": "2023-07-20T06:37:30Z",
      "closed_at": "2023-07-20T06:37:29Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/263/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/263",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/263",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:40.576909",
      "comments": [
        {
          "author": "taranjeet",
          "body": "Closing this issue, added details in #301 ",
          "created_at": "2023-07-20T06:37:29Z"
        }
      ]
    },
    {
      "issue_number": 322,
      "title": "[ux improvement]: remove `dry_run` attribute and add this functionality as a kwargs",
      "body": "### 🚀 The feature\r\n\r\nCurrently, we expose `dry_run` as an attribute of the App object and instead we want to add it as a kwarg in the `.query()` function.\r\n\r\n### Deliverables\r\n- [ ]  Remove `dry_run` attribute and add this functionality as a kwargs\r\n    - Example: `.query(input, dry_run=True)`\r\n    - Default value for `dry_run` will be `False`\r\n- [ ] Update documentation here https://docs.embedchain.ai/advanced/testing#dry-run\r\n\r\n\r\n### Motivation, pitch\r\n\r\nWe only want to expose certain functions for the bots that will be built using embedchain. Attributes like `dry_run` and `count` make little sense to be exposed for the embedchain bots. We will instead keep these as kwards and methods respectively. \r\n\r\nIt is understood that these might be the breaking changes but it is necessary to make the project successful in the longer run by making these design decisions early on. ",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-19T08:10:09Z",
      "updated_at": "2023-07-20T06:25:42Z",
      "closed_at": "2023-07-20T06:25:42Z",
      "labels": [
        "documentation",
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/322/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/322",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/322",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:40.767447",
      "comments": [
        {
          "author": "aaishikdutta",
          "body": "Raised #329 @deshraj ",
          "created_at": "2023-07-19T19:46:32Z"
        }
      ]
    },
    {
      "issue_number": 306,
      "title": "bug: the addconfig() does not work as it is being described as",
      "body": "### 🐛 Describe the bug\n\n![image](https://github.com/embedchain/embedchain/assets/107207371/6c278137-69cc-4177-8d5b-a0f4af209743)\r\n![image](https://github.com/embedchain/embedchain/assets/107207371/07cd39b2-8824-4ba9-aa60-5a5583de267d)\r\nwhy would the number of chunks/embeddings not change no matter how i changed chunk_size? I made sure to clear the db and rerun the code everytime I want to use a different chunk_size for the target document",
      "state": "closed",
      "author": "YunchengLiang",
      "author_type": "User",
      "created_at": "2023-07-17T23:28:19Z",
      "updated_at": "2023-07-19T16:30:34Z",
      "closed_at": "2023-07-19T16:30:34Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 11,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/306/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/306",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/306",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:40.948441",
      "comments": [
        {
          "author": "YunchengLiang",
          "body": "I double confirmed with website as well and it generates the same number of chunks/embeddings no matter what i choose for the chunk_size , overlap and length_function",
          "created_at": "2023-07-17T23:50:39Z"
        },
        {
          "author": "cachho",
          "body": "> I double confirmed with website as well and it generates the same number of chunks/embeddings no matter what i choose for the chunk_size , overlap and length_function\r\n\r\nAre you on the latest version? We cleaned up the configuration, it works like this now: https://github.com/embedchain/embedchain",
          "created_at": "2023-07-18T06:51:01Z"
        },
        {
          "author": "YunchengLiang",
          "body": "> > I double confirmed with website as well and it generates the same number of chunks/embeddings no matter what i choose for the chunk_size , overlap and length_function\r\n> \r\n> Are you on the latest version? We cleaned up the configuration, it works like this now:\r\n> \r\n> https://github.com/embedcha",
          "created_at": "2023-07-18T13:10:11Z"
        },
        {
          "author": "cachho",
          "body": "Definitely worrying, I hope I can look into this tomorrow.",
          "created_at": "2023-07-18T22:42:55Z"
        },
        {
          "author": "cachho",
          "body": "I can confirm:\r\n\r\n```python\r\nfrom embedchain import App\r\nfrom embedchain.config import AddConfig, ChunkerConfig\r\n\r\napp = App()\r\nconfig = AddConfig(chunker=ChunkerConfig(chunk_size=10000))\r\napp.add_local(\"text\", \"lorem ipsum dolor sit amet, consectetur adipiscing el\")\r\n# Successfully saved lorem ipsu",
          "created_at": "2023-07-19T07:44:55Z"
        }
      ]
    },
    {
      "issue_number": 258,
      "title": "[Feature Request] Automatically add Loader/Format used to Metadata",
      "body": "This allows to target a certain kind for deletion.\r\n\r\nFor instance, you could renew your QnA pair embeddings, while leaving YouTube videos intact.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-13T22:14:15Z",
      "updated_at": "2023-07-19T00:05:44Z",
      "closed_at": "2023-07-19T00:05:44Z",
      "labels": [
        "enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/258/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/258",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/258",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:41.146850",
      "comments": [
        {
          "author": "jessekirbs",
          "body": "Would this be the best method for turning certain items on/off for queries? For example, I'd like to have a list of the items that have been loaded into the database with checkboxes next to them, and you can check/uncheck the items you wish embedchain to include in queries. \r\n\r\nI was going to try to",
          "created_at": "2023-07-15T04:46:50Z"
        },
        {
          "author": "cachho",
          "body": "> Would this be the best method for turning certain items on/off for queries? For example, I'd like to have a list of the items that have been loaded into the database with checkboxes next to them, and you can check/uncheck the items you wish embedchain to include in queries.\r\n> \r\n> I was going to t",
          "created_at": "2023-07-18T20:17:57Z"
        },
        {
          "author": "cachho",
          "body": "@aaishikdutta thanks for picking this up.",
          "created_at": "2023-07-18T20:18:09Z"
        }
      ]
    },
    {
      "issue_number": 309,
      "title": "docs: Update required",
      "body": "### 🐛 Describe the bug\n\nHere's what's required:\r\n\r\n- custom app settings in configuration\r\n- description of app types\r\n\r\nAdd more if you find them.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-18T07:14:18Z",
      "updated_at": "2023-07-18T19:24:25Z",
      "closed_at": "2023-07-18T19:24:25Z",
      "labels": [
        "documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/309/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/309",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/309",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:41.361329",
      "comments": []
    },
    {
      "issue_number": 276,
      "title": "Fix setup.py version issue",
      "body": "https://github.com/embedchain/embedchain/pull/275#issuecomment-1636643358",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-15T03:40:16Z",
      "updated_at": "2023-07-16T04:47:06Z",
      "closed_at": "2023-07-16T04:47:06Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/276/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/276",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/276",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:41.361355",
      "comments": [
        {
          "author": "amjadraza",
          "body": "@deshraj I think, we have solved this issue. ????",
          "created_at": "2023-07-16T04:37:08Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, fixed. ",
          "created_at": "2023-07-16T04:47:06Z"
        }
      ]
    },
    {
      "issue_number": 260,
      "title": "[BUG] Logging with streaming returns instance",
      "body": "`2023-07-13 22:53:15,387 [INFO] Answer: <generator object App._stream_llm_model_response at 0x7f7a9a8b3890>`",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-13T22:54:45Z",
      "updated_at": "2023-07-14T06:34:17Z",
      "closed_at": "2023-07-14T06:34:17Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/260/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/260",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/260",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.363498",
      "comments": []
    },
    {
      "issue_number": 252,
      "title": "Attach metadata to added data sources",
      "body": "Requested here: https://discord.com/channels/1121119078191480945/1121119078858358846/1128875250596188210",
      "state": "closed",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-13T02:28:40Z",
      "updated_at": "2023-07-13T04:47:59Z",
      "closed_at": "2023-07-13T04:47:59Z",
      "labels": [
        "enhancement",
        "good first issue",
        "easy"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/252/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/252",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/252",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.363525",
      "comments": [
        {
          "author": "deshraj",
          "body": "Fixed in #253 ",
          "created_at": "2023-07-13T04:47:59Z"
        }
      ]
    },
    {
      "issue_number": 226,
      "title": "Add documentation for PR 220",
      "body": "- https://github.com/embedchain/embedchain/pull/220",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-11T11:06:21Z",
      "updated_at": "2023-07-13T01:47:18Z",
      "closed_at": "2023-07-13T01:47:18Z",
      "labels": [
        "documentation",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/226/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/226",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/226",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.568183",
      "comments": []
    },
    {
      "issue_number": 190,
      "title": "[Bug] why we need the openai-key?",
      "body": "Hi embedchain deploy on GPT4All ,why we need the openai-key ?  something about this I am not understand. \r\n\r\n",
      "state": "closed",
      "author": "sytpb",
      "author_type": "User",
      "created_at": "2023-07-08T00:46:02Z",
      "updated_at": "2023-07-12T15:30:07Z",
      "closed_at": "2023-07-11T11:38:50Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/190/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/190",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/190",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.568212",
      "comments": [
        {
          "author": "aaishikdutta",
          "body": "Noticed this for an edge case\r\n\r\nI was working on using OpenSourceApp with InitConfig. I created a new parameter for initConfig in my forked repo named stream_response which is boolean and instantiated my OpenSourceApp like so:\r\n\r\n```\r\ninit_config = InitConfig(stream_response=True)\r\n\r\napp = OpenSour",
          "created_at": "2023-07-08T20:49:41Z"
        },
        {
          "author": "cachho",
          "body": "So this only happens when you instantiate an open source app with a config where `ef` is None.",
          "created_at": "2023-07-08T22:15:00Z"
        },
        {
          "author": "cachho",
          "body": "The only way I see around this is by using the same architecture in App.__init__ that we use  in OpenSourceApp.__init__, where the default is not part of the config class, but instead set by the app class after initialization.\r\n\r\nThis might not be breakable by the end user, but I still think default",
          "created_at": "2023-07-08T22:20:12Z"
        },
        {
          "author": "cachho",
          "body": "proposed the fixes in my PR #205 - I mean: why not, i might not like the idea but it should fix the problem",
          "created_at": "2023-07-08T22:30:33Z"
        },
        {
          "author": "sytpb",
          "body": "> \r\n\r\ninit_config = InitConfig(stream_response=True)\r\n\r\napp = OpenSourceApp(init_config)\r\n\r\nDo this config don't need openai-key any more ? ",
          "created_at": "2023-07-12T13:35:32Z"
        }
      ]
    },
    {
      "issue_number": 179,
      "title": "refactor: Turn _get_loader and _get_chunker methods into static functions",
      "body": "title",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-07T11:16:10Z",
      "updated_at": "2023-07-12T04:16:28Z",
      "closed_at": "2023-07-12T04:16:27Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/179/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/179",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/179",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.784411",
      "comments": [
        {
          "author": "cachho",
          "body": "format result can be turned into a static method too.",
          "created_at": "2023-07-07T11:36:06Z"
        },
        {
          "author": "deshraj",
          "body": "Resolved in #92. ",
          "created_at": "2023-07-12T04:16:27Z"
        }
      ]
    },
    {
      "issue_number": 192,
      "title": "Add table of contents in readme",
      "body": "- readme is getting longer, so we should add a section of table of content.",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-08T04:34:26Z",
      "updated_at": "2023-07-12T04:15:01Z",
      "closed_at": "2023-07-12T04:15:00Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/192/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/192",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/192",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:43.972242",
      "comments": [
        {
          "author": "deshraj",
          "body": "Resolved in #201 ",
          "created_at": "2023-07-12T04:15:00Z"
        }
      ]
    },
    {
      "issue_number": 216,
      "title": "Remove imports from `__init__.py` files",
      "body": "Adding imports in the `__init__.py` file is a bad practice and can be catastrophic as the package grows. We want to remove the imports ideally from there and only import stuff that the user wants to access. ",
      "state": "open",
      "author": "deshraj",
      "author_type": "User",
      "created_at": "2023-07-10T15:51:08Z",
      "updated_at": "2023-07-12T03:59:05Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "easy"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/216/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "deshraj"
      ],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/216",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/216",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.181105",
      "comments": [
        {
          "author": "cachho",
          "body": "If you're talking about the config, I added those so that you could directly import all classes from embedchain.config",
          "created_at": "2023-07-10T16:14:34Z"
        },
        {
          "author": "deshraj",
          "body": "Yes, its a bad practice generally to put imports in __init__.py files just to make the imports look cleaner. Instead, the aim should be to structure the package in a way that it is more readable (but doesn't have to be short import names always)",
          "created_at": "2023-07-11T06:49:10Z"
        }
      ]
    },
    {
      "issue_number": 242,
      "title": "[Feature Request] PowerPoint .pptx Loader",
      "body": "Reference:\r\n\r\nCan probably start by using a package like https://python-pptx.readthedocs.io/en/latest/user/presentations.html to load the ppt files. ",
      "state": "open",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-11T19:06:03Z",
      "updated_at": "2023-07-12T03:54:37Z",
      "closed_at": null,
      "labels": [
        "enhancement",
        "new-data-source",
        "medium"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/242/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/242",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/242",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.376461",
      "comments": []
    },
    {
      "issue_number": 188,
      "title": "[Feature Request] add json/jsonl as data_type",
      "body": "Thank you",
      "state": "closed",
      "author": "Rishab-Haltore",
      "author_type": "User",
      "created_at": "2023-07-07T17:08:50Z",
      "updated_at": "2023-07-11T14:34:12Z",
      "closed_at": "2023-07-11T14:34:12Z",
      "labels": [
        "enhancement",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/188/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/188",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/188",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.376487",
      "comments": [
        {
          "author": "cachho",
          "body": "don't you think you'd have an easier time destructuring the json on your end and only passing what you really need to `add_local(\"text\", ...)`? If we just dump a whole json file it will include ids and all kinds of stuff you will never ask the bot for.\r\n\r\nBut I get if you're just trying to ingest as",
          "created_at": "2023-07-07T18:10:56Z"
        },
        {
          "author": "Rishab-Haltore",
          "body": "What you said makes sense but the use case that I have is a bit different.\r\nLets say with a bit of prompt engineering. We have a file / training data containing prompts ans competions in a single json/jsonl file(1gb or less). For example:\r\n{\"prompt\": \"<prompt text>\", \"completion\": \"<ideal generated ",
          "created_at": "2023-07-07T18:41:46Z"
        },
        {
          "author": "cachho",
          "body": "@Rishab-Haltore we already have QnA as an abstraction of pairs. You wouldn't want use to embed {\"prompt\": \"\", \"completion\": \"\"}, right? You would want us to embed something like \"prompt: ..., completion: ...\". Compared to QnA, I feel like this is a very individual layout and not something we can pro",
          "created_at": "2023-07-07T21:42:14Z"
        },
        {
          "author": "Rishab-Haltore",
          "body": "Cool. Makes sense",
          "created_at": "2023-07-08T05:28:11Z"
        }
      ]
    },
    {
      "issue_number": 222,
      "title": "[Bug] Error in Import of App class in Ubuntu 22.04 Python 3.10",
      "body": "Thank you so much for this excellent package! I get the error below when trying to import the App class in Ubuntu 22.04 with Python 3.10\r\n```\r\nfrom embedchain import App\r\n...\r\n  File \"/root/embedchain/embedchain/lib/python3.10/site-packages/langchain/document_loaders/__init__.py\", line 44, in <module>\r\n    from langchain.document_loaders.embaas import EmbaasBlobLoader, EmbaasLoader\r\n  File \"/root/embedchain/embedchain/lib/python3.10/site-packages/langchain/document_loaders/embaas.py\", line 54, in <module>\r\n    class BaseEmbaasLoader(BaseModel):\r\n  File \"pydantic/main.py\", line 204, in pydantic.main.ModelMetaclass.__new__\r\n  File \"pydantic/fields.py\", line 488, in pydantic.fields.ModelField.infer\r\n  File \"pydantic/fields.py\", line 419, in pydantic.fields.ModelField.__init__\r\n  File \"pydantic/fields.py\", line 539, in pydantic.fields.ModelField.prepare\r\n  File \"pydantic/fields.py\", line 801, in pydantic.fields.ModelField.populate_validators\r\n  File \"pydantic/validators.py\", line 696, in find_validators\r\n  File \"pydantic/validators.py\", line 585, in pydantic.validators.make_typeddict_validator\r\n  File \"pydantic/annotated_types.py\", line 35, in pydantic.annotated_types.create_model_from_typeddict\r\n  File \"pydantic/main.py\", line 972, in pydantic.main.create_model\r\n  File \"pydantic/main.py\", line 204, in pydantic.main.ModelMetaclass.__new__\r\n  File \"pydantic/fields.py\", line 488, in pydantic.fields.ModelField.infer\r\n  File \"pydantic/fields.py\", line 419, in pydantic.fields.ModelField.__init__\r\n  File \"pydantic/fields.py\", line 534, in pydantic.fields.ModelField.prepare\r\n  File \"pydantic/fields.py\", line 638, in pydantic.fields.ModelField._type_analysis\r\n  File \"/usr/lib/python3.10/typing.py\", line 1158, in __subclasscheck__\r\n    return issubclass(cls, self.__origin__)\r\n  TypeError: issubclass() arg 1 must be a class\r\n```\r\n",
      "state": "closed",
      "author": "uisikdag",
      "author_type": "User",
      "created_at": "2023-07-11T07:40:15Z",
      "updated_at": "2023-07-11T13:04:31Z",
      "closed_at": "2023-07-11T11:31:49Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/222/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/222",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/222",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.576454",
      "comments": [
        {
          "author": "cachho",
          "body": "Can confirm, this is an ongoing issue.",
          "created_at": "2023-07-11T07:46:42Z"
        },
        {
          "author": "uisikdag",
          "body": "> Can confirm, this is an ongoing issue.\r\n\r\nThank you so much ",
          "created_at": "2023-07-11T07:55:46Z"
        },
        {
          "author": "taranjeet",
          "body": "thanks for opening the issue @uisikdag . I was able to reproduce this. Here is what I did to fix\r\n\r\n```\r\npip uninstall chromadb pydantic\r\npip install pydantic==1.10.8\r\npip install chromadb==0.3.26\r\n```\r\n\r\nCan you please try this at your end and let me know if its working for you or not?",
          "created_at": "2023-07-11T10:59:42Z"
        },
        {
          "author": "arianpasquali",
          "body": "I was having the same issue. I've just tried and it works @taranjeet ",
          "created_at": "2023-07-11T11:46:49Z"
        },
        {
          "author": "taranjeet",
          "body": "Thanks.\n@cachho has released a fix in main. Will release it to PyPI soon",
          "created_at": "2023-07-11T11:47:55Z"
        }
      ]
    },
    {
      "issue_number": 171,
      "title": "[Feature Request] Config: Chunk Size",
      "body": "Config (`AddConfig`) based chunk size setting.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-06T21:36:41Z",
      "updated_at": "2023-07-10T22:53:58Z",
      "closed_at": "2023-07-10T22:53:58Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/171/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/171",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/171",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.768159",
      "comments": [
        {
          "author": "rjarun8",
          "body": "@cachho can you share more details on this",
          "created_at": "2023-07-07T22:25:30Z"
        }
      ]
    },
    {
      "issue_number": 198,
      "title": "[Feature Request] History (Client)",
      "body": "Make it that you can pass your own history (organized by a client or an external database) to a query. This allows conversation memory for sessions.\r\n\r\n- queryConfig must accept history, a list of strings\r\n- history must be part of the template, if used (throw error if not)\r\n",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-08T09:41:43Z",
      "updated_at": "2023-07-10T18:15:22Z",
      "closed_at": "2023-07-10T18:15:22Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/198/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/198",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/198",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.958935",
      "comments": []
    },
    {
      "issue_number": 181,
      "title": "[docs] add example for custom prompt Template to readme",
      "body": "with #170, custom prompts became a reality. But it's not super easy to use them. We need an example in ReadMe.Advanced.Configuration.Example. You can get creative.",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-07T13:26:35Z",
      "updated_at": "2023-07-10T11:51:26Z",
      "closed_at": "2023-07-10T11:51:26Z",
      "labels": [
        "documentation",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/181/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/181",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/181",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:44.958961",
      "comments": [
        {
          "author": "cachho",
          "body": "@ianupamsingh maybe for you to complete this.",
          "created_at": "2023-07-07T13:27:29Z"
        }
      ]
    },
    {
      "issue_number": 64,
      "title": "[BUG] Chroma DB Duplicate ID Error",
      "body": "This is my code:\r\n\r\n```python\r\nimport os\r\nos.environ[\"OPENAI_API_KEY\"] = \"sk-???\"\r\nfrom embedchain import App\r\nnaval_chat_bot = App()\r\nnaval_chat_bot.add_local(\"pdf_file\", \"docs/masnavi-en.pdf\")\r\nprint(naval_chat_bot.query(\"Who is the most powerful man?\"))\r\n```\r\n\r\nI get `chromadb.errors.DuplicateIDError: Expected IDs to be unique, found duplicates for`. Where is the problem?\r\n\r\nP.S: This was my second attempt. The first one with a different pdf document was successful.",
      "state": "closed",
      "author": "ArmanJR",
      "author_type": "User",
      "created_at": "2023-06-25T16:18:48Z",
      "updated_at": "2023-07-08T05:07:17Z",
      "closed_at": "2023-07-08T05:07:17Z",
      "labels": [
        "bug"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 8,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/64/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/64",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/64",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:45.126627",
      "comments": [
        {
          "author": "luisrock",
          "body": "Same issue here",
          "created_at": "2023-06-26T13:16:47Z"
        },
        {
          "author": "missioncfwf",
          "body": "Same issue here. I had no problem uploading small files, but big ones cause this issue for me",
          "created_at": "2023-06-28T19:41:23Z"
        },
        {
          "author": "ramaschneider",
          "body": "Same here - is there any update regarding this issue?",
          "created_at": "2023-07-04T17:44:12Z"
        },
        {
          "author": "taranjeet",
          "body": "I think this could be because ids are clashing.\r\nRight now, the ids are generated using a hash of chunk text and url. There may be scenarios where same chunk is occurring multiple times in a doc, hence the error.\r\n\r\n@ramaschneider / @missioncfwf / @ArmanJR : possible for anyone of you to share doc f",
          "created_at": "2023-07-04T17:51:38Z"
        },
        {
          "author": "ArmanJR",
          "body": "@taranjeet sure: [https://www.sufi.ir/books/download/english/molavi-en/masnavi-en.pdf](https://www.sufi.ir/books/download/english/molavi-en/masnavi-en.pdf)",
          "created_at": "2023-07-04T20:19:40Z"
        }
      ]
    },
    {
      "issue_number": 167,
      "title": "Add config support for chat endpoint.",
      "body": "- like we added support for init, add and query, we should add support for chat endpoint.\r\n- PR which adds support for init, add and query: https://github.com/embedchain/embedchain/pull/158",
      "state": "closed",
      "author": "taranjeet",
      "author_type": "User",
      "created_at": "2023-07-06T18:19:22Z",
      "updated_at": "2023-07-07T18:13:34Z",
      "closed_at": "2023-07-07T18:13:33Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/167/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/167",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/167",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:45.380026",
      "comments": [
        {
          "author": "taranjeet",
          "body": "cc @cachho we can leave this issue for sometime. It can be a good first issue for anyone new to the project.",
          "created_at": "2023-07-06T18:19:44Z"
        },
        {
          "author": "cachho",
          "body": "there is a `ChatConfig.py`. Or what do you mean?",
          "created_at": "2023-07-06T20:50:28Z"
        },
        {
          "author": "gasolin",
          "body": "@cachho @taranjeet currently we have 3 similar stuff\r\n- query: one time query, pass `input_query` string, use `QueryConfig`\r\n- chat: query with history, pass `input_query` string, use `ChatConfig`\r\n- dry_run: show query prompt, pass `input_query` string, `no Config`🐛\r\n\r\nfeel they could all share the",
          "created_at": "2023-07-07T00:14:44Z"
        },
        {
          "author": "cachho",
          "body": "fixed",
          "created_at": "2023-07-07T18:13:33Z"
        }
      ]
    },
    {
      "issue_number": 170,
      "title": "[Feature Request] Custom Prompt",
      "body": "Config based custom prompts on `.query` level",
      "state": "closed",
      "author": "cachho",
      "author_type": "User",
      "created_at": "2023-07-06T21:35:23Z",
      "updated_at": "2023-07-07T12:26:45Z",
      "closed_at": "2023-07-07T12:26:45Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/mem0ai/mem0/issues/170/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/mem0ai/mem0/issues/170",
      "api_url": "https://api.github.com/repos/mem0ai/mem0/issues/170",
      "repository": "mem0ai/mem0",
      "extraction_date": "2025-06-21T22:52:47.176113",
      "comments": []
    }
  ]
}