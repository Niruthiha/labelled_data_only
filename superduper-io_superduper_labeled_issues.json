{
  "repository": "superduper-io/superduper",
  "repository_info": {
    "repo": "superduper-io/superduper",
    "stars": 5087,
    "language": "Python",
    "description": "Superduper: End-to-end framework for building custom AI applications and agents.",
    "url": "https://github.com/superduper-io/superduper",
    "topics": [
      "ai",
      "chatbot",
      "data",
      "database",
      "distributed-ml",
      "inference",
      "llm-inference",
      "llm-serving",
      "llmops",
      "ml",
      "mlops",
      "mongodb",
      "pretrained-models",
      "python",
      "pytorch",
      "rag",
      "semantic-search",
      "torch",
      "transformers",
      "vector-search"
    ],
    "created_at": "2022-08-30T12:51:24Z",
    "updated_at": "2025-06-21T22:33:22Z",
    "search_query": "ai agent language:python stars:>3 -framework",
    "total_issues_estimate": 50,
    "labeled_issues_estimate": 10,
    "labeling_rate": 21.9,
    "sample_labeled": 7,
    "sample_total": 32,
    "has_issues": true,
    "repo_id": 530655405,
    "default_branch": "main",
    "size": 77358
  },
  "extraction_date": "2025-06-22T00:38:53.136353",
  "extraction_type": "LABELED_ISSUES_ONLY",
  "total_labeled_issues": 278,
  "issues": [
    {
      "issue_number": 2713,
      "title": "Create a meta component which plans and creates other components",
      "body": "This is crucial for building workflows which don't \"run on rails\".\r\n\r\n\r\n```python\r\nPROMPT = \"\"\"Here is the syntax of Superduper:\r\n\r\n1. There is a base class `Model`.\r\n2. This base class can do ... .\r\n3. There is a wrapper `Listener` ... .\r\n\r\nThe following is a description of a task; taking the syntax into account, \r\nplease create `Component` instances which produce the required functionality \r\nin Superduper to implement this logic.\r\n\"\"\"\r\n\r\nclass Planner(Model):\r\n    prompt: str = PROMPT\r\n    datatype: File\r\n    \r\n    def predict(self, description: str) -> File:\r\n        ...\r\n\r\n```\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2025-01-03T15:22:09Z",
      "updated_at": "2025-06-13T21:26:53Z",
      "closed_at": "2025-06-13T21:26:53Z",
      "labels": [
        "idea",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2713/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2713",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2713",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.155228",
      "comments": []
    },
    {
      "issue_number": 2476,
      "title": "Complement `predict_batches` with `predict_many`",
      "body": "By default, `.predict_batches` can call `.predict_many`. `.predict_many` will be the exact analogue of `.predict` in terms of signature.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-09-25T19:22:54Z",
      "updated_at": "2025-06-08T13:17:42Z",
      "closed_at": "2025-06-08T13:17:42Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2476/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2476",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2476",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.155255",
      "comments": []
    },
    {
      "issue_number": 2856,
      "title": "Registry for registering names and classes",
      "body": "Instead of fetching `_path` from the database, get the schema from `registry[component]`.",
      "state": "open",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2025-06-04T09:57:12Z",
      "updated_at": "2025-06-07T12:32:03Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2856/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2856",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2856",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.155262",
      "comments": [
        {
          "author": "blythed",
          "body": "```python\ndef get_schema(self, name):\n    try:\n        return registry[name].fields      # components are put in the registry when imported for first time\n    except KeyError:\n        return db.load('Table', name).fields          # for user-created tables\n```",
          "created_at": "2025-06-04T09:59:38Z"
        }
      ]
    },
    {
      "issue_number": 2725,
      "title": "Deprecate `_base` from project and use `key=None`",
      "body": "This is confusing and adds bizarre logic. Let us drop this.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2025-01-13T17:00:50Z",
      "updated_at": "2025-06-07T12:15:09Z",
      "closed_at": "2025-06-07T12:15:09Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2725/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2725",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2725",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.430439",
      "comments": []
    },
    {
      "issue_number": 2100,
      "title": "Manage a CONSTANT module to handle all special characters.",
      "body": "For example:\r\n\r\n```\r\n_SOURCE = '_source'\r\n_LEAVES = '_leaves'\r\n_DB_LOAD_PREFIX = '?db.load'\r\n```\r\n\r\nThis allows for global management of field information and facilitates problem troubleshooting during development, enabling developers to find all references through this variable.",
      "state": "open",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-05-24T14:33:07Z",
      "updated_at": "2025-06-06T12:28:16Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2100/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2100",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2100",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.430460",
      "comments": [
        {
          "author": "blythed",
          "body": "Agreed. Could also be a configuration.",
          "created_at": "2024-05-25T14:39:04Z"
        }
      ]
    },
    {
      "issue_number": 2722,
      "title": "Add a modern version of `pyproject.toml` to plugins",
      "body": "Currently this is written to `__init__.py`. The modern approach is in `pyproject.toml` as in the main project:\r\n\r\n```\r\n[project]\r\nname = \"superduper-framework\"\r\ndescription = \"🔮 Bring AI to your favourite database 🔮\"\r\nreadme = \"README.md\"\r\nversion = '0.5.0.dev'\r\n```",
      "state": "open",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2025-01-13T14:42:00Z",
      "updated_at": "2025-06-06T11:56:55Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2722/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2722",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2722",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.647303",
      "comments": []
    },
    {
      "issue_number": 2819,
      "title": "Improvements on the codebase",
      "body": "1. Instead of re-implementing the `obj.wait()` on each object, create a generic `wait(obj)` method that inspect the object to `status`, and waits on it. \n2. Change the `wait` to take as argument the expected Phase. If that phase is not reached within a timeout, throw an exception.\n3. Instead of defining the `status` as a dict, create a generic file that should include all the necessary functions for status management (e.g wait(), expect(), is() etc)\n4. Rename `AppException` to `BaseException`",
      "state": "open",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2025-05-11T13:06:47Z",
      "updated_at": "2025-06-05T16:17:14Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2819/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2819",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2819",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.647329",
      "comments": [
        {
          "author": "blythed",
          "body": "Not clear @fnikolai please clarify.",
          "created_at": "2025-06-05T16:17:13Z"
        }
      ]
    },
    {
      "issue_number": 2860,
      "title": "Remove technical debt",
      "body": null,
      "state": "open",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2025-06-05T13:21:24Z",
      "updated_at": "2025-06-05T13:21:24Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2860/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "0.8",
      "html_url": "https://github.com/superduper-io/superduper/issues/2860",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2860",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.855280",
      "comments": []
    },
    {
      "issue_number": 2105,
      "title": "Optimization of Vector Search Interfaces",
      "body": "In our vector search interface, we currently call\r\n\r\n\r\n `like({indexing_key: x}, vector_index=vector_index_name)`. \r\n \r\n \r\n Should we consider removing the `indexing_key` in future iterations? \r\n \r\n`like({x, vector_index=vector_index_name)`. \r\n \r\n This field corresponds to `vector_index.listener.key`, which means we are passing redundant information when calling the interface.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-05-27T14:35:55Z",
      "updated_at": "2025-06-05T13:19:07Z",
      "closed_at": "2025-06-05T13:19:07Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2105/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2105",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2105",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:35.855303",
      "comments": [
        {
          "author": "blythed",
          "body": "This is not redundant in the case that there is a compatible listener.",
          "created_at": "2025-06-05T13:19:05Z"
        }
      ]
    },
    {
      "issue_number": 2410,
      "title": "The serialization and deserialization of Query cannot be shared across different backends.",
      "body": "Currently, Query is actually divided into two types: MongoQuery and IbisQuery. When used in a MongoDB scenario, after export, it is recorded as superduper_mongodb, making it impossible to migrate to Ibis. \r\n\r\nOur current application heavily depends on Query, which leads to a strong dependency on the backend during application construction and export, making it difficult to establish a unified application standard\r\n\r\nhttps://github.com/superduper-io/superduper/pull/2363#discussion_r1700248212\r\n\r\n>> In the future, all Query classes can be merged into one class, with Query only recording the expression and being independent the type of the database.\r\n>> We can use Databackend to execute the Query",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-08-22T07:05:51Z",
      "updated_at": "2025-06-05T13:18:03Z",
      "closed_at": "2025-06-05T13:18:03Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2410/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2410",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2410",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.024308",
      "comments": [
        {
          "author": "blythed",
          "body": "Solution: serialize with a base function: `superduper.backends.base.parse_query`.",
          "created_at": "2024-08-23T09:11:15Z"
        },
        {
          "author": "jieguangzhou",
          "body": "#2417 ",
          "created_at": "2024-08-26T12:47:11Z"
        }
      ]
    },
    {
      "issue_number": 2841,
      "title": "Uniform initialization methods",
      "body": "For the moment, the components/plugins have implicit initialization methods. \n\nAmongst them:\n- They read directly from env variables\n- They read from `CFG`\n- The have parameters at`__init__`\n\nWe should refactor it so that each component/plugin takes explicitly the necessary parameters from the `__init__` method. Then, the top-level function `superduper()` should be responsible for setting the appropriate parameters. ",
      "state": "open",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2025-05-21T12:57:44Z",
      "updated_at": "2025-06-05T13:16:37Z",
      "closed_at": null,
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2841/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2841",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2841",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.248163",
      "comments": []
    },
    {
      "issue_number": 2718,
      "title": "Use `@trigger(\"apply\")` instead of `on_create`.",
      "body": "These two functions are the same, so we only need to keep `@trigger` and remove the related logic of `on_create` in `event.py` inside `Create.execute`, no longer reloading the component there.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2025-01-07T14:08:21Z",
      "updated_at": "2025-06-05T13:14:12Z",
      "closed_at": "2025-06-05T13:14:12Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2718/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2718",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2718",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.248187",
      "comments": []
    },
    {
      "issue_number": 2655,
      "title": "Tools to handle breaking changes",
      "body": "If a deployment should be used with the latest features, we would like to avoid recomputing many outputs after upgrade.\r\n\r\nGoal - find away to \"adopt\" existing `uuid` identifiers and `blobs` so that work doesn't need to be redeployed.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-11-29T10:19:58Z",
      "updated_at": "2025-06-05T13:07:58Z",
      "closed_at": "2025-06-05T13:07:58Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2655/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2655",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2655",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.248200",
      "comments": []
    },
    {
      "issue_number": 2518,
      "title": "Revise the PR template",
      "body": "(It's out of date)",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-10-10T11:36:29Z",
      "updated_at": "2025-06-05T13:07:55Z",
      "closed_at": "2025-06-05T13:07:55Z",
      "labels": [
        "help wanted",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2518/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2518",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2518",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.248210",
      "comments": [
        {
          "author": "ChinoUkaegbu",
          "body": "I'd like to work on this! Is there any specific thing you'd want to update about the PR template?",
          "created_at": "2024-10-10T18:44:40Z"
        }
      ]
    },
    {
      "issue_number": 2457,
      "title": "Optimize identifiers of queries",
      "body": "Currently identifiers of queries are built automatically, and are far too long. To do: optimize this.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-09-16T20:19:24Z",
      "updated_at": "2025-06-05T13:06:14Z",
      "closed_at": "2025-06-05T13:06:14Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2457/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2457",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2457",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:36.564638",
      "comments": []
    },
    {
      "issue_number": 2147,
      "title": "[MISC] Encode the component’s artifact using the schema of the component.",
      "body": "```python\r\n    def dict(self) -> 'Document':\r\n        \"\"\"A dictionary representation of the component.\"\"\"\r\n        from superduperdb import Document\r\n        from superduperdb.components.datatype import Artifact, File\r\n\r\n        r = super().dict()\r\n        s = self.artifact_schema\r\n        for k in s.fields:\r\n            attr = getattr(self, k)\r\n            if isinstance(attr, (Artifact, File)):\r\n                r[k] = attr\r\n            else:\r\n                r[k] = s.fields[k](x=attr)  # artifact or file\r\n\r\n        r['type_id'] = self.type_id\r\n        r['version'] = self.version\r\n        r['identifier'] = self.identifier\r\n        r['hidden'] = False\r\n        return Document(r)\r\n\r\n```\r\nCurrently in the encoding process of the component, the schema is not used to encode the artifact, but instead fields are used independently for encoding. This results in the generation of more complex and redundant information, as much of the information actually exists within the `artifact_schema`, such as various datatypes.\r\n\r\nTherefore, after we perform `schema.deep_flat_encode_data` on the component’s dictionary, the data encoded by the component will be clearer and will reduce a significant amount of nested `_leaves`.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-06-06T03:27:49Z",
      "updated_at": "2025-06-05T13:06:08Z",
      "closed_at": "2025-06-05T13:06:08Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2147/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2147",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2147",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.423605",
      "comments": []
    },
    {
      "issue_number": 2120,
      "title": "Remove the `info` variable from the datatype",
      "body": "For all `encode` and `decode` in datatype, we have accepted an `info` variable, but it has not been used so far.\r\n\r\nIt is suggested to remove it, or change it to `**info`, so that when implementing a new datatype, there is no need to explicitly add an unused variable.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-05-29T08:01:22Z",
      "updated_at": "2025-06-05T13:06:07Z",
      "closed_at": "2025-06-05T13:06:07Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2120/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2120",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2120",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.423623",
      "comments": []
    },
    {
      "issue_number": 2422,
      "title": "Support Jinja in `Template`",
      "body": "This will potential enable a greater range of templates and configurability. Currently we are not able to support \"for loops\"\r\nover input values/ variables. For example, in key-value extraction (document-ai) we cannot define an arbitrary number of key-pairs to extract in separate listeners.\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-08-30T07:59:56Z",
      "updated_at": "2025-06-05T13:02:18Z",
      "closed_at": "2025-06-05T13:02:18Z",
      "labels": [
        "🚀 feature request",
        "idea",
        "🔍 discovery",
        "Enhancement"
      ],
      "label_count": 4,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2422/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2422",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2422",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.423629",
      "comments": []
    },
    {
      "issue_number": 1838,
      "title": "Vectors are not checked for shape in case of vector encoder used in VectorIndex",
      "body": "```python\r\n\r\nfrom superduperdb import vector\r\na = vector([589,])\r\nmodel = Model(identifier='some_model', object=lambda x: x, datatype=a)\r\n\r\nlistener = Listener(model=model, key='x', select=cltfind({}))\r\ndb.add(listener)\r\n\r\n\r\n\r\nVectorIndex( indexing_listener=listener, ...)\r\n```\r\n\r\nNow when you perform Vector search, if the vector search is atlas we get error if the vector dimension 589 does not match the model outputs shape \r\n\r\nWe only get this error after index are created which is an expensive step\r\n\r\nWe need a fallback during VectorIndex creation step.",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2024-03-08T09:23:12Z",
      "updated_at": "2025-06-05T13:01:16Z",
      "closed_at": "2025-06-05T13:01:16Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1838/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1838",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1838",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.423640",
      "comments": []
    },
    {
      "issue_number": 1626,
      "title": "[DistEnv] All outputs loaded in memory before bulk write to database",
      "body": "When the model has predicted lets say for 1 million data points, in `components/model.py : predict method` \r\n\r\nmodel stores the outputs of this 1 million data points into a single list `outputs` which will OOM when it exceeds memory.\r\n\r\nrefer : superduper/components/model.py: predict method.\r\n\r\nSame thing happens in model inputs \r\nAll inputs are loaded on memory before passing it to model, inputs are packed into  a e.g Dataloader (refer: ext/torch/model.py: _predict method) \r\n\r\n- [x] #1627\r\n\r\nWe need to chunk the model inputs in the database and iterate over a chunk and pass it for model prediction.",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2023-12-30T19:55:21Z",
      "updated_at": "2025-06-05T12:59:58Z",
      "closed_at": "2025-06-05T12:59:58Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1626/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1626",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1626",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.423645",
      "comments": [
        {
          "author": "fnikolai",
          "body": "As a first step, we can expose the batch size to the user. \r\n\r\nThen we can perform optimization to see if we can estimate the ideal batch size automatically based on the available memory.\r\n\r\nWe also need to account for the parallel processing of multiple workers (are they going to process the same c",
          "created_at": "2023-12-30T20:42:40Z"
        }
      ]
    },
    {
      "issue_number": 1365,
      "title": "Experimentation and Integration of Apache Iceberg",
      "body": "As a SuperDuperDB user, I would like to connect to Apache Iceberg tables using Trino and/ or PySpark and apply AI models to these.\n\n\nSince `superduperdb` supports `ibis` which supports both Trino and PySpark, we have a clear path to this possibility.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-22T10:00:14Z",
      "updated_at": "2025-06-05T12:59:58Z",
      "closed_at": "2025-06-05T12:59:58Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1365/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1365",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1365",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.672276",
      "comments": [
        {
          "author": "blythed",
          "body": "It would look something like this:\n\n![Image](https://github.com/SuperDuperDB/superduperdb/assets/15139331/8aaca827-a808-4541-80b4-86dac0cdf901)\n\n",
          "created_at": "2023-12-15T12:32:07Z"
        },
        {
          "author": "blythed",
          "body": "https://trino.io/docs/current/connector/iceberg.html",
          "created_at": "2023-12-15T12:34:06Z"
        }
      ]
    },
    {
      "issue_number": 387,
      "title": "Feature Request: Monitoring Capability for SuperDuperDB",
      "body": "### Why\r\n\r\nCurrently, SuperDuperDB lacks a monitoring capability, which is crucial for tracking activities and ensuring the integrity and performance of deployed models on databases. To address this limitation, I propose implementing a monitoring feature that enables users to easily monitor changes and detect potential issues in their database collections.\r\n\r\n### How\r\n\r\nI suggest introducing a new API contract for the monitoring feature in SuperDuperDB. The proposed API structure is as follows:\r\n\r\n```python\r\nconfig = MonitorConfig(drift='all', psi=True, summarize=True)\r\n\r\nwatcher = MonitorWatcher(identifier='my-monitor', select=Collection('test_collection').find(), reference=Collection('training_data').find(), config=config, every='1hr')\r\ndb.add(watcher)\r\n```\r\n\r\nThe MonitorConfig class allows users to configure various monitoring options such as drift detection ('all'), population stability index (PSI) calculation (psi=True), and summary generation (summarize=True). The MonitorWatcher class represents a monitoring job and includes parameters like an identifier for the monitor, the selection criteria for the monitored collection (select), the reference collection for comparison (reference), the monitoring configuration (config), and the frequency of monitoring (every='1hr').\r\n\r\nOnce this feature is implemented, any activity on the defined collection will trigger the corresponding monitoring job, allowing users to track changes, identify potential drift, and maintain the accuracy and performance of their deployed models.\r\n\r\nExpected Benefits\r\nThe addition of monitoring capabilities to SuperDuperDB offers several benefits, including:\r\n\r\nEnhanced Model Performance: Users can effectively track and monitor database collections, ensuring the accuracy and performance of deployed models over time.\r\nAutomated Detection of Drift: The monitoring feature automatically detects drift in the monitored collection, helping users identify changes that may impact model predictions.\r\nPopulation Stability Index (PSI) Calculation: PSI calculation provides a statistical measure of population changes, allowing users to assess the stability of their data and take appropriate actions if significant shifts occur.\r\nSummary Generation: Users can obtain summary reports detailing the detected changes and overall model performance, facilitating better decision-making and troubleshooting.\r\n\r\n\r\n\r\n# Implementation Details\r\nTo implement the monitoring capability, the following steps are proposed:\r\n\r\n- Create the MonitorConfig and MonitorWatcher classes that encapsulate the necessary parameters and functionality for monitoring.\r\n- Integrate the monitoring API into SuperDuperDB's existing codebase, ensuring compatibility and adherence to coding standards.\r\n- Implement the logic to trigger monitoring jobs based on defined configurations and frequencies.\r\n- Develop the drift detection, PSI calculation, and summary generation mechanisms to provide valuable insights to users.\r\n- Write comprehensive unit tests to ensure the accuracy and robustness of the monitoring feature.\r\n- Update the SuperDuperDB documentation to include instructions and examples on how to utilize the monitoring capabilities.\r\n\r\n\r\n# Additional Considerations\r\nWhile implementing this feature, the following points should be taken into account:\r\n\r\nScalability: Ensure that the monitoring feature is optimized to handle large database collections without compromising performance.\r\nFlexibility: Consider providing additional configuration options and customization capabilities to cater to diverse monitoring requirements.\r\nError Handling: Implement appropriate error handling mechanisms and clear error messages to aid users in troubleshooting potential issues.\r\n\r\n# Related Issues and Dependencies\r\nThis feature request does not have any direct dependencies on existing issues. However, it may be beneficial to coordinate with the SuperDuperDB team to ensure alignment with the project roadmap and avoid any potential conflicts with ongoing development.\r\n\r\ncc @blythed @fkiraly",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-07-07T17:08:39Z",
      "updated_at": "2025-06-05T12:59:57Z",
      "closed_at": "2025-06-05T12:59:57Z",
      "labels": [
        "🚀 feature request",
        "API and software design"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/387/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/387",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/387",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:38.877286",
      "comments": [
        {
          "author": "blythed",
          "body": "With the new features on the `@trigger` branch: https://github.com/superduper-io/superduper/pull/2434,\r\nwe will be able to easily build triggers to force recalculation of metrics.",
          "created_at": "2024-09-14T17:03:13Z"
        }
      ]
    },
    {
      "issue_number": 2597,
      "title": "[INTEGRATIONS-0.5] Integrate LLMs of Snowflake as `Model`",
      "body": "https://docs.snowflake.com/en/developer-guide/snowpark-ml/reference/1.5.0/api/model/snowflake.cortex.Complete\n\n**Deliverable**\n\n- Open source plugin with a `Model` wrapper for the LLM.\n\nIn order to preserve consistency with out other LLM implementations, it should work with `pydantic` types. \nPlease research: `openai.pydantic_function_tool` - how can we apply this to the output of other LLMs?",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-11-07T08:50:26Z",
      "updated_at": "2025-04-25T09:36:14Z",
      "closed_at": "2025-04-25T09:36:12Z",
      "labels": [
        "nice-to-have"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2597/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2597",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2597",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:39.075351",
      "comments": [
        {
          "author": "kartik4949",
          "body": "Important links for reference\r\n\r\n\r\nhttps://docs.snowflake.com/en/user-guide/snowflake-cortex/llm-functions#using-snowflake-cortex-llm-functions-with-python\r\n\r\nhttps://docs.snowflake.com/en/developer-guide/snowflake-ml/snowpark-ml#label-snowpark-ml-get-started\r\n\r\n",
          "created_at": "2024-11-15T10:12:12Z"
        },
        {
          "author": "blythed",
          "body": "Won't do.",
          "created_at": "2025-04-25T09:36:12Z"
        }
      ]
    },
    {
      "issue_number": 2676,
      "title": "[BUG] `superduper` command fails",
      "body": "When I try to do `superduper ls` I get the following error.\r\n\r\n```\r\n╭───────────────────── Traceback (most recent call last) ──────────────────────╮\r\n│ /home/fnikol/.pyenv/versions/3.11.5/bin/superduper:8 in <module>             │\r\n│                                                                              │\r\n│   5 from superduper.__main__ import run                                      │\r\n│   6 if __name__ == '__main__':                                               │\r\n│   7 │   sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])     │\r\n│ ❱ 8 │   sys.exit(run())                                                      │\r\n│   9                                                                          │\r\n│                                                                              │\r\n│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │\r\n│ │  re = <module 're' from                                                  │ │\r\n│ │       '/home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/re/__init__.p… │ │\r\n│ │ run = <function run at 0x7fa00ba40360>                                   │ │\r\n│ │ sys = <module 'sys' (built-in)>                                          │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/superduper/ │\r\n│ __main__.py:19 in run                                                        │\r\n│                                                                              │\r\n│   16 │   This is the function that is called when the user runs `python -m s │\r\n│   17 │   \"\"\"                                                                 │\r\n│   18 │   try:                                                                │\r\n│ ❱ 19 │   │   app(standalone_mode=False)                                      │\r\n│   20 │   except click.ClickException as e:                                   │\r\n│   21 │   │   return f'{e.__class__.__name__}: {e.message}'                   │\r\n│   22 │   except click.Abort:                                                 │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:328 in __call__                                                           │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:311 in __call__                                                           │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:350 in get_command                                                        │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:332 in get_group                                                          │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:483 in get_group_from_info                                                │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:577 in get_command_from_info                                              │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:553 in get_params_convertors_ctx_param_name_from_function                 │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:850 in get_click_param                                                    │\r\n│                                                                              │\r\n│ /home/fnikol/.pyenv/versions/3.11.5/lib/python3.11/site-packages/typer/main. │\r\n│ py:779 in get_click_type                                                     │\r\n╰──────────────────────────────────────────────────────────────────────────────╯\r\nRuntimeError: Type not yet supported: str | None\r\n```",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2024-12-08T00:04:23Z",
      "updated_at": "2025-04-15T06:02:35Z",
      "closed_at": "2025-04-15T06:02:35Z",
      "labels": [
        "mission critical"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2676/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2676",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2676",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:39.263555",
      "comments": []
    },
    {
      "issue_number": 2547,
      "title": "[DEV-CON] Streamline `_deep_flat_encode` & `_deep_flat_decode`",
      "body": "These functions involve too much logic; they should include fewer `if` clauses, and outsource\r\ndetails of the serialization to the implementations.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-10-22T09:01:25Z",
      "updated_at": "2025-02-21T16:33:15Z",
      "closed_at": "2025-02-21T16:33:12Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2547/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2547",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2547",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:40.983956",
      "comments": [
        {
          "author": "zeus2611",
          "body": "Hi @blythed, I would like to take this up. As I can see in the [superduper/superduper/base/document.py](https://github.com/superduper-io/superduper/blob/70d54d6cdce170dd3d601059011ea990acc04af9/superduper/base/document.py), both _deep_flat_encode & _deep_flat_decode functions are very complex and ne",
          "created_at": "2024-10-23T13:56:30Z"
        },
        {
          "author": "blythed",
          "body": "Closed by #2039 ",
          "created_at": "2025-02-21T16:33:12Z"
        }
      ]
    },
    {
      "issue_number": 2103,
      "title": "Add test cases for the ext module",
      "body": "For each module, Including:  \r\n1. predict_one \r\n2. predict \r\n3. to_listener",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-05-27T08:10:18Z",
      "updated_at": "2025-02-08T13:11:43Z",
      "closed_at": "2025-02-08T13:11:43Z",
      "labels": [
        "help wanted",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2103/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2103",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2103",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:41.191427",
      "comments": []
    },
    {
      "issue_number": 2390,
      "title": "Merge the SQLVector and Vector datatypes into one.",
      "body": "Now we have two different vectors for different types of data backends, and we need to merge them into one.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-08-14T09:54:27Z",
      "updated_at": "2025-02-08T13:10:54Z",
      "closed_at": "2025-02-08T13:10:54Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2390/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2390",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2390",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:41.191449",
      "comments": []
    },
    {
      "issue_number": 2519,
      "title": "Replace `__post_init__(artifacts, ...)` with `postinit()`",
      "body": "This will prevent implementations needing to be refactored if we change something.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-10-10T12:02:46Z",
      "updated_at": "2025-01-17T14:55:28Z",
      "closed_at": "2025-01-17T14:55:26Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2519/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2519",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2519",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:41.191462",
      "comments": [
        {
          "author": "blythed",
          "body": "Solved in #2743 ",
          "created_at": "2025-01-17T14:55:26Z"
        }
      ]
    },
    {
      "issue_number": 2669,
      "title": "[BUG] Permissions on artifacts",
      "body": "When we start the `rest` server on `snowflake` it returns the following error.\r\n\r\n```\r\n| ERROR:    Traceback (most recent call last):                                                                                                                                                                                               |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\", line 693, in lifespan                                                                                                                                  |\r\n|     async with self.lifespan_context(app) as maybe_state:                                                                                                                                                                                  |\r\n|   File \"/usr/lib/python3.10/contextlib.py\", line 199, in __aenter__                                                                                                                                                                        |\r\n|     return await anext(self.gen)                                                                                                                                                                                                           |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/fastapi/routing.py\", line 133, in merged_lifespan                                                                                                                             |\r\n|     async with original_context(app) as maybe_original_state:                                                                                                                                                                              |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\", line 569, in __aenter__                                                                                                                                |\r\n|     await self._router.startup()                                                                                                                                                                                                           |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\", line 670, in startup                                                                                                                                   |\r\n|     await handler()                                                                                                                                                                                                                        |\r\n|   File \"/home/superduper/superduper_services/superduper_services/server/app.py\", line 221, in startup_event                                                                                                                                |\r\n|     self._startup(function=function, cfg=cfg)                                                                                                                                                                                              |\r\n|   File \"/home/superduper/superduper_services/superduper_services/server/app.py\", line 183, in _startup                                                                                                                                     |\r\n|     self._add_templates(temp_db)                                                                                                                                                                                                           |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/rest/base.py\", line 206, in _add_templates                                                                                                                         |\r\n|     db.apply(t, force=True)                                                                                                                                                                                                                |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/base/datalayer.py\", line 456, in apply                                                                                                                             |\r\n|     return apply.apply(                                                                                                                                                                                                                    |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/base/apply.py\", line 47, in apply                                                                                                                                  |\r\n|     object.pre_create(db)                                                                                                                                                                                                                  |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/components/component.py\", line 576, in pre_create                                                                                                                  |\r\n|     self._pre_create(db)                                                                                                                                                                                                                   |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/components/template.py\", line 124, in _pre_create                                                                                                                  |\r\n|     db.artifact_store.save_artifact(self.template)                                                                                                                                                                                         |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/backends/base/artifacts.py\", line 119, in save_artifact                                                                                                            |\r\n|     self.put_file(file_path, file_id=file_id)                                                                                                                                                                                              |\r\n|   File \"/home/superduper/.local/lib/python3.10/site-packages/superduper/backends/local/artifacts.py\", line 119, in put_file                                                                                                                |\r\n|     shutil.copy(file_path, save_path)                                                                                                                                                                                                      |\r\n|   File \"/usr/lib/python3.10/shutil.py\", line 417, in copy                                                                                                                                                                                  |\r\n|     copyfile(src, dst, follow_symlinks=follow_symlinks)                                                                                                                                                                                    |\r\n|   File \"/usr/lib/python3.10/shutil.py\", line 256, in copyfile                                                                                                                                                                              |\r\n|     with open(dst, 'wb') as fdst:                                                                                                                                                                                                          |\r\n| PermissionError: [Errno 13] Permission denied: '/artifacts/9c9e4b89367007582586a03565c5b6b43f070f1f/demo.py'  \r\n```\r\n\r\nThis probably originates from the default permissions of `os.makedirs` from https://github.com/superduper-io/superduper/blob/main/superduper/backends/local/artifacts.py. \r\n\r\nhttps://www.geeksforgeeks.org/python-os-makedirs-method/\r\n\r\nInstead of `Oo777` try with `O777`\r\n\r\n```\r\nsuperduper@statefulset-0:/artifacts$ mkdir -p -m 0o777 testdir/nested\r\nmkdir: invalid mode '0o777'\r\nsuperduper@statefulset-0:/artifacts$ mkdir -p -m 0777 testdir/nested\r\nsuperduper@statefulset-0:/artifacts$ ls -laR testdir/\r\ntestdir/:\r\ntotal 12\r\ndrwxrwxrwx. 1 root root 4096 Dec  4 14:05 .\r\ndrwxrwxrwx. 1 root root 4096 Jan  1  1970 ..\r\ndrwxrwxrwx. 1 root root 4096 Dec  4 14:07 nested\r\n\r\ntestdir/nested:\r\ntotal 8\r\ndrwxrwxrwx. 1 root root 4096 Dec  4 14:07 .\r\ndrwxrwxrwx. 1 root root 4096 Dec  4 14:05 ..\r\n-rw-r--r--. 1 root root    0 Dec  4 14:08 a\r\n```\r\n\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2024-12-04T14:16:45Z",
      "updated_at": "2025-01-17T14:53:40Z",
      "closed_at": "2025-01-17T14:53:38Z",
      "labels": [
        "mission critical"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2669/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2669",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2669",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:41.413589",
      "comments": [
        {
          "author": "blythed",
          "body": "Solved.",
          "created_at": "2025-01-17T14:53:38Z"
        }
      ]
    },
    {
      "issue_number": 2633,
      "title": "[TASK] Make template serialization consistent with other component's serialization",
      "body": "Currently we have `_builds` nested x2 inside a `template.encode()` this is not elegant, and makes the editing of a template for a user difficult.\r\n\r\nInstead we should have a single `_builds` field which combines everything from a `Template` in one field.\r\n\r\nWe should repurpose the `Component.literals` which stops the jobs being deployed on `db.apply(template)`.\r\n\r\n**Outcome**\r\n\r\nThis will make it easier to pass a response to the frontend, and deserialize without custom logic.\r\n\r\n1. `/db/show_template` will not be necessary\r\n2. `/db/apply` will be simplied\r\n3. `Template.__call__` will no longer be necessary",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-11-20T15:30:46Z",
      "updated_at": "2024-11-29T12:47:57Z",
      "closed_at": "2024-11-29T12:47:57Z",
      "labels": [
        "wontfix",
        "📉 technical debt",
        "blockage"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2633/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2633",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2633",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:43.336755",
      "comments": []
    },
    {
      "issue_number": 2499,
      "title": "[DATATYPE] Create mapped datatype for flattened `Listener`",
      "body": "1. `Schema` should be a sub-class of `Datatype`\r\n2. `Map[Datatype]` should be a sub-class of `Datatype` and be applied to models with mapped outputs",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-10-07T14:53:59Z",
      "updated_at": "2024-11-27T11:00:57Z",
      "closed_at": "2024-11-27T11:00:57Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2499/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2499",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2499",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:43.336782",
      "comments": []
    },
    {
      "issue_number": 2407,
      "title": "[STREAMLIT] Implement `Streamlit` component",
      "body": "Implement a streamlit interface component which can be loaded from the system and will run in the parent \r\n[streamlit interface runner](https://github.com/superduper-io/superduper/issues/2406).",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-08-21T14:44:29Z",
      "updated_at": "2024-11-04T21:01:44Z",
      "closed_at": "2024-11-04T14:48:20Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2407/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2407",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2407",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:43.336800",
      "comments": []
    },
    {
      "issue_number": 2406,
      "title": "[STREAMLIT] Implement skeleton application",
      "body": "Use a multi-app setup with frontpage to serve multiple streamlit demos. (See example).\r\n\r\n- Front-page explaining that this is the Superduper demo server\r\n- For each \"created\" `Streamlit` component, a page should be saved to disk.\r\n\r\n[example.zip](https://github.com/user-attachments/files/17586494/example.zip)\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-08-21T14:44:26Z",
      "updated_at": "2024-11-04T21:01:40Z",
      "closed_at": "2024-11-04T14:48:14Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2406/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2406",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2406",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:43.336807",
      "comments": []
    },
    {
      "issue_number": 2460,
      "title": "Add an optional list of QueryTemplates to a template",
      "body": "This is, in our experience, a useful thing to have. Once the template is installed, use one or more of the queries to look at the results.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-09-17T22:29:16Z",
      "updated_at": "2024-10-25T17:34:35Z",
      "closed_at": "2024-10-25T17:34:35Z",
      "labels": [
        "good first issue",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2460/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2460",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2460",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:45.092359",
      "comments": []
    },
    {
      "issue_number": 2402,
      "title": "`superduper` not available as a command line tool",
      "body": "On Mac OSX, with a virtual environment (Python 3.11), I can access `superduper` with:\r\n\r\n```\r\npython -m superduper --help\r\n```\r\n\r\nBut not \r\n\r\n```\r\nsuperduper --help\r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-08-20T12:26:36Z",
      "updated_at": "2024-10-14T15:37:16Z",
      "closed_at": "2024-10-14T15:37:16Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2402/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2402",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2402",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:45.092391",
      "comments": [
        {
          "author": "namit-chandwani",
          "body": "Hey @blythed, I've setup the superduper repo locally on my system and would like to get started with some beginner issue to get familiar with the codebase.\r\n\r\nCan you please assign this one to me?",
          "created_at": "2024-08-20T14:36:42Z"
        },
        {
          "author": "SaisatwikBiku",
          "body": "It seems like the module may not be installed correctly or exposed as a command-line tool in your virtual environment. To fix this problem, you can try installing `superduper` with the `--user` flag or make sure that your PATH is configured properly. \r\n\r\n**Install with --user Flag:**\r\n`pip install -",
          "created_at": "2024-08-26T00:37:43Z"
        }
      ]
    },
    {
      "issue_number": 2436,
      "title": "[PRE-RELEASE-0.4] Create utilities to avoid using the `predict_id` in queries",
      "body": "1. `db['_outputs__<identifier>__<uuid>']` should work even if user gives `db['_outputs__<identifier>']`.\n2. `db['docs'].select().outputs(\"<identifier>__<uuid>\")` should work as `db['docs'].select().outputs(\"<identifier>\")` \n\nThe expected behaviour is that the latest version should be loaded.\n\nTODO: check that these are the only places needed.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-09-04T08:22:06Z",
      "updated_at": "2024-10-10T12:58:11Z",
      "closed_at": "2024-10-10T12:58:11Z",
      "labels": [
        "🚀 feature request",
        "API and software design",
        "Enhancement"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2436/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2436",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2436",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:45.344255",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "TODO:\n\t1.\tAs a condition for the filter.\n\t2.\tAfter exporting the application, check whether it is correctly read when reloaded.",
          "created_at": "2024-09-23T08:26:21Z"
        },
        {
          "author": "jieguangzhou",
          "body": "The current adaptation for export and import requires modifications based on some refactored logic. Therefore, this PR/issue is temporarily on hold and will continue after the refactoring is complete.\n\nhttps://github.com/superduper-io/superduper/tree/feat/predict_id_utils_new",
          "created_at": "2024-09-24T06:47:47Z"
        },
        {
          "author": "blythed",
          "body": "**Option 1**\r\n\r\n*When saving a template remove specific `uuid` from a `db[<outputs>].select()` query*\r\n\r\nThis is dangerous, since the query is no longer \"bound\" to a version.\r\n\r\n**Option 2 (not exclusive)**\r\n\r\n*When querying the `db` allow users to omit the `uuid` and fetch the latest one*\r\n\r\nFor ex",
          "created_at": "2024-09-29T11:05:42Z"
        }
      ]
    },
    {
      "issue_number": 616,
      "title": "Support TensorFlow for Enhanced Capabilities",
      "body": "### Contact Details\n\ntimo@superduperdb.com\n\n### Feature Description\n\nIntegration of TensorFlow to enable using TensorFlow models. \n\n### Use Case Description\n\nTensorFlow is common in production - we should therefore discuss the prioritisation of its integration.   \n\n### Organization\n\nAll companies working with TensorFlow. \n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "thgnw",
      "author_type": "User",
      "created_at": "2023-08-03T18:30:19Z",
      "updated_at": "2024-09-14T14:48:51Z",
      "closed_at": "2024-09-14T14:48:51Z",
      "labels": [
        "🚀 feature request",
        "wontfix"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/616/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/616",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/616",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.274343",
      "comments": []
    },
    {
      "issue_number": 1005,
      "title": "Feature Request: Implement Diffusers Pipeline",
      "body": "### Contact Details\n\njohko@posteo.de\n\n### Feature Description\n\nIn the spirit of the implementation of the transformers pipeline functionality, I think it would be a great addition to also have the diffusers (https://github.com/huggingface/diffusers) `DiffusionPipeline` and with this, adding a lot of Diffusion Model capabilities to SuperDuperDB.\r\n\r\nPipelines Overview: https://huggingface.co/docs/diffusers/api/pipelines/overview\r\n\r\nWhat do you think @blythed ? It would be something I'm up to implement, even though the scope might be a bit bigger.\n\n### Use Case Description\n\nThere are a lot of different use-cases for the diffusers pipeline\r\n\r\n- text-to-image with various models\r\n- text-to-3D (Shap-E)\r\n- image editing (DiffEdit)\r\n- text-to-audio\n\n### Organization\n\nIt coudl be used by inidividuals as well as companies to quickly experiment on a set of prompts. E.g. you could have database with slightly varying prompts. To see which gives you the best result you simply run the diffusers pipeline and get the created images in your database.\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "johko",
      "author_type": "User",
      "created_at": "2023-09-28T09:21:37Z",
      "updated_at": "2024-09-14T14:48:32Z",
      "closed_at": "2024-09-14T14:48:32Z",
      "labels": [
        "🚀 feature request",
        "wontfix",
        "🔍 discovery"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1005/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1005",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1005",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.274364",
      "comments": [
        {
          "author": "blythed",
          "body": "@johko thanks for the suggestion! Yes I agree that this type of feature is something that's needed by the community. \r\n\r\nDo you have any suggestions on how this would be implemented? E.g. would you work with the existing `transformers` pipeline? Or make a new subclass? I would be interested to hear ",
          "created_at": "2023-09-29T20:41:49Z"
        },
        {
          "author": "thejumpman2323",
          "body": "Adding #984  issue as its in conjunction with the current issue,\r\n\r\nHmm, interesting Usecase! @johko \r\nI can see a use case where user could have a field which could be either transformed to image, video or audio with the above!\r\n\r\nLets start a pr on this use case :) \r\nThanks\r\n",
          "created_at": "2023-10-01T17:33:13Z"
        },
        {
          "author": "johko",
          "body": "Thank you for the quick and positive replies to my suggestions.\r\n\r\nI have to say, I'm also not really deep into the working of the DiffusersPipeline, but I'm currently looking into it some more and will make some suggestions on implementations the next days @blythed .\r\n\r\nGut feeling would be an own ",
          "created_at": "2023-10-01T20:23:09Z"
        },
        {
          "author": "johko",
          "body": "Hey, sorry for the long delay on this issue, I have a lot of stuff going on currently. But I'm still looking into this and will try to come up with something on the weekend.",
          "created_at": "2023-10-06T07:50:27Z"
        }
      ]
    },
    {
      "issue_number": 1145,
      "title": "Enhance Caching and Memory Usage by Making the DB Class Singleton",
      "body": "This will improve caching and memory usage.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-20T16:05:32Z",
      "updated_at": "2024-09-14T14:48:07Z",
      "closed_at": "2024-09-14T14:48:07Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1145/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1145",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1145",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.502563",
      "comments": [
        {
          "author": "Ayush9026",
          "body": "@blythed sir i tried to solve this issue and raised PR please review.",
          "created_at": "2023-10-29T19:11:54Z"
        }
      ]
    },
    {
      "issue_number": 1221,
      "title": "[FEATURE REQUEST]: Fancy execution environments",
      "body": "### Contact Details\n\nfotis@superduperdb.com\n\n### Feature Description\n\nSome cool things we could do:\r\n\r\n1. Instead of a whole notebook, just open a Python cli.\r\nhttps://shell.duckdb.org/\r\n\r\n2. Use SuperDuperDB for AI-on-your-browser\r\nhttps://duckdb.org/2021/10/29/duckdb-wasm.html\n\n### Use Case Description\n\nThe first one will be just an eye candy thing.\r\n\r\nThe second one, will be an enabler for Edge computing use-cases. \r\nInstead of installing docker, we can run superduperdb directly on the browser environment.\n\n### Organization\n\napps\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-11-01T09:19:09Z",
      "updated_at": "2024-09-14T14:47:47Z",
      "closed_at": "2024-09-14T14:47:47Z",
      "labels": [
        "🚀 feature request",
        "wontfix"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1221/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1221",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1221",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.685072",
      "comments": []
    },
    {
      "issue_number": 1580,
      "title": "[FEATURE REQUEST]: Bring your own change-data-capture/ ingestion component",
      "body": "### Contact Details\n\nduncan@superduperdb.com\n\n### Feature Description\n\nIn order for users to implement search over sources such as JIRA, or filesystems, we should offer the ability \r\nto \"mirror\" these systems in a database.\n\n### Use Case Description\n\nA decision maker would like to be able to search JIRA or issues relevant to a particular problem,\r\nwith the problem formulated as a search or question.\n\n### Organization\n\nAny.\n\n### Who are the stake-holders?\n\n- Decision makers\r\n- Developers\r\n- Database admins",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-20T16:11:23Z",
      "updated_at": "2024-09-14T14:47:22Z",
      "closed_at": "2024-09-14T14:47:22Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1580/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1580",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1580",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.685092",
      "comments": []
    },
    {
      "issue_number": 1828,
      "title": "[FCT] Functional approach to graph models and listeners",
      "body": "Idea of @jieguangzhou to create models inside a context manager.\r\n\r\n```python\r\n# Create model instances\r\nmodel1 = Model()\r\nmodel2_multi = Model()\r\nmodel3 = Model()\r\n\r\n# Using the Graph context manager\r\nwith Graph.creating() as G:\r\n    o_m1 = model1(G.input)\r\n    o_m2 = model2(y=model1)\r\n    o_m3 = model3(x=o_m1, y=o_m2)\r\n\r\nG.predict_one()     # is ok\r\nG(model4)             # raise NoBuildContextError\r\n```\r\n\r\nIdea, use same formal approach for creating `Listener` instances:\r\n\r\n```python\r\n\r\nwith db.listener(coll.find()) as list:\r\n    # this is a `Listener` equivalent to \r\n    # `Listener(key={'a': 'txt', 'b': 'brand'}, select=coll.find(), model=model1)\r\n    o_m1 = model1(a='txt', b='brand')         \r\n    # This is a downstream listener\r\n    # `Listener(key={'x': 'brand', 'y': '_outputs....{model1.identifier}.{model1.version}'}, select=coll.find(), model=model1)`\r\n    o_m2 = model2(x='brand', y=o_m1)      \r\n    ...\r\n\r\n```\r\n\r\nSuggestion to make easier to debug:\r\n\r\n```python\r\nwith db.listener(coll.find(), eager=True):\r\n    # Same as `model1.predict(list(db.execute(coll.find())))`\r\n    o_m1 = model1(a='txt', b='brand')         \r\n    # This is a downstream prediction\r\n    # Same as `model2.predict(...)`\r\n    o_m2 = model2(x='brand', y=o_m1)      \r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-03-05T09:54:35Z",
      "updated_at": "2024-09-14T14:46:34Z",
      "closed_at": "2024-09-14T14:46:34Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1828/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1828",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1828",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.685099",
      "comments": [
        {
          "author": "blythed",
          "body": "Solution for multiple inputs and models - create a routing model node:\r\n\r\n```python\r\nimport dataclasses as dc\r\nimport typing as t\r\nfrom superduperdb.components.model import _Predictor, objectmodel\r\n\r\ndb = ...\r\ncoll = ...\r\n\r\n\r\n@objectmodel\r\ndef f(a, b, c=2):\r\n    ...\r\n\r\n\r\n# Data in database looks lik",
          "created_at": "2024-03-05T10:09:47Z"
        },
        {
          "author": "blythed",
          "body": "Suggestion: create a `GraphModel` and then do `G.listen(db=db, select=coll.find())`",
          "created_at": "2024-03-05T10:47:18Z"
        }
      ]
    },
    {
      "issue_number": 1808,
      "title": "[ECO] Support for `cosine` similarity in DuckDB",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-02-22T12:23:33Z",
      "updated_at": "2024-09-14T14:46:09Z",
      "closed_at": "2024-09-14T14:46:09Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1808/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1808",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1808",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.910620",
      "comments": []
    },
    {
      "issue_number": 1783,
      "title": "Improve Docs Release",
      "body": "For the moment, the doc CI is triggered only when a PR is merged to the main.\r\n\r\nThis can be problem since we only now about broken configuration when it's already too late.",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2024-02-15T10:26:19Z",
      "updated_at": "2024-09-14T14:45:49Z",
      "closed_at": "2024-09-14T14:45:49Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1783/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1783",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1783",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.910642",
      "comments": []
    },
    {
      "issue_number": 458,
      "title": "Expand CI to Include `windows-latest`",
      "body": "Our CI does not currently run on Windows. We should add this.\r\n\r\nAn inital (failed) attempt was made in #457.\r\n\r\nSome potentially relevant resources include:\r\n- https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners\r\n- https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md\r\n- https://github.com/actions/runner/issues/904 - I can't figure out if this means that we need to rethink how we deploy our MongoDB services (eg maybe we should use MongoDB Atlas instead), or does it just need a bit more perserverance.\r\n",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-07-18T17:40:07Z",
      "updated_at": "2024-09-14T14:39:48Z",
      "closed_at": "2024-09-14T14:39:47Z",
      "labels": [
        "help wanted",
        "wontfix",
        "🔄 CI"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/458/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/458",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/458",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:47.910649",
      "comments": [
        {
          "author": "blythed",
          "body": "Won'",
          "created_at": "2024-09-14T14:39:47Z"
        }
      ]
    },
    {
      "issue_number": 2347,
      "title": "[RESTRUCTURE] Implement, test and optimize restructured CI/ CD workflow",
      "body": "- [ ] Caching of environment\r\n- [ ] Making base testing environment faster \r\n- [ ] Make sure workflow triggered only when needed\r\n- [ ] Make sure workflow triggered when needed\r\n- [ ] ...\r\n\r\nAfter separating into plugins + core, we can strip down main test suite.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-07-26T11:27:53Z",
      "updated_at": "2024-08-13T14:40:33Z",
      "closed_at": "2024-08-13T14:40:33Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2347/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2347",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2347",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:48.083930",
      "comments": []
    },
    {
      "issue_number": 2368,
      "title": "Optimize model writing and loading during prediction",
      "body": "We should have separate processes writing model outputs, while other processes are loading data and predicting. \r\nThis is particularly obvious when the inputs and outputs are large (order of magnitude of work in I/O comparable to prediction).",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-08-02T10:19:14Z",
      "updated_at": "2024-08-13T10:01:45Z",
      "closed_at": "2024-08-13T10:01:45Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2368/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2368",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2368",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:49.856682",
      "comments": []
    },
    {
      "issue_number": 2099,
      "title": "[USER-EXP-LIST] Change of Field Name for Storing Model Results in Ibis",
      "body": "Changing the field name from `output`  to `_output.predict_id` eliminates the need for the relabel operation when querying `model` results in `superduperdb`, and maintains consistency with the storage behavior in MongoDB.",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-05-24T09:38:53Z",
      "updated_at": "2024-07-16T08:35:02Z",
      "closed_at": "2024-07-16T08:35:02Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2099/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2099",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2099",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:49.856712",
      "comments": []
    },
    {
      "issue_number": 2129,
      "title": "[CORE-0.3] Remove `@dc.dataclass` wrappers everywhere",
      "body": "Currently, everytime a user wants to create his/her own `Component`, he has to additionally\r\nwrap with `@dc.dataclass`. This is unnecessary overhead and should be removed as a requirement.\r\n\r\nShould be possible with something like this:\r\n\r\n```python\r\nimport dataclasses as dc\r\n\r\nclass AutoDataclassMeta(type):\r\n    def __new__(cls, name, bases, dct):\r\n        # Automatically applies the dataclass decorator to the new class\r\n        new_cls = super().__new__(cls, name, bases, dct)\r\n        new_cls = dc.dataclass(kw_only=True)(new_cls)\r\n        return new_cls\r\n\r\nclass Component(metaclass=AutoDataclassMeta):\r\n    # Now every subclass of Component will automatically be a keyword-only dataclass\r\n    pass\r\n\r\nclass MyComponent(Component):\r\n    some_field: int\r\n    another_field: str = \"default\"\r\n\r\n# When you instantiate MyComponent, it behaves as a dataclass with keyword-only arguments\r\ncomp = MyComponent(some_field=10, another_field='example')\r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-05-31T19:44:47Z",
      "updated_at": "2024-07-05T09:19:56Z",
      "closed_at": "2024-07-05T09:19:56Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2129/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2129",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2129",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:51.713180",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "BTW, If we use metaclass, we can also add @ensure_initialized to `predict` and `predict_one`",
          "created_at": "2024-06-01T02:28:01Z"
        }
      ]
    },
    {
      "issue_number": 2174,
      "title": "[MISC] Print the id and link of the ray job on the dashboard.",
      "body": "Users should be able to monitor their job on the dashboard after submission.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-06-14T12:29:13Z",
      "updated_at": "2024-06-21T07:42:48Z",
      "closed_at": "2024-06-21T07:42:48Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2174/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2174",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2174",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:51.909145",
      "comments": []
    },
    {
      "issue_number": 2155,
      "title": "[BUGS-0.2.0] Renew Authentication tokens",
      "body": "When connecting to external systems, we assume that connections are persistent and last forever.\r\n\r\nThis is not always the case. For example, the snowflake authentication token expires after 1h and the connection returns an exception.\r\n\r\nWe have to capture this exception and re-establish the connection.\r\n\r\nThe snowflake log:\r\n\r\n```\r\n{\"error\":\"ProgrammingError\",\"messages\":\"10.244.12.146:37902 - \\\"GET /db/show\\\"                    500 Internal Server Error <ProgrammingError:                    (snowflake.connector.errors.ProgrammingError) 390114 (08001): Authentication token has expired.  The user must authenticate again.\\n(Background on this error at: https://sqlalche.me/e/14/f405)>\",\"traceback\":\"Traceback (most recent call last):\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 755, in _post_request\\n    ret = self._renew_session()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 529, in _renew_session\\n    return self._token_request(REQUEST_TYPE_RENEW)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 584, in _token_request\\n    raise ReauthenticationRequest(\\nsnowflake.connector.network.ReauthenticationRequest: 390114 (08001): Authentication token has expired.  The user must authenticate again.\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nTraceback (most recent call last):\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 1094, in _commit_impl\\n    self.engine.dialect.do_commit(self.connection)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\\\", line 686, in do_commit\\n    dbapi_connection.commit()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/connection.py\\\", line 824, in commit\\n    self.cursor().execute(\\\"COMMIT\\\")\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/cursor.py\\\", line 977, in execute\\n    ret = self._execute_helper(query, **kwargs)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/cursor.py\\\", line 694, in _execute_helper\\n    ret = self._connection.cmd_query(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/connection.py\\\", line 1309, in cmd_query\\n    ret = self.rest.request(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 493, in request\\n    return self._post_request(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 758, in _post_request\\n    raise ex.cause\\nsnowflake.connector.errors.ProgrammingError: 390114 (08001): Authentication token has expired.  The user must authenticate again.\\n\\nThe above exception was the direct cause of the following exception:\\n\\nTraceback (most recent call last):\\n  File \\\"/home/superduper/superduperdb/superduperdb/server/app.py\\\", line 35, in dispatch\\n    return await call_next(request)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/middleware/base.py\\\", line 165, in call_next\\n    raise app_exc\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/middleware/base.py\\\", line 151, in coro\\n    await self.app(scope, receive_or_disconnect, send_no_error)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/middleware/exceptions.py\\\", line 65, in __call__\\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/_exception_handler.py\\\", line 64, in wrapped_app\\n    raise exc\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/_exception_handler.py\\\", line 53, in wrapped_app\\n    await app(scope, receive, sender)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\\\", line 756, in __call__\\n    await self.middleware_stack(scope, receive, send)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\\\", line 776, in app\\n    await route.handle(scope, receive, send)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\\\", line 297, in handle\\n    await self.app(scope, receive, send)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\\\", line 77, in app\\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/_exception_handler.py\\\", line 64, in wrapped_app\\n    raise exc\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/_exception_handler.py\\\", line 53, in wrapped_app\\n    await app(scope, receive, sender)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/routing.py\\\", line 72, in app\\n    response = await func(request)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/fastapi/routing.py\\\", line 278, in app\\n    raw_response = await run_endpoint_function(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/fastapi/routing.py\\\", line 193, in run_endpoint_function\\n    return await run_in_threadpool(dependant.call, **values)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/starlette/concurrency.py\\\", line 42, in run_in_threadpool\\n    return await anyio.to_thread.run_sync(func, *args)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/anyio/to_thread.py\\\", line 56, in run_sync\\n    return await get_async_backend().run_sync_in_worker_thread(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/anyio/_backends/_asyncio.py\\\", line 2144, in run_sync_in_worker_thread\\n    return await future\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/anyio/_backends/_asyncio.py\\\", line 851, in run\\n    result = context.run(func, *args)\\n  File \\\"/home/superduper/superduperdb/superduperdb/rest/app.py\\\", line 82, in db_show\\n    return app.db.show(\\n  File \\\"/home/superduper/superduperdb/superduperdb/base/datalayer.py\\\", line 272, in show\\n    out = self.metadata.show_components()\\n  File \\\"/home/superduper/superduperdb/superduperdb/backends/sqlalchemy/metadata.py\\\", line 397, in show_components\\n    with self.session_context() as session:\\n  File \\\"/usr/lib/python3.10/contextlib.py\\\", line 142, in __exit__\\n    next(self.gen)\\n  File \\\"/home/superduper/superduperdb/superduperdb/backends/sqlalchemy/metadata.py\\\", line 146, in session_context\\n    session.commit()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\\\", line 1454, in commit\\n    self._transaction.commit(_to_root=self.future)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\\\", line 839, in commit\\n    trans.commit()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 2469, in commit\\n    self._do_commit()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 2659, in _do_commit\\n    self._connection_commit_impl()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 2630, in _connection_commit_impl\\n    self.connection._commit_impl()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 1096, in _commit_impl\\n    self._handle_dbapi_exception(e, None, None, None, None)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 2134, in _handle_dbapi_exception\\n    util.raise_(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/util/compat.py\\\", line 211, in raise_\\n    raise exception\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\\\", line 1094, in _commit_impl\\n    self.engine.dialect.do_commit(self.connection)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\\\", line 686, in do_commit\\n    dbapi_connection.commit()\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/connection.py\\\", line 824, in commit\\n    self.cursor().execute(\\\"COMMIT\\\")\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/cursor.py\\\", line 977, in execute\\n    ret = self._execute_helper(query, **kwargs)\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/cursor.py\\\", line 694, in _execute_helper\\n    ret = self._connection.cmd_query(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/connection.py\\\", line 1309, in cmd_query\\n    ret = self.rest.request(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 493, in request\\n    return self._post_request(\\n  File \\\"/home/superduper/.local/lib/python3.10/site-packages/snowflake/connector/network.py\\\", line 758, in _post_request\\n    raise ex.cause\\nsqlalchemy.exc.ProgrammingError: (snowflake.connector.errors.ProgrammingError) 390114 (08001): Authentication token has expired.  The user must authenticate again.\\n(Background on this error at: https://sqlalche.me/e/14/f405)\\n\"}\r\n```\r\n\r\n\r\n[show.json](https://github.com/user-attachments/files/15740453/show.json)\r\n\r\n\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2024-06-07T13:38:13Z",
      "updated_at": "2024-06-18T18:39:34Z",
      "closed_at": "2024-06-18T18:39:34Z",
      "labels": [
        "blockage",
        "mission critical"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2155/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2155",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2155",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:51.909210",
      "comments": [
        {
          "author": "blythed",
          "body": "If we reconnect will it work or do we need to fetch the token from somewhere?\r\n",
          "created_at": "2024-06-07T13:43:15Z"
        },
        {
          "author": "fnikolai",
          "body": "I 'm guessing that reconnect should work (since it works on the first connection, I don't see why it shouldn't work on reconnect)\r\n",
          "created_at": "2024-06-09T21:05:25Z"
        },
        {
          "author": "fnikolai",
          "body": "https://community.snowflake.com/s/article/Authentication-token-has-expired-The-user-must-authenticate-again\r\n\r\nSpecifically for snowflake, there is the possibility to allow the session to stay active indefinitely by setting `CLIENT_SESSION_KEEP_ALIVE=TRUE`.",
          "created_at": "2024-06-09T21:09:19Z"
        },
        {
          "author": "blythed",
          "body": "Idea: retain a `self.connect()` callback in meta-data store and data-backend to reconnect without caching credentials.",
          "created_at": "2024-06-14T11:47:08Z"
        },
        {
          "author": "fnikolai",
          "body": "The same problem exists in the `apiserver` in golang and on the frontend in `javascript`",
          "created_at": "2024-06-16T20:11:47Z"
        }
      ]
    },
    {
      "issue_number": 2156,
      "title": "[SERIALIZE] Create a consistent and elegant naming convention for leaves",
      "body": "- Too much code duplication\r\n- A more separable serialization scheme\r\n- `id` is unnecessary and bloats the serialization\r\n- AOB",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-06-10T14:47:58Z",
      "updated_at": "2024-06-13T19:43:41Z",
      "closed_at": "2024-06-13T19:43:41Z",
      "labels": [
        "📉 technical debt",
        "blockage"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2156/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2156",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2156",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:52.105458",
      "comments": []
    },
    {
      "issue_number": 2014,
      "title": "[DOCS0-2] Add CI test for pull requests on docs",
      "body": "The docs are currently excluded from the CI, and as a result faulty commits may be integrated in main.\r\n\r\nWe need to test the commits are pull-request, like we do for the code.",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2024-04-29T10:10:55Z",
      "updated_at": "2024-05-31T12:12:03Z",
      "closed_at": "2024-05-31T12:12:03Z",
      "labels": [
        "wontfix"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2014/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2014",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2014",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:53.890471",
      "comments": []
    },
    {
      "issue_number": 1559,
      "title": "[COMM] Well documented and communicated use-cases",
      "body": "- [x] #1560\n- [x] #1561\n- [x] #1562\n- [x] #1563\n- [x] #1565\n- [ ] ...\n\nEach use-case should include:\n\n- Blogpost\n- Notebook\n- Video\n- (Optional) Streamlit\n\nRelated tasks:\n\n- #1524 \n- ...\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-15T12:35:47Z",
      "updated_at": "2024-05-21T16:12:39Z",
      "closed_at": "2024-02-16T11:46:52Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1559/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1559",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1559",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:55.718266",
      "comments": []
    },
    {
      "issue_number": 1100,
      "title": "Notebooks for Earth Observations",
      "body": "### Why\n\nIt would be nice to demonstrate how superduperdb can help searching satellite images by keywords\n\n### How\n\n_No response_\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-13T20:34:14Z",
      "updated_at": "2024-05-20T14:51:46Z",
      "closed_at": "2024-05-20T14:51:46Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1100/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1100",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1100",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:55.718289",
      "comments": []
    },
    {
      "issue_number": 1758,
      "title": "[USE-CASE] Complex video search use-case",
      "body": "@kartik4949 to share the results with @anitaokoh.\r\n\r\n- Movie search including dialogue\r\n- Bounding box detection to enhance quality of chat-interface",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-02-09T14:23:41Z",
      "updated_at": "2024-05-18T15:19:23Z",
      "closed_at": "2024-05-18T15:19:23Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1758/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "anitaokoh",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1758",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1758",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:55.718299",
      "comments": []
    },
    {
      "issue_number": 1487,
      "title": "Supported database use cases",
      "body": "### Why\r\n\r\n<img width=\"613\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/31528124/8746b7bb-1816-40cc-928a-bea3324069f4\">\r\n\r\nWe currently support many databases, but we need to display the most direct and actual database links to help users use them more smoothly (after filtering out sensitive information). These database links should include open-source database connections and commercial database connections.\r\n\r\n### How\r\n\r\n<img width=\"1034\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/31528124/2cfc40a8-7f78-448f-add5-df8eb47dd3b9\">\r\n\r\nhttps://docs.superduperdb.com/docs/docs/data_integrations/postgresql\r\n\r\nAs demonstrated in the document above, it is recommended to provide examples for each database and their associated commercial version links.\r\n\r\nWe need to do two things.\r\n\r\n- Use the directly to run a demo\r\n- Update the documents\r\n\r\nDatabases List: \r\n\r\n- [ ] MongoDB\r\n- [x] #1488\r\n- [x] #1727\r\n- [ ] MySQL\r\n- [ ] PostgreSQL\r\n- ....\r\n\r\n\r\n### What\r\n\r\n\r\nIf everyone want help picking one of these, please comment on this issue, thanks",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2023-12-06T07:35:43Z",
      "updated_at": "2024-05-18T15:19:22Z",
      "closed_at": "2024-05-18T15:16:47Z",
      "labels": [
        "📝 documentation",
        "help wanted",
        "good first issue"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1487/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1487",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1487",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:55.718304",
      "comments": [
        {
          "author": "RISHIKESHk07",
          "body": "Hey @jieguangzhou  would like to contribute , all I need to do would be to write additional docs like the postgress SQL one , for other DBs right ",
          "created_at": "2023-12-14T03:15:38Z"
        },
        {
          "author": "jieguangzhou",
          "body": "Hey @RISHIKESHk07  , Thank you for your interest in the project and I look forward to your contribution. \r\nYes, in addition to the above documents, it is best to have demo fragments that allow users to copy and run them directly.\r\n\r\nWDYT?",
          "created_at": "2023-12-14T07:12:55Z"
        },
        {
          "author": "RISHIKESHk07",
          "body": "would love to  give it a try , the demo fragments are required to be extensive ? I could do it  for sql dbs , not sure about the others,any reference to follow as i totally new to this",
          "created_at": "2023-12-14T12:37:13Z"
        },
        {
          "author": "jieguangzhou",
          "body": "> would love to give it a try , the demo fragments are required to be extensive ? I could do it for sql dbs , not sure about the others,any reference to follow as i totally new to this\r\n\r\nYou can test this example, https://github.com/SuperDuperDB/superduperdb/blob/main/examples/sql-example.ipynb \r\no",
          "created_at": "2023-12-14T13:47:47Z"
        },
        {
          "author": "Gasta88",
          "body": "Hey @jieguangzhou , I would like to contribute with the DuckDB use case.",
          "created_at": "2024-01-29T16:05:14Z"
        }
      ]
    },
    {
      "issue_number": 1656,
      "title": "Sql model outputs query needs better way to define version",
      "body": "current way of model outputs retrieval in sql is \r\n\r\ntable.select(...).outputs(x='model_linear_a/0')\r\n\r\nbasically \r\nkey = '{model_name}/{version}'\r\n\r\nwe should define it better and document",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2024-01-09T09:57:45Z",
      "updated_at": "2024-05-18T15:18:08Z",
      "closed_at": "2024-05-18T15:18:08Z",
      "labels": [
        "📝 documentation",
        "📉 technical debt"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1656/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1656",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1656",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:55.968357",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "Maybe we can unify mongodb and ibis as \r\n\r\nquery: `select.outputs(field=“x”, model=“model_linear_a”, version=0 / None)`\r\noutputs: `document.outputs(field=“x”, model=“model_linear_a”, version=0 / None)`\r\n\r\nWDYT? @kartik4949 ",
          "created_at": "2024-01-11T03:50:56Z"
        }
      ]
    },
    {
      "issue_number": 1627,
      "title": "Model inputs unloaded to memory",
      "body": "Model inputs are loaded in memory i.e if there is a 100 million documents collection.\r\nFor a model to run on it, we load all documents on memory before passing it to the model.",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2023-12-30T19:55:31Z",
      "updated_at": "2024-05-18T15:18:07Z",
      "closed_at": "2024-05-18T15:18:07Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1627/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1627",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1627",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.243906",
      "comments": [
        {
          "author": "blythed",
          "body": "Please add more details: which methods/ classes are the primary offenders? You may even add some code-snippets here.",
          "created_at": "2024-01-01T11:22:09Z"
        }
      ]
    },
    {
      "issue_number": 1558,
      "title": "[ECO] Support for postgres's  `pg_vector`",
      "body": "Necessary tasks:\r\n\r\n- [ ] Create a subclass of `backends.ibis.databackend.IbisDataBackend`\r\n- [ ] Implement configuring the index in this class (use `Mongo` as an example)\r\n- [ ] Implement logic inside `.backends.ibis.query.Like`, using `.backends.mongodb.query.Like` as inspiration\r\n- [ ] ...",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-15T11:18:28Z",
      "updated_at": "2024-05-18T15:18:01Z",
      "closed_at": "2024-05-18T15:18:01Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1558/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1558",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1558",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.461015",
      "comments": [
        {
          "author": "Yaro1",
          "body": "please assign to me",
          "created_at": "2023-12-16T02:15:08Z"
        },
        {
          "author": "makkarss929",
          "body": "@blythed You can assign this to me, Very Excited about this",
          "created_at": "2024-02-27T18:37:44Z"
        }
      ]
    },
    {
      "issue_number": 1519,
      "title": "Native data types for general purpose ",
      "body": "We need a general Purpose data type like `dtype` in ibis, we should use this across schema ",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2023-12-09T14:09:41Z",
      "updated_at": "2024-05-18T15:16:49Z",
      "closed_at": "2024-05-18T15:16:49Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1519/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1519",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1519",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.636936",
      "comments": []
    },
    {
      "issue_number": 1518,
      "title": "Take pandas dataframe as input in insertions",
      "body": "Consider take pandas dataframe for insertions",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2023-12-09T09:49:27Z",
      "updated_at": "2024-05-18T15:16:49Z",
      "closed_at": "2024-05-18T15:16:49Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1518/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1518",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1518",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.636966",
      "comments": []
    },
    {
      "issue_number": 1489,
      "title": "Upgrade Ibis from version 5.1 to the latest version 7.1.0.",
      "body": "### Why\n\nWhile we leverage Ibis to connect with all SQL databases, it's worth noting that certain databases are still in experimental support, even with the 7.1.0 version! Therefore, it's crucial to prioritize addressing this technical debt promptly.\r\n\r\n<img width=\"235\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/26186000/9223e109-9966-4bda-95e0-14b460182da6\">\r\n\n\n### How\n\n_No response_\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-12-06T09:35:48Z",
      "updated_at": "2024-05-18T15:16:47Z",
      "closed_at": "2024-05-18T15:16:47Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1489/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1489",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1489",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.636978",
      "comments": []
    },
    {
      "issue_number": 1405,
      "title": "Multi-processing cluster for consistency",
      "body": null,
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-25T13:31:28Z",
      "updated_at": "2024-05-18T15:16:43Z",
      "closed_at": "2024-05-18T15:16:43Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1405/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1405",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1405",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.636993",
      "comments": []
    },
    {
      "issue_number": 1399,
      "title": "[DOC]: Supported Databases Documentation",
      "body": "### What's wrong?\n\nWe should have an independent page for `Supported Databases` and how to integrate it with SuperDuperDB and all about that database. \n\n### How could it be better?\n\n# Create an expandable menu bar on the documentation site. \r\n\r\n#Supported Databases \r\n      MongoDB\r\n      MySQL\r\n      ...\r\n\r\n\r\nThese pages will have information about how to integrate them with SuperDuperDB. And other relevant information. Inspiration: [https://ibis-project.org/backends/mysql](https://ibis-project.org/backends/mysql)\r\n\r\n\r\n",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-11-24T17:36:09Z",
      "updated_at": "2024-05-18T15:15:45Z",
      "closed_at": "2024-05-18T15:15:45Z",
      "labels": [
        "📝 documentation",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1399/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1399",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1399",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637001",
      "comments": []
    },
    {
      "issue_number": 1390,
      "title": "Update Changelog: Include Latest Changes and Enhancements in the Changelog",
      "body": "Add latest changes to the changelog.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T13:13:59Z",
      "updated_at": "2024-05-18T15:15:44Z",
      "closed_at": "2024-05-18T15:15:44Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1390/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1390",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1390",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637012",
      "comments": []
    },
    {
      "issue_number": 1373,
      "title": "[DOC]: Security Best Practices Documentation",
      "body": "### What's wrong?\n\nRecent surveys show that people are most concerned about software security before deciding to use it. In our recent talks about documentation, we've decided to create a 'security best practices' page for SuperDuperDB. This page will have helpful tips on how to use SuperDuperDB more securely, along with SuperDuperDB's take on security issues.\n\n### How could it be better?\n\nWe're considering topics like:\r\n\r\n- Implementation of fine-grained database permissions\r\n- Not exposing API keys (such as OpenAI API Keys)\r\n- Database access based on IP whitelisting (blocking other IP access)\r\n- Consistent utilization of environment variables\r\n- Protocols for reporting vulnerabilities of SuperDuperDB, if there is any\r\n- Integration of Vault for secure storage of passwords or URIs\r\n- More...\r\n\r\nPlease let us know your ideas in the comments. Your input will help us shape our new security page.",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-11-22T19:23:27Z",
      "updated_at": "2024-05-18T15:15:44Z",
      "closed_at": "2024-05-18T15:15:44Z",
      "labels": [
        "help wanted",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1373/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1373",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1373",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637020",
      "comments": []
    },
    {
      "issue_number": 1360,
      "title": "Solution for easy initialization of `ray` worker with Python-side flags",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-22T09:51:25Z",
      "updated_at": "2024-05-18T15:15:44Z",
      "closed_at": "2024-05-18T15:15:44Z",
      "labels": [
        "🚀 feature request",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1360/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1360",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1360",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637028",
      "comments": []
    },
    {
      "issue_number": 1264,
      "title": "[FEATURE REQUEST]: Forward GitHub notification to Slack",
      "body": "### Contact Details\n\nfotis@superduperdb.com\n\n### Feature Description\n\nUse a bot for forwarding failing GitHub workflows to Slack.\n\n### Use Case Description\n\nThe nightly build is mostly ignored, and when something fails it takes some time to realize it.\n\n### Organization\n\nDevelopers\n\n### Who are the stake-holders?\n\nDevelopers",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-11-09T11:20:20Z",
      "updated_at": "2024-05-18T15:15:43Z",
      "closed_at": "2024-05-18T15:15:43Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1264/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1264",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1264",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637036",
      "comments": []
    },
    {
      "issue_number": 1255,
      "title": "Enhance Error Handling: Improve and Strengthen Error Handling Mechanisms",
      "body": "### Why\n\nThe way errors are handled can cause severe issues when we go into scale.\r\n\r\nWe need to adopt some better practices to facilitate debugging.\r\n\r\n\n\n### How\n\n1. When we interact with external services (e.g databases), before the connection takes place we need to put `logging.info(\"connecting to...\")` and if the connection is successful we need to `logging.succes(\"connected to ...\")`\r\n2. Errors (exceptions) should handled close to the source of error. For instance, we should wrap the connection into `try/catch` or `with` blocks.\r\n3. Fail-fast. If something fails, we should `abort the execution immediately`. Do not try to hide the error as this would prevent managers (e.g Kubernetes) from taking action.\r\n4. `Retry` is ok, but we need to improve the way it is used. For instance, `for attempt in Retrying(stop=stop_after_delay(15)):` in `conftest.py` is not used properly and keeps retrying even if connection is successful.\r\n5. When we interact with external services, we should also test the `failure` paths. For example, to test what happens if the credentials are wrong.\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-11-08T01:08:12Z",
      "updated_at": "2024-05-18T15:15:42Z",
      "closed_at": "2024-05-18T15:15:42Z",
      "labels": [
        "📉 technical debt",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1255/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1255",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1255",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637044",
      "comments": []
    },
    {
      "issue_number": 1200,
      "title": "Feature: User can create a dependency graph of components",
      "body": "Lets say I have a setup of video search application\r\n\r\nI could define my model as \r\nvideo downloader and frame extractor - Model1\r\nEmbedding model - Model2\r\nOther model - Model3\r\nVectorIndex - VI\r\n\r\nNow,\r\n\r\nif we create a graph it might look like\r\n \r\n                Data\r\n                    |\r\n               Model1\r\n             |               |\r\n      Model2         Model3\r\n             |                 \r\n            VI\r\n\r\nNow if user wants to create a setup like above he would explicitly define select parameter in Listener with model1, model2 outputs collection.\r\n\r\nWhat if we provide a elegant solution by letting user define a graph\r\n\r\n```python\r\ngraph = ComponentGraph()\r\n\r\ngraph.add(Collection1()) # Acts as input node \r\ngraph.add(Model1)\r\ngraph.add(Model2)\r\n\r\ngraph.connect(Collection1, Model1) # means inject collection1 as input to Model1\r\ngraph.connect(Model1, Model2) # means Model2 works on outputs from Model1\r\n\r\ngraph.add(Model3)\r\n\r\ngraph.connect(Model2, Model3)\r\n\r\n\r\nVisualize\r\ngraph.show()\r\n\r\n# we can add the graph to db and this creates the complete setup\r\ndb.add(graph)\r\n```\r\n\r\n",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-28T19:25:46Z",
      "updated_at": "2024-05-18T15:15:42Z",
      "closed_at": "2024-05-18T15:15:42Z",
      "labels": [
        "🚀 feature request",
        "🔍 discovery"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1200/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "kartik4949",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1200",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1200",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.637054",
      "comments": [
        {
          "author": "blythed",
          "body": "I think we should put this on hold until after the launch.",
          "created_at": "2023-11-02T08:38:31Z"
        }
      ]
    },
    {
      "issue_number": 1199,
      "title": "Feature: Support passing outputs query to select in components like Listener",
      "body": "So currently if you have one Listener lets say `Listener1`, which listens to `Collection1`, and stores the model outputs to `_outputs.key.model`\r\n\r\nnow lets say Listener2 predicts on this outputs collection from `listener1`\r\n\r\nCurrently we need to define it explicitly in the select arg of Listener.\r\n\r\nMore elegant solution could be \r\n\r\n```python\r\nListener2(\r\n    model = ..., \r\n    select = Listener1.outputs \r\n)\r\n```\r\nor\r\n\r\n```python\r\nListener2(\r\n    model = ..., \r\n    select = \"Listener1\" or listener1 \r\n)\r\n```\r\n\r\nor \r\n\r\n```python\r\nListener2(\r\n    model = ..., \r\n    depends_on = \"Listener1\" or listener1 \r\n)\r\n```",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-28T19:07:10Z",
      "updated_at": "2024-05-18T15:15:41Z",
      "closed_at": "2024-05-18T15:15:41Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1199/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1199",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1199",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.856765",
      "comments": []
    },
    {
      "issue_number": 1169,
      "title": "[FEATURE REQUEST]: 404 Error on [Roadmap Tab]\".",
      "body": "### Contact Details\n\nguptaayush9040@gmail.com\n\n### Feature Description\n\nwebsite is displaying a \"404 Page Not Found\" error when try to open a Roadmap tab marked in screenshot below. https://github.com/orgs/SuperDuperDB/projects/1/views/10\r\n\r\n![SuperduperDB](https://github.com/SuperDuperDB/superduperdb/assets/114745463/a09f9b30-eb53-412d-9b84-b9b3a0781ef3)\r\n\r\n![superduperdb](https://github.com/SuperDuperDB/superduperdb/assets/114745463/7eaa27b1-29ec-4ac8-b5d0-491967960ef3)\r\n\r\n\n\n### Use Case Description\n\nAccessing \"Roadmap\" Page Results in a 404 Error. This use case describes the scenario where a user attempts to access the \"Roadmap\" tab on the website and encounters a \"404 Error,\" indicating that the page is not found.\n\n### Organization\n\nOpen-Source contributor\n\n### Who are the stake-holders?\n\n1. End Users\r\n2. Brand Management Team\r\n3. Marketing Team\r\n4. UI/UX Designers:\r\n5. Development Team",
      "state": "closed",
      "author": "Ayush9026",
      "author_type": "User",
      "created_at": "2023-10-26T11:35:30Z",
      "updated_at": "2024-05-18T15:15:41Z",
      "closed_at": "2024-05-18T15:15:41Z",
      "labels": [
        "🚀 feature request",
        "🔍 discovery"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1169/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1169",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1169",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:56.856784",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "I suggest creating an open project about roadmap to make it easier for contributors to participate @blythed .",
          "created_at": "2023-11-30T03:56:57Z"
        }
      ]
    },
    {
      "issue_number": 1156,
      "title": "New features serializers: encoder/ decoder",
      "body": "It should be possible to easily add a dictionary of information to a serializer, as well as `bytes`.\r\n\r\nFor instance we might want something like:\r\n\r\n```python\r\nwith open('my_script.py') as f:\r\n    my_script = f.read()\r\n\r\nmodel = Model(\r\n    identifier='my_model',\r\n    object=Artifact(\r\n        my_object,\r\n        info={\"params\": ..., \"definition\": my_script},\r\n        serializer=MyCustomSerializer(),\r\n    ),\r\n)\r\n```\r\n\r\nSuch a feature could be used to save a `torch` model with parameters and a script which imports the model.\r\n\r\nThen in the `decode` method, a temporary module would be made, and the class would be used from this module, \r\nwith the parameters specified. Finally the `bytes` object would be loaded as a `state_dict` and added in the object.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-24T14:21:37Z",
      "updated_at": "2024-05-18T15:15:41Z",
      "closed_at": "2024-05-18T15:15:41Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1156/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1156",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1156",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:57.078674",
      "comments": [
        {
          "author": "Ayush9026",
          "body": "@blythed  Sir i want to solve this issue.",
          "created_at": "2023-10-25T10:57:36Z"
        }
      ]
    },
    {
      "issue_number": 1148,
      "title": "Feature: Taskgraph gets updated only once",
      "body": "So currently after every insert or updates, task graph gets built and we run the jobs on the taskgraph\r\n\r\nI have an idea with a better design (IMO).\r\n\r\nwe create one taskgraph/ job graph per collection/table \r\n\r\nso if user creates a Collection - A, a task graph is added by default with one node (download_node), later when a listener is added to the database with select as Collection - A, we append this listener to the task graph of Collection - A.\r\n\r\nnow, when user inserts some data on Collection - A, we execute the task graph of Collection - A, without rebuilding it.\r\n\r\n\r\nThanks ",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-21T18:14:10Z",
      "updated_at": "2024-05-18T15:15:40Z",
      "closed_at": "2024-05-18T15:15:40Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1148/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1148",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1148",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.060386",
      "comments": []
    },
    {
      "issue_number": 1146,
      "title": "[FEATURE REQUEST]: Traffic switch between models in production",
      "body": "### Contact Details\n\ntimo@superduperdb.com\n\n### Feature Description\n\nWhen I want to for example benchmark different models I would like to be able to route percentages of the requests for a given workflow to different models to then connect the performance of their outputs with analytics data. \r\n\r\nExample e-commerce product recommendation. I want to test different recommendation models side-by-side in production to find out which models leads to higher conversion-rates. \n\n### Use Case Description\n\n-\n\n### Organization\n\n-\n\n### Who are the stake-holders?\n\n-",
      "state": "closed",
      "author": "thgnw",
      "author_type": "User",
      "created_at": "2023-10-21T13:06:13Z",
      "updated_at": "2024-05-18T15:15:40Z",
      "closed_at": "2024-05-18T15:15:40Z",
      "labels": [
        "🚀 feature request",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1146/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1146",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1146",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.060410",
      "comments": []
    },
    {
      "issue_number": 1107,
      "title": "[FEATURE REQUEST]: Integration with Unstructured",
      "body": "### Contact Details\n\nfernando@superduperdb.com\n\n### Feature Description\n\nI'd like to propose a use case for the integration of SuperDuperDB with the Unstructured library: https://github.com/Unstructured-IO/unstructured\r\n\r\nUnstructured provides open-source components for processing unstructured data formats, including images and text documents such as PDFs, HTML files, Word docs, and more. Considering the adaptability and efficiency of this library in transforming unstructured data into structured outputs, integrating it with SuperDuperDB could create a powerful synergy.\r\n\r\nBy leveraging the capabilities of Unstructured, SuperDuperDB could ingest and pre-process these unstructured data forms, further enhancing its capability to handle a wide variety of data types, from LLMs to custom ML models.\r\n\r\nMoreover, Unstructured recently introduced an API that allows accessing its capabilities programmatically. This opens a wide range of possibilities for integrating Unstructured's functionalities smoothly into SuperDuperDB.\n\n### Use Case Description\n\nSuperDuperDB users might have multiple unstructured data sources like PDF files, text documents, or images within their databases. During the analysis or model training phase, they could utilize Unstructured's capabilities via SuperDuperDB to process these files and convert them into a format suitable for their ML models. Integrating this portion of the data preparation pipeline could provide a seamless and efficient workflow for users dealing with a mix of structured and unstructured data.\r\ndata stores\n\n### Organization\n\nUse Case\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "guerra2fernando",
      "author_type": "User",
      "created_at": "2023-10-16T08:26:27Z",
      "updated_at": "2024-05-18T15:15:40Z",
      "closed_at": "2024-05-18T15:15:39Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1107/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1107",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1107",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.060417",
      "comments": []
    },
    {
      "issue_number": 1095,
      "title": "MongoDB vector-search on Atlas blogpost",
      "body": "https://docs.google.com/document/d/1SJKN4go8adZgKwRfJdrX-N60HZ9fjLM_ESH-f2cDbhw/edit#heading=h.5nroxfa0842v\n\nFix this draft",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-13T14:07:45Z",
      "updated_at": "2024-05-18T15:15:39Z",
      "closed_at": "2024-05-18T15:15:39Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1095/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1095",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1095",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.060423",
      "comments": [
        {
          "author": "blythed",
          "body": "@thgnw please review",
          "created_at": "2023-10-17T00:43:10Z"
        }
      ]
    },
    {
      "issue_number": 930,
      "title": "Make prompt not to mention about `The context`",
      "body": "currently sometime the answers have `the context` mentioned, we want this behaviour to not happen in future",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-13T09:08:07Z",
      "updated_at": "2024-05-18T15:14:08Z",
      "closed_at": "2024-05-18T15:14:08Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/930/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/930",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/930",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.256128",
      "comments": []
    },
    {
      "issue_number": 863,
      "title": "[FEATURE REQUEST]: Add ruff.pyupgrade to our developer environment",
      "body": "### Contact Details\r\n\r\nnick@superduperdb.com\r\n\r\n### Feature Description\r\n\r\nAdd `ruff.pyupgrade` to our development environment. This was originally brought to attention by @zhongjiajie in #784. \r\n\r\n### Use Case Description\r\n\r\nPotentially reduces developer work when migrating to newer versions of CPython.\r\n\r\n### Organization\r\n\r\nSuperDuperDB\r\n\r\n### Who are the stake-holders?\r\n\r\nDevelopers and Contributors of SuperDuperDB.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-09-05T07:18:24Z",
      "updated_at": "2024-05-18T15:14:07Z",
      "closed_at": "2024-05-18T15:14:07Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/863/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/863",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/863",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.256147",
      "comments": []
    },
    {
      "issue_number": 829,
      "title": "Use-cases: new functionality supported",
      "body": "- [ ] Anomaly detection\r\n- [ ] e-Commerce search and navigation with CLIP\r\n- [ ] Conditional image generation\r\n- [ ] Postprocessing (audio) transcriptions with an LLM for improved quality\r\n- [ ] ...",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-30T16:07:02Z",
      "updated_at": "2024-05-18T15:14:07Z",
      "closed_at": "2024-05-18T15:14:07Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/829/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/829",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/829",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.256154",
      "comments": []
    },
    {
      "issue_number": 809,
      "title": "[FEATURE REQUEST]: Incremental model training support",
      "body": "### Contact Details\n\npalakbhatia186@gmail.com\n\n### Feature Description\n\nCurrently as per the description of the project AI models can be trained and saved using superduperdb interface and saved to the datastore. Often there comes a need to incrementally train a model. If the interface can support the feature to allow such, when the user needs to, would work as useful feature.\n\n### Use Case Description\n\nOften models are trained on datasets where there may be too many classes, some of which may not have enough data instances. When enough data is obtained from live traffic or over the period, then an already trained model can be further enhanced through incremental training.\n\n### Organization\n\nOften models are trained on datasets where there may be too many classes, some of which may not have enough data instances. When enough data is obtained from live traffic or over the period, then an already trained model can be further enhanced through incremental training.\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "palak18j",
      "author_type": "User",
      "created_at": "2023-08-29T11:38:59Z",
      "updated_at": "2024-05-18T15:14:07Z",
      "closed_at": "2024-05-18T15:14:07Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/809/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/809",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/809",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.256159",
      "comments": [
        {
          "author": "blythed",
          "body": "@palak18j thank-you for this sensible suggestion!\r\n\r\nI think that the main challenge here is to make sure that when models are trained in the first place, they should be saved with the relevant parameters which are needed to re-train the model, without lots of additional definition.\r\n\r\n**Saving nece",
          "created_at": "2023-08-31T08:43:29Z"
        },
        {
          "author": "palak18j",
          "body": "@blythed I agree with above pointers. It makes total sense to enable metrics for the different versions of the model  and the versioning to be associated with models.\r\n",
          "created_at": "2023-09-01T16:48:26Z"
        },
        {
          "author": "palak18j",
          "body": "Here are few points that can be considered to support this feature:\r\n1. User can either set trigger such as change in data distribution, model performance shift,etc. for incremental training or manual do it.\r\n2. Baseline model must be available for incremental training to work. It must be saved with",
          "created_at": "2023-09-13T10:14:50Z"
        },
        {
          "author": "blythed",
          "body": "@palak18j  Yes these are great ideas, I especially like the idea to do this in a data dependent way.\r\n\r\nFirst of all, before doing specific triggering of retraining, based on a condition, the first thing to do would \r\nbe to simply trigger a retraining manually? I.e. `model.fit` needs to be called ag",
          "created_at": "2023-09-14T06:20:31Z"
        }
      ]
    },
    {
      "issue_number": 790,
      "title": "Establish best practice for how we do lower bound pinning of our dependencies.",
      "body": "**What**\r\n\r\nOur `pyproject.toml` currently contains lots of (fairly arbitrary) lower bound pins. This can cause problems for our users eg #788. We should figure out an approach for dealing with these lower bounds in a sensible way.\r\n\r\n**Details**\r\n\r\nConsider a package `foo`. Let's say `foo` `1.2.3` does not have a feature that we rely on, but all versions above `1.3.0` have this feature. Then we naturally will need to introduce a lower bound at `1.3.0` (otherwise our package will break).\r\n\r\nBut what about packages where we support all versions more or less? What do we do? The first answer seems to be to not include any lower bound constraint at all for these packages. However, a possible edge case here is that since we require many dependencies, we make the space of possible virtual environments (ie package + version of package) very large. It's unclear if this will result in `pip` taking a long time to resolve and install eg see [here](https://github.com/pypa/pip/issues/8713).\r\n\r\nWe should determine a strategy for dealing with our lower bounds that i) supports as many users as possible and ii) does not result in long waiting times for `pip install superduperdb` for our users.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-28T07:51:06Z",
      "updated_at": "2024-05-18T15:14:06Z",
      "closed_at": "2024-05-18T15:14:06Z",
      "labels": [
        "help wanted"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/790/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/790",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/790",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.451745",
      "comments": []
    },
    {
      "issue_number": 718,
      "title": "Self-contained prototype of ibis+SQL CDC feature",
      "body": "The goal of this task is to create functionality which accomplishes the following:\r\n\r\n1. Watches an arbitrary SQL table for newly inserted data\r\n2. Deploys configured machine learning models on the newly inserted data\r\n3. Saves the outputs back into a different table\r\n\r\nAssumptions:\r\n\r\n1. We want to accomplish this in a very generic way. For that reason the solution should be based on the library `ibis`,\r\n    which supports a range of SQL databases, including DuckDB, snowflake etc.\r\n2. The data will be inserted into the tables using `ibis`, that means, typically, as dataframes. We don't want to make too many other assumptions about that process. For instance, we cannot force the users to add particular identifiers or the like.\r\n3. You may assume that once the data has been written, in won't be updated; that means, you may assume that the \r\n    only data of interest for the machine learning models is the data for which outputs have not yet been computed.\r\n\r\nFor prototyping use:\r\n\r\n1. DuckDB\r\n2. `ibis`\r\n3. `pandas` dataframes for inserting data.\r\n4. Models from the `transformers` or `sentence_transformers` libraries.\r\n\r\nHowever, the solution should not assume anything too specific about DuckDB, data insertion, or `transformers` since we \r\nwant to create a generic solution based on this prototype.\r\n\r\nDelivered output:\r\n\r\n1. Code which inserts data into DuckDB via `ibis` as `pandas` dataframes.\r\n2. Script which monitors configurable DuckDB tables for changes.\r\n3. Function which applies the ML models to fetched changes and inserts outputs into other table using `ibis`",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-17T15:36:43Z",
      "updated_at": "2024-05-18T15:14:06Z",
      "closed_at": "2024-05-18T15:14:06Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/718/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/718",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/718",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.451762",
      "comments": []
    },
    {
      "issue_number": 715,
      "title": "Support Jupyter Notebooks in Vscode devcontainer ",
      "body": "### Contact Details\r\n\r\nbalaschalexander@gmail.com\r\n\r\n### Feature Description\r\n\r\nVS-Code has great support for [dockerized devcontainers ](https://code.visualstudio.com/docs/devcontainers/containers) which make it easy to have a standardized execution environmet and to develop inside of a docker container (locally or remote)\r\n\r\nThe VS-Code [Jupyter Extension](https://code.visualstudio.com/docs/datascience/jupyter-notebooks) can turn [simple python scripts into cell based jupyter notebooks](https://code.visualstudio.com/docs/python/jupyter-support-py) which make it possible to use the VS-Code debugger when running cells. This can be pre-installed in a devcontainer.\r\n\r\n\r\n\r\n### Use Case Description\r\n\r\nWhen opening a repository that has a .devcontainer Folder VS-Code automatically detects it and asks the user wether to open it inside of the devcontainer. \r\nThis makes it very easy to get started with a functioning dev environment without further necessary knowledge about the project.\r\n\r\n### Organization\r\n\r\ndevelopment\r\n\r\n### Who are the stake-holders?\r\n\r\n_No response_",
      "state": "closed",
      "author": "thunderbug1",
      "author_type": "User",
      "created_at": "2023-08-17T10:08:01Z",
      "updated_at": "2024-05-18T15:14:05Z",
      "closed_at": "2024-05-18T15:14:05Z",
      "labels": [
        "🚀 feature request",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/715/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/715",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/715",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.451767",
      "comments": [
        {
          "author": "mertbozkir",
          "body": "Hey, I would love to work on this issue! \r\n\r\nCan you elaborate more about the problem? 🍀",
          "created_at": "2023-09-22T23:05:53Z"
        },
        {
          "author": "nenb",
          "body": "Hey @mertbozkir :wave: Thanks for your interest!\r\n\r\nI think the goal here is to make it easier to get started with SuperDuperDB for developers. A lot of people use VSCode as their IDE nowadays, and a `devcontainer.json` means that they can have a development environment created almost automatically ",
          "created_at": "2023-09-25T13:27:05Z"
        }
      ]
    },
    {
      "issue_number": 703,
      "title": "Change settings of slack for open-source channels/ workspace",
      "body": "Our slack community workspace should be set up to welcome community members, potentially with auto-responses, etc. so that we can provide a maximally open workspace for new interested parties.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-15T12:11:33Z",
      "updated_at": "2024-05-18T15:14:05Z",
      "closed_at": "2024-05-18T15:14:05Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/703/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/703",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/703",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.669889",
      "comments": []
    },
    {
      "issue_number": 674,
      "title": "Modular tests: Guidelines document for extending tests",
      "body": "Output: discussion in this issue.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-11T11:56:41Z",
      "updated_at": "2024-05-18T15:14:04Z",
      "closed_at": "2024-05-18T15:14:04Z",
      "labels": [
        "📝 documentation",
        "🔍 discovery"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/674/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/674",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/674",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.669910",
      "comments": []
    },
    {
      "issue_number": 627,
      "title": "torch installing cuda reps which is reducing installation time",
      "body": "### Why\n\nreqs.txt have cuda deps from torch (non cpu version) dependency\r\nWe should have non cuda version as well, which could greatly reduce \n\n### How\n\n_No response_\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-08-05T15:53:47Z",
      "updated_at": "2024-05-18T15:14:03Z",
      "closed_at": "2024-05-18T15:14:03Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/627/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai",
        "blythed",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/627",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/627",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.669920",
      "comments": [
        {
          "author": "nenb",
          "body": "I don't fully understand this issue.\r\n\r\nThe `.txt` files are only used for CI. Are you saying that we should explicitly specifc the non-CUDA wheels for the CI? (I guess this makes sense as the GitHub machines that we use don't have GPU support as far as I understand.)\r\n\r\nIf you mean that we should a",
          "created_at": "2023-08-06T16:47:59Z"
        }
      ]
    },
    {
      "issue_number": 442,
      "title": "Support for pytorch-lightning",
      "body": "We should be able to support pytorch-lightning, instead of our own home-baked optimizer.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-14T19:01:28Z",
      "updated_at": "2024-05-18T15:14:03Z",
      "closed_at": "2024-05-18T15:14:02Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/442/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/442",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/442",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:37:59.869465",
      "comments": [
        {
          "author": "blythed",
          "body": "Might be better to focus instead on integrating `accelerate` see [here](https://github.com/huggingface/accelerate). \r\n",
          "created_at": "2023-08-03T18:25:44Z"
        }
      ]
    },
    {
      "issue_number": 1176,
      "title": "Integration Testing",
      "body": "Relates to: #1150 \r\n\r\n# test_dask.py\r\n\r\nMost of the test-cases in `test_dask.py` are prefixed with `@pytest.mark.skipif(not torch, reason='Torch not installed')`. \r\n\r\nWhy is torch so important for testing dask?\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb/blob/main/test/integration/test_dask.py\r\n\r\n\r\n# test_server.py\r\n\r\nLike before, it is too heavily dependent on the presence of pytorch. If torch is so important, then it should be added in the [test] dependencies on `pyproject.toml`\r\n\r\n# test_notebooks.py\r\n\r\nThis file can be removed since testing is not triggered from `make test-notebooks` which internally calls `pytest --nbval ${NOTEBOOKS}`",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-26T22:22:50Z",
      "updated_at": "2024-05-10T22:58:16Z",
      "closed_at": "2024-05-10T22:58:16Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1176/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1176",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1176",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:00.072318",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "I think we can use a simple model instead of a torch model and use `numpy` data instead of `torch` data",
          "created_at": "2023-11-30T03:51:38Z"
        }
      ]
    },
    {
      "issue_number": 2042,
      "title": "[SERIALIZE] Auto-infer `Schema` from data",
      "body": "**Ibis**: use table data of the `ibis.table`. If doesn't work.\r\n\r\n**MongoDB**: TBD.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-05-07T11:31:07Z",
      "updated_at": "2024-05-09T23:43:59Z",
      "closed_at": "2024-05-09T23:43:59Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/2042/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/2042",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/2042",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:00.268163",
      "comments": []
    },
    {
      "issue_number": 1757,
      "title": "[DOCS0-2] Improve the storytelling of the docs items",
      "body": "Improve the quality and the storytelling of all the pages on the documentation\r\n\r\nGive a start and add more details between codes - add explanations of why things happen or don't happen\r\nAdd links to other relevant documents to improve the knowledge of the readers",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-02-09T14:16:04Z",
      "updated_at": "2024-05-07T11:14:35Z",
      "closed_at": "2024-05-07T11:14:35Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1757/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1757",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1757",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:00.268187",
      "comments": []
    },
    {
      "issue_number": 1761,
      "title": "[SIMPLIFY]  `_fit` requires datasets only",
      "body": "Currently a lot of boilerplate is involved in writing a model training.\r\nThe plan is to refactor the `fit` API with a similar model to the `predict` API.\r\nInstead of needing to handle the `select` query, fetching the data, etc., the proposal is for the user \r\nto write a single method of a `Trainer` object, which an be provided to the `.fit` method.\r\nThis function will receive the training and evaluation datasets as well as model and `db` instance.\r\n\r\n```python\r\nclass Trainer(Component):\r\n    @abstractmethod\r\n    def fit(self, model, db, train_dataset, valid_dataset):\r\n        ...\r\n```\r\n\r\nAll other details of training will be contained in the `_Predictor` instance, which has been mixed with a `_Fittable` mixin.\r\n\r\nThe only way to train a model now is to call:\r\n\r\n`db.add(model)`.\r\n\r\nIf a model already exists, and we wish to train it after adding, then we just re-add:\r\n\r\n```python\r\nm = db.load('model', 'my_model')\r\n\r\nm.train_X = ('X', 'y')\r\nm.metrics = [accuracy]\r\nm.trainer = ...\r\nm.train_select = ...\r\n\r\nm.add(m)\r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-02-09T14:35:07Z",
      "updated_at": "2024-03-29T20:23:46Z",
      "closed_at": "2024-03-11T08:51:48Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1761/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1761",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1761",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:01.981245",
      "comments": [
        {
          "author": "qjoner",
          "body": "https://opencollective.com/darkreader/donate?interval=oneTime&amount=20&contributeAs=me",
          "created_at": "2024-03-29T20:23:44Z"
        }
      ]
    },
    {
      "issue_number": 1651,
      "title": "[REL] [FEATURE] Implement `@requires` decorator",
      "body": "At the module, class, function and method level, we should be able to enforce that certain modules (not in `pyproject.toml` are installed.\r\n\r\nWhen doing so, we should be able to stipulate version ranges also.\r\n\r\nThis will prevent mismatches as early as possible.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-01-05T18:46:45Z",
      "updated_at": "2024-03-15T12:24:30Z",
      "closed_at": "2024-03-15T12:24:29Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1651/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1651",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1651",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:03.976576",
      "comments": [
        {
          "author": "kartik4949",
          "body": "Great idea, I must say! @blythed ",
          "created_at": "2024-01-09T17:42:23Z"
        },
        {
          "author": "jieguangzhou",
          "body": "I found that huggingface provides a similar implementation. \r\nMaybe can refer to it if you need it.\r\n\r\n`from transformers.utils.versions import require_version`",
          "created_at": "2024-01-11T03:44:32Z"
        },
        {
          "author": "blythed",
          "body": "https://github.com/huggingface/transformers/blob/main/src/transformers/utils/versions.py",
          "created_at": "2024-02-26T09:04:30Z"
        }
      ]
    },
    {
      "issue_number": 1603,
      "title": "[MISC] Deprecate `async` methods",
      "body": "The `async` paradigm isn't in keeping with the philosophy in the rest of the project.\r\nIf users would like to run request \"in the background\" in their deployments then they can use threads to do this. FastAPI does this by default.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-26T09:50:58Z",
      "updated_at": "2024-03-07T15:31:19Z",
      "closed_at": "2024-03-07T15:31:19Z",
      "labels": [
        "📉 technical debt",
        "refactoring"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1603/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1603",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1603",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.220153",
      "comments": [
        {
          "author": "blythed",
          "body": "Decision: only use `async` under the hood for speeding up batch prediction where relevant.",
          "created_at": "2024-01-05T14:40:23Z"
        },
        {
          "author": "blythed",
          "body": "Methods and classes can use `async` but developer facing API is `sync`. We have removed these public methods.\r\nBut some methods in `ext.openai` are now inefficient. In these private methods we should add option of `async`.\r\n\r\nTask is to make API calls more efficient.",
          "created_at": "2024-03-01T11:54:08Z"
        },
        {
          "author": "blythed",
          "body": "Solved.",
          "created_at": "2024-03-07T15:31:17Z"
        }
      ]
    },
    {
      "issue_number": 1536,
      "title": "[LLM] Open source LLM deployment frameworks",
      "body": "### Why\r\n\r\nCurrently, SuperDuperDB is supporting inference of the built-in LLM model. #1235 \r\n\r\nIn addition, the community proposed LLM services that want to integrate API methods.\r\n\r\nFor users who have deployed LLM services, they need to use these services to replace ChatGPT, so it makes sense to support these interfaces out of the box.\r\n\r\nHere are some examples of popular frameworks:\r\n\r\n### How\r\n\r\nLike this: https://github.com/SuperDuperDB/superduperdb/blob/main/superduperdb/ext/openai/model.py\r\n\r\n### What\r\n\r\nIf anyone is interested in one or more of these and would like to contribute, it would be greatly appreciated\r\n\r\n- [x] #1548\r\n- [x] #1549\r\n- [ ] #1515\r\n- [x] #1550\r\n- [x] #1601\r\n- [x] #1640\r\n- [x] #1632 \r\n",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2023-12-12T14:30:35Z",
      "updated_at": "2024-03-07T09:21:21Z",
      "closed_at": "2024-03-07T09:21:20Z",
      "labels": [
        "🚀 feature request",
        "help wanted",
        "good first issue"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1536/reactions",
        "total_count": 2,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": "0.2.0",
      "html_url": "https://github.com/superduper-io/superduper/issues/1536",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1536",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.417597",
      "comments": [
        {
          "author": "blythed",
          "body": "We should support more than just the API - also local execution. Ideally we pick vLLM and support both local and remote execution with a uniform API.",
          "created_at": "2023-12-18T10:15:55Z"
        }
      ]
    },
    {
      "issue_number": 1819,
      "title": "[FEATURE] GraphModel supports obtaining the specified content of node output",
      "body": "              Is it necessary to support how to get the value from the dictionary output by the upstream node in the future?\r\n\r\nFor example: \r\n```\r\n{\"confidence\": 0.9, \"label\": 1}\r\n```\r\n\r\nI want to get the \"label\"\r\n\r\nOr extract a slice from the result, for example top k items of the result\r\n\r\n_Originally posted by @jieguangzhou in https://github.com/SuperDuperDB/superduperdb/pull/1713#discussion_r1498774778_\r\n            ",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2024-02-28T02:11:46Z",
      "updated_at": "2024-03-06T10:02:10Z",
      "closed_at": "2024-03-06T10:02:10Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1819/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1819",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1819",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.609862",
      "comments": []
    },
    {
      "issue_number": 1788,
      "title": "[MISC] [FEATURE]: Basic ray serve cli server",
      "body": "So idea is to create a basic ray serve cli server which could serve superduperdb model with version along with custom resource option.\r\n\r\ni.e\r\n\r\n```\r\nSUPERDUPERDB_ARTIFACT_STORE=\"filesystem:///tmp/artifacts\" SUPERDUPERDB_DATA_BACKEND='mongodb://superduper:superduper@mongodb:27017/test_db'  PYTHONPATH=./:.. python3 superduperdb/__main__.py ray-serve 'm1' --ray-actor-options '{\"num_cpus\": 0.2}' --num-replicas 1\r\n```",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2024-02-16T13:10:31Z",
      "updated_at": "2024-02-22T20:01:23Z",
      "closed_at": "2024-02-22T20:01:23Z",
      "labels": [
        "API and software design"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1788/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1788",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1788",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.609893",
      "comments": []
    },
    {
      "issue_number": 1642,
      "title": "[SIMPLIFY] Make it maximally easy to port the ecosystem to `superduperdb`",
      "body": "### Import `superduperdb.Model` instances directly\r\n\r\nProposal, instead of needing to write:\r\n\r\n```python\r\nfrom superduperdb import superduper\r\nimport torch\r\n\r\nm  = torch.nn.Linear(16, 32)\r\n\r\nm = superduper(m, preprocess=..., postprocess=..., encoder=...)\r\n```\r\n\r\nWe can do:\r\n\r\n```python\r\nfrom superduperdb.auto import torch\r\n\r\nm = torch.nn.Linear(16, 32, preprocess=..., postprocess=..., encoder=...)\r\n```\r\n\r\nThe following simple script achieves that:\r\n\r\n```python\r\nimport importlib\r\nimport inspect\r\n\r\nimport typing as t\r\n\r\n\r\ndef _decorator(f):\r\n    from superduperdb import Model\r\n    def dec(*args, identifier=None, postprocess=None, preprocess=None, encoder=None, **kwargs):\r\n        return Model(\r\n            identifier=identifier or f.__name__,\r\n            object=f(*args, **kwargs),\r\n            preprocess=preprocess,\r\n            postprocess=postprocess,\r\n            encoder=encoder,\r\n        )\r\n    return dec \r\n\r\n\r\nclass _Package:\r\n    def __init__(self, package_name: t.Optional[str] = None, package=None):\r\n        if package is None:\r\n            self.package = importlib.import_module(package_name)\r\n        else:\r\n            self.package = package\r\n\r\n    def __getattr__(self, item):\r\n        object_ = getattr(self.package, item)\r\n        if inspect.ismodule(object_):\r\n            return _Package(package=object_)\r\n        return _decorator(object_)\r\n\r\n\r\ndef __getattr__(name):\r\n    try:\r\n        return _Package(name)\r\n    except ImportError:\r\n        raise AttributeError(f\"module {__file__} has no attribute {name}\")\r\n    return module\r\n\r\n```\r\n\r\n### Decorate classes and functions\r\n\r\n```python\r\nfrom superduperdb import superduper\r\n\r\n@superduper\r\ndef my_function(x, *args, **kwargs):\r\n    ...\r\n\r\n@superduper\r\nclass MyClass:\r\n    def __init__(self, *args, **kwargs):\r\n        ...\r\n\r\nmy_class = MyClass(*args, **kwargs)\r\n```\r\n\r\nAre equivalent to:\r\n\r\n```python\r\nmy_function = superduper(my_function)\r\nmy_class = superduper(MyClass(*args, **kwargs))\r\n```\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2024-01-04T11:53:56Z",
      "updated_at": "2024-02-22T15:03:03Z",
      "closed_at": "2024-02-22T15:03:02Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1642/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1642",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1642",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.609901",
      "comments": []
    },
    {
      "issue_number": 1762,
      "title": "[SIMPLIFY] `_predict` as the only @abstract method of `_Predictor` and create named inputs",
      "body": "How to map this\r\n\r\n```python\r\n@abstractmethod\r\ndef _predict(self, *args, dataset, **predict_kwargs):\r\n    ...\r\n```\r\n\r\n- [ ] Discuss exact model of connecting parameters of `model.object` with `_predict`\r\n- [ ] Implementation",
      "state": "closed",
      "author": "guerra2fernando",
      "author_type": "User",
      "created_at": "2024-02-09T14:35:46Z",
      "updated_at": "2024-02-22T15:02:23Z",
      "closed_at": "2024-02-22T15:02:23Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1762/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1762",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1762",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.609908",
      "comments": [
        {
          "author": "blythed",
          "body": "```python\r\n@dc.dataclass\r\nclass InputNode:\r\n    name: str\r\n\r\n\r\nclass Inputs:\r\n    def __init__(self, fn):\r\n        self.params = inspect.signature(fn).parameters\r\n\r\n    def __getattr__(self, item):\r\n        assert item in self.params\r\n        return InputNode(item)\r\n    \r\n \r\nclass _Predictor:\r\n    @",
          "created_at": "2024-02-12T06:09:54Z"
        },
        {
          "author": "blythed",
          "body": "What should the signature of `.predict` look like?\r\n\r\nIf we had named inputs, we could create `Listener` which \"listens\" to specific keys.\r\n\r\n**Idea**: `X: t.Optional[t.List[t.Any], t.Dict[str, t.Any], t.Any]`.\r\n\r\n**Variants**:\r\n\r\n```python\r\ndef my_func(x, y, z):\r\n    ...\r\n\r\nmodel = Model('test', ob",
          "created_at": "2024-02-12T06:13:38Z"
        },
        {
          "author": "blythed",
          "body": "What about outputs object?\r\n\r\n```python\r\n\r\nclass Outputs:\r\n    def __getitem__(self, item: int):\r\n        assert isinstance(item, int)\r\n        return OutputNode(item)\r\n```\r\n\r\nThen in `GraphModel` we can have different variants:\r\n\r\n```python\r\nG.add_edge(model.outputs[0], other.inputs.x)\r\nG.add_edge(",
          "created_at": "2024-02-12T06:32:57Z"
        },
        {
          "author": "blythed",
          "body": "Also we should do some nice pretty-printing of `Model` information so that developers \"know\"\r\nwhat parameters we have for a model.",
          "created_at": "2024-02-12T06:38:04Z"
        },
        {
          "author": "blythed",
          "body": "Subtasks:\r\n\r\n- [ ] Refactor `._predict` as `_predict(self, X, dataset, ...)`\r\n- [ ] Add input and output nodes to `_Predictor`\r\n- [ ] Connect input and output nodes with `Listener` and `predict(X, db=db)`",
          "created_at": "2024-02-12T06:40:33Z"
        }
      ]
    },
    {
      "issue_number": 1310,
      "title": "Rename `Encoder` -> `DataType`",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-15T18:41:43Z",
      "updated_at": "2024-02-22T12:28:52Z",
      "closed_at": "2024-02-22T12:28:52Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1310/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1310",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1310",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:04.825983",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "Add a discussion about this #1446 ",
          "created_at": "2023-12-03T03:21:57Z"
        }
      ]
    },
    {
      "issue_number": 933,
      "title": "Remove unnecessary and sensitive files from repo",
      "body": "### Why\r\n\r\nThe repo is somewhat huge (65 MB), with most of its size coming from unnecessary files (e.g, datasets, trained models, environment pickles, etc).\r\n\r\nPlus, you should never distribute pickle files because untrusted pickle files can execute arbitrary code during deserialization, according to [the Python documentation](https://docs.python.org/3/library/pickle.html)etc.\r\n\r\n### How\r\n\r\nPurge unnecessary or sensitive files from the repo.\r\n\r\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository\r\n\r\nAlso configure `.gitignore` to prevent binaries (e.g, .tgz, .pickle, ...) from being accidentally committed. \r\n\r\n### What\r\n\r\nHere is a list of the largest files in repo\r\n\r\n![image](https://github.com/SuperDuperDB/superduperdb/assets/4982285/75c7f3df-24b9-41cc-a33f-cb2c9fafcb92)\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-09-13T10:25:50Z",
      "updated_at": "2024-02-16T13:02:58Z",
      "closed_at": "2024-02-16T13:02:58Z",
      "labels": [
        "📝 documentation",
        "📉 technical debt",
        "🔄 CI"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 7,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/933/reactions",
        "total_count": 4,
        "+1": 2,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 2,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/933",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/933",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:06.998272",
      "comments": [
        {
          "author": "blythed",
          "body": "Yes, these are artifacts from the `.git` history which we don't need (never needed).\r\n",
          "created_at": "2023-09-13T10:50:44Z"
        },
        {
          "author": "rec",
          "body": "I ran ` bfg -b 536k` on the repo and got the following rough results:\r\n\r\n```\r\n 67M\tsuperduperdb.ref\r\n 33M\tsuperduperdb.git\r\n```\r\n\r\nThe first one is a virgin clone, the second one is cleaned.\r\n\r\n`-b 536k` removes all blobs greater than 536k _which aren't in HEAD_: every blob above that size is some o",
          "created_at": "2023-09-13T12:43:00Z"
        },
        {
          "author": "fnikolai",
          "body": "@rec could you please send the respective sizes for virgin and cleaned?\r\n\r\n33M still sounds a lot to me for the size of the project.",
          "created_at": "2023-09-13T13:49:30Z"
        },
        {
          "author": "rec",
          "body": "> could you please send the respective sizes for virgin and cleaned?\r\n\r\nI'm confused: that's what those numbers are...?\r\n\r\nTry it yourself:\r\n\r\n```\r\ngit clone --mirror git@github.com:SuperDuperDB/superduperdb.git\r\ncd superduperdb.git\r\ndu -sh .\r\nbfg -b 536k\r\ngit reflog expire --expire=now --all && git",
          "created_at": "2023-09-14T07:14:40Z"
        },
        {
          "author": "fnikolai",
          "body": "By sizes, I meant the list (`sizes.txt`) for virgin and cleaned -- to ensure that no important files are being deleted.\r\n\r\nHere they are:\r\n\r\n[virgin.txt](https://github.com/SuperDuperDB/superduperdb/files/12606757/virgin.txt)\r\n\r\n[cleaned.txt](https://github.com/SuperDuperDB/superduperdb/files/126067",
          "created_at": "2023-09-14T08:52:15Z"
        }
      ]
    },
    {
      "issue_number": 1605,
      "title": "[MISC] Move logic of self-hosted vector-search and vector-search into same framework.",
      "body": "Currently if we have self-hosted vector-search, we have custom logic which reroutes the requests \r\nto the databackend. We should extract this logic to bring this inline with the rest of the vector-searcher code.\r\n\r\nThis would make the developer contract much clearer.\r\n\r\nFor example, instead we could have:\r\n\r\n```\r\n|_backends\r\n  |_mongodb\r\n    |_vector_searcher.py\r\n       |_MongoSearcher\r\n```\r\n\r\n```python\r\nfrom superduperdb import VectorIndex\r\n\r\nclass MongoAtlasVectorSearcher(BaseVectorSearcher):\r\n    def __init__(self, uri, index_name, collection, key):\r\n        self.conn = ... # connect with URI\r\n        self.index_name = index_name\r\n        self.collection = collection\r\n        self.key = key      # the key to index holding vectors\r\n\r\n        if not self._check_exists():\r\n            self._create_index()\r\n\r\n    @staticmethod\r\n    def from_component(uri, vector_index: VectorIndex):\r\n        q = vector_index.indexing_listener.select\r\n        c = q.table_or_collection.identifier\r\n        outputs = vector_index.indexing_listener.outputs      # the path to the outputs field\r\n        return MongoSearcher(uri, index_name=vector_index.identifier, collection=c, key=outputs)\r\n   \r\n    def add(self, items):\r\n        pass       # not necessary since already there\r\n\r\n    def delete(self, items):\r\n        pass        # same thing\r\n\r\n    def _check_exists(self):\r\n        # copy the logic from current databackend\r\n        ...\r\n\r\n    def _create_index(self):\r\n        # copy the logic from the current databackend\r\n        ...\r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-26T14:04:34Z",
      "updated_at": "2024-02-16T11:45:12Z",
      "closed_at": "2024-01-02T11:03:36Z",
      "labels": [
        "refactoring"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1605/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1605",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1605",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:07.190285",
      "comments": [
        {
          "author": "kartik4949",
          "body": "This completely make sense!\r\nIm on it\r\n@blythed where should we add this file? \r\n",
          "created_at": "2023-12-27T18:37:08Z"
        },
        {
          "author": "blythed",
          "body": "> This completely make sense! Im on it @blythed where should we add this file?\r\n\r\nWe should add these searcher files to the `vector_search` subpackage.",
          "created_at": "2023-12-29T15:00:04Z"
        }
      ]
    },
    {
      "issue_number": 1364,
      "title": "Add docker-compose option for `ray`",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-22T09:53:34Z",
      "updated_at": "2024-02-16T11:37:27Z",
      "closed_at": "2024-02-16T11:37:27Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1364/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1364",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1364",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:07.408339",
      "comments": []
    },
    {
      "issue_number": 1359,
      "title": "Refactor model.predict to support `ray` compute",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-22T09:50:37Z",
      "updated_at": "2024-02-06T15:25:44Z",
      "closed_at": "2024-02-06T15:25:44Z",
      "labels": [
        "🚀 feature request",
        "📉 technical debt"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1359/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1359",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1359",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:07.408366",
      "comments": []
    },
    {
      "issue_number": 1488,
      "title": "ClickHouse use-case document and demo",
      "body": "link to: https://github.com/SuperDuperDB/superduperdb/issues/1471",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2023-12-06T07:56:28Z",
      "updated_at": "2024-02-01T02:09:11Z",
      "closed_at": "2024-02-01T02:09:11Z",
      "labels": [
        "help wanted",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1488/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1488",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1488",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:07.408377",
      "comments": []
    },
    {
      "issue_number": 1393,
      "title": "Adapt Multi-Modal Use-Case Functionality with Snowflake",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T14:02:58Z",
      "updated_at": "2024-01-02T10:02:38Z",
      "closed_at": "2024-01-02T10:02:38Z",
      "labels": [
        "📝 documentation",
        "🧩 use case"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1393/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fazlulkarimweb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1393",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1393",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.148494",
      "comments": []
    },
    {
      "issue_number": 1394,
      "title": "Adapt Multi-Modal Use-Case Functionality for a range of databases",
      "body": "- [ ] PostgreSQL\n- [ ] Clickhouse\n- [x] Snowflake\n- [x] MySQL\n- [x] SQLite\n- [x] DuckDB\n- [x] BigQuery",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T14:03:11Z",
      "updated_at": "2024-01-02T09:22:23Z",
      "closed_at": "2024-01-02T09:22:23Z",
      "labels": [
        "📝 documentation",
        "🧩 use case"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1394/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1394",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1394",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.148521",
      "comments": [
        {
          "author": "blythed",
          "body": "@fnikolai to re-test to check #1496.",
          "created_at": "2023-12-15T14:12:39Z"
        },
        {
          "author": "blythed",
          "body": "PostgreSQL depends on #1558 so closing for now.",
          "created_at": "2024-01-02T09:22:23Z"
        }
      ]
    },
    {
      "issue_number": 1510,
      "title": "Discovery/ discussion issue: implementation inference/ training self-hosted LLM",
      "body": "To discuss and plan the implementation of inference of LLMs on `deepspeed` and `ray`.\r\n\r\nPursue this discussion further: https://github.com/SuperDuperDB/superduperdb/discussions/1235\r\n\r\nDiscusison points:\r\n\r\n- Mapping data to `ray` dataset or otherwise etc..\r\n- Different tools for inference and training: vLLM/ ray + deepspeed?",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-12-08T14:08:02Z",
      "updated_at": "2023-12-30T09:00:16Z",
      "closed_at": "2023-12-30T09:00:16Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1510/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "jieguangzhou",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1510",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1510",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.466140",
      "comments": []
    },
    {
      "issue_number": 1358,
      "title": "Implement `ray` compute interface",
      "body": "Fix issues with serialization, wrappers, and decorators so that `ray.remote` works with the `db.compute` interface.\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-22T09:50:34Z",
      "updated_at": "2023-12-17T20:02:29Z",
      "closed_at": "2023-12-17T20:02:29Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1358/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai",
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1358",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1358",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.466260",
      "comments": [
        {
          "author": "blythed",
          "body": "Solved by #1526 ",
          "created_at": "2023-12-17T20:02:29Z"
        }
      ]
    },
    {
      "issue_number": 1508,
      "title": "Create query validation feature for ibis",
      "body": "Create a query validation feature in datalayer\r\n\r\ndb.validate(query)\r\n\r\nit should be valid for ibis and should throw error when its not valid",
      "state": "closed",
      "author": "kartik4949",
      "author_type": "User",
      "created_at": "2023-12-08T12:40:07Z",
      "updated_at": "2023-12-08T20:47:42Z",
      "closed_at": "2023-12-08T13:58:31Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1508/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kartik4949"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1508",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1508",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.654890",
      "comments": [
        {
          "author": "Jamim",
          "body": "Hello @blythed,\r\nI assume this issue is closed by mistake since [a corresponding PR](https://github.com/SuperDuperDB/superduperdb/pull/1507) is not merged yet.",
          "created_at": "2023-12-08T20:47:42Z"
        }
      ]
    },
    {
      "issue_number": 1395,
      "title": "Adapt Multi-Modal Use-Case Functionality with SQLite Database",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T14:03:45Z",
      "updated_at": "2023-12-08T13:58:54Z",
      "closed_at": "2023-12-08T13:58:54Z",
      "labels": [
        "📝 documentation",
        "🧩 use case"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1395/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1395",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1395",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.891000",
      "comments": []
    },
    {
      "issue_number": 1434,
      "title": "Enforce serial execution of tests",
      "body": "since in our fixtures,\r\ni.e. 'database_encoders...' we remove collections at the end this creates a race condition sometimes,\r\n\r\nexample,\r\ntest_dask, test_cdc...\r\n\r\nThink on serialising the test cases...",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-30T18:36:27Z",
      "updated_at": "2023-12-08T13:58:49Z",
      "closed_at": "2023-12-08T13:58:49Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1434/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai",
        "jieguangzhou",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1434",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1434",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:09.891024",
      "comments": [
        {
          "author": "jieguangzhou",
          "body": "Yes, That makes it simple. And It is currently executed in series.\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb/blob/d9f840529d2c1f350cb1e45ab4944e7ad83a01b9/Makefile#L114-L122\r\n",
          "created_at": "2023-12-01T02:27:00Z"
        }
      ]
    },
    {
      "issue_number": 1331,
      "title": "Changes to documentation",
      "body": "- [ ] FAQ section\n- [ ] Concepts/ components section\n- [ ] Setup section\n- [ ] Redo walkthrough section\n- [ ] ...",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-17T12:53:44Z",
      "updated_at": "2023-12-08T13:58:39Z",
      "closed_at": "2023-12-08T13:58:38Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1331/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1331",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1331",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:10.142451",
      "comments": []
    },
    {
      "issue_number": 1387,
      "title": "Use-case: \"professional sandbox\"",
      "body": "Walkthrough notebook using `CFG.production`.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T13:08:53Z",
      "updated_at": "2023-12-08T13:58:18Z",
      "closed_at": "2023-12-08T13:58:18Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1387/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1387",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1387",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:10.142472",
      "comments": []
    },
    {
      "issue_number": 1388,
      "title": "Redeploy question-the-docs backend",
      "body": "Using the latest documentation redeploy the backend for \"question-the-docs\"",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T13:10:16Z",
      "updated_at": "2023-12-06T09:27:05Z",
      "closed_at": "2023-12-06T09:27:05Z",
      "labels": [
        "API and software design",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1388/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fazlulkarimweb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1388",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1388",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:10.142485",
      "comments": [
        {
          "author": "blythed",
          "body": "@thejumpman2323 to support",
          "created_at": "2023-11-24T13:10:29Z"
        }
      ]
    },
    {
      "issue_number": 1152,
      "title": "Why, how, what blogpost SuperDuperDB",
      "body": "Writing a blog that explains why SuperDuperDB exists.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-23T14:30:17Z",
      "updated_at": "2023-12-05T10:11:31Z",
      "closed_at": "2023-12-05T10:11:30Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1152/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1152",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1152",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.035255",
      "comments": [
        {
          "author": "blythed",
          "body": "https://www.notion.so/English-4fc9a8f62196457f8fce4cc558678d63",
          "created_at": "2023-10-23T14:30:40Z"
        },
        {
          "author": "blythed",
          "body": "https://www.notion.so/superduperdb/SuperDuperDB-bringing-AI-to-the-database-6c472dd91876429f968c968056d16aaa",
          "created_at": "2023-11-06T08:40:48Z"
        }
      ]
    },
    {
      "issue_number": 1259,
      "title": "Support the new version of OpenAI",
      "body": "### Why\r\n\r\nThe [OpenAI](https://github.com/openai/openai-python) is updated for the new features, we need to update the code for this.\r\n\r\n### How\r\n\r\n- [x] #1261\r\n\r\n### What\r\n\r\n- [ ]\r\n",
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2023-11-09T06:58:08Z",
      "updated_at": "2023-11-30T09:55:47Z",
      "closed_at": "2023-11-30T09:55:47Z",
      "labels": [
        "🔍 discovery",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1259/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1259",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1259",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.225224",
      "comments": [
        {
          "author": "fnikolai",
          "body": "Plz make sure that notebooks work fine with the new openai version.\r\nFor example, `question_the_docs` has a pinned openai version to `v0.27.6`.\r\n\r\nhttps://github.com/fnikolai/superduperdb/blob/main/examples/question_the_docs.ipynb",
          "created_at": "2023-11-13T23:22:05Z"
        },
        {
          "author": "jieguangzhou",
          "body": "OK, I will fix this",
          "created_at": "2023-11-27T02:55:59Z"
        },
        {
          "author": "jieguangzhou",
          "body": "Thanks @fnikolai fixed some notebook about the version of `openai`, and II found this elsewhere too\r\n- #1431 \r\n- #1421 ",
          "created_at": "2023-11-30T09:04:11Z"
        }
      ]
    },
    {
      "issue_number": 626,
      "title": "Use Dependabot to manage our dependencies",
      "body": "### Why\n\nWe do not need to maintain a GitHub Action that checks that the latest version of our dependencies are compatible with our package.\n\n### How\n\nhttps://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates\n\n### What\n\n- [ ] Determine with team how regular ('noisy') we want our updates to be\r\n- [ ] Add Dependabot to our repository\r\n",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-04T16:13:16Z",
      "updated_at": "2023-11-30T07:49:47Z",
      "closed_at": "2023-11-30T07:49:47Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/626/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kislerdm"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/626",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/626",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.406531",
      "comments": []
    },
    {
      "issue_number": 1389,
      "title": "Reorganize Community Apps Repository by Refactoring the Structure and Introducing Sub-Modules ",
      "body": "Reorganize Community Apps Repository: Refactor the structure and introduce sub-modules for improved organization and maintainability within the community-apps repository. This aims to enhance code modularity and streamline development processes.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-24T13:11:43Z",
      "updated_at": "2023-11-28T09:55:13Z",
      "closed_at": "2023-11-28T09:55:12Z",
      "labels": [
        "idea",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1389/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1389",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1389",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.406559",
      "comments": [
        {
          "author": "fnikolai",
          "body": "Community repo organized as:\n* Notebooks\n* Apps\n\nWhat exists in that repo is not being officially supported by us. It only serve as \"guidelines\".\n\nOnly components that exist with the `examples` are officially supported.\n\nHowever, the demo notebooks will have mounted both `examples` and `contrib` fol",
          "created_at": "2023-11-28T09:55:12Z"
        }
      ]
    },
    {
      "issue_number": 1096,
      "title": "Content for MongoDB developer centre",
      "body": "Placeholder, until decided what to produce.\n\n- [ ] review content of other projects and companies to get context\n- [ ] plan fully fledged python tutorial adapting a use-case we already have\n- [ ] create draft in markdown\n- [ ] convert draft to google docs\n- [ ] ...\n\nTo work with Shubham.\n\n@thgnw to advise.\n\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-13T14:09:25Z",
      "updated_at": "2023-11-27T20:16:21Z",
      "closed_at": "2023-11-27T20:16:21Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1096/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1096",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1096",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.639541",
      "comments": [
        {
          "author": "blythed",
          "body": "@thgnw \n\nhttps://docs.google.com/document/d/1XxqXEDXrFLcU6ND7AMiBQWZDLtjuryKmpHsLvIdPcaw/edit#heading=h.4wdae3fd7bbt",
          "created_at": "2023-10-17T09:17:35Z"
        }
      ]
    },
    {
      "issue_number": 1404,
      "title": "Repair, Update, and Clean `superduperdb.cli.serve`",
      "body": null,
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-25T13:31:25Z",
      "updated_at": "2023-11-27T19:00:21Z",
      "closed_at": "2023-11-27T19:00:21Z",
      "labels": [
        "📉 technical debt",
        "Enhancement"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1404/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1404",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1404",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.849835",
      "comments": []
    },
    {
      "issue_number": 1407,
      "title": "Deprecate `CFG.mode` in favour of `t.Optional` in `CFG.cluster`",
      "body": null,
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-25T13:31:35Z",
      "updated_at": "2023-11-27T18:59:23Z",
      "closed_at": "2023-11-27T18:59:23Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1407/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1407",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1407",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.849857",
      "comments": []
    },
    {
      "issue_number": 1406,
      "title": "Implement Local Threaded Cluster for Easy Debugging",
      "body": "A local cluster which can be used for create a easy debuggable setup for users, \r\n\r\n```python\r\nfrom superduperdb.server.cluster import local_cluster\r\n\r\nclient = local_cluster()\r\n\r\n# do some work\r\n\r\nclient.close()\r\n```",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-25T13:31:31Z",
      "updated_at": "2023-11-27T18:58:43Z",
      "closed_at": "2023-11-27T18:58:43Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1406/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1406",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1406",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.849863",
      "comments": []
    },
    {
      "issue_number": 1219,
      "title": "[DOC]: Request for Implementation of a Code of Conduct",
      "body": "### What's wrong?\n\nI would like to request the implementation of a Code of Conduct for this project. Code of Conduct is essential in fostering a welcoming and inclusive community environment and is **widely adopted in open-source projects and organizations for good reason.** \r\n\r\nHaving a Code of Conduct offers several benefits:\r\n\r\n**Inclusivity:** It welcomes all participants regardless of their background, identity, or experience.\r\n**Harassment Prevention:** It safeguards community members' well-being by preventing harassment.\r\n**Conflict Resolution:** It provides a structured way to handle disputes or violations.\r\n**Project Quality:** It attracts talented contributors and elevates collaboration, enhancing the project's quality.\r\n**Alignment with Best Practices:** It aligns the project with industry standards by following widely adopted practices.\r\n\r\nImplementing a Code of Conduct will help create a more positive and productive community for our project. Since we have more Slack members and are creating a community, it is high time to adopt it. It serves as a valuable resource for resolving conflicts or addressing violations when they arise.\r\n\r\nAdditionally, many individuals rely on Snyk to assess Python packages for production use. Various factors, including the existence of a **Code of Conduct**, often influence the project's maturity score.\r\n\r\nHere is the Snyk link for SuperDuperDB: [Click Here](https://snyk.io/advisor/python/superduperdb)\r\n\r\n<img width=\"449\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/26186000/c57d064f-89da-45a1-b3af-377df775b3f2\">\r\n\n\n### How could it be better?\n\nIn the project's base repository, we should create a file named `CODE_OF_CONDUCT.md`.\r\n\r\nContent: I propose that we adopt the whole content of the Rust Code of Conduct, giving credit to [this link](https://www.rust-lang.org/policies/code-of-conduct). Rust also adopted some parts of its Code of Conduct from Node.js, with credit. Rust is one of the world's most beloved open source projects, and they are the best at maintaining community. A Code of Conduct adopted from the Rust Code of Conduct, with credit, will not only generate more trust, but it will also provide us with a solid, battle-tested Code of Conduct. \r\n\r\nWe can later add, update, or recreate this entire part based on the future scenario and our previous learning.",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-10-31T17:46:01Z",
      "updated_at": "2023-11-27T16:09:36Z",
      "closed_at": "2023-11-27T16:09:35Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1219/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fazlulkarimweb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1219",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1219",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:12.849870",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": "Closing the issue as this is implemented here: #1374 ",
          "created_at": "2023-11-27T16:09:36Z"
        }
      ]
    },
    {
      "issue_number": 1154,
      "title": "[DOC]: Add versions in the documentation",
      "body": "### What's wrong?\n\nFor the moment all the documentation interface is build around the `latest` version.\r\n```\r\nhttps://docs.superduperdb.com/docs/docs/intro.html\r\n```\r\n\r\n\n\n### How could it be better?\n\nWe need to fix it to support previous versions. In this case the URL should be:\r\n\r\n```\r\nhttps://docs.superduperdb.com/docs/${VERSION}/usage/db\r\n```\r\n\r\nor better, without the `docs` parameters (it's not needed since it's on the subdomain).\r\n\r\n```\r\nhttps://docs.superduperdb.com/${VERSION}/usage/db\r\n```\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-24T10:08:12Z",
      "updated_at": "2023-11-27T15:44:53Z",
      "closed_at": "2023-11-27T15:44:16Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1154/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai",
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1154",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1154",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.098835",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": "We should explore this idea from our major release version 0.1. For now, we can encourage the user to keep an eye on our [changelog](https://github.com/SuperDuperDB/superduperdb/blob/main/CHANGELOG.md)\r\n\r\nBut this should be definitely addressed after releasing v0.1.",
          "created_at": "2023-11-27T15:44:16Z"
        }
      ]
    },
    {
      "issue_number": 1159,
      "title": "[DOC]: Broken link",
      "body": "### What's wrong?\n\nhttps://docs.superduperdb.com/docs/docs/faq\r\n\r\npoints to \r\n\r\nhttps://docs.superduperdb.com/docs/use_cases/items/question-the-docs\r\n\r\nwhich is broken.\n\n### How could it be better?\n\n_No response_",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-25T08:51:51Z",
      "updated_at": "2023-11-27T15:39:26Z",
      "closed_at": "2023-11-27T15:39:04Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1159/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1159",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1159",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.324537",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": "The link is fixed in the latest update. Please see at: [https://docs.superduperdb.com/docs/docs/get_started/faq](https://docs.superduperdb.com/docs/docs/get_started/faq)",
          "created_at": "2023-11-27T15:39:04Z"
        }
      ]
    },
    {
      "issue_number": 719,
      "title": "[FEATURE REQUEST]: Support streaming for LLM APIs",
      "body": "### Contact Details\r\n\r\nnick@superduperdb.com\r\n\r\n### Feature Description\r\n\r\nWe should add streaming support for all LLM APIs. See the [following](https://blog.langchain.dev/streaming-support-in-langchain/) promotional material from `langchain` for some details. \r\n\r\n### Use Case Description\r\n\r\nImprove UX - 'perceived latency' vs 'actual latency'.\r\n\r\n### Organization\r\n\r\nAll users\r\n\r\n### Who are the stake-holders?\r\n\r\nAny users interacting with LLM APIs.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-18T08:29:34Z",
      "updated_at": "2023-11-27T15:34:02Z",
      "closed_at": "2023-11-27T15:34:01Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/719/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/719",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/719",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.552394",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": "As per the recent plan, this would be further explored in the self-hosted LLM API solution. ",
          "created_at": "2023-11-27T15:34:01Z"
        }
      ]
    },
    {
      "issue_number": 841,
      "title": "Extend AI: [STRETCH] Extensibility pattern (generic API - consider `ray[serve]`)",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-09-01T08:15:13Z",
      "updated_at": "2023-11-27T15:28:38Z",
      "closed_at": "2023-11-20T18:16:43Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/841/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/841",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/841",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.787030",
      "comments": []
    },
    {
      "issue_number": 849,
      "title": "Extend AI: planning and brainstorming",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-09-01T13:33:37Z",
      "updated_at": "2023-11-27T15:19:56Z",
      "closed_at": "2023-09-21T12:48:11Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/849/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/849",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/849",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.787054",
      "comments": [
        {
          "author": "nenb",
          "body": "## Background\r\n\r\nWe use the [method overriding](https://en.wikipedia.org/wiki/Method_overriding) pattern for integrating AI extensions. For example, for the current `OpenAI` extension, we subclass the `PredictMixin` class and override the `_predict` method.\r\n\r\nAt present, all types of models _(LLMs,",
          "created_at": "2023-09-04T11:13:03Z"
        },
        {
          "author": "blythed",
          "body": "So an LLM is really just a transformer. So we should be careful about creating something “specific to LLMs” when really nothing is. Everything that applies to an LLM, equally applies to an arbitrary RNN, transformer, or other autogressive models, for example, used in finance",
          "created_at": "2023-09-04T13:07:33Z"
        }
      ]
    },
    {
      "issue_number": 808,
      "title": "[DOC]: Versioning support in documentation",
      "body": "### What's wrong?\n\nThere is no version numbers used to indicate what is supported in which drop.\n\n### How could it be better?\n\nBy associating version number for major and minor enhancements and mention these clearly in the documentation.",
      "state": "closed",
      "author": "palak18j",
      "author_type": "User",
      "created_at": "2023-08-29T11:30:07Z",
      "updated_at": "2023-11-27T15:12:24Z",
      "closed_at": "2023-11-27T15:12:23Z",
      "labels": [
        "idea"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/808/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/808",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/808",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:13.988265",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": "For now, we mention all the things in our changelog [here](https://github.com/SuperDuperDB/superduperdb/blob/main/CHANGELOG.md)\r\n\r\nWe are planning to mention it in our documentation from our v0.01. But thanks for the idea. ",
          "created_at": "2023-11-27T15:12:23Z"
        }
      ]
    },
    {
      "issue_number": 1328,
      "title": "[DOC]: Restructure the menu ",
      "body": "### What's wrong?\n\nThe biggest problem with our doc is this thing. The leftmost side is pretty unorganized.\r\n\r\n<img width=\"217\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/26186000/32e8dbe1-761a-4307-8a09-42056f0c891e\">\r\n\n\n### How could it be better?\n\nWe have at best to spend 1-4 words for the left heading. We have used many. It seems disorganized. Every similar company follows this guideline. Besides, we need to establish a drawer as well.\r\n\r\nLike them. \r\n\r\nFor this, we have to generalize our headings like other companies. People are used to reading this type of documentation. We should not reinvent the wheel and try to be as generalized as possible, in the case of heading. \r\n\r\n<img width=\"224\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/26186000/88f2ae82-266c-4f9b-8d5d-7f8a233f45d5\">\r\n\r\n<img width=\"203\" alt=\"image\" src=\"https://github.com/SuperDuperDB/superduperdb/assets/26186000/9af89cea-b360-4b7c-af82-f991ec531149\">\r\n\r\n\r\n",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-11-17T11:48:09Z",
      "updated_at": "2023-11-27T15:03:41Z",
      "closed_at": "2023-11-27T15:03:01Z",
      "labels": [
        "📝 documentation",
        "idea"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1328/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fazlulkarimweb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1328",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1328",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:14.194730",
      "comments": [
        {
          "author": "blythed",
          "body": "Can we add extra detail -- what is the exact menu structure we want, what is missing etc.",
          "created_at": "2023-11-17T12:10:44Z"
        },
        {
          "author": "fazlulkarimweb",
          "body": " > what is missing \r\n\r\nIn the long run, most of the critical things are discussed in the docs. As we are preparing for launching, we should focus on organizing first rather than adding.\r\n\r\n> what is the exact menu structure we want\r\n\r\nLet's divide it into 2 parts. The upper part and the lower part o",
          "created_at": "2023-11-17T12:33:57Z"
        },
        {
          "author": "fazlulkarimweb",
          "body": "Closed by #1074 ",
          "created_at": "2023-11-27T15:03:02Z"
        }
      ]
    },
    {
      "issue_number": 1330,
      "title": "[DOC]: Improving the front-end design of the documentation website as much as possible",
      "body": "### What's wrong?\n\nThe current design of the documentation site is satisfactory, but we should conduct a more thorough inspection to identify areas where improvements can be made to enhance the overall design. \n\n### How could it be better?\n\nFrom a front-end design perspective, we should explore opportunities to enhance its visual appeal. I will conduct a thorough inspection from top to bottom and suggest redesigning components that align with our open-source yet professional image.\r\n\r\nLet's discuss it.",
      "state": "closed",
      "author": "fazlulkarimweb",
      "author_type": "User",
      "created_at": "2023-11-17T12:17:55Z",
      "updated_at": "2023-11-27T14:49:54Z",
      "closed_at": "2023-11-27T14:49:54Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1330/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fazlulkarimweb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1330",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1330",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:14.391593",
      "comments": [
        {
          "author": "fazlulkarimweb",
          "body": " The new revamped version as of 27 November 2023 is here - https://docs.superduperdb.com/",
          "created_at": "2023-11-27T14:49:54Z"
        }
      ]
    },
    {
      "issue_number": 1024,
      "title": "[DOC]: make snippets standalone",
      "body": "### What's wrong?\n\nFor the moment snippets are not directly executable.\n\n### How could it be better?\n\nMake them executable.\r\n\r\nEither include all the code to make them executable, or separate them into cells.",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-03T13:07:51Z",
      "updated_at": "2023-11-24T10:54:09Z",
      "closed_at": "2023-11-24T10:54:09Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1024/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1024",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1024",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:14.650443",
      "comments": []
    },
    {
      "issue_number": 1130,
      "title": "User should be able to define a custom serializer for models",
      "body": "lets say user have a model \r\n```\r\nclass Model:\r\n.....\r\n```\r\nUser wishes to serialize and deserialise this model according to his needs with some custom logic.\r\n\r\nUser should be able to define to Serializer class and add it to the database.\r\n\r\n\r\nExample:\r\n\r\n```\r\nclass CustomSerializer:\r\n    def encode(object, info):\r\n        return bytes\r\n    def decode(bytes, info):\r\n        return object\r\n\r\n\r\ndb.add(Serializer(identifer='some-name',  serialiser = CustomSerializer()))\r\n```\r\n\r\n\r\nNow, User can use this to serialize the a model with SuperDuperDB\r\n\r\n```\r\nmodel = Model(identifier=..., serializer='some-name', object=object)\r\ndb.add(model)\r\n```",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-18T09:59:34Z",
      "updated_at": "2023-11-20T18:19:00Z",
      "closed_at": "2023-11-20T18:19:00Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1130/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1130",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1130",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:16.389470",
      "comments": []
    },
    {
      "issue_number": 1039,
      "title": "[FEATURE REQUEST]: Support integration with Langchain",
      "body": "### Contact Details\n\nrachitt01@gmail.com\n\n### Feature Description\n\nAdding SuperDuperDB as a [Langchain Vectorstore Integration](https://python.langchain.com/docs/integrations/vectorstores).\r\n\r\nSuperDuperDB can be used as the data connection module in LangChain. LangChain's data connection module is designed to interface with application-specific data. SuperDuperDB, with its ability to apply AI and machine learning directly to the datastore, fits perfectly into this role.\n\n### Use Case Description\n\n1. Enhanced Developer Experience: By integrating SuperDuperDB with LangChain, developers can leverage the power of both platforms in a unified environment. This can simplify the process of building applications that require both AI and database functionality, reducing the learning curve and development time.\r\n\r\n2. Expanded Access to LLMs: SuperDuperDB's AI functionality combined with LangChain's ability to interact with various Large Language Models (LLMs) can provide developers with a wider range of AI capabilities. This can increase the adoption of both platforms as developers can use the best LLM for their specific use case without needing to make core SDK changes.\r\n\r\n3. Accelerated Go-to-Market (GTM) and Adoption: The integration of SuperDuperDB and LangChain can streamline the development process, enabling faster prototyping and deployment of applications. This can accelerate the GTM process and increase user adoption as developers can quickly deliver value to their users.\r\n\r\n4. Rapid Proof-of-Concept (POC) Development: The combined capabilities of SuperDuperDB and LangChain can enable developers to quickly build and test POCs. This can speed up the innovation process and help developers validate their ideas faster.\r\n\r\n5. Unified Data Management: SuperDuperDB's ability to handle AI outputs as data allows for a unified data management system where AI outputs can be used as input features for downstream models.\r\n\r\n6. Scalability: SuperDuperDB's support for task parallelization, client-server architecture, and change-data capture (CDC) can help scale LangChain applications.\r\n\r\n7. Vector Search: SuperDuperDB's support for vector-search can be leveraged in LangChain applications for tasks like semantic search.\n\n### Organization\n\nContributing out of interest:\r\n\r\n1. Company: If your company is developing AI-powered applications, both SuperDuperDB and LangChain can be extremely useful. SuperDuperDB can be used to manage your data and apply AI models directly to your datastore, while LangChain can be used to work with language models and construct sequences of calls (chains). This can help your company build powerful, scalable, and flexible AI-powered applications.\r\n\r\n2. App: If you're developing an app that requires AI functionality, SuperDuperDB and LangChain can be integrated into your app to provide this functionality. For example, you could use SuperDuperDB to manage your app's data and LangChain to process user inputs using language models. This could enable your app to provide intelligent responses to user inputs, perform semantic search, generate insights from data, and more.\r\n\r\n3. Experimentation: If you're experimenting with AI and machine learning, SuperDuperDB and LangChain can be valuable tools. You can use SuperDuperDB to manage your experimental data and apply AI models to it, and you can use LangChain to experiment with different language models and chains. This can help you explore the capabilities of AI and machine learning in a flexible and scalable environment.\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "rachittshah",
      "author_type": "User",
      "created_at": "2023-10-05T01:40:12Z",
      "updated_at": "2023-11-20T18:18:57Z",
      "closed_at": "2023-11-20T18:18:57Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1039/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1039",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1039",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:16.389495",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "Hi, @rachittshah \r\nThanks for this great write up on LangChain, much appreciated!\r\n\r\nWe earlier had support for LangChain, but after adding similar features in superduperdb, now we have good overlap between LangChain and SuperDuperDB\r\n\r\n@blythed Could expand this much better :)",
          "created_at": "2023-10-05T06:37:28Z"
        },
        {
          "author": "rachittshah",
          "body": "Hi @thejumpman2323  and @blythed \r\n\r\nMakes total sense, I was thinking more from a DevEx POV, if a user wants to use superduperdb with Langchain, it would make it alot more easily+open support for alot more LLMs to be access.\r\n\r\nWas just an idea, but would look at other issues to start contributing!",
          "created_at": "2023-10-05T15:12:02Z"
        },
        {
          "author": "thejumpman2323",
          "body": "Great! @rachittshah!\r\nFor starters we are looking contributions in extending unit test cases and possible cool new use case!\r\n\r\nLet us know which one do you prefer starting with. :)\r\nThanks",
          "created_at": "2023-10-05T17:28:23Z"
        },
        {
          "author": "rachittshah",
          "body": "I'd love to contribute to new usecases! I've joined your Slack, would ping you there",
          "created_at": "2023-10-05T17:31:13Z"
        }
      ]
    },
    {
      "issue_number": 1037,
      "title": "[FEATURE REQUEST]: prevent commits with suspected password leaking",
      "body": "### Contact Details\n\nfotis@superduperdb.com\n\n### Feature Description\n\nCreate a github action that goes through the pull requests and reject them if they contain passwords or credentials.\n\n### Use Case Description\n\nsecurity in code development\n\n### Organization\n\nsuperduper\n\n### Who are the stake-holders?\n\ndevelopers",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-04T21:33:58Z",
      "updated_at": "2023-11-20T18:18:57Z",
      "closed_at": "2023-11-20T18:18:57Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1037/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1037",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1037",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:16.595129",
      "comments": []
    },
    {
      "issue_number": 994,
      "title": "CUDA tests aren't being run by CI or developers",
      "body": "See https://github.com/SuperDuperDB/superduperdb/issues/989\r\n\r\nMy machine has this:\r\n\r\n```\r\nApple M1 Max:\r\n\r\n  Chipset Model:\tApple M1 Max\r\n  Type:\tGPU\r\n  Bus:\tBuilt-In\r\n  Total Number of Cores:\t24\r\n  Vendor:\tApple (0x106b)\r\n  Metal Family:\tSupported, Metal GPUFamily Apple 7\r\n```\r\n\r\nbut those tests do not run.\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-25T10:05:53Z",
      "updated_at": "2023-11-20T18:18:55Z",
      "closed_at": "2023-11-20T18:18:55Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/994/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/994",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/994",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:16.595151",
      "comments": [
        {
          "author": "nenb",
          "body": "GitHub actions do not currently provide a GPU option, although it is in the [backlog](https://github.com/github/roadmap/issues/505) in their roadmap.\r\n\r\nCUDA + `torch` is only available on Linux and Windows machines - see the interactive table [here](https://pytorch.org/) (search for 'install pytorc",
          "created_at": "2023-09-25T11:16:53Z"
        }
      ]
    },
    {
      "issue_number": 984,
      "title": "Usecase: txt2img",
      "body": "**Context:**\r\n\r\nAs we venture into expanding the domains covered by our use-cases, a trending and highly sought-after domain is text-to-image (txt2img) generation. \r\n\r\n**Proposal:**\r\n\r\nWe create a comprehensive use-case notebook (similar to the others) detailing:\r\n\r\nHow to seamlessly integrate the Stable Diffusion Model (a prominent model in the txt2img generation domain) with our platform.\r\nInterface the model with SuperDuperDB to ensure efficient storage and retrieval.\r\nStore both the input textual prompts and the resulting generated images in the DB.\r\n",
      "state": "closed",
      "author": "StefosGeo",
      "author_type": "User",
      "created_at": "2023-09-22T16:18:42Z",
      "updated_at": "2023-11-20T18:16:49Z",
      "closed_at": "2023-11-20T18:16:49Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/984/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/984",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/984",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:16.885865",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "Hi @StefosGeo,\r\nThis is an amazing proposal!\r\nLets create a PR with this notebook?\r\n\r\nLooking forward to a pr on the above!\r\nThanks",
          "created_at": "2023-10-01T17:25:44Z"
        }
      ]
    },
    {
      "issue_number": 979,
      "title": "Bug: Listener class should not have identifier as input in dataclass",
      "body": "Listener class has an identifier option which is used by user, it crashes the Listener class \n\nbecause identifier is overriden in __post__init__ with model and key combination",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-20T17:45:02Z",
      "updated_at": "2023-11-20T18:16:48Z",
      "closed_at": "2023-11-20T18:16:48Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/979/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/979",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/979",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.113040",
      "comments": [
        {
          "author": "blythed",
          "body": "To investigate the possibility of hiding certain attributes.",
          "created_at": "2023-10-03T15:41:45Z"
        }
      ]
    },
    {
      "issue_number": 972,
      "title": "QTD source url extract algorithm caveat",
      "body": "suppose we have a window slice like\r\n\r\n```\r\n1 some text\r\n2 some more text\r\n3 some more more text\r\n4 # A section title starts here.\r\n```\r\n\r\nIf you have a window text like above you would have extracted \r\n#  A section title starts here. as section title \r\nbut that is not the case the title for line 1 to 3 is probably from previous window text.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-19T11:23:44Z",
      "updated_at": "2023-11-20T18:16:48Z",
      "closed_at": "2023-11-20T18:16:48Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/972/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/972",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/972",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.339358",
      "comments": []
    },
    {
      "issue_number": 962,
      "title": "Add a Changelog",
      "body": "**What:** We should produce a high-level summary of changes for each release (rather than a detailed `git` log) for a better user experience.\r\n\r\n**Why:** So that users can quickly understand if a new release is relevant to them. See [here](https://keepachangelog.com/en/1.0.0/) for further details\r\n\r\n**How:** \r\n- Decide on some basic conventions for how to produce the Changelog and add them to the Wiki (or some public place). \r\n- Create a system for assigning someone to produce the Changelog on each release.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-09-15T15:12:23Z",
      "updated_at": "2023-11-20T18:16:48Z",
      "closed_at": "2023-11-20T18:16:48Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/962/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "kislerdm",
        "thgnw"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/962",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/962",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.339385",
      "comments": [
        {
          "author": "fnikolai",
          "body": "I 've found that the most convenient format includes:\r\n- Changed defaults / behaviours\r\n- New Features & Functionality\r\n- Bug Fixes\r\n\r\nHere is an example adapted for Superduper\r\n\r\n```\r\n# SuperDuperDB Changelog\r\n\r\n## Changes Since Last Release\r\n\r\n### Changed defaults / behaviours\r\n- Modified paths to",
          "created_at": "2023-09-15T16:55:15Z"
        },
        {
          "author": "nenb",
          "body": "Great suggestion! I propose that we adopt the above format from now on.",
          "created_at": "2023-09-18T18:49:03Z"
        },
        {
          "author": "blythed",
          "body": "This would require that we tag commits with [BUG], [FEATURE] etc.",
          "created_at": "2023-09-18T20:13:30Z"
        },
        {
          "author": "fnikolai",
          "body": "@blythed \r\n\r\nA simpler way is to have a CHANGELOG file on the root of the repo and update the changes before every commit.\r\n\r\nThe release will then just require copying the latest entries to the release changelog.",
          "created_at": "2023-09-19T14:43:27Z"
        },
        {
          "author": "kislerdm",
          "body": "Hey folks! I can recommend the [\"keep a changelog\" guidelines](https://keepachangelog.com/en/1.1.0/) (referenced by Nick in the issue's description), or its less strict [derivative](https://common-changelog.org/).\n\n## Pro\n\n- It highlights the key changes in a concise manner.\n- It motivates for [RDD ",
          "created_at": "2023-09-19T18:08:50Z"
        }
      ]
    },
    {
      "issue_number": 960,
      "title": "New superduperdb usecase Notebook",
      "body": "- [x] #977",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-15T14:22:57Z",
      "updated_at": "2023-11-20T18:16:47Z",
      "closed_at": "2023-11-20T18:16:47Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/960/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/960",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/960",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.545530",
      "comments": []
    },
    {
      "issue_number": 408,
      "title": "Usability and improve quality of core code",
      "body": "## Why? \r\n\r\nWe have a large amount of fairly fresh code, much of which is not covered by any unit test and is only partly documented.\r\n\r\nBefore launch, we need to review the core code for problems, document, add types, and increase test coverage.\r\n\r\n## How?\r\n\r\nEach Python file eventually needs to:\r\n\r\n* Be reviewed for errors and issues\r\n* Be documented (doc comments for functions, classes, members, methods, and parameters)\r\n* Have \"good\" typing (perfect typing is impractical)\r\n* Have \"good\" test coverage (see above)\r\n\r\n## What\r\n\r\nThe plan is to start with `superduperdb/core` and continue down from there.\r\n\r\nThe rough order is:\r\n\r\n* serialization\r\n* artifacts\r\n* containers\r\n* documents\r\n* ?\r\n\r\n\r\n## Sub-issues\r\n\r\n- [x] [Audit all \"type-ignores\", fix errors.](https://github.com/SuperDuperDB/superduperdb/issues/738)\r\n- [x] #773\r\n- [x] #774\n- [x] #780\r\n- [x] #801\r\n- [x] #961 \r\n- [x] #945",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-11T11:25:59Z",
      "updated_at": "2023-11-20T18:16:47Z",
      "closed_at": "2023-11-08T18:30:47Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/408/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/408",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/408",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.545554",
      "comments": [
        {
          "author": "nenb",
          "body": "I'm going to suggest also tracking `mypy`-related issues here as well. If this is not appropriate please move elsewhere.\r\n\r\nCurrent `mypy` issues:\r\n- [ ] #738 \r\n- [ ] #524 \r\n- [ ] #807",
          "created_at": "2023-08-29T11:05:00Z"
        },
        {
          "author": "blythed",
          "body": "New issues:\n\n- [ ] configure which collections are in use, and move `cdc` configuration back to the top level (no `CDC_COLLECTION_LOCKS`).",
          "created_at": "2023-10-16T21:15:45Z"
        },
        {
          "author": "blythed",
          "body": "Addressed by #1243 ",
          "created_at": "2023-11-08T18:30:47Z"
        }
      ]
    },
    {
      "issue_number": 931,
      "title": "The context size given for RAG in the qtd is not enough",
      "body": "Optimize the context length given to the RAG application in QTD",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-13T09:09:12Z",
      "updated_at": "2023-11-20T18:16:46Z",
      "closed_at": "2023-11-20T18:16:46Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/931/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/931",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/931",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.751028",
      "comments": []
    },
    {
      "issue_number": 883,
      "title": "Extract out threading code into a common class",
      "body": "We have threads that use start and stop events already, but written into business logic, and there are missing codepaths.\r\n\r\nIt would be better to have a single thread class with logging and exception handling and start/stop in one place.\r\n\r\n---\r\n\r\nOne plan would be to take a class from some existing tiny module, possibly this, https://github.com/rec/recs/blob/master/recs/util/threads.py, and re-use it, so our existing code would simply inherit from another, more fully-featured Thread class, and there would be little change.\r\n\r\nAnother would be for us put it all under Dask and use its local-only scheduling, which is equivalent to threads, but that seems like overkill for \"starting a single thread\".",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-08T09:29:30Z",
      "updated_at": "2023-11-20T18:16:44Z",
      "closed_at": "2023-11-20T18:16:44Z",
      "labels": [
        "🚀 feature request",
        "📉 technical debt"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/883/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/883",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/883",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.751050",
      "comments": []
    },
    {
      "issue_number": 835,
      "title": "Add Streaming to QtD App",
      "body": "For an improved UX, we should enable streaming in the QtD app.\r\n\r\nThis does not need to be a long-term solution. A long-term solution will be address by #797.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-31T16:07:16Z",
      "updated_at": "2023-11-20T18:16:41Z",
      "closed_at": "2023-11-20T18:16:41Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/835/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/835",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/835",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.751061",
      "comments": [
        {
          "author": "nenb",
          "body": "**Update:** A draft PR exists in #834 that implements this functionality.",
          "created_at": "2023-09-01T09:22:21Z"
        }
      ]
    },
    {
      "issue_number": 971,
      "title": "Extract model/key code into a tiny class",
      "body": "Se [this comment](https://github.com/SuperDuperDB/superduperdb/pull/952#discussion_r1329232971)",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-19T09:23:53Z",
      "updated_at": "2023-11-20T18:15:38Z",
      "closed_at": "2023-11-20T18:15:38Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/971/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/971",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/971",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.942082",
      "comments": []
    },
    {
      "issue_number": 827,
      "title": "[DOC]: Explain configuration in SDDB throughly",
      "body": "### What's wrong?\n\nWe don't have a through explanation of configuration in superduperdb\n\n### How could it be better?\n\nAdd more documentation with examples on configuration in sddb",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-08-30T14:39:19Z",
      "updated_at": "2023-11-20T18:14:27Z",
      "closed_at": "2023-11-20T18:14:27Z",
      "labels": [
        "📝 documentation",
        "📉 technical debt"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/827/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/827",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/827",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:17.942113",
      "comments": [
        {
          "author": "fnikolai",
          "body": "Not sure what you mean by configuration, but if it's something the end user should worry about, it's better to expose it in environmental variables.\r\n\r\nI will need it for integration with containerized environments.\r\n\r\nPlus, it would suffice just to document these variables directly. The end user sh",
          "created_at": "2023-10-03T20:34:03Z"
        }
      ]
    },
    {
      "issue_number": 800,
      "title": "Create javascript plugin to easily host your docs on flyio deployment",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-28T11:00:55Z",
      "updated_at": "2023-11-20T18:14:25Z",
      "closed_at": "2023-11-20T18:14:25Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/800/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/800",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/800",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121554",
      "comments": []
    },
    {
      "issue_number": 787,
      "title": "Tests fail, variably, when on VPN",
      "body": "On a VPN, sometimes the whole test suite runs fine, sometimes a few tests hang, sometimes there are dozens of errors and also tests hang.\r\n\r\nHere are two successive runs below.  I have particularly seen that first error before when \"things were wrong\". It would be great to have a better detection of the actual error, because this will likely happen if there are e.g. network or DNS errors.\r\n\r\n````\r\nERROR test/integration/test_cdc.py::test_smoke - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_task_workflow[insert] - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_task_workflow[update] - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_vector_database_sync_with_delete - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_vector_database_sync - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_single_insert - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_many_insert - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_delete_one - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_single_update - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_many_update - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_insert_without_cdc_handler - KeyError: 'x'\r\nERROR test/integration/test_cdc.py::test_cdc_stop - KeyError: 'x'\r\nERROR test/integration/test_dask.py::test_taskgraph_futures_with_dask - KeyError: 'x'\r\nERROR test/integration/test_dask.py::test_insert_with_dask - KeyError: 'x'\r\nERROR test/integration/test_dask.py::test_dependencies_with_dask - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_add_load - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_show - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_select_one - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_insert - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_remove - KeyError: 'x'\r\nERROR test/integration/test_server.py::test_update - KeyError: 'x'\r\n````\r\n\r\nearlier run:\r\n\r\n```\r\nERROR test/integration/test_cdc.py::test_smoke - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_task_workflow[insert] - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_task_workflow[update] - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_vector_database_sync_with_delete - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_vector_database_sync - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_single_insert - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_many_insert - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_delete_one - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_single_update - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_many_update - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_insert_without_cdc_handler - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_cdc.py::test_cdc_stop - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_dask.py::test_taskgraph_futures_with_dask - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_dask.py::test_insert_with_dask - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_dask.py::test_dependencies_with_dask - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_add_load - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_show - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_select_one - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_insert - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_remove - FileNotFoundError: Can't find encoder: pil_image in metadata\r\nERROR test/integration/test_server.py::test_update - FileNotFoundError: Can't find encoder: pil_image in metadata\r\n\r\n````",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-27T13:35:46Z",
      "updated_at": "2023-11-20T18:14:23Z",
      "closed_at": "2023-11-20T18:14:23Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/787/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/787",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/787",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121579",
      "comments": []
    },
    {
      "issue_number": 774,
      "title": "Core core: remove dead code",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-25T12:07:59Z",
      "updated_at": "2023-11-20T18:14:22Z",
      "closed_at": "2023-11-20T18:14:22Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/774/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/774",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/774",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121586",
      "comments": []
    },
    {
      "issue_number": 760,
      "title": "Asynchronous REST requests",
      "body": "## Motivation\r\n\r\nAI operations can take a very long time to complete, so keep keeping a connection open for the whole time is undesirable.\r\n\r\n## How it works.\r\n\r\nReturn an [HTTP 202 \"Accepted\" response](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202) with a body containing information to allow the client to poll the server for the final results.\r\n\r\nRequest/response data exchanges:\r\n\r\n1. Initial request/response\r\n2. Polling\r\n3. Final result\r\n\r\nThese could be one request/response data type with a lot of optional fields, two types, or three.\r\n\r\nWithout further considerations, one datatype would be... less.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-24T08:58:02Z",
      "updated_at": "2023-11-20T18:14:22Z",
      "closed_at": "2023-11-20T18:14:22Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/760/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/760",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/760",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121594",
      "comments": []
    },
    {
      "issue_number": 759,
      "title": "REST API versioning",
      "body": "Our REST API is certain to change over time, so we need a versioning system\r\n\r\nThere seem to be several choices for where to put the version - in decreasing order of simplicity:\r\n\r\n1. The URI path\r\n2. A query parameter\r\n3. The Accept header\r\n4. A custom header\r\n5. Content negotiation\r\n\r\nAfter some reading about this, I'm less certain of an answer than before.  If I had to make a decision in ten seconds, it would be 2, because it's very easy, and because it allows for a default value if we want.\r\n\r\nCounter argument: \"Some older web browsers and web proxies will not cache responses for requests \r\nthat include a query string in the URI. This can degrade performance for web applications that use a web API and that run from within such a web browser.\"",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-24T08:43:25Z",
      "updated_at": "2023-11-20T18:14:22Z",
      "closed_at": "2023-11-20T18:14:21Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/759/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/759",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/759",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121601",
      "comments": []
    },
    {
      "issue_number": 752,
      "title": "Develop plan how to serialize `Model`, `TorchModel` with `pydantic`",
      "body": "In order to be able to move forward on plans for the server, with `pydantic`, we need an assurance that the key-classes in our ontology can be correctly serialized. Before implementing anything, we would therefore like (in the thread under this description) a plan of how exactly to serialize `Model` and `TorchModel` (which depends on `Model`) with `pydantic`, so that FastAPis able to cope with users uploading and specifying models.\r\n\r\nPotentially tricky points:\r\n\r\n- `object: t.Union[Artifact, t.Any]`\r\n- `collate_fn: t.Optional[t.Union[Artifact, t.Callable]] = None`\r\n- https://docs.pydantic.dev/latest/usage/serialization/ shows how custom serialization is possible, but not custom **de**serialization\r\n\r\nDiscussion points to here: https://github.com/SuperDuperDB/superduperdb/discussions/768",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-23T08:48:41Z",
      "updated_at": "2023-11-20T18:14:20Z",
      "closed_at": "2023-11-20T18:14:20Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/752/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/752",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/752",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.121609",
      "comments": [
        {
          "author": "blythed",
          "body": "Putting this on ice, since `pydantic` seems to be a moving target.",
          "created_at": "2023-09-21T13:08:54Z"
        }
      ]
    },
    {
      "issue_number": 745,
      "title": "Fix CI action that checks that all tests and imports pass with the latest versions of all our dependencies",
      "body": "### What\r\n\r\nWe have a large list of dependencies, and there is a non-negligible possibility that a new release of one of these packages will break our own package. We need a CI action that regularly checks that our core package and all our subgroups are not broken when installing the latest version of all our dependencies.\r\n\r\n### How\r\n\r\nThere is a (currently broken) initial attempt at this available [here](https://github.com/SuperDuperDB/superduperdb/blob/main/.github/workflows/test-deps.yml). It needs to be fixed, and updated to check that all imports and all tests are working. See also #744. ",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-22T13:20:54Z",
      "updated_at": "2023-11-20T18:14:18Z",
      "closed_at": "2023-11-20T18:14:18Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/745/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/745",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/745",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.308923",
      "comments": []
    },
    {
      "issue_number": 740,
      "title": "test_dask.py fails when run before other tests",
      "body": "## Steps to reproduce\r\n\r\n`pytest -k dask`\r\n\r\nor\r\n\r\n`pytest --ignore test/integration/test_cdc.py` (which gives you even more errors, for some reason)\r\n\r\n## Notes\r\n\r\nMan, this had confused me no end!\r\n\r\n:-D\r\n\r\nOnce I break the dask unit tests, I try to find out where I broke them by running just those tests, but now I realize that fails every time.\r\n\r\nIt also happens with `pytest --lf` to run the last failures, if you previously broke the dask test.\r\n\r\n```\r\ntest/integration/test_dask.py .F.                                                                                                                  [100%]\r\n\r\n======================================================================== FAILURES ========================================================================\r\n_________________________________________________________________ test_insert_with_dask __________________________________________________________________\r\n\r\nlocal_dask_client = <superduperdb.server.dask_client.DaskClient object at 0x2a2a2a7c0>\r\ndatabase_with_default_encoders_and_model = <superduperdb.db.base.db.DB object at 0x16ffcf9d0>\r\nfake_updates = [Document({'x': Encodable(encoder=Encoder(identifier='torch.float32[32]', decoder=<Artifact artifact=<superduperdb.ext...08,\r\n        -0.7509, -1.4861, -0.0333,  1.1998,  0.5789, -0.6537,  0.2418,  1.3824]), uri=None), 'update': True}), ...]\r\n\r\n    @pytest.mark.skipif(not torch, reason='Torch not installed')\r\n    def test_insert_with_dask(\r\n        local_dask_client, database_with_default_encoders_and_model, fake_updates\r\n    ):\r\n        collection_name = str(uuid.uuid4())\r\n        with patch.object(CFG, \"distributed\", True):\r\n            with add_and_cleanup_listener(\r\n                database_with_default_encoders_and_model, collection_name\r\n            ) as database_with_listener:\r\n                database_with_listener.distributed = True\r\n                database_with_listener._distributed_client = local_dask_client\r\n    \r\n                database_with_listener.execute(\r\n                    Collection(name=collection_name).insert_many(fake_updates)\r\n                )\r\n                local_dask_client.wait_all_pending_tasks()\r\n    \r\n                r = next(\r\n                    database_with_listener.execute(\r\n                        Collection(name=collection_name).find({'update': True})\r\n                    ),\r\n                )\r\n    \r\n>               assert 'model_linear_a' in r['_outputs']['x']\r\n\r\ntest/integration/test_dask.py:83: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Document({'_id': ObjectId('64e38528b01621c4f945bad0'), 'x': Encodable(encoder=Encoder(identifier='torch.float32[32]', ...7.1139e-01,  3.0481e-01,  5.1303e-01,\r\n        -1.2514e+00, -8.3081e-01]), uri=None), 'update': True, '_fold': 'train'})\r\nitem = '_outputs'\r\n\r\n    def __getitem__(self, item: str) -> ItemType:\r\n>       return self.content[item]  # type: ignore[index]\r\nE       KeyError: '_outputs'\r\n\r\nsuperduperdb/container/document.py:58: KeyError\r\n------------------------------------------------------------------ Captured stderr call ------------------------------------------------------------------\r\n0it [00:00, ?it/s]\r\n0it [00:00, ?it/s]\r\nINFO:root:found 0 uris\r\nINFO:root:Adding model model_linear_a to db\r\nWARNING:root:model/model_linear_a/0 already exists - doing nothing\r\nINFO:root:Done.\r\n------------------------------------------------------------------- Captured log call --------------------------------------------------------------------\r\nWARNING  root:db.py:613 model/model_linear_a/0 already exists - doing nothing\r\nWARNING  root:db.py:613 model/model_linear_a/0 already exists - doing nothing\r\nWARNING  root:dask_client.py:53 Could not get an identifier from submitted function, creating one!\r\n================================================================ short test summary info =================================================================\r\nFAILED test/integration/test_dask.py::test_insert_with_dask - KeyError: '_outputs'\r\n```",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-21T15:56:21Z",
      "updated_at": "2023-11-20T18:14:18Z",
      "closed_at": "2023-11-20T18:14:18Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/740/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/740",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/740",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.308951",
      "comments": []
    },
    {
      "issue_number": 739,
      "title": "Intermittent tracebacks in test_cdc.py ",
      "body": "The test never fails, but sometimes I get tracebacks:\r\n\r\n```\r\ntest/integration/test_cdc.py ...Traceback (most recent call last):\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/metadata.py\", line 78, in get_latest_version\r\n    return sorted(\r\nIndexError: list index out of range\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/cdc.py\", line 335, in run\r\n    self._handle(packets)\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/cdc.py\", line 294, in _handle\r\n    self.on_create(packet)\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/cdc.py\", line 282, in on_create\r\n    self.submit_task_workflow(cdc_query=cdc_query, ids=ids)\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/cdc.py\", line 231, in submit_task_workflow\r\n    task_workflow = self.db._build_task_workflow(\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/base/db.py\", line 552, in _build_task_workflow\r\n    deps = self._get_dependencies_for_listener(\r\n```\r\n\r\nFirst, this of course is probably some issue, but in general, we should probably crash and die if such an exception occurs in a thread or subprocess, not keep going!\r\n\r\nThere are a couple of standard ways to do this, let's chat. :-)",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-21T14:26:40Z",
      "updated_at": "2023-11-20T18:14:18Z",
      "closed_at": "2023-11-20T18:14:18Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/739/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/739",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/739",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.308960",
      "comments": [
        {
          "author": "rec",
          "body": "Oh, I've seen this one before too:\r\n\r\n```\r\ntest/integration/test_cdc.py ..Traceback (most recent call last):\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/cdc.py\", line 335, in run\r\n    self._handle(packets)\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mo",
          "created_at": "2023-08-21T14:34:30Z"
        },
        {
          "author": "rec",
          "body": "Here's another!\r\n\r\n```\r\ntest/integration/test_cdc.py ..Traceback (most recent call last):\r\n  File \"/Users/tom/synthetic/code/superduperdb/superduperdb/db/mongodb/metadata.py\", line 78, in get_latest_version\r\n    return sorted(\r\n           ^^^^^^^\r\nIndexError: list index out of range\r\n\r\nDuring handli",
          "created_at": "2023-08-22T13:53:33Z"
        },
        {
          "author": "rec",
          "body": "And I've seen this one twice now:\r\n\r\n```\r\ntest/integration/test_cdc.py ..Traceback (most recent call last):\r\n..........                                                                                                         [ 23%]\r\n```\r\n\r\ni.e. the traceback isn't there at all!  :-o",
          "created_at": "2023-08-22T14:02:28Z"
        }
      ]
    },
    {
      "issue_number": 648,
      "title": "Improve Binder UX",
      "body": "### Why\r\n\r\nCurrently the Binder launch takes several minutes. Many users will likely get bored and move on before the Binder launch has completed.\r\n\r\nWhen the Binder loads, the user lands in the root directory and it's not obvious what they should do. This will also likely lead to users moving away.\r\n\r\n### How\r\n\r\nThe slow load is likely related to heavy downloads (data for MongoDB examples). It may also be related to the MongoDB install itself.\r\n\r\nWe should also change the landing location to a notebook in the docs that can be run instantly and shows exactly what our application does.\r\n\r\n### What\r\n\r\n- [ ] Investigate the sources causing slow Binder load times and document them\r\n- [ ] Significantly reduce the amount of data we are downloading to our Binder instance\r\n- [ ] Solve any other issues that emerge as causing slow Binder load times.\r\n- [ ] Change the landing location to a notebook(s) from our documentation\r\n- [ ] Confirm that this notebook runs correctly and illustrates some nice features from `superduperdb`\r\n\r\n### Other\r\n\r\nThe [xarray](https://github.com/pydata/xarray) project is an excellent example of a good Binder experience.\r\n\r\n",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-09T08:12:04Z",
      "updated_at": "2023-11-20T18:11:39Z",
      "closed_at": "2023-11-20T18:11:39Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/648/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/648",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/648",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.551543",
      "comments": [
        {
          "author": "blythed",
          "body": "An idea of @thejumpman2323: trigger a rebuild of binder after each pull (it's the mechanism binder uses to trigger rebuild - first request *after* a pull)",
          "created_at": "2023-08-09T14:33:06Z"
        }
      ]
    },
    {
      "issue_number": 630,
      "title": "Duplicated code in `db.py`",
      "body": "We have `self.download_content` and a function `download_content`. We should ditch the `self.download_content`. \r\n\r\n- [ ] Remove `DB.download_content`\r\n- [ ] Test `DB.get_content_for_filter` with refactored version",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-05T20:31:08Z",
      "updated_at": "2023-11-20T18:11:25Z",
      "closed_at": "2023-11-20T18:11:25Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/630/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/630",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/630",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740331",
      "comments": []
    },
    {
      "issue_number": 597,
      "title": "Add a labeller for pull requests",
      "body": "### Contact Details\n\n_No response_\n\n### Feature Description\n\nSee https://github.com/actions/labeler\r\n\r\nPossible labels would be:\r\n\r\n* documentation\r\n* requirements\r\n* small\r\n* large\r\n\n\n### Use Case Description\n\nAs a reviewer, I see many pull requests but have no idea which to prioritize without doing additional work.\n\n### Organization\n\n_No response_\n\n### Who are the stake-holders?\n\nCode reviewers.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-02T10:03:25Z",
      "updated_at": "2023-11-20T18:10:45Z",
      "closed_at": "2023-11-20T18:10:45Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/597/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/597",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/597",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740349",
      "comments": []
    },
    {
      "issue_number": 496,
      "title": "Model versions aren't included in Watchers and `.predict`",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-22T01:29:27Z",
      "updated_at": "2023-11-20T18:08:53Z",
      "closed_at": "2023-11-20T18:08:53Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/496/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/496",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/496",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740357",
      "comments": []
    },
    {
      "issue_number": 439,
      "title": "Fix metrics in `sklearn` estimators and `transformers` pipelines",
      "body": "Currently we simply draw a blank on logging metrics after training in the `sklearn` `Estimator` wrapper.\r\nFix this.\r\n\r\nAlso, `sklearn` estimators often come equipped with `self.score(...)`. If this exists, then add this to the metrics.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-14T16:33:10Z",
      "updated_at": "2023-11-20T18:07:43Z",
      "closed_at": "2023-11-20T18:07:43Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/439/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/439",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/439",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740363",
      "comments": []
    },
    {
      "issue_number": 427,
      "title": "Typed server using FastAPI",
      "body": "We spent considerable effort on this but put it on hold because of difficulties with Pydantic 1.x and our serialization, but now Pydantic 2.x is out.\r\n\r\n- [ ] Wait for this issue: https://github.com/hwchase17/langchain/issues/7663\r\n- [ ] Replace ad-hoc JSONization with pydantic\r\n- [ ] Replace Flask server with uvicorn server\r\n\r\nMuch of this code already exists...",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-13T15:04:49Z",
      "updated_at": "2023-11-20T18:07:33Z",
      "closed_at": "2023-11-20T18:07:33Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/427/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/427",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/427",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740368",
      "comments": []
    },
    {
      "issue_number": 388,
      "title": "Umbrella issue: improving the health of our test suite",
      "body": "There are a number of small issues with our test suite that need to be fixed. Below is a non-exhaustive list of check boxes for individual items that need fixing.\r\n\r\n### List of tasks\r\n\r\n- [x] We need to add test coverage monitoring\r\n- [x] We need to improve test coverage (current target: 80)\r\n- [x] We need to improve the integrity and performance of our integration tests (see also #135)\r\n- [ ] We need to deal with a number of warnings arising (currently ignored; see #377)\r\n- [ ] We should determine what tradeoffs are involved in building our CI (cost, time taken, developer productivity) and explicitly state which ones we have opted for when building our CI\r\n- [ ] Introduce a fake database fixture (this could be using mocks or verfiied fakes) so that we don't rely on Docker to run our tests\r\n- [ ] Parallelize the tests - this will require refactoring the tests so that individual tests do not rely on an empty database\r\n",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-07-07T18:16:30Z",
      "updated_at": "2023-11-20T18:07:25Z",
      "closed_at": "2023-11-20T18:07:25Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/388/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/388",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/388",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.740373",
      "comments": [
        {
          "author": "blythed",
          "body": "This is a mocking library, which we can use to simplify setup https://github.com/mongomock/mongomock",
          "created_at": "2023-08-04T13:25:02Z"
        }
      ]
    },
    {
      "issue_number": 354,
      "title": "Invalidate items in cache (3 hours)",
      "body": "The cache for data that can be externally referenced (`Document`s and `SuperDuperCursor`s, right now) is never cleared.\r\n\r\nStrategies (which can be pursued independently)\r\n\r\n* remove `Document`s from the cache when they are retrieved\r\n* remove `Cursor`s when they are exhausted\r\n* add a timestamp and later remove items older than a certain time",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-02T11:12:15Z",
      "updated_at": "2023-11-20T18:06:57Z",
      "closed_at": "2023-11-20T18:06:57Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/354/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/354",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/354",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.933565",
      "comments": []
    },
    {
      "issue_number": 240,
      "title": "Compiled C/C++ libraries can bring down our code",
      "body": "Duncan experienced this last week and so did I with another library a week before.\r\n\r\nThe issue with compiled python modules like `torch`, [insert shoddy but popular ML package names here], or even `numpy` is that it is possible for them to SEGV or otherwise end a whole Python process without providing any way to recover or even save state in our Python code.\r\n\r\nThe usual solution is to create separate subprocesses or multiprocesses to run just these libraries which can crash without taking everything else down. \r\n\r\nThis works well for us because everything is serializable and the quantity data is passed by URI, not inside the request, but it would be a non-trivial amount of work.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-09T10:49:20Z",
      "updated_at": "2023-11-20T18:06:43Z",
      "closed_at": "2023-11-20T18:06:43Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/240/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/240",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/240",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:18.933585",
      "comments": [
        {
          "author": "rec",
          "body": "This was not \"completed\" in any sense. :-)",
          "created_at": "2023-07-10T10:34:14Z"
        }
      ]
    },
    {
      "issue_number": 171,
      "title": "General logging tasks (8 hours)",
      "body": "These apply to both the server and jobs we run from the command line.\r\n\r\nPython's logging suffers from lameness in many ways, such as using the old `%` notation, but it seems most of the existing libraries use it, so we need to use it.\r\n\r\nI'm going to list all the tasks, and perhaps we won't do some of these for the August deadline.\r\n\r\n- [ ] specify default file locations for logs\r\n- [ ] set the logging level (using configs)\r\n- [ ] set log file locations (with configs)\r\n- [ ] redirect or tee logging (with configs)\r\n- [ ] [structured logging](https://www.structlog.org/en/23.1.0/index.html), or at least some sort of convention\r\n- [ ] log rotation and removal policy",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-28T11:43:41Z",
      "updated_at": "2023-11-17T13:34:32Z",
      "closed_at": "2023-11-17T13:34:31Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/171/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/171",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/171",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:20.944667",
      "comments": [
        {
          "author": "rec",
          "body": "We are already setting the level based on config data, but we don't have the logging configs in the new `Config` class!",
          "created_at": "2023-05-28T11:59:08Z"
        },
        {
          "author": "rec",
          "body": "See #644",
          "created_at": "2023-08-29T14:26:18Z"
        },
        {
          "author": "fnikolai",
          "body": "Changes contained within https://github.com/SuperDuperDB/superduperdb/pull/1258\n\nIt includes:\n* Logging Level (Debug, Info, Warn, Error)\n* Integration with Loki \n* Structured Logging\n\nIt does not include log rotation, since this is a task for the logging system.",
          "created_at": "2023-11-10T09:21:14Z"
        }
      ]
    },
    {
      "issue_number": 1271,
      "title": "Standalone cdc service",
      "body": "we need to create a standalone cdc service \r\nThis service will consist two endpoints \r\n\r\n`add listener`\r\nand \r\n`delete listener`\r\n\r\nThese endpoints will be used to notify this cdc service that a listener is added into database by the client service.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-11-10T10:55:11Z",
      "updated_at": "2023-11-10T14:09:12Z",
      "closed_at": "2023-11-10T14:09:12Z",
      "labels": [
        "API and software design"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1271/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1271",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1271",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.166431",
      "comments": []
    },
    {
      "issue_number": 1265,
      "title": "Add compositional API factory to combine services into a single server",
      "body": "The idea: the open-source code-base gives the option to build a service containing 1 or multiple APIs.\r\n\r\nExample in configuration:\r\n\r\n```python\r\nCFG.server.services = ['vector_searcher', 'cdc', ...]\r\n```\r\n\r\nUnder the hood:\r\n\r\n`production/server_init.py`\r\n\r\n```python\r\nservices = {\r\n    'vector_search': add_vector_search_endpoints,\r\n    'cdc': add_cdc_endpoints,\r\n}\r\n\r\ndef init_app(db):\r\n    app = FastAPI(...)\r\n    for service in services:\r\n        services[service](app, db)\r\n    return app\r\n\r\nif __name__ == '__main__':\r\n   db = build_datalayer()\r\n    init_app(db).run()\r\n```\r\n\r\n`vector_searcher/service.py`\r\n\r\n```python\r\ndef add_vector_search_endpoints(app):\r\n    ... # existing endpoints in here...\r\n```\r\n\r\nSame thing for `cdc/service.py`...\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-09T12:17:21Z",
      "updated_at": "2023-11-10T14:09:11Z",
      "closed_at": "2023-11-10T14:09:11Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1265/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1265",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1265",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.166450",
      "comments": [
        {
          "author": "blythed",
          "body": "@thejumpman2323 to share draft design with just skeleton functions.",
          "created_at": "2023-11-09T12:28:00Z"
        },
        {
          "author": "blythed",
          "body": "Covered by #1248 ",
          "created_at": "2023-11-10T13:41:51Z"
        }
      ]
    },
    {
      "issue_number": 1242,
      "title": "Standalone vector-searcher service",
      "body": "The documentation details an additional service which we don't have yet:\r\n\r\nhttps://docs.superduperdb.com/docs/docs/vector_comparison_service\r\n\r\nTask: to implement according to this spec in a single standalone file.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-11-05T11:19:13Z",
      "updated_at": "2023-11-10T14:09:11Z",
      "closed_at": "2023-11-10T14:09:11Z",
      "labels": [
        "Enhancement"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1242/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1242",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1242",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.347768",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "vector search service will be created using SuperDuperApp\n\nIt will have 4 endpoints\n\n`add` - add new vector in vector database\n`delete` - delete  vector by id in vector database\n`query_by_array`- search top n  vectors by array in vector database\n`query_by_id` - search top n  vectors by id in vector ",
          "created_at": "2023-11-10T11:09:26Z"
        }
      ]
    },
    {
      "issue_number": 671,
      "title": "Modular tests: Refactor tests to run in parallel",
      "body": "Currently since all tests work on the same data workbench, it's not possible to parallelize the test suite. A solution for this is to make sure that data is completely isolated to a running test, and is never shared, even in principle with other tests.\r\nTo do this, we would like to \r\n\r\n- [ ] Create random data, in a randomly named database and collection prior to each test\r\n- [ ] Remove this after each test\r\n- [ ] Test parallelization\r\n\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-11T11:28:00Z",
      "updated_at": "2023-11-10T11:27:29Z",
      "closed_at": "2023-11-10T11:27:29Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/671/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "jieguangzhou"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/671",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/671",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.516143",
      "comments": [
        {
          "author": "rec",
          "body": "I did some discussion of this in a issue that got closed for cleanup, which has a couple of suggestions.\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb/issues/97\r\n\r\n----\r\n\r\n\"Not tearing down the fixtures\" has been surprisingly effective in one other organization. This of course only works for immut",
          "created_at": "2023-08-14T07:37:21Z"
        },
        {
          "author": "blythed",
          "body": "This is trivial following the fixture refactorings of @jieguangzhou.\nInstall new package `pytest-parallel-something...`",
          "created_at": "2023-11-03T13:55:31Z"
        },
        {
          "author": "jieguangzhou",
          "body": "Will merge with #1253 ",
          "created_at": "2023-11-10T08:38:24Z"
        }
      ]
    },
    {
      "issue_number": 1197,
      "title": "Feature: Bundle support in SuperDuperDB",
      "body": "So basic thought process with bundle is following\r\n\r\nStack could stack together bunch of components under a common namespace, Bundle should provide a save and load interface which could save a bundle into yaml and load it back into stack instance and add to database.\r\n\r\nExample:\r\n```python\r\nstack = Stack(identifier='mybundle', components = [VectorIndex(), Model(), ...])\r\nstack_name = 'mystack'\r\nstack.save(db, stack_name)\r\n\r\nstack.load(stack_name)\r\n\r\nstack.get('identifier/of/component')\r\n\r\n```",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-28T19:01:49Z",
      "updated_at": "2023-11-05T10:59:42Z",
      "closed_at": "2023-11-05T10:59:42Z",
      "labels": [
        "🚀 feature request",
        "📉 technical debt"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1197/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1197",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1197",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.736137",
      "comments": []
    },
    {
      "issue_number": 610,
      "title": "Intermittent failures in CI",
      "body": "Example: https://github.com/SuperDuperDB/superduperdb/actions/runs/5749638849/job/15584836218\r\n\r\nI rerun these by hand in order to get rid of the red X-es but we should get to the root of this.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-03T10:44:11Z",
      "updated_at": "2023-11-03T14:20:06Z",
      "closed_at": "2023-11-03T14:20:06Z",
      "labels": [
        "📉 technical debt",
        "🔄 CI"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/610/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/610",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/610",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.736179",
      "comments": [
        {
          "author": "rec",
          "body": "These have gotten to the point where about half the pull requests have a failure.\r\n\r\nHowever, all the failures go through one function: `show_component_versions`.  Developing!",
          "created_at": "2023-08-30T13:58:41Z"
        },
        {
          "author": "rec",
          "body": "It's my belief that, unfortunately, there's nothing wrong with that method, it just happens to always be the first thing that touches the database.  But retrying that method with tenacity makes it all work anyway.  I have a pull request out for it.",
          "created_at": "2023-08-31T09:05:28Z"
        },
        {
          "author": "blythed",
          "body": "Unspecific, so closing.",
          "created_at": "2023-11-03T14:20:06Z"
        }
      ]
    },
    {
      "issue_number": 940,
      "title": "SQL next: Create query id table and use query id properly",
      "body": "To auto-assign or nicely assign a string identifier of a complex query.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-13T13:52:08Z",
      "updated_at": "2023-11-03T10:59:41Z",
      "closed_at": "2023-11-03T10:50:45Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/940/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/940",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/940",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:21.965310",
      "comments": [
        {
          "author": "blythed",
          "body": "To discuss with @blythed ",
          "created_at": "2023-10-27T12:54:05Z"
        },
        {
          "author": "thejumpman2323",
          "body": "Currently we create a query id table which consists of query id , query and hash of query as table columns.\n\nQuery table is created after model or listener Is added to db along with the select passed\n",
          "created_at": "2023-11-03T10:59:40Z"
        }
      ]
    },
    {
      "issue_number": 1177,
      "title": "Pinned dependencies are never updated",
      "body": "### Why\n\nMost of the CI is based on pinned dependencies, which are never being updated. \r\nWe need to periodically update them.\n\n### How\n\nThere is already a script to update them called [update-pinned-deps.sh](https://github.com/SuperDuperDB/superduperdb/blob/main/.github/ci-pinned-requirements/update-pinned-deps.sh)\r\n\r\nThe problem, however, is when to trigger it. \r\n* Before any PR? \r\n* Nightly?\r\n* Upon a release?\r\n\r\nPerhaps the best idea is to call it when a PR includes changes in `pyproject.toml`.\r\nThen it will make one more commit to the PR with the new pinned dependencies. \n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-27T00:27:13Z",
      "updated_at": "2023-11-02T11:45:54Z",
      "closed_at": "2023-11-02T11:45:54Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1177/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1177",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1177",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:22.224837",
      "comments": []
    },
    {
      "issue_number": 1180,
      "title": "Add test coverage information",
      "body": null,
      "state": "closed",
      "author": "jieguangzhou",
      "author_type": "User",
      "created_at": "2023-10-27T07:22:04Z",
      "updated_at": "2023-11-01T06:18:00Z",
      "closed_at": "2023-11-01T06:18:00Z",
      "labels": [
        "good first issue"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1180/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1180",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1180",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:23.892127",
      "comments": []
    },
    {
      "issue_number": 1028,
      "title": "[DOC]: List of preinstalled tools in the container. ",
      "body": "### What's wrong?\n\n\r\n![image](https://github.com/SuperDuperDB/superduperdb/assets/4982285/bf817570-014d-45ba-828c-b40f7a13313b)\r\n\r\nSome notebooks use common desktop tools, which unfortunately are not included in the superduperdb image. As can be seen in the figure, some of the missing tools include:\r\n* curl\r\n* unzip\r\n\n\n### How could it be better?\n\nGiven that we cannot install everything. \r\n\r\nOne solution is to provide users with instructions on how to install custom tools from jupyter. This however may not always be the case since notebook users may not have root permissions.\r\n\r\nAnother approach is to provide a list of installed tools in the superduperdb container. These tools can be used directly by the notebook. Start with a small list, and add tools as needed.\r\n\r\n@blythed since we need to check all notebooks for dependencies of any kind, I think this issue is related to #1021",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-03T15:57:27Z",
      "updated_at": "2023-10-31T14:17:03Z",
      "closed_at": "2023-10-31T14:17:03Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1028/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1028",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1028",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:23.892154",
      "comments": []
    },
    {
      "issue_number": 1193,
      "title": "User Experience:  in Notebooks",
      "body": "### Why\n\n`question_the_docs.ipynb`\r\n\r\nThe notebook is based on the assumption that OpenAI keys are provided as environment variables.\r\nHowever, this is not the case for demo. We need to provide at least one way for the user to use its own credentials.\r\n\r\ne.g (but not 100% correct)\r\n```\r\n# Use your credentials\r\n%env OPENAI_API_KEY=<your_key>\r\n\r\nif 'OPENAI_API_KEY' not in os.environ:\r\n    raise Exception('Environment variable \"OPENAI_API_KEY\" not set')\r\n```\n\n### How\n\n_No response_\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-27T16:23:28Z",
      "updated_at": "2023-10-27T23:19:53Z",
      "closed_at": "2023-10-27T23:19:53Z",
      "labels": [
        "📝 documentation",
        "API and software design"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1193/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1193",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1193",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:23.892166",
      "comments": [
        {
          "author": "fnikolai",
          "body": "Fixed by https://github.com/SuperDuperDB/superduperdb/commit/a4433a008b808d6ffa8bcdba0cc6adecbe74185c",
          "created_at": "2023-10-27T23:19:53Z"
        }
      ]
    },
    {
      "issue_number": 1174,
      "title": "Supported notebooks",
      "body": "### Why\r\n\r\nAre we going to support all the notebooks under `docs/hr/content/docs/how_to` ?\r\nIf yes,\r\n1. We need to put these directories within the demo (extra notebooks to play with)\r\n2. We need to test them because some of them fail (e.g, I tried the dask and failed)\r\n3. Remove empty notebooks\r\n\r\n### How\r\n\r\n_No response_\r\n\r\n### What\r\n\r\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-26T14:49:32Z",
      "updated_at": "2023-10-27T13:55:41Z",
      "closed_at": "2023-10-27T13:55:41Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1174/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1174",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1174",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:24.075849",
      "comments": [
        {
          "author": "blythed",
          "body": "No - this will be address in the new integration tests #1176 ",
          "created_at": "2023-10-27T13:55:33Z"
        }
      ]
    },
    {
      "issue_number": 1019,
      "title": "Usecase: MONAI for possible integration with superduperdb",
      "body": "Explore MONAI repository for possible use-case.\nLooks like MONAI uses PyTorch significantly.\n\nhttps://colab.research.google.com/drive/1wy8XUSnNWlhDNazFdvGBHLfdkGvOHBKe#scrollTo=BZTNbFpgA6rX",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-02T18:45:30Z",
      "updated_at": "2023-10-27T12:57:13Z",
      "closed_at": "2023-10-27T12:57:13Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1019/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1019",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1019",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:24.248921",
      "comments": [
        {
          "author": "blythed",
          "body": "To add description of the cells @blythed ",
          "created_at": "2023-10-23T14:18:26Z"
        }
      ]
    },
    {
      "issue_number": 939,
      "title": "SQL next: Test postlike and prelike",
      "body": "Requires #870. Then can create `Listener` and `VectorIndex`.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-13T13:52:02Z",
      "updated_at": "2023-10-27T12:50:17Z",
      "closed_at": "2023-10-27T12:50:17Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/939/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/939",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/939",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:24.462810",
      "comments": []
    },
    {
      "issue_number": 1079,
      "title": "GitHub action for testing notebooks",
      "body": "### Why\n\nNotebooks are changing, dependencies are changing, and tons of things are changing.\r\nWe need a way to ensure that notebooks work.\n\n### How\n\nCreate a GitHub actions that follows the notebook directory (https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items), and when a notebook has changed (*.ipyb), run a test for the specific notebook.\r\n\n\n### What\n\n- [ ]\r\n",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-11T16:26:59Z",
      "updated_at": "2023-10-19T08:22:31Z",
      "closed_at": "2023-10-19T08:22:31Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1079/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1079",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1079",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:26.442317",
      "comments": [
        {
          "author": "fnikolai",
          "body": "fixed by https://github.com/SuperDuperDB/superduperdb/pull/1119",
          "created_at": "2023-10-19T08:22:31Z"
        }
      ]
    },
    {
      "issue_number": 947,
      "title": "[DOC]: Naming of GitHub Actions",
      "body": "### What's wrong?\n\nThe names of GitHub Actions are chaotic \r\n\r\n![image](https://github.com/SuperDuperDB/superduperdb/assets/4982285/394dae23-dc09-4dcf-80f7-982114ad6a4a)\r\n\n\n### How could it be better?\n\nChange the names to something shorter and more descriptive",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-09-14T12:43:56Z",
      "updated_at": "2023-10-17T07:43:12Z",
      "closed_at": "2023-10-17T07:43:12Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/947/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/947",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/947",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:26.645931",
      "comments": []
    },
    {
      "issue_number": 802,
      "title": "Dockerbuild to dockerhub",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-28T12:27:43Z",
      "updated_at": "2023-10-17T07:39:32Z",
      "closed_at": "2023-10-17T07:39:32Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/802/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/802",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/802",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:26.645953",
      "comments": [
        {
          "author": "fnikolai",
          "body": "#1022 #947 #1018 ",
          "created_at": "2023-10-03T08:51:33Z"
        }
      ]
    },
    {
      "issue_number": 1040,
      "title": "Video search use case refactor with flatten output feature",
      "body": "In video search notebook we should use the latest flatten output feature in model updates.\n\nAlso add the concept to use a `Schema` to encode dictionaries in the output.\n",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-10-05T09:32:05Z",
      "updated_at": "2023-10-16T21:06:34Z",
      "closed_at": "2023-10-16T21:06:34Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1040/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1040",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1040",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:26.853130",
      "comments": [
        {
          "author": "blythed",
          "body": "@blythed to incorporate automatic downloading into use-case (some small refactors may be necessary).",
          "created_at": "2023-10-10T09:43:37Z"
        }
      ]
    },
    {
      "issue_number": 1056,
      "title": "Encoder to return only references of downloaded files",
      "body": "This is useful for, for instance, video intelligence models, where the AI needs to iterate through frames.\r\n\r\n1. The user creates `enc = URIEncoder()`.\r\n2. Adds the data `db.execute(coll.insert_many(D({'x': enc(x)}) for x in data))`.\r\n3. If `s.CFG.hybrid == True`, the data is saved on the filesystem.\r\n4. Else the data is loaded into the database\r\n5. At load time, the encoder wraps the saved references with `Ref(uri=<the-file-path>)`\r\n\r\nNone of this really makes sense if `s.CFG.hybrid == False`. \r\n\r\nOne solution is that we should configure `hybrid` not at the project level, but at the `Encoder` level.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-07T10:56:41Z",
      "updated_at": "2023-10-16T21:06:26Z",
      "closed_at": "2023-10-16T21:06:26Z",
      "labels": [
        "🚀 feature request",
        "idea",
        "🔍 discovery"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1056/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1056",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1056",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.077198",
      "comments": []
    },
    {
      "issue_number": 938,
      "title": "SQL next: Add run  `table.create` implicitly with `db.add(table)`",
      "body": null,
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-13T13:51:29Z",
      "updated_at": "2023-10-13T13:55:38Z",
      "closed_at": "2023-10-13T13:55:38Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/938/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/938",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/938",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.077218",
      "comments": []
    },
    {
      "issue_number": 1016,
      "title": "[DOC]: Update required pip installs in Audio Transcription Use-Case",
      "body": "### What's wrong?\n\nI love the audio transcription use-case but when going through it I had some trouble because of missing packages.\r\nIn more detail, it is because newer versions of `datasets` don't use `torchaudio` anymore (see last comment here: https://github.com/huggingface/datasets/issues/3909) but they now use `soundlib`.\r\nOther missing packages I had to install are `librosa` and `sentencepiece`\n\n### How could it be better?\n\nUpdate the `!pip install torchaudio` in the use-case with `!pip install datasets soundlib librosa sentencepiece`",
      "state": "closed",
      "author": "johko",
      "author_type": "User",
      "created_at": "2023-10-01T20:17:11Z",
      "updated_at": "2023-10-13T13:51:42Z",
      "closed_at": "2023-10-13T13:51:20Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1016/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1016",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1016",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.077225",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "@johko either we should pin the `pip install datasets` to the old working version or install soundlib etc thing.\r\n\r\n@blythed WDYT?",
          "created_at": "2023-10-02T18:57:12Z"
        }
      ]
    },
    {
      "issue_number": 956,
      "title": "Create a blog post on Mongodb atlas vector search",
      "body": null,
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-15T13:02:09Z",
      "updated_at": "2023-10-13T12:11:16Z",
      "closed_at": "2023-10-13T12:11:16Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/956/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/956",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/956",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.259867",
      "comments": [
        {
          "author": "rec",
          "body": "(As requested by Timo.)",
          "created_at": "2023-09-15T13:03:09Z"
        },
        {
          "author": "blythed",
          "body": "https://www.notion.so/superduperdb/Blog-Post-Vector-Search-SuperDuperDB-MongoDB-68575702229d47349f9996429a0c0284",
          "created_at": "2023-09-21T13:18:02Z"
        }
      ]
    },
    {
      "issue_number": 1049,
      "title": "[DOC]: Ensure consistent versioning",
      "body": "### What's wrong?\n\nIn some places, the versions are referred to as `v0.0.9`, and in other places, others as `0.0.9`.\r\n\n\n### How could it be better?\n\nMake sure that we use `0.0.9` everywhere.\r\n\r\nThe same applies for both CI and docs.",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-06T10:28:01Z",
      "updated_at": "2023-10-07T19:10:03Z",
      "closed_at": "2023-10-07T19:10:03Z",
      "labels": [
        "📝 documentation",
        "🔄 CI"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1049/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1049",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1049",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.490571",
      "comments": []
    },
    {
      "issue_number": 958,
      "title": "Blog post on new API extensions",
      "body": "Produce a short blog post advertising our recent support APIs other than OpenAI (eg Cohere).",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-09-15T13:31:25Z",
      "updated_at": "2023-10-06T13:39:55Z",
      "closed_at": "2023-10-06T13:39:55Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/958/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/958",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/958",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.490594",
      "comments": [
        {
          "author": "rec",
          "body": "# SuperDuperDB expands support for AI APIs\r\n\r\nIt's 2023, and every time you turn around, there's a new AI API.\r\n\r\nSo we're happy to announce the integration of two more AI APIs, Cohere and Anthropic, into our SuperDuperDB AI framework.\r\n\r\n### Cohere: Blame Canada\r\n\r\nThe Canadian company named Cohere",
          "created_at": "2023-09-21T15:34:30Z"
        }
      ]
    },
    {
      "issue_number": 1041,
      "title": "Edit current release process to include docker-build release",
      "body": "- Include docker build in release\n- Use standard approach of pushing tags\n- Incorporate 4 eyes principle (approval required for release)\n- Do all of this with `make release`",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-10-05T10:35:31Z",
      "updated_at": "2023-10-06T08:55:30Z",
      "closed_at": "2023-10-06T08:55:30Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1041/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1041",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1041",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.691730",
      "comments": []
    },
    {
      "issue_number": 1022,
      "title": "Create a gh action to release docker images",
      "body": "We need to automate how the docker images are being released.\nFor that, we can use an action that will be triggered on push requests, build the docker images, and upload them to DockerHub",
      "state": "closed",
      "author": "fnikolai",
      "author_type": "User",
      "created_at": "2023-10-03T08:48:31Z",
      "updated_at": "2023-10-05T10:51:31Z",
      "closed_at": "2023-10-05T10:51:31Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/1022/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "fnikolai"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/1022",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/1022",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.691750",
      "comments": []
    },
    {
      "issue_number": 977,
      "title": "Usecase: Video search using CLIP on vector database",
      "body": "This will be use case which show cases vector database capabilities on video search\n\n\nwe will use CLIP to vectorise videos and text \nuse this vectors to search similar videos \nall of this using superduperdb native vector search capabilities.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-20T11:53:44Z",
      "updated_at": "2023-10-02T10:37:46Z",
      "closed_at": "2023-10-02T10:37:46Z",
      "labels": [
        "🧩 use case"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/977/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/977",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/977",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:27.691762",
      "comments": [
        {
          "author": "blythed",
          "body": "End result:\r\n\r\n**2 models:**\r\n\r\n1. Model samples frames from video (so get list of images from video)\r\n   (Input video, output `[(image, time-stamp, reference) for _ in range(n_samples)]`)\r\n1. Classic CLIP\r\n\r\n**Workflow**\r\n\r\n1. Configure `CFG.downloads.hybrid = True` \r\n1. Insert n video URIs to a co",
          "created_at": "2023-09-27T14:24:27Z"
        }
      ]
    },
    {
      "issue_number": 910,
      "title": "Add broken link checker to github actions",
      "body": "https://github.com/gaurav-nelson/github-action-markdown-link-check\r\n\r\nFrom this comment on #900:\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb/pull/900#issuecomment-1714357193",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-12T07:56:47Z",
      "updated_at": "2023-09-27T08:52:58Z",
      "closed_at": "2023-09-27T08:52:58Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/910/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/910",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/910",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:29.805631",
      "comments": [
        {
          "author": "fnikolai",
          "body": "As a reference for testing, the top README.md points to a broken [link](https://docs.superduperdb.com/examples/index.html). \r\n\r\nLet's see if the checker can spot the issue.\r\n\r\n\r\n\r\n\r\n",
          "created_at": "2023-09-13T13:57:22Z"
        },
        {
          "author": "fnikolai",
          "body": "@rec @nenb \r\n\r\nThe link checker has found several broken links.\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb/actions/runs/6192910914/job/16813660200",
          "created_at": "2023-09-15T11:12:45Z"
        },
        {
          "author": "nenb",
          "body": "Thanks @fnikolai !\r\n\r\n_(Taken from Slack:)_\r\nUnfortunately there is a bunch of false positives in there as well. I don't know what the strategy is here - do we keep the action and modify how we create links in some way to reduce the false positives. Or do we just accept the heat death of the univers",
          "created_at": "2023-09-18T18:46:21Z"
        },
        {
          "author": "fnikolai",
          "body": "@nenb I think we can close this issue ",
          "created_at": "2023-09-26T20:46:32Z"
        },
        {
          "author": "nenb",
          "body": "Closing after merging #988 ",
          "created_at": "2023-09-27T08:52:58Z"
        }
      ]
    },
    {
      "issue_number": 879,
      "title": "Data classes with `:param` have each method appearing twice in documentation",
      "body": "Example: https://docs.superduperdb.com/source/superduperdb.base.html#module-superduperdb.base.config, where `api_key` appears twice, once as a \"param\" with the doc comment, and once as member, with the type  ([source](https://github.com/SuperDuperDB/superduperdb/blob/6171ecdca60647cdc6831588f511d3b3a1959ace/superduperdb/base/config.py#L68-L75)).\r\n\r\nCorrect way to do it looks like this: https://docs.superduperdb.com/source/superduperdb.container.html#superduperdb.container.artifact.ArtifactDesc ([source](https://github.com/SuperDuperDB/superduperdb/blob/b6e5b2564d6a943820edbdb3e9c55d2e6cabf50d/superduperdb/container/artifact.py#L100-L110)).",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-07T10:57:03Z",
      "updated_at": "2023-09-25T18:09:33Z",
      "closed_at": "2023-09-25T18:09:32Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/879/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/879",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/879",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:29.994922",
      "comments": [
        {
          "author": "blythed",
          "body": "This was completed without my review. I'm not satisfied with the outcome, since this breaks documentation of parameters via Jupyter/ IPython. If the docs of parameters are to be invisible in interactive sessions (primary way of working for data-scientists) then we need longer explanatory variable na",
          "created_at": "2023-09-15T08:41:43Z"
        },
        {
          "author": "blythed",
          "body": "Plan - pivot back to `sphinx` style `:param` parameter documentation.",
          "created_at": "2023-09-21T13:16:00Z"
        }
      ]
    },
    {
      "issue_number": 807,
      "title": "Core code: Increase the strictness of `mypy`",
      "body": "On our quest from gradually typed (ie contains `Any` type hints) to fully-typed (ie no more `Any`!) code we will need to increase the strictness of `mypy`. In particular, we will ideally include in `pyproject.toml` the following:\r\n```\r\nignore_missing_imports = false\r\ndisallow_any_unimported = true\r\ndisallow_untyped_defs = true\r\nno_implicit_optional = true\r\nwarn_return_any = true\r\nwarn_unused_ignores = true\r\ndisallow_untyped_calls = true\r\ndisallow_any_generics = true\r\n```\r\n\r\nThis will need to be done in stages, and may require temporary exceptions to be added for various modules along the way. See [here](https://rtpg.co/2023/03/07/how-to-adopt-mypy-on-bigger-projects.html) for some thoughts on what this might look like.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-29T11:04:21Z",
      "updated_at": "2023-09-21T13:13:22Z",
      "closed_at": "2023-09-21T13:13:22Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/807/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/807",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/807",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.188952",
      "comments": [
        {
          "author": "blythed",
          "body": "@rec to update us with key hot spots and status of typing.",
          "created_at": "2023-09-08T13:14:49Z"
        },
        {
          "author": "rec",
          "body": "All right, here's how many errors are actually revealed for each flag:\r\n\r\n```\r\ndisallow_any_generics: 180\r\ndisallow_any_unimported: 14\r\ndisallow_untyped_calls: 96\r\ndisallow_untyped_defs: 546\r\nignore_missing_imports: 12\r\nwarn_return_any: 44\r\n```\r\n\r\nThe two small ones relate to dependencies without st",
          "created_at": "2023-09-08T14:37:38Z"
        },
        {
          "author": "blythed",
          "body": "Resolution: allow: \n\n```\nignore_missing_imports = true\nno_implicit_optional = true\nwarn_unused_ignores = true\n```\n\nvia `pyproject.toml`.",
          "created_at": "2023-09-21T13:13:19Z"
        }
      ]
    },
    {
      "issue_number": 957,
      "title": "Correct Kanban workflow for issues and pull requests",
      "body": null,
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-15T13:12:02Z",
      "updated_at": "2023-09-21T12:18:40Z",
      "closed_at": "2023-09-21T12:18:40Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/957/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/957",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/957",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.413048",
      "comments": []
    },
    {
      "issue_number": 825,
      "title": "Fallback to default cpu device if device not found.",
      "body": "We, need to support the following situation which happened in #817 \r\n\r\n* Suppose someone saves a model with ``Device`` ``CUDA/MPS`` in one environment.\r\n* Then loads the same model in another environment without having mps or cuda\r\n\r\nWe need to fallback to default cpu if device not found.",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-08-30T14:37:29Z",
      "updated_at": "2023-09-20T11:59:36Z",
      "closed_at": "2023-09-15T08:50:45Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/825/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/825",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/825",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.413079",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "fixed by #946 ",
          "created_at": "2023-09-20T11:59:35Z"
        }
      ]
    },
    {
      "issue_number": 878,
      "title": "`CFG.cluster.cdc` used for two very different purposes, prevents more than one listener.",
      "body": "In [the code](https://github.com/SuperDuperDB/superduperdb/blob/b6e5b2564d6a943820edbdb3e9c55d2e6cabf50d/superduperdb/base/config.py#L50), it says, \"Whether change data capture should be used\".\r\n\r\nBut this value seems to never be read.\r\n\r\nInstead, it used as a global variable [here](https://github.com/SuperDuperDB/superduperdb/blob/b6e5b2564d6a943820edbdb3e9c55d2e6cabf50d/superduperdb/db/mongodb/cdc.py#L709) and [here](https://github.com/SuperDuperDB/superduperdb/blob/main/superduperdb/db/mongodb/cdc.py#L733).\r\n\r\nCFG isn't supposed to change in normal operation!  (We change it in tests, to set up various conditions.)\r\n\r\nMutable global variables are generally bad, and in this case, this will prevent more than one listener from working, and introduce the possibilities of a race condition.\r\n\r\nFor example, [this code](https://github.com/SuperDuperDB/superduperdb/blob/b6e5b2564d6a943820edbdb3e9c55d2e6cabf50d/superduperdb/container/vector_index.py#L98-L99) is going to do different things depending on whether cdc has started before or after this line of code executes!\r\n\r\n----\r\n\r\nSince I'm lecturing, another cause in this problem is that poor choice of name that raises more questions than it solves! :-P\r\n\r\n`CFG.cluster.cdc` could mean:\r\n\r\n* Is it enabled?\r\n* Is it running now?\r\n* The name of the cdc service\r\n* The URI to reach the service\r\n* A subtype giving many features of cdc.\r\n\r\nI'd call these `cdc_enabled`, `cdc_running`, `cdc_name`, `cdc_uri`, and just `cdc`. :-)\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-07T10:37:12Z",
      "updated_at": "2023-09-11T19:55:16Z",
      "closed_at": "2023-09-11T19:55:16Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/878/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/878",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/878",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.653034",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "Hi,\r\nCFG.cdc indicates that in the current program there is a cdc going on!\r\n\r\nnow, image this following situation:\r\n\r\nUser creates a cdc on a collection.\r\nNow, what this will do is whenever there is a change in this collection cdc will act and run our taskworlfow on the changes.\r\n\r\n\r\nNow while the ",
          "created_at": "2023-09-07T16:34:01Z"
        }
      ]
    },
    {
      "issue_number": 909,
      "title": "QTD app default repos json config support",
      "body": "We should have a repo configuration json which contains the description of the repositories to index",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-09-11T19:48:21Z",
      "updated_at": "2023-09-11T19:54:55Z",
      "closed_at": "2023-09-11T19:54:55Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/909/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/909",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/909",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.818995",
      "comments": []
    },
    {
      "issue_number": 876,
      "title": "Link on front page is a literal \"404\"",
      "body": "https://github.com/SuperDuperDB/superduperdb/blob/b6e5b2564d6a943820edbdb3e9c55d2e6cabf50d/README.md?plain=1#L113",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-09-07T10:12:34Z",
      "updated_at": "2023-09-11T19:26:04Z",
      "closed_at": "2023-09-11T19:26:04Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/876/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/876",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/876",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:30.819015",
      "comments": [
        {
          "author": "blythed",
          "body": "Fixed by #900 ",
          "created_at": "2023-09-11T19:26:04Z"
        }
      ]
    },
    {
      "issue_number": 744,
      "title": "Add CI action that checks imports for all our subgroups are working correctly",
      "body": "### What\r\n\r\nWe are now supporting users to do installs of subgroups in SuperDuperDB. For example `pip install superduperdb` will install our [core](https://github.com/SuperDuperDB/superduperdb/blob/06bf7c1af3d4e3be8d86595f83cd6c31764233b1/pyproject.toml#L38-L62) dependencies, whereas `pip install superduperdb[torch]` will also install the `torch` [dependencies](https://github.com/SuperDuperDB/superduperdb/blob/06bf7c1af3d4e3be8d86595f83cd6c31764233b1/pyproject.toml#L65-L69).\r\n\r\nWe need to introduce a CI action that checks that a PR will not break this functionality. For example, `torch` should never be imported at runtime outside of the `ext/torch` subpackage. And similarly for other future subgroups like `openai`.\r\n\r\nThis CI action should also check that all imports are valid eg perhaps a rename will lead to a failed import, and the CI should detect this. (Note: In a perfect world the tests will catch this, but this may not be the case.)\r\n\r\n### How\r\n\r\nTo be decided. But the CLI of `impall` does appear to provide the functionality that we need here.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-22T13:20:18Z",
      "updated_at": "2023-09-08T13:52:26Z",
      "closed_at": "2023-09-08T13:52:26Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/744/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/744",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/744",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:31.079074",
      "comments": [
        {
          "author": "nenb",
          "body": "Checking import validity for all possible subgroups will lead to combinatorial explosion of tests and is not feasible.\r\n\r\nFor now the decision is only to check the imports to the core package. Perhaps in the future we may also include certain (heavily-used) optional subgroups.",
          "created_at": "2023-09-01T16:21:41Z"
        },
        {
          "author": "nenb",
          "body": "Closing as completed.",
          "created_at": "2023-09-08T13:52:26Z"
        }
      ]
    },
    {
      "issue_number": 524,
      "title": "Core code: Much of mypy has been disabled",
      "body": "https://github.com/SuperDuperDB/superduperdb-stealth/blob/main/pyproject.toml#L43-L50\r\n\r\nThis list should be empty!\r\n\r\nIf we need overrides we should do them individually.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-25T10:30:37Z",
      "updated_at": "2023-09-08T13:16:16Z",
      "closed_at": "2023-09-08T13:16:09Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/524/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/524",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/524",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:31.269996",
      "comments": [
        {
          "author": "blythed",
          "body": "This was too much over-head, and the tool was wrong very often, in particular with regards `dataclasses`.",
          "created_at": "2023-07-25T13:57:06Z"
        },
        {
          "author": "rec",
          "body": "Done decisively!",
          "created_at": "2023-09-08T13:16:16Z"
        }
      ]
    },
    {
      "issue_number": 554,
      "title": "[FEATURE REQUEST]:  Add outputs method in document",
      "body": "### Contact Details\n\n_No response_\n\n### Feature Description\n\nWe should have a outputs method in ``Document`` class through which user does not explicitly need to call \"_outputs\" key\n\n### Use Case Description\n\n_No response_\n\n### Organization\n\n_No response_\n\n### Who are the stake-holders?\n\n_No response_",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-07-28T09:39:15Z",
      "updated_at": "2023-09-08T12:38:34Z",
      "closed_at": "2023-09-08T12:38:34Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/554/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/554",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/554",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:31.451093",
      "comments": []
    },
    {
      "issue_number": 776,
      "title": "Ibis: make sure assumptions of ibis use-case are clear",
      "body": null,
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-25T12:55:19Z",
      "updated_at": "2023-09-06T11:28:47Z",
      "closed_at": "2023-09-06T11:28:47Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/776/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/776",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/776",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:33.333551",
      "comments": [
        {
          "author": "nenb",
          "body": "Closing as `ibis` work now exists in `main`. This will be something that I will need to continually educate myself about in my own time. ",
          "created_at": "2023-09-06T11:28:47Z"
        }
      ]
    },
    {
      "issue_number": 777,
      "title": "Audit all instances of time.sleep",
      "body": "Our code has six hard-coded sleeps, four in the source, two in tests.\r\n\r\nWe are doing this to wait until a resource or computation is completely.\r\n\r\nBut we don't know how long or short these resources will take, and in some cases, we either fail unnecessarily, or have significant waits in the tests.\r\n\r\nThis is a fairly short project - it's really [this line](https://github.com/SuperDuperDB/superduperdb/blob/296634de2b63d7820390a6aef8e2ea7204b3aa96/test/integration/test_cdc.py#L84) that is known to slow us down",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-25T14:40:27Z",
      "updated_at": "2023-09-01T13:47:43Z",
      "closed_at": "2023-09-01T13:47:43Z",
      "labels": [
        "📉 technical debt",
        "🔄 CI"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/777/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/777",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/777",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:33.543080",
      "comments": []
    },
    {
      "issue_number": 738,
      "title": "Core code: Audit and either fix, or explain, all typing errors",
      "body": "We have 160 typing errors suppressed in the code.  I attach a list of the errors.\r\n\r\nSkimming these, about 20% are obviously nothing, about 20% seem very likely to be actual errors where the code could never actually work, and the remaining are unclear but probably not important.\r\n\r\nMost of the 20% likely errors don't seem at a 1 minute glance to be covered by unit tests.\r\n\r\n----\r\n\r\nCranking through 160 errors would be a day or so but past experience has shown that fixing an error often involves adding a type declaration that results in errors elsewhere.\r\n\r\nHowever, for actual errors, these new issues are somewhat likely to be errors in their turn. ",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-21T11:53:52Z",
      "updated_at": "2023-09-01T08:27:38Z",
      "closed_at": "2023-09-01T08:27:38Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/738/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/738",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/738",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:33.543113",
      "comments": [
        {
          "author": "rec",
          "body": "Example analyses just from the error messages.\r\n\r\n-----\r\n\r\n`error: Item \"Dict[Any, Any]\" of \"Union[Insert, Dict[Any, Any]]\" has no attribute \"documents\"  [union-attr]\r\nsuperduperdb/db/base/download_content.py:79: `\r\n\r\nAlmost certainly not a significant issue, but simply a \"color changing object\" (my",
          "created_at": "2023-08-21T11:55:08Z"
        },
        {
          "author": "rec",
          "body": "```\r\nsuperduperdb/data/cache/typed_cache.py:43: error: Variable \"cls\" is not valid as a type  [valid-type]\r\nsuperduperdb/data/cache/typed_cache.py:43: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases\r\nsuperduperdb/base/logger.py:25: error: Incompatible typ",
          "created_at": "2023-08-21T11:56:37Z"
        }
      ]
    },
    {
      "issue_number": 815,
      "title": "Integrate Cohere and Antrophic APIs",
      "body": "https://cohere.com/\r\nhttps://www.anthropic.com/",
      "state": "closed",
      "author": "thgnw",
      "author_type": "User",
      "created_at": "2023-08-29T15:56:57Z",
      "updated_at": "2023-08-29T16:58:38Z",
      "closed_at": "2023-08-29T16:58:38Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/815/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/815",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/815",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:33.761960",
      "comments": [
        {
          "author": "nenb",
          "body": "@thgnw  This is tracked in #797. Can we close this issue as redundant? ",
          "created_at": "2023-08-29T16:42:53Z"
        },
        {
          "author": "thgnw",
          "body": "sorry yes - closing now",
          "created_at": "2023-08-29T16:58:38Z"
        }
      ]
    },
    {
      "issue_number": 746,
      "title": "Update release action to check that wheel imports are working correctly",
      "body": "### What\r\n\r\nAfter we have built our build artifacts, we should also check that everything is functioning correctly by checking that the imports are all working. This can be included [here](https://github.com/SuperDuperDB/superduperdb/blob/06bf7c1af3d4e3be8d86595f83cd6c31764233b1/.github/workflows/release.yaml#L61-L62). See also #744.",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-08-22T13:21:57Z",
      "updated_at": "2023-08-29T14:25:59Z",
      "closed_at": "2023-08-29T14:25:59Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/746/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/746",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/746",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:33.958124",
      "comments": [
        {
          "author": "nenb",
          "body": "This is completed by #803.",
          "created_at": "2023-08-29T14:25:59Z"
        }
      ]
    },
    {
      "issue_number": 792,
      "title": "A release script",
      "body": "## What is it?\r\n\r\nThis is the single manual step in the release process, accomplished by running a script\r\n\r\n## How does it work?\r\n\r\n1. Start with:\r\n\r\n`$ python -m superduperdb release <version>`\r\n\r\n`<version>` must be one of `patch`, `minor`, or `major`.\r\n\r\n2. The program prints all the commits back until the _previous_ release\r\n3. You are then prompted to enter a *release summary* in text\r\n4. Two empty lines in a row ends the summary\r\n5. The script prints the new version number and summary and gets a confirm\r\n6. The script changes the version number in the code, edits the CHANGELOG.md to include both the summary and the list of commits since the last release.\r\n7. It makes a commit with a very specific format like `Update version to v1.3.1` \r\n8. This commit is then sent for review like any other pull request.\r\n9. After review, the commit is pulled as usual.\r\n10. Our CI picks up this specific commit format, creates a tag, creates a github release, and pushes to pypi\r\n\r\nThe advantage is that we get a chance to code review the CHANGELOG.md and add exciting messages to it, and it's impossible to do this by mistake.\r\n\r\nThe disadvantage is that it's a bit of our code.\r\n\r\n----\r\n\r\nTime estimate is two hours to get it basically working, then an hour making the changelist.md fancy and another hour just wasted.\r\n\r\nBear in mind that using the github workflow would also have some time investment.\r\n\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-28T08:41:14Z",
      "updated_at": "2023-08-28T11:25:07Z",
      "closed_at": "2023-08-28T11:25:07Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/792/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/792",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/792",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:34.171316",
      "comments": [
        {
          "author": "rec",
          "body": "Done, something like this!",
          "created_at": "2023-08-28T11:25:07Z"
        }
      ]
    },
    {
      "issue_number": 778,
      "title": "Test for typing coverage and exceptions",
      "body": "Add a short test that counts the number of `noqa:` and `type: ignore` and makes sure they haven't gone up, based on a number in pyproject.toml.\r\n\r\nPurpose: avoid regressions of our typing coverage.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-25T14:58:43Z",
      "updated_at": "2023-08-27T14:36:15Z",
      "closed_at": "2023-08-27T14:36:15Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/778/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/778",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/778",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:34.375986",
      "comments": []
    },
    {
      "issue_number": 758,
      "title": "Document current server-client implementation and scope migration to FastAPI",
      "body": "As a stop-gap to having a fully typed server #605, we would like to evaluate, document the current server implementation, and provide details of how hard it would be to convert the endpoints to fastAPI endpoints.\r\n\r\nWe'll use this documentation to design and build our professional server-client implementation as per #605.\r\n\r\nSee discussion here also: https://github.com/SuperDuperDB/superduperdb/discussions/768",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-24T07:38:47Z",
      "updated_at": "2023-08-26T10:03:50Z",
      "closed_at": "2023-08-26T10:03:50Z",
      "labels": [
        "🔍 discovery"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/758/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/758",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/758",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:34.376170",
      "comments": [
        {
          "author": "blythed",
          "body": "Assigning also to @rec for visibility: to emphasize, this is a stop-gap measure to the fully professionalized server. The goal would be to meet in the middle.\r\n\r\n- [x] Document current server approach\r\n- [ ] Investigate how easier it would be to migrate the current endpoints with FastAPI endpoints\r\n",
          "created_at": "2023-08-24T09:47:28Z"
        },
        {
          "author": "nenb",
          "body": "The current server approach is documented in #767. \r\n\r\nThe final two points ('Investigate ...' and 'Sync ...') are currently being discussed in a GitHub Discussion [here](https://github.com/SuperDuperDB/superduperdb/discussions/768).",
          "created_at": "2023-08-25T09:22:55Z"
        }
      ]
    },
    {
      "issue_number": 722,
      "title": "Investigate scope of slack-bot for documentation",
      "body": "QTD app as slack-bot.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-08-18T12:14:43Z",
      "updated_at": "2023-08-25T13:05:54Z",
      "closed_at": "2023-08-25T13:05:53Z",
      "labels": [
        "idea",
        "🔍 discovery"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/722/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/722",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/722",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:34.576185",
      "comments": [
        {
          "author": "blythed",
          "body": "Closing since change of scope.",
          "created_at": "2023-08-25T13:05:53Z"
        }
      ]
    },
    {
      "issue_number": 547,
      "title": "[FEATURE REQUEST]: Use Atlas vector-search for SuperDuperDB vector-search",
      "body": "### Contact Details\r\n\r\nduncan@superduperdb.com\r\n\r\n### Feature Description\r\n\r\nIn `mongodb.query` we have `Aggregate`. Atlas vector-search also uses aggregate pipelines to perform vector search.\r\nWe should make it possible to use both of these together.\r\n\r\nWe can set up atlas vector search using this guide: https://www.mongodb.com/docs/atlas/atlas-search/field-types/knn-vector/\r\n\r\n\r\nAnd this one: https://www.mongodb.com/docs/upcoming/reference/command/createSearchIndexes/#create-a-search-index-on-all-fields\r\n\r\n```\r\n{\r\n  \"mappings\": {\r\n    \"dynamic\": true|false,\r\n    \"fields\": {\r\n      \"<field-name>\": {\r\n        \"type\": \"knnVector\",\r\n        \"dimensions\": <number-of-dimensions>,\r\n        \"similarity\": \"euclidean | cosine | dotProduct\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHere's an example aggregate including vector search:\r\n\r\n```\r\n{\r\n  $search: {\r\n    \"index\": \"<index name>\", // optional, defaults to \"default\"\r\n    \"knnBeta\": {\r\n      \"vector\": [<array-of-numbers>],\r\n      \"path\": \"<field-to-search>\",\r\n      \"filter\": {<filter-specification>},\r\n      \"k\": <number>,\r\n      \"score\": {<options>}\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n(Source: https://www.mongodb.com/docs/atlas/atlas-search/knn-beta/)\r\n\r\nWe should inject the vector into the `$search.knnBeta.vector` field.\r\n\r\n### Implementation\r\n\r\nCurrently Atlas Search is only configurable via the Atlas UI, CLI or API.\r\nThe CLI can be accessed from `pymongo` via `client.command`.\r\n\r\n### Use Case Description\r\n\r\nAtlas search offers `knnBeta` vector search as a step in pipelines. For this, it's incumbent on the developer\r\nto inject the vector used in such a search. The idea is use SuperDuperDB to perform an entire search, including\r\ncomputation of the vector in one pass.\r\n\r\n### Who are the stake-holders?\r\n\r\nMongoDB Atlas customers.\r\n\r\n###\r\n\r\nTasks\r\n\r\n- [ ] make atlas vector-search configurable from `superduperdb` (use `client.command`)\r\n- [ ] \"discover\" `Documents` in an `.aggregate` pipeline and convert using models\r\n- [ ] create interface allowing vector-search to be accessed from `DB` class",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-27T16:25:36Z",
      "updated_at": "2023-08-20T22:33:47Z",
      "closed_at": "2023-08-20T22:33:47Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/547/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/547",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/547",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:34.774816",
      "comments": [
        {
          "author": "blythed",
          "body": "Outcome of research (needs required permissions):\r\n\r\n```python\r\nclient = MongoClient(uri)\r\nclient.wikipedia.command({\r\n   \"createSearchIndexes\": \"demo_collection\",\r\n   \"indexes\": [\r\n        {\r\n            \"name\": \"searchIndex01\",\r\n            \"definition\": {\r\n                \"mappings\": {\r\n         ",
          "created_at": "2023-08-17T15:06:23Z"
        }
      ]
    },
    {
      "issue_number": 359,
      "title": "Use cases",
      "body": "We need to optimize the notebooks for:\n\n- [x] MNIST hello world\n- [x] OpenAI search\n- [x] Benchmark OpenAI vs. sentence-transformers search\n- [x] Train sentiment analysis using `transformers`\n- [x] Multimodal search with CLIP or otherwise\n- [x] Transfer learning using TorchVision and Sklearn\n- [x] Langchain + Audio file transcriptions\n- [x] Question-the-docs demo",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-03T17:50:24Z",
      "updated_at": "2023-08-19T11:38:28Z",
      "closed_at": "2023-08-19T11:38:28Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/359/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed",
        "thejumpman2323"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/359",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/359",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:36.756421",
      "comments": [
        {
          "author": "blythed",
          "body": "Here a resource for the sentiment analysis task: https://www.analyticsvidhya.com/blog/2022/02/sentiment-analysis-using-transformers/",
          "created_at": "2023-07-12T13:44:56Z"
        },
        {
          "author": "thejumpman2323",
          "body": "thanks",
          "created_at": "2023-07-12T13:51:18Z"
        }
      ]
    },
    {
      "issue_number": 379,
      "title": "Long form documentation",
      "body": "- [x] Why SuperDuperDB?\n  - [x] Common issues in model development, model management, databases\n  - [x] Opportunities for DB users with latest AI\n  - [x] SuperDuperDB's vision\n  - [x] What SuperDuperDB is not\n- [x] Common usage-patterns\n  - [x] Getting started with a SuperDuperDB instance\n  - [x] Inserting data\n  - [x] Defining models via `.predict`\n  - [x] Linking models together via `.predict`\n  - [x] Querying data\n  - [x] Using the output of models to query data\n  - [x] Training models via `.fit`\n  - [ ] Standalone mode and cluster mode\r\n- [ ] Setting up a SuperDuperDB deployment\r\n- [ ] High level roadmap and detailed vision\r\n- [ ] Notebook examples see #359 worked in via `nbsphinx`\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-06T13:20:15Z",
      "updated_at": "2023-08-18T14:17:07Z",
      "closed_at": "2023-08-18T14:17:07Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/379/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/379",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/379",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:37.014590",
      "comments": [
        {
          "author": "fkiraly",
          "body": "Looks great! Some comments:\r\n\r\n* I would ensure the readme answers the following in this order:\r\n    * what is this?\r\n    * how to use this (quick start)\r\n    * how to contribute\r\n* I strongly suggest not to separate the \"deployment\" aspect from \"usage\"\r\n    * \"assumes\" in vignettes need to be clear",
          "created_at": "2023-07-06T13:33:47Z"
        },
        {
          "author": "blythed",
          "body": "So for usage patterns, I want to describe the principal ways in which a user will use the software -- of course they can do completely random stuff with it we don't foresee, but the primary things we intend should be there. Does that make sense. For each part, I'll describe a typical situation a use",
          "created_at": "2023-07-06T14:07:36Z"
        },
        {
          "author": "fkiraly",
          "body": "> Does that make sense. For each part, I'll describe a typical situation a user might be in.\r\n\r\nAbsolutely - most important tech content imo.\r\n\r\n> I've seen repos with essentially an empty `README.md`, and everything in the docs. I understand you think we should include more, correct?\r\n\r\nYes.\r\nWere ",
          "created_at": "2023-07-06T16:10:37Z"
        },
        {
          "author": "blythed",
          "body": "@thejumpman2323 architecture diagram explanation",
          "created_at": "2023-07-24T10:38:11Z"
        },
        {
          "author": "blythed",
          "body": "Solved by release v0.0.4",
          "created_at": "2023-08-18T14:17:04Z"
        }
      ]
    },
    {
      "issue_number": 503,
      "title": "More explanation of resume tokens",
      "body": "In the CDC `DatabaseWatcher` component we have support for resume tokens. Please document:\r\n\r\n- [ ] What problem are we solving?\r\n- [ ] How do the resume tokens work?\r\n- [ ] What do we need as a minimum to set this up",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-22T19:08:38Z",
      "updated_at": "2023-08-11T11:29:08Z",
      "closed_at": "2023-08-11T11:29:07Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/503/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/503",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/503",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:37.243490",
      "comments": [
        {
          "author": "thejumpman2323",
          "body": "## 1. Resume Tokens:\r\n\r\nIn MongoDB, a resume token is a special value that represents a point in the MongoDB Oplog (an internal capped collection that records write operations) where Change Data Capture starts or resumes from. It is essentially an opaque binary token that encapsulates a specific pos",
          "created_at": "2023-07-23T08:06:33Z"
        },
        {
          "author": "thejumpman2323",
          "body": "@blythed ",
          "created_at": "2023-07-23T08:07:00Z"
        }
      ]
    },
    {
      "issue_number": 497,
      "title": "Data setup which loads blobs on the fly from filesystem/ s3",
      "body": "When we're training models based on bigger records containing `Encodables` which have large blobs, it may be more performant to save these blobs in a filesystem (`s3` or `nfs` or local filesystem) and load them on-the-fly during training and inference. This is a generalization of standard situations in e.g. computer vision with `torch`.\r\n\r\nUnder the hood, currently we have something like this, which uses the `_content` keyword.\r\n\r\n```python\r\nr = {\r\n  \"img\": {\"_content\": {[optional \"uri\": \"https://...\",], \"bytes\": b\"...\", \"encoder\": \"<my-encoder>\"}}\r\n}\r\n```\r\n\r\nThe proposed extension is augment this formalism with `\"ref\"` field, which points to a local filesystem.\r\n\r\n\r\n```python\r\nr = {\r\n  \"img\": {\"_content\": {[optional \"uri\": \"https://...\",], \"ref\": \"file://...\", \"encoder\": \"<my-encoder>\"}}\r\n}\r\n```\r\n\r\nRef will be used at `collection.find()`-time, it will be loaded from the local filesystem, and the end-user won't know the difference.\r\n\r\nAt download time, the files will be saved in the filesystem instead of the records, and the `ref` will be added to the records.\r\n\r\nRelevant functions are:\r\n\r\n- `Datalayer.execute`\r\n- `mongodb.query.find`\r\n- `SuperDuperCursor`\r\n- `datalayer.base.download_content.Downloader`\r\n\r\nIf can edit these, we should be able to modify training without great overhead.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-22T01:44:31Z",
      "updated_at": "2023-08-11T11:14:37Z",
      "closed_at": "2023-08-11T11:14:37Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/497/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/497",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/497",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:37.422622",
      "comments": [
        {
          "author": "blythed",
          "body": "There are two situations:\r\n- The user already has the blobs on disk and would like to just use them.\r\n- The users providers URIs and these are downloaded to disk with `ref` generated from the hash of the content (to verify integrity)\r\n- Optionally we could make it so that the ref can also be on `s3:",
          "created_at": "2023-07-27T13:19:53Z"
        },
        {
          "author": "ybubnov",
          "body": "It seems to me that the cases that the target blobs are located in s3 or in a local file system are quite similar from the perspective that a user have already saved them here. And if we were asked to rename those images that would be considered like quite a complicated precondition to start use the",
          "created_at": "2023-07-27T14:15:55Z"
        },
        {
          "author": "blythed",
          "body": "Ok so let me see if I follow?\r\n\r\n- If the files are already local or in a bucket the URI is just `file://...` or `s3://`\r\n- Otherwise we use something like a hash function applied to the URI to construct the path, and then we know where the files are.\r\n\r\nYes, it's a good plan. You can use `hashlib` ",
          "created_at": "2023-07-28T11:29:57Z"
        },
        {
          "author": "blythed",
          "body": "Related to #308 ",
          "created_at": "2023-08-07T10:08:08Z"
        }
      ]
    },
    {
      "issue_number": 599,
      "title": "Re-allow pydantic 2.x",
      "body": "We have some issues that prevent us from working with pydantic 2 so we have a pin against it.\r\n\r\n1. This prevents people who use our library from using pydantic 2\r\n2. We eventually want to use FastAPI and we probably need pydantic 2 to make it work\r\n\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-02T11:01:30Z",
      "updated_at": "2023-08-07T14:52:32Z",
      "closed_at": "2023-08-07T14:52:32Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/599/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/599",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/599",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:37.643153",
      "comments": [
        {
          "author": "blythed",
          "body": "What are the issues with pydantic 2. Currently the only code actually using pydantic is the config module.",
          "created_at": "2023-08-04T09:14:56Z"
        },
        {
          "author": "rec",
          "body": "The issue is that if you have pydantic 2 installed, and try even to `import superduperdb`, you get an error, for several reasons, all due to configs.\r\n\r\nI fixed these in an outstanding pull request so our code works for all existing versions of Pydantic.\r\n\r\n---\r\n\r\nOne of them is because we have a da",
          "created_at": "2023-08-04T09:51:00Z"
        },
        {
          "author": "blythed",
          "body": "I'm ok with the workaround suggested there. (If `pydantic` is really that valuable to us that is.)\r\n\r\nI still would like to see how to implement our solution used in `Serializable.serialize`. In addition\r\nI am not sure that the way `pydantic` works with `t.Union` will work for us.",
          "created_at": "2023-08-05T20:43:40Z"
        },
        {
          "author": "blythed",
          "body": "Please could you provide me with an example of how the `type_id` works in order to disambiguate `t.Union` and `t.Any`?",
          "created_at": "2023-08-07T08:34:57Z"
        },
        {
          "author": "rec",
          "body": "`t.Any` is not a possible serializable value, so it can't work at all! :-)\r\n\r\nThe short \"proof of concept\" section is going to demonstrate how `type_id` works.\r\n",
          "created_at": "2023-08-07T08:43:47Z"
        }
      ]
    },
    {
      "issue_number": 539,
      "title": "Mongodb Dump of a computer vision model vector on val2017 coco dataset",
      "body": "### Why\n\nWe would need this mongdb dump for a pre-installed notebook for playground.\n\n### How\n\n_No response_\n\n### What\n\n- [x] create collar\r\n- [x] download coco data\r\n- [x] get image vectors\r\n- [x] store in mongodb\r\n- [ ] mongodb dump",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-07-26T17:37:22Z",
      "updated_at": "2023-08-06T18:36:34Z",
      "closed_at": "2023-08-06T18:36:34Z",
      "labels": [
        "📝 documentation",
        "🧩 use case"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/539/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/539",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/539",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:37.869931",
      "comments": [
        {
          "author": "blythed",
          "body": "As a guide https://superduperdb.github.io/superduperdb-stealth/examples/resnet_features.html",
          "created_at": "2023-07-30T20:23:46Z"
        }
      ]
    },
    {
      "issue_number": 390,
      "title": "Question: Can we pass path in encoders (pillow)?",
      "body": "Hi,\r\n\r\nThe below python code asks user to open PIL image, meawhile user has already imported pillow encoder.\r\n\r\n```python\r\nfrom superduperdb.encodes.pillow import pil_image as i\r\ndb.execute(\r\n    coll.insert_many([\r\n        {'img': i(PIL.image.open(path))} for path in images\r\n    ])\r\n)\r\n```\r\n\r\nMy question is can't we open the path within the encoder itself, while also providing support to take filestream as input like in above example\r\n\r\n```python\r\nfrom superduperdb.encodes.pillow import pil_image as i\r\n# This works\r\ndb.execute(\r\n    coll.insert_many([\r\n        {'img': i(path)} for path in images\r\n    ])\r\n)\r\n\r\n# This should also work as well.\r\ndb.execute(\r\n    coll.insert_many([\r\n        {'img': i(PIL.image.open(path))} for path in images\r\n    ])\r\n)\r\n```\r\n\r\nreference: https://github.com/SuperDuperDB/superduperdb-stealth/blob/main/notebooks/mnist_clean.ipynb\r\ncc @fkiraly @blythed \r\n",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-07-08T15:14:26Z",
      "updated_at": "2023-08-05T20:37:23Z",
      "closed_at": "2023-08-05T20:37:11Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/390/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/390",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/390",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.054388",
      "comments": [
        {
          "author": "fkiraly",
          "body": "What is the reference, i.e., where is this code from?",
          "created_at": "2023-07-10T09:13:29Z"
        },
        {
          "author": "thejumpman2323",
          "body": "> What is the reference, i.e., where is this code from?\r\n\r\nHi,\r\nAdded the reference above :)",
          "created_at": "2023-07-10T09:35:30Z"
        },
        {
          "author": "blythed",
          "body": "Solved with optional parameter `url=...`",
          "created_at": "2023-08-05T20:37:11Z"
        }
      ]
    },
    {
      "issue_number": 407,
      "title": "User and developer setup documentation",
      "body": "I have committed to write clear, concise, comprehensive documentation for minimal user and developer setups.\r\n\r\nRelated issues:\r\nhttps://github.com/SuperDuperDB/superduperdb-stealth/issues/402\r\nhttps://github.com/SuperDuperDB/superduperdb-stealth/issues/379\r\n\r\nThe plan is to add a single `rst` file to the `docs` folder, with two sections - user setup, developer setup.\r\n\r\nThis should include, for users:\r\n\r\n* `pip install` (hypothetical end state)\r\n* local feature test/mock install\r\n* placeholder for deployment (I cannot fill this in at the moment)\r\n\r\nfor developers:\r\n\r\n* editable install - `pip` users (no `poetry`), `poetry` users\r\n* mongoDB mock setup\r\n* testing workflow",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-07-11T10:35:56Z",
      "updated_at": "2023-08-05T20:36:25Z",
      "closed_at": "2023-08-05T20:36:25Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/407/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/407",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/407",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.255006",
      "comments": [
        {
          "author": "blythed",
          "body": "Agreed - please use `.md` (only quibble).",
          "created_at": "2023-07-11T10:41:27Z"
        },
        {
          "author": "fkiraly",
          "body": "so, single `md` file in `docs`?",
          "created_at": "2023-07-11T10:46:37Z"
        }
      ]
    },
    {
      "issue_number": 455,
      "title": "Change terminology to become more intuitive.",
      "body": "Ideas:\r\n\r\n- `Watcher` -> `bind`\r\n- `variety` -> `?`\r\n- ...",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-16T20:26:25Z",
      "updated_at": "2023-08-05T20:35:47Z",
      "closed_at": "2023-08-05T20:35:47Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/455/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "blythed",
        "nenb",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/455",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/455",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.493048",
      "comments": [
        {
          "author": "rec",
          "body": "`variety` should just be `type_id` - I tried to change this three weeks ago but then had to pause it.\r\n\r\nhttps://github.com/SuperDuperDB/superduperdb-stealth/wiki/Glossary#type_id\r\n\r\n----\r\n\r\n`Watcher` has to be renamed into a noun, not a verb.  :-D\r\n\r\nI'm thinking `KeyListener` because it listens to",
          "created_at": "2023-07-18T10:24:23Z"
        },
        {
          "author": "rec",
          "body": "Now I'm thinking `DatabaseListener`.  :-)\r\n\r\n(EDIT: it turns out we already have a `DatabaseListener` in the CDC code.) ",
          "created_at": "2023-07-18T12:23:56Z"
        },
        {
          "author": "blythed",
          "body": "Compromise:\n\n- `type_id`\n- `Listener`",
          "created_at": "2023-07-28T12:23:19Z"
        }
      ]
    },
    {
      "issue_number": 384,
      "title": "Dependency isolation in components",
      "body": "I think we should come up with a good design for dependency isolation.\r\n\r\nThe current model is not very extensible - each DB and model framework we support gets flat-added to the core dependency set.\r\n\r\nThis does not scale:\r\n\r\n* as the number of dependencies approaches infinity, the probability of requirement clashes approaches one\r\n* the user is already now forced to install a huge set of dependencies\r\n\r\nWe should, instead aim to:\r\n\r\n* minimize core dependencies\r\n* ensure the dependencies for any given user's environment are handled smartly. E.g., a user who wants only `sklearn` in PostgreSQL, or a user who wants only `pytorch` in MongoDB.\r\n\r\nI think the later we address this, the more this will grow into tech debt.",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-07-07T11:45:47Z",
      "updated_at": "2023-08-04T12:17:35Z",
      "closed_at": "2023-08-04T12:17:34Z",
      "labels": [
        "🚀 feature request",
        "📉 technical debt",
        "idea"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/384/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/384",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/384",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.698703",
      "comments": [
        {
          "author": "blythed",
          "body": "Agreed:\r\n\r\nSomething like `pip install superduperdb[pymongo,torch]`",
          "created_at": "2023-07-09T20:15:32Z"
        },
        {
          "author": "nenb",
          "body": "We may also need to be aware of any non-Python dependencies that we support (eg [MongoDB](https://pymongo.readthedocs.io/en/stable/tutorial.html#prerequisites)) or any implicit non-Python dependencies that we support (eg support for `torch` on different platforms).",
          "created_at": "2023-07-10T09:51:44Z"
        },
        {
          "author": "rec",
          "body": "This is easy to do, but sadly accomplishes little for us.  It does reduce the footprint for our users, but that's low priority for v0.1.\r\n\r\nWe are still at the mercy of the intersection of all the dependencies, even though no individual user might have that problem.\r\n\r\n----\r\n\r\nThere is a solution wh",
          "created_at": "2023-07-10T10:35:08Z"
        },
        {
          "author": "blythed",
          "body": "I agree that allowing multiple subsets of components may lead to conflicts when combining. For that reason we should also have `pip install superduperdb[all]` or something like that, against which the tests are run.",
          "created_at": "2023-07-13T01:16:57Z"
        },
        {
          "author": "thgnw",
          "body": "closing because duplicate of #562 ",
          "created_at": "2023-08-04T12:17:34Z"
        }
      ]
    },
    {
      "issue_number": 441,
      "title": "Missing queries from MongoDB query API",
      "body": "E.g. `collection.count_documents({})`",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-14T17:36:54Z",
      "updated_at": "2023-08-03T18:31:07Z",
      "closed_at": "2023-08-03T18:31:07Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/441/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/441",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/441",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.891200",
      "comments": []
    },
    {
      "issue_number": 529,
      "title": "Add a list of retrievals as input to a `db.predict`.",
      "body": "Something like this:\r\n\r\n```python\r\ndb.predict('<model-name>`, input, select: t.Optional[Select] = None)\r\n```",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-25T14:18:06Z",
      "updated_at": "2023-08-03T18:28:54Z",
      "closed_at": "2023-08-03T18:28:54Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/529/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/529",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/529",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.891223",
      "comments": []
    },
    {
      "issue_number": 399,
      "title": "[BUG] notebooks in `notebooks` do not run due to import errors within `superduperdb`",
      "body": "All notebooks in the `notebooks` folder fail with import errors.\r\n\r\nConfirmed under current `main`/`pyproject.toml`, windows, pyrhon 3.10, for:\r\n\r\n* `compare-vector-search-solutions` - `No module named superduperdb.apis`\r\n* `mnist-clean`- `No module named superduperdb.types`\r\n* `mongo-cdc` - `No module named superduperdb.types`\r\n* `multimodal-image-search-clip` - `No module named superduperdb.types`, also `CLIP` is not part of requirements\r\n* `openai` - `No module named superduperdb.apis`\r\n* `voice-memos` - `No module named superduperdb.datalayer.mongodb.client`",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-07-10T13:06:04Z",
      "updated_at": "2023-08-03T18:27:58Z",
      "closed_at": "2023-08-03T18:27:58Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/399/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/399",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/399",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.891231",
      "comments": []
    },
    {
      "issue_number": 422,
      "title": "Merge `Encodable` and `Artifact`; and merge `ArtifactDocument` and `Document`",
      "body": "These things basically duplicate the same thing. We can make the project easier to understand by merging these all into one thing.\r\n\r\nThis will mean bringing serialization of `Models` etc. and encoding of primary data onto the same playing field.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-13T01:19:44Z",
      "updated_at": "2023-08-03T18:27:30Z",
      "closed_at": "2023-08-03T18:27:29Z",
      "labels": [
        "📉 technical debt",
        "specification needed",
        "idea"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/422/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/422",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/422",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.891240",
      "comments": []
    },
    {
      "issue_number": 402,
      "title": "User journey protocol - package developer setup - FK 2023-07-10",
      "body": "Summary of user journey when trying to set up the repository with current `main`, 2023-07-10, 11am UTC - 2:30 UTC with `main` at `ad0e57f`.\r\n\r\nLocal machine: windows 11, vs code with low-custom setup.\r\n\r\n1. read set up instructions (appendix A). Seems unclear what to do, the instructions are not specific or step-by-step. Find instructions pretty confusing/rambling, could be improved.\r\n2. Decide to try \"standard data science\" attempt to install package with `conda` / `pip` (not `poetry`), `pip install -e .`, in python 3.10 env.\r\n3. works but takes 30min to download and install. Prompts questions to team due to long duration, but ultimately installs with no problem.\r\n4. trying to execute notebooks (in `notebooks` folder) with this environment. Ends up with import failures in 5 out of 6 notebooks, and a mongodb connection failure in 1 of 6 (`mnist_clean`), see here: https://github.com/SuperDuperDB/superduperdb-stealth/issues/399\r\n5. realize that reqruirement was a locally running mongoDB server, which probably does not run. In contrast to assertion in setup instructions (appendix A), docker does not seem to imply this, at least on windows. Ask team for how to set up on windows. No one has windows, so no clear answer.\r\n6. download mongoDB community edition for windows from official mongoDB source and install as admin. This sets up local server under default settings.\r\n7. retry `mnist_clean`, the database class is now happy. Runs through until a later cell which errors out with the same issue as the other notebooks (failed import).\r\n\r\n(effective time spent on this is probably closer to 90min due to me doing other things in-between)\r\n\r\n## Appendix A - current setup instructions (from internal notion page)\r\n\r\nThis development workflow is known to work on some recent MacOS and *nix computers, [specific platform info TBD].\r\n\r\nYou will need to globally install the following programs outside your Python environment using `[pyenv](https://realpython.com/intro-to-pyenv/)`, [[Brew](https://brew.sh/)](https://brew.sh/), `[apt](https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html)` or your favorite package manager:\r\n\r\n- Python [[3.8](https://www.python.org/downloads/release/python-3810/)](https://www.python.org/downloads/release/python-3810/) and [[3.10](https://www.python.org/downloads/release/python-31011/)](https://www.python.org/downloads/release/python-31011/), our minimum and maximum supported versions\r\n- [[Docker](https://www.docker.com/)](https://www.docker.com/), a virtualization system\r\n- [[Poetry](https://python-poetry.org/docs/)](https://python-poetry.org/docs/), a Python package manager (this needs to be at least `1.5.0`)\r\n\r\n([[MongoDB Community edition](https://www.mongodb.com/docs/manual/administration/install-community/)](https://www.mongodb.com/docs/manual/administration/install-community/), our primary database, is now installed through Docker and doesn’t need to be installed locally.)\r\n\r\n### Virtual environments\r\n\r\nWe do all our development in [[Python virtual environments](https://realpython.com/python-virtual-environments-a-primer/)](https://realpython.com/python-virtual-environments-a-primer/) or Docker containers so as not to pollute our system Python installations.  Poetry can [[create and manage](https://python-poetry.org/docs/managing-environments/)](https://python-poetry.org/docs/managing-environments/) a virtual environment if you don’t have one. This involves installing and then activating the project Poetry environment (see [[below](https://www.notion.so/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746?pvs=21)](https://www.notion.so/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746?pvs=21) for more details).\r\n\r\n### Suggestion: making things break if there’s no virtual environment\r\n\r\n`pip3` might point to any executable so should always be avoided. \r\n\r\n`python -m pip` or `poetry` will use whatever your current Python is, which might accidentally be the wrong one.\r\n\r\nIf you develop from the command line, a useful idea to avoid problems is to make sure that `python` does not resolve to anything if no virtual environment is loaded, so your commands just break rather than silently installing things in the wrong place.\r\n\r\nDon’t worry, you can and should have `python3.8`, `python3.10` and any other Python versions you have installed in your `PATH`.\r\n\r\nTo test,  `deactivate` or otherwise leave your virtual environment, and then `type -a python` should say `bash: type: python: not found`\r\n\r\nTo fix this, change your `PATH` or if there’s something in there that can’t go, let me know!\r\n\r\nIf you use an IDE, this probably won’t be necessary.",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-07-10T14:28:30Z",
      "updated_at": "2023-08-03T18:23:22Z",
      "closed_at": "2023-08-03T18:23:22Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 11,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/402/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/402",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/402",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:38.891246",
      "comments": [
        {
          "author": "blythed",
          "body": "@rec please provide feedback.",
          "created_at": "2023-07-10T14:31:46Z"
        },
        {
          "author": "blythed",
          "body": "@fkiraly have you tried this one https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/",
          "created_at": "2023-07-10T14:32:10Z"
        },
        {
          "author": "fkiraly",
          "body": "that's what I did in step 6, this is the precise link.",
          "created_at": "2023-07-10T14:32:57Z"
        },
        {
          "author": "blythed",
          "body": "My bad",
          "created_at": "2023-07-10T14:40:14Z"
        },
        {
          "author": "fkiraly",
          "body": "no, my bad, I did not provide the specific link",
          "created_at": "2023-07-10T14:42:03Z"
        }
      ]
    },
    {
      "issue_number": 433,
      "title": "Umbrella issue: open-source ready",
      "body": "Here are a bunch of outstanding tasks that we need to do to align with common OSS ways of working:\r\n\r\n- [x] Add `CONTRIBUTING.md` and consolidate all READMEs (eg `requirements/README.md`) here\r\n- [x] Fix licence in `pyproject.toml`\r\n- [x] Update branch protections and repository settings\r\n- [x] Add `.gitattributes` to manage our use of Jupyter notebooks\r\n- [x] Extend CI to all common platforms (partially complete, see #458)\r\n- [ ] ~~Consider use of GitHub packages for CI artifacts (Docker image?)~~ _Not doing, see_  #388 \r\n- [x] Update landing page `README.md`\r\n- [x] Clarify our versioning policy\r\n- [x] Add build and release to CI (this can be separate to PyPI upload, it tags the release on GitHub)\r\n- [x] Clarify where we will host our docs. If using ReadTheDocs, complete necessary configuration\r\n- [x] Make `coverage` publicly visible\r\n- [x] Determine project keywords (relevant for repo and for `pyproject.toml`)\r\n- [ ] ~~Add `CHANGELOG.md` (or something equivalent)~~ _we will not add this - see #472_",
      "state": "closed",
      "author": "nenb",
      "author_type": "User",
      "created_at": "2023-07-14T10:19:42Z",
      "updated_at": "2023-08-03T09:14:41Z",
      "closed_at": "2023-08-03T09:14:41Z",
      "labels": [
        "🔄 CI"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 5,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/433/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/433",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/433",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:39.108489",
      "comments": [
        {
          "author": "blythed",
          "body": "One other thing - badges - seems to be a generally accepted thing to do. Thoughts?",
          "created_at": "2023-07-14T10:27:15Z"
        },
        {
          "author": "blythed",
          "body": "For the `CONTRIBUTING.md` I started using the inbuilt wiki functionality. I'm guessing the `CONTRIBUTING.md` is standard though?\r\n\r\nWhat do we want for branch protection -- currently needs 1 approval and green tests for merge. I guessing we should also make sure that only certain project owners can ",
          "created_at": "2023-07-14T10:29:25Z"
        },
        {
          "author": "rec",
          "body": "I suggest this add/edit\r\n\r\n- [ ] Create a list of supported platforms and minimum specs\r\n- [ ] Extend CI to all _supported_ platforms\r\n\r\n----\r\n\r\nIf we require a CHANGELOG.md, it would be less work on us if it be automatically generated as part of the release process by filling in the names of all th",
          "created_at": "2023-07-14T10:29:52Z"
        },
        {
          "author": "blythed",
          "body": "CI business covered by #388 ",
          "created_at": "2023-07-14T11:06:30Z"
        },
        {
          "author": "nenb",
          "body": "Closing as we have now released.",
          "created_at": "2023-08-03T09:14:41Z"
        }
      ]
    },
    {
      "issue_number": 581,
      "title": "Fix up issues page",
      "body": "1. Copy more-or-less sklearn, but add the Show and Tell from fastAPI\r\n2. Change the issues header to be like Sktime\r\n3. Add \"provide feedback\" https://docs.google.com/forms/d/e/1FAIpQLScKNyLCjSEWAwc-THjC7NJVDNRxQmVR5ey30VVayPhWOIhy1Q/viewform?vc=0&c=0&w=1&flr=0&pli=1\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-01T10:09:25Z",
      "updated_at": "2023-08-02T16:30:34Z",
      "closed_at": "2023-08-02T16:30:33Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/581/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/581",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/581",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:39.390049",
      "comments": []
    },
    {
      "issue_number": 511,
      "title": "A commit ID with a long subject made it past `test_last_commit_names() in the CI` (1 hour)",
      "body": "There's a test for long commit names, and it does trigger in the local client, but didn't catch this on the CI.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-24T08:36:46Z",
      "updated_at": "2023-08-01T22:51:52Z",
      "closed_at": "2023-08-01T22:51:52Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/511/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/511",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/511",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191367",
      "comments": []
    },
    {
      "issue_number": 135,
      "title": "Integration tests using solid docker builds to check operations in live scenario",
      "body": "# Why\r\n\r\nWe would like to make our testing environment as isolated as much as possible. \r\n\r\nTo start with, we should run mongodb in a dedicated container and clean its state for each test.\r\n\r\nEventually we will need to integrate more 3rd-party components and docker-based test fixtures will help use a lot.\r\n\r\n# How\r\n\r\nUse docker-compose or similar to set up clear testing environment, pinning all dependencies. Add component in the compose.yaml file corresponding to all bits and pieces. Can be based on https://github.com/SuperDuperDB/superduperdb-stealth/blob/main/tests/material/supervisord/supervisord.conf.\r\n\r\nCurrently we have an environment variable `SUPERDUPERDB_TEST_REMOTE` to toggle integration tests on-off. Potentially necessary to refactor.\r\n\r\n# What\r\n\r\n- [x] test Dask jobs\n- [x] test CDC\r\n- [x] test client server\r\n- [ ] test jupyter notebooks\r\n- [x] test vector-search\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-05-22T19:43:12Z",
      "updated_at": "2023-08-01T22:50:31Z",
      "closed_at": "2023-08-01T22:50:31Z",
      "labels": [
        "blockage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/135/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/135",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/135",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191393",
      "comments": []
    },
    {
      "issue_number": 506,
      "title": "Bring as much of Models up to top level of hierarchy as possible",
      "body": "These things can potentially be applied to all `Model` or `PredictMixin` descendants.\r\n\r\n- `compute_metrics`\r\n- `collate_fn`\r\n- `preprocess`\r\n- `postprocess`",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-23T00:25:16Z",
      "updated_at": "2023-08-01T22:50:00Z",
      "closed_at": "2023-08-01T22:50:00Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/506/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/506",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/506",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191401",
      "comments": []
    },
    {
      "issue_number": 548,
      "title": "Document setting up a replica set for MongoDB CDC.",
      "body": "Currently the CDC documentation doesn't detail the steps \r\nof setting this up with MongoDB.\r\n\r\n- [ ] Creating a replica set\r\n- [ ] Creating the necessary user in the replica\r\n- [ ] Connecting to the replica set ",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-27T18:40:50Z",
      "updated_at": "2023-08-01T22:47:26Z",
      "closed_at": "2023-08-01T22:47:26Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/548/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/548",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/548",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191406",
      "comments": []
    },
    {
      "issue_number": 583,
      "title": "Final, smaller rename and move.",
      "body": "* datalayer.py -> db.py\r\n* Datalayer -> DB\r\n* watcher -> listener\r\n* variety -> type_id\r\n\r\nPerhaps more, but we'll make sure to agree on the outline before we do it.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-08-01T10:17:20Z",
      "updated_at": "2023-08-01T16:55:50Z",
      "closed_at": "2023-08-01T16:55:50Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/583/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/583",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/583",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191413",
      "comments": []
    },
    {
      "issue_number": 516,
      "title": "Tool for documentation coverage",
      "body": "Might be nice to add something to interrogate how many functions/ methods are documented in the code-base.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-24T12:16:40Z",
      "updated_at": "2023-07-31T17:52:38Z",
      "closed_at": "2023-07-26T14:42:56Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/516/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/516",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/516",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.191420",
      "comments": [
        {
          "author": "tmylk",
          "body": "If you mean docstrings, then it is possible to add to the linter \"D103 Missing docstring in public function\". There are currently 204 hits for it on `main`. And also suggest adding `doctest`.\r\n\r\nHowever my preferred way is not to build the Documentation with sphinx from docstrings but have several m",
          "created_at": "2023-07-25T11:56:12Z"
        },
        {
          "author": "blythed",
          "body": "> If you mean docstrings, then it is possible to add to the linter \"D103 Missing docstring in public function\". There are currently 204 hits for it on `main`. And also suggest adding `doctest`.\r\n> \r\n> However my preferred way is not to build the Documentation with sphinx from docstrings but have sev",
          "created_at": "2023-07-26T11:38:18Z"
        },
        {
          "author": "tmylk",
          "body": "Here is an example of a docstring appearing on mouse hover in vs code. It is short, much shorter than a Docs website page would be on this function. And I suggest that docstrings stay concise and just cover what the [PEP](https://peps.python.org/pep-0257/#multi-line-docstrings) suggests. I see it as",
          "created_at": "2023-07-31T17:52:38Z"
        }
      ]
    },
    {
      "issue_number": 449,
      "title": "Document `core`",
      "body": "Add doc-strings through the entirety of `superduperdb/core`.\r\n\r\n- Prioritize public methods\r\n- Provide examples in `>>>` if possible without major overhead",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-15T14:36:25Z",
      "updated_at": "2023-07-28T11:15:29Z",
      "closed_at": "2023-07-28T11:15:29Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/449/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/449",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/449",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.406325",
      "comments": []
    },
    {
      "issue_number": 499,
      "title": "All models should be equipped with `.validate`, `compute_metrics`.",
      "body": "### Why\n\nThis will make it very easy to load a `Model` and evaluate it on new data.\n\n### How\n\nAdd `compute_metrics` at the `Model` level of abstraction. Create a `validate` function for all models.\n\n### What\n\n- [ ] Add `compute_metrics` as `Artifact` to `Model`\r\n- [ ] Add `validate` to all `Model` descendants\r\n- [ ] Use `validate` in all `Model._fit/ Model.fit` calls\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-22T02:11:02Z",
      "updated_at": "2023-07-24T01:09:03Z",
      "closed_at": "2023-07-24T01:09:03Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/499/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/499",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/499",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.406348",
      "comments": []
    },
    {
      "issue_number": 479,
      "title": "FURO template for sphinx build",
      "body": "This might be more favourable.\r\n\r\nSee [here](https://github.com/pradyunsg/furo).",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-20T14:37:51Z",
      "updated_at": "2023-07-21T19:14:27Z",
      "closed_at": "2023-07-21T19:14:27Z",
      "labels": [
        "📝 documentation",
        "help wanted"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/479/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/479",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/479",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.406355",
      "comments": []
    },
    {
      "issue_number": 483,
      "title": "Two directories and a file get created in the home directory after running unit tests",
      "body": "* `1.lance/`\r\n* `test-superduperdb-sentiment-analysis/`\r\n* `.cdc_tokens`",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-21T08:22:01Z",
      "updated_at": "2023-07-21T17:55:56Z",
      "closed_at": "2023-07-21T17:55:56Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/483/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/483",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/483",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:41.406360",
      "comments": [
        {
          "author": "rec",
          "body": "Using the https://rec.github.io/tdir/ library is usually the quickest way to get rid of these problems, see https://github.com/SuperDuperDB/superduperdb-stealth/pull/484",
          "created_at": "2023-07-21T09:16:46Z"
        }
      ]
    },
    {
      "issue_number": 461,
      "title": "Productionize documentation build",
      "body": "- [x] Get it to work\r\n- [x] Extract API documentation\r\n- [x] Link to API documentation reachable from index.md\r\n- [x] Automate build and push",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-19T07:57:44Z",
      "updated_at": "2023-07-20T10:07:17Z",
      "closed_at": "2023-07-20T10:07:17Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/461/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/461",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/461",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.291833",
      "comments": []
    },
    {
      "issue_number": 450,
      "title": "Convert `assert` statements to proper `Exception` classes.",
      "body": "Throughout the package...",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-15T22:20:46Z",
      "updated_at": "2023-07-17T11:44:59Z",
      "closed_at": "2023-07-17T11:44:59Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/450/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "nenb",
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/450",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/450",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.291866",
      "comments": []
    },
    {
      "issue_number": 367,
      "title": "Unable to update our dependencies (? hours)",
      "body": "I tried this last week too, but trying to do `poetry update` results in a long series of errors similar or identical to this one:\r\n\r\n```\r\n  • Updating torch (2.0.1 -> 2.0.1+cpu): Failed\r\n\r\n  RuntimeError\r\n\r\n  Unable to find installation candidates for torch (2.0.1+cpu)\r\n\r\n  at ~/Library/Application Support/pypoetry/venv/lib/python3.10/site-packages/poetry/installation/chooser.py:76 in choose_for\r\n       72│ \r\n       73│             links.append(link)\r\n       74│ \r\n       75│         if not links:\r\n    →  76│             raise RuntimeError(f\"Unable to find installation candidates for {package}\")\r\n       77│ \r\n       78│         # Get the best link\r\n       79│         chosen = max(links, key=lambda link: self._sort_key(package, link))\r\n       80│ \r\n```\r\n\r\nI tried moving my virtualenv and creating a new one from scratch, and that worked perfectly well, so we aren't currently broken. But this does mean we are basically pinned to exactly the versions we have installed at this very moment until we resolve this issue.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-04T07:37:04Z",
      "updated_at": "2023-07-14T19:26:38Z",
      "closed_at": "2023-07-14T19:26:38Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/367/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/367",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/367",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.291877",
      "comments": [
        {
          "author": "nenb",
          "body": "Closing as this appears to now be resolved by the move to `pip` and `setuptools` (#436)",
          "created_at": "2023-07-14T19:26:38Z"
        }
      ]
    },
    {
      "issue_number": 416,
      "title": "`poetry.lock` gets out of sync with `pyproject.toml` (1 hour)",
      "body": "Our test code assumes that if `poetry lock --check` returns true, that `poetry lock --no-update` will not produce a delta.\r\n\r\nHowever, this is not the case. \r\n\r\nAt [the current HEAD](https://github.com/SuperDuperDB/superduperdb-stealth/commit/fe56bce8aa7e3ab95cbc4718b0e962a35e4d7e42), `poetry lock --check` succeeds, but `poetry lock --no-update` changes `poetry.lock`.\r\n\r\nThis was introduced in [this commit](https://github.com/SuperDuperDB/superduperdb-stealth/commit/0a9b92a844d2ad000e74c1e3f8928a2b69c1e3e5), which did in fact change `pyproject.toml` so neither the reviewer nor developer could not have know there was a problem, and the CI succeeded.\r\n\r\n---\r\n\r\nThe reason that this is a pain is that that `poetry.lock` delta hangs around and gets checked in with your other code; and also that this has happened repeatedly in the past, to everyone's slight annoyance.\r\n\r\n---\r\n\r\nHopefully the fix would just be as simple as changing the `make test` target...\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-12T10:31:56Z",
      "updated_at": "2023-07-12T11:07:58Z",
      "closed_at": "2023-07-12T11:07:58Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/416/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec",
        "nenb"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/416",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/416",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.463525",
      "comments": []
    },
    {
      "issue_number": 376,
      "title": "Summarize FastAPI errors for the user in Client (2 hours)",
      "body": "Sending a parameter of the wrong type in gets you a rather huge error (see below).\r\n\r\nThis error could be summarized as\r\n\r\nType `mongodb.FindOne` not valid: endpoint `select` expects `mongdb.Featurize`, `mongdb.Find`, or `mongdb.FindOne`.\r\n\r\nPerhaps there is some way to add this \"summary\" to the \"detail\" record below as it leaves the server?\r\n\r\n----\r\n\r\n```\r\n{\r\n   \"detail\": [\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"r\"\r\n       ],\r\n       \"msg\": \"field required\",\r\n       \"type\": \"value_error.missing\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"vector_index\"\r\n       ],\r\n       \"msg\": \"field required\",\r\n       \"type\": \"value_error.missing\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"type_id\"\r\n       ],\r\n       \"msg\": \"unexpected value; permitted: 'mongdb.PostLike'\",\r\n       \"type\": \"value_error.const\",\r\n       \"ctx\": {\r\n         \"given\": \"mongdb.FindOne\",\r\n         \"permitted\": [\r\n           \"mongdb.PostLike\"\r\n         ]\r\n       }\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"args\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"collection\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"kwargs\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"like_parent\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"type_id\"\r\n       ],\r\n       \"msg\": \"unexpected value; permitted: 'mongdb.Find'\",\r\n       \"type\": \"value_error.const\",\r\n       \"ctx\": {\r\n         \"given\": \"mongdb.FindOne\",\r\n         \"permitted\": [\r\n           \"mongdb.Find\"\r\n         ]\r\n       }\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"features\"\r\n       ],\r\n       \"msg\": \"field required\",\r\n       \"type\": \"value_error.missing\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"parent\"\r\n       ],\r\n       \"msg\": \"field required\",\r\n       \"type\": \"value_error.missing\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"type_id\"\r\n       ],\r\n       \"msg\": \"unexpected value; permitted: 'mongdb.Featurize'\",\r\n       \"type\": \"value_error.const\",\r\n       \"ctx\": {\r\n         \"given\": \"mongdb.FindOne\",\r\n         \"permitted\": [\r\n           \"mongdb.Featurize\"\r\n         ]\r\n       }\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"args\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"collection\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"kwargs\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     },\r\n     {\r\n       \"loc\": [\r\n         \"body\",\r\n         \"like_parent\"\r\n       ],\r\n       \"msg\": \"extra fields not permitted\",\r\n       \"type\": \"value_error.extra\"\r\n     }\r\n   ]\r\n}\r\n```\r\n\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-07-06T08:22:49Z",
      "updated_at": "2023-07-09T20:17:24Z",
      "closed_at": "2023-07-09T20:17:24Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/376/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/376",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/376",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.463550",
      "comments": []
    },
    {
      "issue_number": 364,
      "title": "Redo `Components` saving logic using `pydantic.dataclass`",
      "body": "**Why**\r\n\r\nThe current “saving” mechanism is sadly impossibly hard to understand, and saves all components from all packages in a brute force, uniform way. \r\n\r\nBy solving this issue, we will be able to “serialize” our components using inbuilt methods and functionality of the popular `pydantic` package, in combination with whichever serializers are compatible/ preferred in each of the ML/ AI frameworks we’re dealing with. This topic was a big issue for us at LF1, due to numerous constraints:\r\n\r\n- Is `pickle` supported/ possible for my model?\r\n- Does my model contain \"fleeting\" code, for instance from a Jupyter notebook (then `dill` works, `pickle` won't)?\r\n- What are the performance requirements (e.g., `cpickle` is faster than `pickle`)?\r\n- Does my package have an inbuilt serialization mechanism (e.g. `torch`)?\r\n- Does my package have multiple possible serialization mechanisms (e.g. `torch`)?\r\n\r\n**How**\r\n\r\nWe should solve this by making everything we possibly can in `Components` a `JSONable`, and save the remaining `bytes` blobs to the artifact store without duplication.\r\n\r\n**What**\r\n\r\n- [ ] Refactor all signatures using `pydantic.dataclasses` \r\n- [ ]  Create a dataclass `Artifact` wrapping \"thing to be saved\"\r\n- [ ] Serialize components with `.dict()`\r\n- [ ] Add a method to `core.documents.Document` allowing us to save the artifact \"leaves\" of the serialization to the artifact store.\r\n\r\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-07-04T01:05:32Z",
      "updated_at": "2023-07-09T20:16:19Z",
      "closed_at": "2023-07-09T20:16:19Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 14,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/364/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/364",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/364",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.463558",
      "comments": [
        {
          "author": "blythed",
          "body": "@rec to provide example of combining `@pydantic.dataclasses` with selected fields serialized with `pickle`; a key example, would be `core.model.Model`.",
          "created_at": "2023-07-04T13:23:08Z"
        },
        {
          "author": "blythed",
          "body": "See here https://github.com/SuperDuperDB/superduperdb-stealth/pull/371",
          "created_at": "2023-07-04T15:07:30Z"
        },
        {
          "author": "blythed",
          "body": "Step-by-step guide:\r\n\r\n1. Refactor all `Component` subclasses (above) using `dc.dataclass`. \r\n2. Add `dc.InitVar` to annotate variables which won't be serialized in `self.dict()`. \r\n3. Write a new method `self.dict_with_bytes` (to create a dictionary which combines these `dc.InitVar` instances with ",
          "created_at": "2023-07-05T00:51:20Z"
        },
        {
          "author": "blythed",
          "body": "@rec please explain again how to use @cached_property to simplify the above.",
          "created_at": "2023-07-05T01:51:22Z"
        },
        {
          "author": "blythed",
          "body": "```python\r\nfrom superduperdb.misc import dataclasses as dc\r\nimport typing as t\r\n\r\n\r\n@dc.dataclass\r\nclass Encoder:\r\n    identifier: str\r\n    variety: str = 'encoder'          # how can we get this so that no-one can edit it?\r\n    encoder: t.Union[t.Dict, t.Callable]\r\n    decoder: t.Union[t.Dict, t.Ca",
          "created_at": "2023-07-05T20:49:49Z"
        }
      ]
    },
    {
      "issue_number": 391,
      "title": "Memory and Performance Optimization Experiment using slots",
      "body": "Hi,\r\n\r\n# Experiment:\r\nWe have a Document class in superduperdb, which represents a document. As you all know, instances of this class are likely to be the most atomic instances in any superduperdb program. To optimize memory usage and improve attribute access speed, I made the following modifications:\r\n\r\nUsed __slots__: I implemented __slots__ in the Document class to store the content and uri attributes in a tuple, which eliminates the need for a __dict__ and weak reference object.\r\n\r\n# Results:\r\nThe experiment yielded some promising results:\r\n\r\nMemory Footprint: When creating 60,000 Document instances, I observed an 8-10% reduction in the memory footprint compared to the previous implementation.\r\nAttribute Access Time: Accessing the document.content or document.uri attributes showed a remarkable 58% reduction in access time.\r\n\r\n\r\n# Note:\r\nI understand that memory and performance optimization may not be our top priority at the moment. However, I believe this experiment is valuable to share as it showcases potential improvements for the future. I particularly think that @rec  and @ne would find this experiment interesting and relevant.\r\n\r\nFeel free to review the experiment and share your thoughts. If anyone has additional ideas or suggestions related to memory and performance optimization, I'd love to hear them.\r\n\r\nCC: @fkiraly @blythed \r\n",
      "state": "closed",
      "author": "thejumpman2323",
      "author_type": "User",
      "created_at": "2023-07-08T18:58:01Z",
      "updated_at": "2023-07-09T12:02:29Z",
      "closed_at": "2023-07-09T11:55:22Z",
      "labels": [
        "🚀 feature request",
        "question"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/391/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "thejumpman2323"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/391",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/391",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:43.725433",
      "comments": [
        {
          "author": "rec",
          "body": "Slots save dozens of bytes per object.  Models are gigabytes.  :-D\r\n\r\n99% of our CPU time will be spent running other people's models.\r\n\r\n`__slots__`  prevents a lot of useful techniques like `cached_property ` since its `__dict__`  doesn't exist: that makes a lot of code you might want to write har",
          "created_at": "2023-07-09T11:55:22Z"
        }
      ]
    },
    {
      "issue_number": 261,
      "title": "Automate pulls of pull requests",
      "body": "The main branch needs to be even more locked down, with an automated process that pulls pull requests\r\n\r\nThese conditions must be met:\r\n\r\n* CI tests pass\r\n* approval from all reviewers, which must be at least one\r\n* approval from the original author\r\n\r\nThe last condition prevents various errors by having the original author be the last person to sign off.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-14T08:22:57Z",
      "updated_at": "2023-07-04T13:11:55Z",
      "closed_at": "2023-07-04T13:11:55Z",
      "labels": [
        "🚀 feature request",
        "wontfix",
        "🔄 CI"
      ],
      "label_count": 3,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/261/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/261",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/261",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:45.652758",
      "comments": [
        {
          "author": "blythed",
          "body": "How to do this?\r\n\r\n<img width=\"537\" alt=\"Screenshot 2023-07-03 at 22 39 26\" src=\"https://github.com/SuperDuperDB/superduperdb-stealth/assets/15139331/b756ff7d-98c4-4409-aa03-ad25192c0f7e\">\r\n",
          "created_at": "2023-07-04T02:39:35Z"
        },
        {
          "author": "rec",
          "body": "We can't, directly - there will have to be a workflow written.  If I just had to click a button, I would have done it. :-D\r\n\r\n----\r\n\r\nThis came from a discussion of the CI in some meeting or other.\r\n\r\nNote that it is not in the current milestones list, so I wouldn't assign it huge importance.",
          "created_at": "2023-07-04T06:36:40Z"
        }
      ]
    },
    {
      "issue_number": 170,
      "title": "Fix minimum/recommended Python versions (0.5 hour)",
      "body": "A piece of documentation says the minimum version is 3.9. The tests seem to work identically on 3.8.  Pytorch recommends at least 3.8.  Let's set that to be 3.8 unless we find some issue.\r\n\r\nThe recommended version is a little more tricky.  3.11 has better performance than previous python versions and some new features like better errors, so it is weakly desirable, but a much stronger criterion is reliability.\r\n\r\nPytorch does not yet support Python 3.11 (why?!) and even though this is coming presently, I think we can safely decide on Python 3.10 as our \"recommended\" version, unless @blythed knows something bad about 3.10.\r\n\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-28T09:47:37Z",
      "updated_at": "2023-07-03T17:39:49Z",
      "closed_at": "2023-07-03T17:39:48Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/170/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/170",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/170",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:45.846687",
      "comments": []
    },
    {
      "issue_number": 279,
      "title": "Implement `VectorIndex.find_nearest_from_array(within_ids=`",
      "body": "`within_ids` should be supported at least in `InMemoryVectorIndex`, but it might also be possible to add its support in `MilvusVectorIndex` as well.",
      "state": "closed",
      "author": "dalazx",
      "author_type": "User",
      "created_at": "2023-06-16T08:47:44Z",
      "updated_at": "2023-07-03T17:38:23Z",
      "closed_at": "2023-07-03T17:38:23Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/279/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/279",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/279",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:45.846715",
      "comments": []
    },
    {
      "issue_number": 241,
      "title": "Expose timeouts configuration for Milvus",
      "body": "We need to have explicitly defined timeout values to avoid threads blocking for a long time.",
      "state": "closed",
      "author": "dalazx",
      "author_type": "User",
      "created_at": "2023-06-09T13:15:55Z",
      "updated_at": "2023-07-03T16:34:05Z",
      "closed_at": "2023-07-03T16:34:05Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/241/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/241",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/241",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:45.846724",
      "comments": []
    },
    {
      "issue_number": 219,
      "title": "Unit tests generate many warnings",
      "body": "Running `make test` generates a large number of warnings, some of which might be relevant, but should be fixed or suppressed.\r\n\r\n```\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/_pytest/config/__init__.py:747\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/_pytest/config/__init__.py:747: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: tests.conftest_mongodb\r\n    self.import_plugin(import_spec)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/faiss/loader.py:28\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/faiss/loader.py:28: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\r\n    if LooseVersion(numpy.__version__) >= \"1.19\":\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/setuptools/_distutils/version.py:345\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\r\n    other = LooseVersion(other)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:121\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:121: DeprecationWarning: pkg_resources is deprecated as an API\r\n    warnings.warn(\"pkg_resources is deprecated as an API\", DeprecationWarning)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('mpl_toolkits')`.\r\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\r\n    declare_namespace(pkg)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.\r\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\r\n    declare_namespace(pkg)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/lightning_fabric/__init__.py:36\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/lightning_fabric/__init__.py:36: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('lightning_fabric')`.\r\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\r\n    __import__(\"pkg_resources\").declare_namespace(__name__)\r\n\r\n.direnv/python-3.8.10/lib/python3.8/site-packages/pytorch_lightning/__init__.py:36\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pytorch_lightning/__init__.py:36: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pytorch_lightning')`.\r\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\r\n    __import__(\"pkg_resources\").declare_namespace(__name__)\r\n\r\ntests/unittests/datalayer/mongodb/test_database.py::test_select\r\n  /Users/tom/synthetic/code/superduperdb-stealth/superduperdb/types/torch/tensor.py:20: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/utils/tensor_numpy.cpp:212.)\r\n    return torch.from_numpy(array)\r\n\r\ntests/unittests/training/pytorch_lightning/test_trainer.py::test_classification\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pytorch_lightning/trainer/connectors/logger_connector/logger_connector.py:67: UserWarning: Starting from v1.9.0, `tensorboardX` has been removed as a dependency of the `pytorch_lightning` package, due to potential conflicts with other packages in the ML ecosystem. For this reason, `logger=True` will use `CSVLogger` as the default logger, unless the `tensorboard` or `tensorboardX` packages are found. Please `pip install lightning[extra]` or one of them to enable TensorBoard support by default\r\n    warning_cache.warn(\r\n\r\ntests/unittests/training/pytorch_lightning/test_trainer.py::test_classification\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pytorch_lightning/callbacks/model_checkpoint.py:612: UserWarning: Checkpoint directory  exists and is not empty.\r\n    rank_zero_warn(f\"Checkpoint directory {dirpath} exists and is not empty.\")\r\n\r\ntests/unittests/training/pytorch_lightning/test_trainer.py::test_classification\r\n  /Users/tom/synthetic/code/superduperdb-stealth/.direnv/python-3.8.10/lib/python3.8/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:430: PossibleUserWarning: The dataloader, val_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 10 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.\r\n    rank_zero_warn(\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n\r\n```",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-07T13:31:34Z",
      "updated_at": "2023-07-03T16:34:01Z",
      "closed_at": "2023-07-03T16:34:01Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/219/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/219",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/219",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:45.846733",
      "comments": [
        {
          "author": "rec",
          "body": "I run with warnings turned off, so I didn't see that my new code had added four new warnings:\r\n\r\n```\r\nsuperduperdb/misc/dataclasses.py:35\r\n  /Users/tom/synthetic/code/superduperdb-stealth/superduperdb/misc/dataclasses.py:35: RuntimeWarning: fields may not start with an underscore, ignoring \"_class_t",
          "created_at": "2023-07-03T12:35:46Z"
        }
      ]
    },
    {
      "issue_number": 214,
      "title": "Revisit docs build in CI",
      "body": "https://github.com/SuperDuperDB/superduperdb-stealth/pull/192 removed the docs build from our CI. \r\n\r\nAs per our discussion, we should still keep it, but run the job conditionally when the docs directory changes.",
      "state": "closed",
      "author": "dalazx",
      "author_type": "User",
      "created_at": "2023-06-06T11:53:50Z",
      "updated_at": "2023-07-03T16:34:01Z",
      "closed_at": "2023-07-03T16:34:01Z",
      "labels": [
        "📉 technical debt",
        "🔄 CI"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/214/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/214",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/214",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:46.033457",
      "comments": []
    },
    {
      "issue_number": 213,
      "title": "Design discussion - estimator/learner interface",
      "body": "### Why\n\nFrom @fkiraly code review - seems the estimator logic is too decoupled and spread over the place.\r\n\r\nE.g., a `sklearn` estimator now sits in a `Model` child (`predict` logic), and two classes linked to `TrainingConfiguration`. Application/connection is mediated by a fourth class. This is not good, too coupled while the logic is distributed everywhere.\n\n### How\n\nI think we need to arrive at a better, more cohesive design, with the strategy pattern.\r\nThe current design applies the strategy pattern, but it's all over the place.\n\n### What\n\nWe will discuss here until conclusion.",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-06-06T08:21:38Z",
      "updated_at": "2023-07-03T16:34:00Z",
      "closed_at": "2023-07-03T16:34:00Z",
      "labels": [
        "question"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 11,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/213/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/213",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/213",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:46.033477",
      "comments": [
        {
          "author": "fkiraly",
          "body": "@fkiraly original comments from review:\r\n\r\n* I think separating \"fit\" from \"predict\" is problematic and will paint us in a corner!\r\n* cohesion/coupling problem - \"decoheres\" the \"model\" concept; and couples the former parts all over the place\r\n* will create extensibility problem - developer confusio",
          "created_at": "2023-06-06T08:22:06Z"
        },
        {
          "author": "fkiraly",
          "body": "@blythed reply:\r\n\r\nSo vis-á-vis your idea of adding training to all relevant estimators, we would need considerable flexibility.\r\n\r\nSo for instance for torch we could have something like this:\r\n```python\r\ndef fit(self, X: Union[np.array, str], y,: Union[np.array, str], dataset: torch.utils.data.Data",
          "created_at": "2023-06-06T08:25:02Z"
        },
        {
          "author": "fkiraly",
          "body": "regarding the above, I don't fully grasp your logic and the necessity of conclusions here.\r\n\r\nThat is, to me it seems like you consider some unspecified \"option 1\" (or a family thereof) and the status quo as \"option 2\". You tick your arguments against option 1 and conclude then option 2 is what we m",
          "created_at": "2023-06-06T08:31:14Z"
        },
        {
          "author": "fkiraly",
          "body": "from discussion with @blythed - I apparently misunderstood what @blythed meant.\r\nParaphrasing, he said he agrees with the basic need to be more cohesive in the design, but has concerns how to deal with common deep learning patterns, e.g., \"trainer\" style objects in pytorch lightning.\r\n\r\nSummary of m",
          "created_at": "2023-06-06T13:52:51Z"
        },
        {
          "author": "blythed",
          "body": "In PyTorch or Tensorflow, it's important to understand which parts of the Pipeline are executed on the CPU and which on the GPU. In PADL (https://github.com/lf1-io/padl) we used a \"trivial\" transform which signified where to split the pipeline:\r\n\r\n```python\r\nt = (\r\n     step1\r\n     >> step2\r\n     >>",
          "created_at": "2023-06-07T00:26:35Z"
        }
      ]
    },
    {
      "issue_number": 209,
      "title": "design for setup on jupyter notebook style docs",
      "body": "requested: suggested setup for presenting jupyter notebooks to users\n\n* @fkiraly to summarize setup in sktime - hardlinked notebooks in sphinx, binder\n* alternative setups\n* pros/cons compared to current setup in this repo\n\noutcome: concluded discussion in this issue and decision what to implement; refined implementation tickets",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-06-05T11:35:24Z",
      "updated_at": "2023-07-03T16:33:59Z",
      "closed_at": "2023-07-03T16:33:59Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/209/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/209",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/209",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:46.272798",
      "comments": [
        {
          "author": "fkiraly",
          "body": "Summary of `sktime` setup:\r\n\r\n* notebooks embedded in sphinx docs via hard git links: https://github.com/sktime/sktime/tree/main/docs/source/examples\r\n* the same notebooks can be run in `binder`, from their home folder: https://github.com/sktime/sktime/tree/main/examples\r\n* binder setup is in [`.bin",
          "created_at": "2023-06-06T13:56:06Z"
        }
      ]
    },
    {
      "issue_number": 181,
      "title": "Add doc build into full tests (0.5 hour)",
      "body": "Our CI is failing because our doc builds are failing because no one is testing the doc build locally.\r\n\r\nWe need to bring the doc build into the CI so it happens locally, so this won't happen, and also release a fix for this doc build break.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-02T14:26:51Z",
      "updated_at": "2023-07-03T16:33:57Z",
      "closed_at": "2023-07-03T16:33:56Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/181/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/181",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/181",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:46.464416",
      "comments": [
        {
          "author": "blythed",
          "body": "The problem is that everytime we build the docs locally, they will create a massive diff in every commit.",
          "created_at": "2023-06-05T09:27:09Z"
        },
        {
          "author": "blythed",
          "body": "I would say we should completely deactivate the build, and work on fixing it in a sane way. The reason it keeps breaking, is because the tool we are using the render Jupyter notebooks is trying to re-run the notebooks.",
          "created_at": "2023-06-05T09:28:47Z"
        }
      ]
    },
    {
      "issue_number": 159,
      "title": "A sample MongoDB for the initial server implementation (1 hour)",
      "body": "To effectively test #116, I'll need an existing test MongoDB I can use.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-23T11:49:37Z",
      "updated_at": "2023-07-03T16:32:38Z",
      "closed_at": "2023-07-03T16:32:38Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/159/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/159",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/159",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:46.693717",
      "comments": []
    },
    {
      "issue_number": 97,
      "title": "Parallelize tests (8)",
      "body": "This is not of primary importance but I solved this problem in a previous life. :-)\r\n\r\n----\r\n\r\nRunning all the tests takes about 19 seconds on my rather fast machine.\r\n\r\nThis is just short enough that the developer can keep focus on the task but it will become longer as we write more code and many developers will have less blazing machines.\r\n\r\nThe longer it is, the more likely it will turn into [An Interruption](https://www.ics.uci.edu/~gmark/chi08-mark.pdf), costing 23 minutes. :-D\r\n\r\n---\r\n\r\npytest has a nice facility for parallelizing tests.  IF we were doing purely independent, computational tests, we could download an extension, pass in a flag, and multiply the test speed by \"up to\" the number of cores in your machine in literally a few minutes.\r\n\r\n---\r\n\r\nBut the one issue preventing that will be the text fixtures.  \r\n\r\nEach one creates a database and then tears it down at the end, so there will be havoc if the same fixture brought up in parallel projects.  \r\n\r\nYou can organize the parallelism by test, by file (generally the most useful), etc, but it won't really help that much...\r\n\r\nOne fixture would have to be used in exactly one \"parallelism unit\".  But \"all\" the fixtures are used with each other, so all the fixture code would have to run in one parallelism unit, probably obviating a lot of the speed-up.\r\n\r\n---\r\n\r\nAnother way to do this would be to simply not tear the fixtures down by default.  A first stage runs ensuring all the fixtures exist, and then they simply remain on the developer's machine.\r\n\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-20T09:21:20Z",
      "updated_at": "2023-07-03T16:27:48Z",
      "closed_at": "2023-07-03T16:27:48Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/97/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/97",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/97",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.332953",
      "comments": []
    },
    {
      "issue_number": 87,
      "title": "Tune database timeouts (1)",
      "body": "The current timeout in pymongo is 30 seconds but it should be 0.01 seconds or some small amount, tunable from a config.\r\n\r\nThis came up because unit tests \"hang\" for long periods if things aren't set up properly.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-17T07:53:23Z",
      "updated_at": "2023-07-03T16:27:47Z",
      "closed_at": "2023-07-03T16:27:47Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/87/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/87",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/87",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.332976",
      "comments": []
    },
    {
      "issue_number": 318,
      "title": "`mypy` validation of functions",
      "body": "### Why\r\n\r\nIt is important for the project to validate that functions are properly annotated. \r\nFor this reason, an configuration improvement can be made to `mypy` so that we can achieve this.\r\n\r\n\r\n### How\r\n\r\n- Verify that `mypy` validates function annotation;\r\n- Adjust the code base  so that it is compliant with this validation.\r\n\r\n### What\r\n\r\n- [] #336\r\n- [] #338\r\n- [] #339\r\n- [] #340\r\n- [] #341\r\n- [] #342\r\n- [] #343\r\n- [] #344\r\n- [] #345",
      "state": "closed",
      "author": "yogaxpto",
      "author_type": "User",
      "created_at": "2023-06-23T12:32:31Z",
      "updated_at": "2023-07-02T11:03:56Z",
      "closed_at": "2023-07-02T11:03:56Z",
      "labels": [
        "🚀 feature request",
        "good first issue"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/318/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/318",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/318",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.332989",
      "comments": []
    },
    {
      "issue_number": 309,
      "title": "Add description of how to develop with `mypy` to developer guide",
      "body": "Now that we have typing, it must be possible to use this during development to check types on newly added code.\r\nAdd explanation and guide here:\r\n\r\nhttps://www.notion.so/superduperdb/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746?pvs=4#fe45eaf7233c4c18bd0a2bc7110142f9",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-20T11:15:45Z",
      "updated_at": "2023-06-30T19:41:18Z",
      "closed_at": "2023-06-29T10:20:55Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 3,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/309/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/309",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/309",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.332995",
      "comments": [
        {
          "author": "yogaxpto",
          "body": "The [How to Develop](https://www.notion.so/superduperdb/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746#fe45eaf7233c4c18bd0a2bc7110142f9) document has the instructions on how to setup the development environment. The [Typing](https://www.notion.so/superduperdb/On-Typing-dd9b76b84c234",
          "created_at": "2023-06-21T14:11:28Z"
        },
        {
          "author": "blythed",
          "body": "This doesn't detail how to setup `mypy`, how to configure `mypy` etc..",
          "created_at": "2023-06-26T18:26:05Z"
        },
        {
          "author": "yogaxpto",
          "body": "The [How to Develop](https://www.notion.so/superduperdb/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746#fe45eaf7233c4c18bd0a2bc7110142f9) guide also covers the creation of a virtual environment with `mypy`. \r\n\r\nI've added this info to the [Typing](https://www.notion.so/superduperdb/O",
          "created_at": "2023-06-26T22:47:42Z"
        }
      ]
    },
    {
      "issue_number": 215,
      "title": "Installation fails on a machine without an NVIDIA GPU (2 hours??)",
      "body": "> To me the issue seems to be mostly related to how poetry chooses the pytorch variant to install. The installation itself runs smoothly but I can't do that and run any unit tests due to some missing libs\r\n\r\n> Those missing libs are nvidia libs which leads me to infer that poetry has chosen a variant of pytorch with nvidia (and I don't have a nvidia gpu)\r\n\r\nhttps://github.com/python-poetry/poetry/issues/6409#issuecomment-1561521272 might be relevant.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-06T12:17:25Z",
      "updated_at": "2023-06-30T19:41:12Z",
      "closed_at": "2023-06-13T10:47:14Z",
      "labels": [
        "blockage"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/215/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/215",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/215",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.553662",
      "comments": [
        {
          "author": "yogaxpto",
          "body": "A simple way to reproduce this with docker:\r\n\r\n1. Add the `dev.Dockerfile`:\r\n\r\n```dockerfile\r\nARG PY_VERSION=3.11.3\r\nFROM python:${PY_VERSION}-bullseye AS base\r\nENV PATH=/root/.local/bin:$PATH\r\n\r\nWORKDIR /src\r\n\r\nENV POETRY_VIRTUALENVS_CREATE=false\r\n\r\nRUN pip install -U --no-cache-dir pip\r\n\r\nFROM bas",
          "created_at": "2023-06-06T13:21:18Z"
        }
      ]
    },
    {
      "issue_number": 242,
      "title": "Integrate Milvus into BaseDatabase / VectorIndex",
      "body": null,
      "state": "closed",
      "author": "dalazx",
      "author_type": "User",
      "created_at": "2023-06-09T13:18:24Z",
      "updated_at": "2023-06-29T10:51:37Z",
      "closed_at": "2023-06-16T15:44:52Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/242/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/242",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/242",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.743340",
      "comments": []
    },
    {
      "issue_number": 224,
      "title": "Design discussion - AI in DB deployment vignette",
      "body": "### Why\r\n\r\nPart of the content to review/discuss. See https://github.com/SuperDuperDB/superduperdb-stealth/issues/208\r\n\r\n### What\r\n\r\nExpected outcome are markdown/python vignette and a discussion on the design, settling on the full workflow.",
      "state": "closed",
      "author": "fkiraly",
      "author_type": "User",
      "created_at": "2023-06-08T09:01:39Z",
      "updated_at": "2023-06-19T10:24:53Z",
      "closed_at": "2023-06-19T10:24:53Z",
      "labels": [
        "API and software design"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 6,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/224/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/224",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/224",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:48.743372",
      "comments": [
        {
          "author": "fkiraly",
          "body": "In reference to https://www.notion.so/superduperdb/Managed-vector-search-with-SuperDuperDB-575d10d8be5140379588e32bf7c66874\r\n\r\n* creating the connection seems reasonable and non-redundantly expressive, i.e., the vignettes until we arrive at `db`\r\n\r\n### database access vignette\r\n\r\noriginal design for",
          "created_at": "2023-06-08T09:07:00Z"
        },
        {
          "author": "fkiraly",
          "body": "### component and estimator deploy vignette\r\n\r\noriginal vignette for reference:\r\n\r\n```python\r\nfrom superduperdb.apis.openai.wrapper import Embedding\r\nfrom superduperdb.core.watcher import Watcher\r\nfrom somewhere import Select  # this import is missing, right?\r\nfrom somewhere import VectorIndex  # th",
          "created_at": "2023-06-08T09:14:49Z"
        },
        {
          "author": "blythed",
          "body": "We originally had something like this:\n\n```python\ndb.insert(documents=documents, collection='my_coll')\ndb.select(filter={'img': {'$exists': 1}, like={'img': torch.randn(128)}})\ndb.select(querystr='SELECT * FROM my_table', like={'img': torch.randn(128)}})\n```\n\nWe moved away from this, since we are tr",
          "created_at": "2023-06-11T18:53:52Z"
        },
        {
          "author": "blythed",
          "body": "The distinction between `Watcher` and `Model` is necessary, since models may act on several columns, tables, etc.\r\n\r\nFor that reason, this proposal won't work:\r\n\r\n```python\r\nfrom superduperdb.apis.openai.wrapper import Embedding\r\nfrom somewhere import VectorIndex\r\n\r\ndb.add(Embedding(params), name=\"a",
          "created_at": "2023-06-11T18:55:06Z"
        },
        {
          "author": "blythed",
          "body": "There are 2 types of functionality - things one does with `Component` instances, and querying/ inserting data.\r\n\r\nFor that reason I think we should have 2 groups of methods:\r\n\r\n- [ ] Replace `create_component` with `add`\r\n- [ ] Replace `delete_component` with `remove`\r\n- [ ] Replace `list_components",
          "created_at": "2023-06-14T11:14:02Z"
        }
      ]
    },
    {
      "issue_number": 254,
      "title": "Simplify encoding of data by refactoring `superduperdb.core.type.Type`",
      "body": "Currently converting data to something the database can work with happens all over the place. To simplify this, add the concept of `Document` which carries around encoding of held dictionary data inside. Leaf nodes may be optionally encoded by `Types`. This should all make the transmission of data more transparent.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-12T19:09:13Z",
      "updated_at": "2023-06-19T10:21:59Z",
      "closed_at": "2023-06-19T10:21:59Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/254/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/254",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/254",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.747588",
      "comments": []
    },
    {
      "issue_number": 262,
      "title": "Rename key-methods in `BaseDatabase`",
      "body": "After discussion here: https://github.com/SuperDuperDB/superduperdb-stealth/issues/224\n\nThere are 2 types of functionality - things one does with `Component` instances, and querying/ inserting data.\n\nFor that reason I think we should have 2 groups of methods:\n\n- [x] Replace `create_component` with `add`\n- [x] Replace `delete_component` with `remove`\n- [x] Replace `list_components` with `show`\n- [x] Replace all query methods with a single `execute`\n",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-14T11:15:54Z",
      "updated_at": "2023-06-19T10:21:53Z",
      "closed_at": "2023-06-19T10:21:53Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/262/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/262",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/262",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.747612",
      "comments": []
    },
    {
      "issue_number": 267,
      "title": "Refactor tests to make clearer central role of `BaseDatabase`",
      "body": "It's necessary to write `x.database...` everywhere. This is extra overhead we don't need.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-15T10:00:25Z",
      "updated_at": "2023-06-19T10:21:41Z",
      "closed_at": "2023-06-19T10:21:41Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/267/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/267",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/267",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.747632",
      "comments": []
    },
    {
      "issue_number": 271,
      "title": "Refactor vector-index to make more sense with watchers",
      "body": "Currently we have the mixed model, where `VectorIndex` has `Watcher` and `Model` instances inside. This is not ideal, and confusing for the user. \n\nThe proposed solution to enable `inactive` watchers, which simply bind `Model` instance to `key`s. Then the `VectorIndex` will incorporate only `Watcher`.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-15T12:09:43Z",
      "updated_at": "2023-06-19T10:21:23Z",
      "closed_at": "2023-06-19T10:21:23Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/271/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/271",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/271",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.747637",
      "comments": []
    },
    {
      "issue_number": 217,
      "title": "User vignettes/ notebook examples",
      "body": "Add notebooks/ notion documentation for each of the use-cases we want to release at launch.",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-06-06T14:00:22Z",
      "updated_at": "2023-06-19T10:21:17Z",
      "closed_at": "2023-06-19T10:21:17Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/217/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "blythed"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/217",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/217",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.747642",
      "comments": [
        {
          "author": "blythed",
          "body": "https://www.notion.so/superduperdb/User-stories-cdf607375346412a9299f47182ba4eb4",
          "created_at": "2023-06-19T01:27:03Z"
        }
      ]
    },
    {
      "issue_number": 245,
      "title": "CI pipeline makefile command tests",
      "body": "As originally posted by @dalazx in https://github.com/SuperDuperDB/superduperdb-stealth/issues/223#issuecomment-1585078608, it is important to be able to test that the make commands continue to work with every new change to the project.\r\n            ",
      "state": "closed",
      "author": "yogaxpto",
      "author_type": "User",
      "created_at": "2023-06-10T12:11:51Z",
      "updated_at": "2023-06-13T09:13:23Z",
      "closed_at": "2023-06-13T09:13:23Z",
      "labels": [
        "🚀 feature request",
        "🔄 CI"
      ],
      "label_count": 2,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/245/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/245",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/245",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:50.935507",
      "comments": [
        {
          "author": "dalazx",
          "body": "yeah the idea was to introduce client-server integration tests with the server image. we'll get there.",
          "created_at": "2023-06-10T12:46:50Z"
        }
      ]
    },
    {
      "issue_number": 218,
      "title": "Document:  how to develop in SuperDuperDB (1.5 hours)",
      "body": "Deliverable: a one-page document including:\r\n\r\n* how to set up the first time or on a new machine\r\n* how to test changes\r\n* git workflow\r\n* docs build",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-06-07T08:54:29Z",
      "updated_at": "2023-06-07T14:41:16Z",
      "closed_at": "2023-06-07T14:41:16Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 1,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/218/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/218",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/218",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:51.154387",
      "comments": [
        {
          "author": "rec",
          "body": "https://www.notion.so/superduperdb/How-to-develop-in-SuperDuperDB-1ebc198084b94e79a24769e8d3ad6746",
          "created_at": "2023-06-07T14:41:16Z"
        }
      ]
    },
    {
      "issue_number": 98,
      "title": "Use `functools.wrap` or monkeypatching for delegations (5)",
      "body": "Example here: https://github.com/SuperDuperDB/superduperdb-stealth/blob/ce5c98bbf467bc1a825d4e197a8c910863b6a0a2/superduperdb/datalayer/mongodb/collection.py#L96-L274\r\n\r\nThis appears elsewhere.\r\n\r\nOnly two of these actually perform a computation - the rest call another function on a member directly.\r\n\r\nOne very lazy solution is to let API clients call `collection.database.create_metric` directly and delete all but two of these. :-D\r\n\r\nBut given you do want delegation, the code is already monkeypatching, why not finish the job?\r\n\r\n    for attr in _COPIED_ATTRS:\r\n        setattr(self, attr, getattr(self.database, attr))\r\n\r\nFor the two cases where something actually happens, then we use\r\nhttps://docs.python.org/3.8/library/functools.html#functools.wraps\r\n",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-20T10:01:32Z",
      "updated_at": "2023-06-06T09:29:08Z",
      "closed_at": "2023-06-06T09:29:07Z",
      "labels": [
        "📉 technical debt"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 4,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/98/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/98",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/98",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:51.361274",
      "comments": [
        {
          "author": "rec",
          "body": "Probably this comment isn't interesting to others, I'm just curious as to how this is all put together.\r\n\r\nThis simple solution is complexified by the baroque behavior of Mongo and to some extent our code, and ends up an infinite recursive loop with an entertaining traceback.\r\n\r\n```\r\n    @pytest.fix",
          "created_at": "2023-05-20T10:47:06Z"
        },
        {
          "author": "blythed",
          "body": "In `pymongo` clients and databases, if the method or property isn't defined then it defaults to instantiating a new collection or fetching an existing one. In the example above the behaviour at the collection level is actually slightly different than at the database level. I'm thinking about droppin",
          "created_at": "2023-05-20T10:52:39Z"
        },
        {
          "author": "rec",
          "body": "Whew, fast!\r\n\r\nSo yes, there are two methods that are different between the collection and the database.\r\n\r\nI got what pymongo does, but I don't understand why it ends up creating a recursive loop to the same code with the same variables, don't worry, I'll resolve this at some point.\r\n\r\nI'm just mea",
          "created_at": "2023-05-20T10:57:19Z"
        },
        {
          "author": "blythed",
          "body": "Solved by https://github.com/SuperDuperDB/superduperdb-stealth/pull/175",
          "created_at": "2023-06-05T10:27:10Z"
        }
      ]
    },
    {
      "issue_number": 102,
      "title": "Extract our tests as a script which we can maintain (2)",
      "body": "Once https://github.com/SuperDuperDB/superduperdb-stealth/pull/95 is in, testing the correctness of changes requires these operations:\r\n\r\n* black\r\n* ruff\r\n* pytest\r\n* coverage\r\n* mypy (soon)\r\n\r\neach with some specific command lines.\r\n\r\nThis needs to be extracted as a script and documented.",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-22T08:07:48Z",
      "updated_at": "2023-06-02T08:05:21Z",
      "closed_at": "2023-06-02T08:05:21Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/102/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/102",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/102",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:51.577388",
      "comments": []
    },
    {
      "issue_number": 161,
      "title": "`superduperdb` CLI (5.5)",
      "body": "There are several command line services we need or will need to provide to developers:\r\n\r\n* `server`: starting, stopping etc\r\n* `test`: running tests, 2 ways\r\n  * test-clean: run pytest; run style tests, fixing code issues if possible\r\n  * test-fail: run pytest; run style tests, failing if any changes are needed\r\n* `config` printing out the current Config\r\n* `info`: print out versioning information about the platform and libraries to help us debug problems on the user's end\r\n\r\nInstead of providing 5 different scripts and more later, we should provide a single CLI with proper help and documentation.\r\n\r\nEstimates are in hours:\r\n\r\n- [ ] write an empty CLI (0.5)\r\n- [ ] write the server command as a stub (0.25)\r\n- [ ] create a test command; a single flag switching between clean and fail; all arguments after `--` are sent right to `pytest` (1)\r\n- [ ] print the current config (0.25)\r\n- [ ] versioning: print selected parts of `platform` (0.25)\r\n- [ ] versioning: print git commit ID and message (1)\r\n- [ ] versioning: other libraries (.75 hr + consultation)\r\n- [ ] review: 0.5 hour\r\n- [ ] other/slippage/etc: 1 hour\r\n\r\nTotal: 5.5 hours, including review",
      "state": "closed",
      "author": "rec",
      "author_type": "User",
      "created_at": "2023-05-23T14:20:02Z",
      "updated_at": "2023-05-26T16:25:39Z",
      "closed_at": "2023-05-26T16:25:39Z",
      "labels": [
        "🚀 feature request"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 2,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/161/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [
        "rec"
      ],
      "milestone": "v0.04",
      "html_url": "https://github.com/superduper-io/superduper/issues/161",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/161",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:51.577417",
      "comments": [
        {
          "author": "blythed",
          "body": "Agreed ",
          "created_at": "2023-05-23T14:23:13Z"
        },
        {
          "author": "rec",
          "body": "This came in somewhat under budget, though we lost some time futzing with dependencies and test breakages...",
          "created_at": "2023-05-26T16:25:39Z"
        }
      ]
    },
    {
      "issue_number": 92,
      "title": "Write doc-strings for everything which is missing one.",
      "body": "Nuff said",
      "state": "closed",
      "author": "blythed",
      "author_type": "User",
      "created_at": "2023-05-18T11:55:22Z",
      "updated_at": "2023-05-20T08:42:02Z",
      "closed_at": "2023-05-20T08:42:02Z",
      "labels": [
        "📝 documentation"
      ],
      "label_count": 1,
      "has_labels": true,
      "comments_count": 0,
      "reactions": {
        "url": "https://api.github.com/repos/superduper-io/superduper/issues/92/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "assignees": [],
      "milestone": null,
      "html_url": "https://github.com/superduper-io/superduper/issues/92",
      "api_url": "https://api.github.com/repos/superduper-io/superduper/issues/92",
      "repository": "superduper-io/superduper",
      "extraction_date": "2025-06-22T00:38:51.809893",
      "comments": []
    }
  ]
}